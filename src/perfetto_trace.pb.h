/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PERFETTO_PROTOS_PERFETTO_TRACE_PB_H_INCLUDED
#define PB_PERFETTO_PROTOS_PERFETTO_TRACE_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _perfetto_protos_BuiltinClock {
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_UNKNOWN = 0,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_REALTIME = 1,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_REALTIME_COARSE = 2,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MONOTONIC = 3,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MONOTONIC_COARSE = 4,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MONOTONIC_RAW = 5,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_BOOTTIME = 6,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_TSC = 9,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_PERF = 10,
    perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MAX_ID = 63
} perfetto_protos_BuiltinClock;

/* Values from NDK's android/log.h. */
typedef enum _perfetto_protos_AndroidLogId {
    /* MAIN. */
    perfetto_protos_AndroidLogId_LID_DEFAULT = 0,
    perfetto_protos_AndroidLogId_LID_RADIO = 1,
    perfetto_protos_AndroidLogId_LID_EVENTS = 2,
    perfetto_protos_AndroidLogId_LID_SYSTEM = 3,
    perfetto_protos_AndroidLogId_LID_CRASH = 4,
    perfetto_protos_AndroidLogId_LID_STATS = 5,
    perfetto_protos_AndroidLogId_LID_SECURITY = 6,
    perfetto_protos_AndroidLogId_LID_KERNEL = 7
} perfetto_protos_AndroidLogId;

typedef enum _perfetto_protos_AndroidLogPriority {
    perfetto_protos_AndroidLogPriority_PRIO_UNSPECIFIED = 0,
    /* _DEFAULT, but should never be seen in logs. */
    perfetto_protos_AndroidLogPriority_PRIO_UNUSED = 1,
    perfetto_protos_AndroidLogPriority_PRIO_VERBOSE = 2,
    perfetto_protos_AndroidLogPriority_PRIO_DEBUG = 3,
    perfetto_protos_AndroidLogPriority_PRIO_INFO = 4,
    perfetto_protos_AndroidLogPriority_PRIO_WARN = 5,
    perfetto_protos_AndroidLogPriority_PRIO_ERROR = 6,
    perfetto_protos_AndroidLogPriority_PRIO_FATAL = 7
} perfetto_protos_AndroidLogPriority;

typedef enum _perfetto_protos_ProtoLogLevel {
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_UNDEFINED = 0,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_DEBUG = 1,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_VERBOSE = 2,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_INFO = 3,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_WARN = 4,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_ERROR = 5,
    perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_WTF = 6
} perfetto_protos_ProtoLogLevel;

/* This enum is obtained by post-processing
 AOSP/frameworks/proto_logging/stats/atoms.proto through
 AOSP/external/perfetto/tools/update-statsd-descriptor, which extracts one
 enum value for each proto field defined in the upstream atoms.proto. */
typedef enum _perfetto_protos_AtomId {
    perfetto_protos_AtomId_ATOM_UNSPECIFIED = 0,
    perfetto_protos_AtomId_ATOM_BLE_SCAN_STATE_CHANGED = 2,
    perfetto_protos_AtomId_ATOM_PROCESS_STATE_CHANGED = 3,
    perfetto_protos_AtomId_ATOM_BLE_SCAN_RESULT_RECEIVED = 4,
    perfetto_protos_AtomId_ATOM_SENSOR_STATE_CHANGED = 5,
    perfetto_protos_AtomId_ATOM_GPS_SCAN_STATE_CHANGED = 6,
    perfetto_protos_AtomId_ATOM_SYNC_STATE_CHANGED = 7,
    perfetto_protos_AtomId_ATOM_SCHEDULED_JOB_STATE_CHANGED = 8,
    perfetto_protos_AtomId_ATOM_SCREEN_BRIGHTNESS_CHANGED = 9,
    perfetto_protos_AtomId_ATOM_WAKELOCK_STATE_CHANGED = 10,
    perfetto_protos_AtomId_ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED = 11,
    perfetto_protos_AtomId_ATOM_MOBILE_RADIO_POWER_STATE_CHANGED = 12,
    perfetto_protos_AtomId_ATOM_WIFI_RADIO_POWER_STATE_CHANGED = 13,
    perfetto_protos_AtomId_ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED = 14,
    perfetto_protos_AtomId_ATOM_MEMORY_FACTOR_STATE_CHANGED = 15,
    perfetto_protos_AtomId_ATOM_EXCESSIVE_CPU_USAGE_REPORTED = 16,
    perfetto_protos_AtomId_ATOM_CACHED_KILL_REPORTED = 17,
    perfetto_protos_AtomId_ATOM_PROCESS_MEMORY_STAT_REPORTED = 18,
    perfetto_protos_AtomId_ATOM_LAUNCHER_EVENT = 19,
    perfetto_protos_AtomId_ATOM_BATTERY_SAVER_MODE_STATE_CHANGED = 20,
    perfetto_protos_AtomId_ATOM_DEVICE_IDLE_MODE_STATE_CHANGED = 21,
    perfetto_protos_AtomId_ATOM_DEVICE_IDLING_MODE_STATE_CHANGED = 22,
    perfetto_protos_AtomId_ATOM_AUDIO_STATE_CHANGED = 23,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_STATE_CHANGED = 24,
    perfetto_protos_AtomId_ATOM_CAMERA_STATE_CHANGED = 25,
    perfetto_protos_AtomId_ATOM_FLASHLIGHT_STATE_CHANGED = 26,
    perfetto_protos_AtomId_ATOM_UID_PROCESS_STATE_CHANGED = 27,
    perfetto_protos_AtomId_ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED = 28,
    perfetto_protos_AtomId_ATOM_SCREEN_STATE_CHANGED = 29,
    perfetto_protos_AtomId_ATOM_BATTERY_LEVEL_CHANGED = 30,
    perfetto_protos_AtomId_ATOM_CHARGING_STATE_CHANGED = 31,
    perfetto_protos_AtomId_ATOM_PLUGGED_STATE_CHANGED = 32,
    perfetto_protos_AtomId_ATOM_INTERACTIVE_STATE_CHANGED = 33,
    perfetto_protos_AtomId_ATOM_TOUCH_EVENT_REPORTED = 34,
    perfetto_protos_AtomId_ATOM_WAKEUP_ALARM_OCCURRED = 35,
    perfetto_protos_AtomId_ATOM_KERNEL_WAKEUP_REPORTED = 36,
    perfetto_protos_AtomId_ATOM_WIFI_LOCK_STATE_CHANGED = 37,
    perfetto_protos_AtomId_ATOM_WIFI_SIGNAL_STRENGTH_CHANGED = 38,
    perfetto_protos_AtomId_ATOM_WIFI_SCAN_STATE_CHANGED = 39,
    perfetto_protos_AtomId_ATOM_PHONE_SIGNAL_STRENGTH_CHANGED = 40,
    perfetto_protos_AtomId_ATOM_SETTING_CHANGED = 41,
    perfetto_protos_AtomId_ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED = 42,
    perfetto_protos_AtomId_ATOM_ISOLATED_UID_CHANGED = 43,
    perfetto_protos_AtomId_ATOM_PACKET_WAKEUP_OCCURRED = 44,
    perfetto_protos_AtomId_ATOM_WALL_CLOCK_TIME_SHIFTED = 45,
    perfetto_protos_AtomId_ATOM_ANOMALY_DETECTED = 46,
    perfetto_protos_AtomId_ATOM_APP_BREADCRUMB_REPORTED = 47,
    perfetto_protos_AtomId_ATOM_APP_START_OCCURRED = 48,
    perfetto_protos_AtomId_ATOM_APP_START_CANCELED = 49,
    perfetto_protos_AtomId_ATOM_APP_START_FULLY_DRAWN = 50,
    perfetto_protos_AtomId_ATOM_LMK_KILL_OCCURRED = 51,
    perfetto_protos_AtomId_ATOM_PICTURE_IN_PICTURE_STATE_CHANGED = 52,
    perfetto_protos_AtomId_ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED = 53,
    perfetto_protos_AtomId_ATOM_APP_START_MEMORY_STATE_CAPTURED = 55,
    perfetto_protos_AtomId_ATOM_SHUTDOWN_SEQUENCE_REPORTED = 56,
    perfetto_protos_AtomId_ATOM_BOOT_SEQUENCE_REPORTED = 57,
    perfetto_protos_AtomId_ATOM_OVERLAY_STATE_CHANGED = 59,
    perfetto_protos_AtomId_ATOM_FOREGROUND_SERVICE_STATE_CHANGED = 60,
    perfetto_protos_AtomId_ATOM_CALL_STATE_CHANGED = 61,
    perfetto_protos_AtomId_ATOM_KEYGUARD_STATE_CHANGED = 62,
    perfetto_protos_AtomId_ATOM_KEYGUARD_BOUNCER_STATE_CHANGED = 63,
    perfetto_protos_AtomId_ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED = 64,
    perfetto_protos_AtomId_ATOM_APP_DIED = 65,
    perfetto_protos_AtomId_ATOM_RESOURCE_CONFIGURATION_CHANGED = 66,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_ENABLED_STATE_CHANGED = 67,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED = 68,
    perfetto_protos_AtomId_ATOM_GPS_SIGNAL_QUALITY_CHANGED = 69,
    perfetto_protos_AtomId_ATOM_USB_CONNECTOR_STATE_CHANGED = 70,
    perfetto_protos_AtomId_ATOM_SPEAKER_IMPEDANCE_REPORTED = 71,
    perfetto_protos_AtomId_ATOM_HARDWARE_FAILED = 72,
    perfetto_protos_AtomId_ATOM_PHYSICAL_DROP_DETECTED = 73,
    perfetto_protos_AtomId_ATOM_CHARGE_CYCLES_REPORTED = 74,
    perfetto_protos_AtomId_ATOM_MOBILE_CONNECTION_STATE_CHANGED = 75,
    perfetto_protos_AtomId_ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED = 76,
    perfetto_protos_AtomId_ATOM_USB_DEVICE_ATTACHED = 77,
    perfetto_protos_AtomId_ATOM_APP_CRASH_OCCURRED = 78,
    perfetto_protos_AtomId_ATOM_ANR_OCCURRED = 79,
    perfetto_protos_AtomId_ATOM_WTF_OCCURRED = 80,
    perfetto_protos_AtomId_ATOM_LOW_MEM_REPORTED = 81,
    perfetto_protos_AtomId_ATOM_GENERIC_ATOM = 82,
    perfetto_protos_AtomId_ATOM_VIBRATOR_STATE_CHANGED = 84,
    perfetto_protos_AtomId_ATOM_DEFERRED_JOB_STATS_REPORTED = 85,
    perfetto_protos_AtomId_ATOM_THERMAL_THROTTLING = 86,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_ACQUIRED = 87,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_AUTHENTICATED = 88,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_ERROR_OCCURRED = 89,
    perfetto_protos_AtomId_ATOM_UI_EVENT_REPORTED = 90,
    perfetto_protos_AtomId_ATOM_BATTERY_HEALTH_SNAPSHOT = 91,
    perfetto_protos_AtomId_ATOM_SLOW_IO = 92,
    perfetto_protos_AtomId_ATOM_BATTERY_CAUSED_SHUTDOWN = 93,
    perfetto_protos_AtomId_ATOM_PHONE_SERVICE_STATE_CHANGED = 94,
    perfetto_protos_AtomId_ATOM_PHONE_STATE_CHANGED = 95,
    perfetto_protos_AtomId_ATOM_USER_RESTRICTION_CHANGED = 96,
    perfetto_protos_AtomId_ATOM_SETTINGS_UI_CHANGED = 97,
    perfetto_protos_AtomId_ATOM_CONNECTIVITY_STATE_CHANGED = 98,
    perfetto_protos_AtomId_ATOM_SERVICE_STATE_CHANGED = 99,
    perfetto_protos_AtomId_ATOM_SERVICE_LAUNCH_REPORTED = 100,
    perfetto_protos_AtomId_ATOM_FLAG_FLIP_UPDATE_OCCURRED = 101,
    perfetto_protos_AtomId_ATOM_BINARY_PUSH_STATE_CHANGED = 102,
    perfetto_protos_AtomId_ATOM_DEVICE_POLICY_EVENT = 103,
    perfetto_protos_AtomId_ATOM_DOCS_UI_FILE_OP_CANCELED = 104,
    perfetto_protos_AtomId_ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED = 105,
    perfetto_protos_AtomId_ATOM_DOCS_UI_FILE_OP_FAILURE = 106,
    perfetto_protos_AtomId_ATOM_DOCS_UI_PROVIDER_FILE_OP = 107,
    perfetto_protos_AtomId_ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST = 108,
    perfetto_protos_AtomId_ATOM_DOCS_UI_LAUNCH_REPORTED = 109,
    perfetto_protos_AtomId_ATOM_DOCS_UI_ROOT_VISITED = 110,
    perfetto_protos_AtomId_ATOM_DOCS_UI_STARTUP_MS = 111,
    perfetto_protos_AtomId_ATOM_DOCS_UI_USER_ACTION_REPORTED = 112,
    perfetto_protos_AtomId_ATOM_WIFI_ENABLED_STATE_CHANGED = 113,
    perfetto_protos_AtomId_ATOM_WIFI_RUNNING_STATE_CHANGED = 114,
    perfetto_protos_AtomId_ATOM_APP_COMPACTED = 115,
    perfetto_protos_AtomId_ATOM_NETWORK_DNS_EVENT_REPORTED = 116,
    perfetto_protos_AtomId_ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED = 117,
    perfetto_protos_AtomId_ATOM_DOCS_UI_PICK_RESULT_REPORTED = 118,
    perfetto_protos_AtomId_ATOM_DOCS_UI_SEARCH_MODE_REPORTED = 119,
    perfetto_protos_AtomId_ATOM_DOCS_UI_SEARCH_TYPE_REPORTED = 120,
    perfetto_protos_AtomId_ATOM_DATA_STALL_EVENT = 121,
    perfetto_protos_AtomId_ATOM_RESCUE_PARTY_RESET_REPORTED = 122,
    perfetto_protos_AtomId_ATOM_SIGNED_CONFIG_REPORTED = 123,
    perfetto_protos_AtomId_ATOM_GNSS_NI_EVENT_REPORTED = 124,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT = 125,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED = 126,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED = 127,
    perfetto_protos_AtomId_ATOM_APP_DOWNGRADED = 128,
    perfetto_protos_AtomId_ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED = 129,
    perfetto_protos_AtomId_ATOM_LOW_STORAGE_STATE_CHANGED = 130,
    perfetto_protos_AtomId_ATOM_GNSS_NFW_NOTIFICATION_REPORTED = 131,
    perfetto_protos_AtomId_ATOM_GNSS_CONFIGURATION_REPORTED = 132,
    perfetto_protos_AtomId_ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED = 133,
    perfetto_protos_AtomId_ATOM_NFC_ERROR_OCCURRED = 134,
    perfetto_protos_AtomId_ATOM_NFC_STATE_CHANGED = 135,
    perfetto_protos_AtomId_ATOM_NFC_BEAM_OCCURRED = 136,
    perfetto_protos_AtomId_ATOM_NFC_CARDEMULATION_OCCURRED = 137,
    perfetto_protos_AtomId_ATOM_NFC_TAG_OCCURRED = 138,
    perfetto_protos_AtomId_ATOM_NFC_HCE_TRANSACTION_OCCURRED = 139,
    perfetto_protos_AtomId_ATOM_SE_STATE_CHANGED = 140,
    perfetto_protos_AtomId_ATOM_SE_OMAPI_REPORTED = 141,
    perfetto_protos_AtomId_ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED = 142,
    perfetto_protos_AtomId_ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED = 143,
    perfetto_protos_AtomId_ATOM_ADB_CONNECTION_CHANGED = 144,
    perfetto_protos_AtomId_ATOM_SPEECH_DSP_STAT_REPORTED = 145,
    perfetto_protos_AtomId_ATOM_USB_CONTAMINANT_REPORTED = 146,
    perfetto_protos_AtomId_ATOM_WATCHDOG_ROLLBACK_OCCURRED = 147,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED = 148,
    perfetto_protos_AtomId_ATOM_BUBBLE_UI_CHANGED = 149,
    perfetto_protos_AtomId_ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED = 150,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED = 151,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED = 152,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED = 153,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED = 154,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED = 155,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED = 156,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED = 157,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED = 158,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED = 159,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED = 160,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED = 161,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DEVICE_INFO_REPORTED = 162,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED = 163,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED = 164,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_BOND_STATE_CHANGED = 165,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED = 166,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED = 167,
    perfetto_protos_AtomId_ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED = 168,
    perfetto_protos_AtomId_ATOM_PROCESS_START_TIME = 169,
    perfetto_protos_AtomId_ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED = 170,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED = 171,
    perfetto_protos_AtomId_ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED = 172,
    perfetto_protos_AtomId_ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED = 173,
    perfetto_protos_AtomId_ATOM_ASSIST_GESTURE_STAGE_REPORTED = 174,
    perfetto_protos_AtomId_ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED = 175,
    perfetto_protos_AtomId_ATOM_ASSIST_GESTURE_PROGRESS_REPORTED = 176,
    perfetto_protos_AtomId_ATOM_TOUCH_GESTURE_CLASSIFIED = 177,
    perfetto_protos_AtomId_ATOM_HIDDEN_API_USED = 178,
    perfetto_protos_AtomId_ATOM_STYLE_UI_CHANGED = 179,
    perfetto_protos_AtomId_ATOM_PRIVACY_INDICATORS_INTERACTED = 180,
    perfetto_protos_AtomId_ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED = 181,
    perfetto_protos_AtomId_ATOM_NETWORK_STACK_REPORTED = 182,
    perfetto_protos_AtomId_ATOM_APP_MOVED_STORAGE_REPORTED = 183,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_ENROLLED = 184,
    perfetto_protos_AtomId_ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED = 185,
    perfetto_protos_AtomId_ATOM_TOMB_STONE_OCCURRED = 186,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED = 187,
    perfetto_protos_AtomId_ATOM_INTELLIGENCE_EVENT_REPORTED = 188,
    perfetto_protos_AtomId_ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED = 189,
    perfetto_protos_AtomId_ATOM_ROLE_REQUEST_RESULT_REPORTED = 190,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED = 191,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED = 192,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED = 193,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED = 194,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_CODEC_REPORTED = 195,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED = 196,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED = 197,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_MEDIADRM_REPORTED = 198,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_NUPLAYER_REPORTED = 199,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_RECORDER_REPORTED = 200,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED = 201,
    perfetto_protos_AtomId_ATOM_CAR_POWER_STATE_CHANGED = 203,
    perfetto_protos_AtomId_ATOM_GARAGE_MODE_INFO = 204,
    perfetto_protos_AtomId_ATOM_TEST_ATOM_REPORTED = 205,
    perfetto_protos_AtomId_ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED = 206,
    perfetto_protos_AtomId_ATOM_CONTENT_CAPTURE_SERVICE_EVENTS = 207,
    perfetto_protos_AtomId_ATOM_CONTENT_CAPTURE_SESSION_EVENTS = 208,
    perfetto_protos_AtomId_ATOM_CONTENT_CAPTURE_FLUSHED = 209,
    perfetto_protos_AtomId_ATOM_LOCATION_MANAGER_API_USAGE_REPORTED = 210,
    perfetto_protos_AtomId_ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED = 211,
    perfetto_protos_AtomId_ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT = 212,
    perfetto_protos_AtomId_ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS = 213,
    perfetto_protos_AtomId_ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION = 214,
    perfetto_protos_AtomId_ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED = 215,
    perfetto_protos_AtomId_ATOM_APP_PERMISSION_FRAGMENT_VIEWED = 216,
    perfetto_protos_AtomId_ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED = 217,
    perfetto_protos_AtomId_ATOM_PERMISSION_APPS_FRAGMENT_VIEWED = 218,
    perfetto_protos_AtomId_ATOM_TEXT_SELECTION_EVENT = 219,
    perfetto_protos_AtomId_ATOM_TEXT_LINKIFY_EVENT = 220,
    perfetto_protos_AtomId_ATOM_CONVERSATION_ACTIONS_EVENT = 221,
    perfetto_protos_AtomId_ATOM_LANGUAGE_DETECTION_EVENT = 222,
    perfetto_protos_AtomId_ATOM_EXCLUSION_RECT_STATE_CHANGED = 223,
    perfetto_protos_AtomId_ATOM_BACK_GESTURE_REPORTED_REPORTED = 224,
    perfetto_protos_AtomId_ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED = 225,
    perfetto_protos_AtomId_ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED = 226,
    perfetto_protos_AtomId_ATOM_CAMERA_ACTION_EVENT = 227,
    perfetto_protos_AtomId_ATOM_APP_COMPATIBILITY_CHANGE_REPORTED = 228,
    perfetto_protos_AtomId_ATOM_PERFETTO_UPLOADED = 229,
    perfetto_protos_AtomId_ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED = 230,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_SCAN_OCCURRED = 233,
    perfetto_protos_AtomId_ATOM_MEDIA_CONTENT_DELETED = 234,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED = 235,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED = 236,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED = 237,
    perfetto_protos_AtomId_ATOM_REBOOT_ESCROW_RECOVERY_REPORTED = 238,
    perfetto_protos_AtomId_ATOM_BOOT_TIME_EVENT_DURATION_REPORTED = 239,
    perfetto_protos_AtomId_ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED = 240,
    perfetto_protos_AtomId_ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED = 241,
    perfetto_protos_AtomId_ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED = 242,
    perfetto_protos_AtomId_ATOM_USERSPACE_REBOOT_REPORTED = 243,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_REPORTED = 244,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_PANEL_REPORTED = 245,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_CHANNEL_MODIFIED = 246,
    perfetto_protos_AtomId_ATOM_INTEGRITY_CHECK_RESULT_REPORTED = 247,
    perfetto_protos_AtomId_ATOM_INTEGRITY_RULES_PUSHED = 248,
    perfetto_protos_AtomId_ATOM_CB_MESSAGE_REPORTED = 249,
    perfetto_protos_AtomId_ATOM_CB_MESSAGE_ERROR = 250,
    perfetto_protos_AtomId_ATOM_WIFI_HEALTH_STAT_REPORTED = 251,
    perfetto_protos_AtomId_ATOM_WIFI_FAILURE_STAT_REPORTED = 252,
    perfetto_protos_AtomId_ATOM_WIFI_CONNECTION_RESULT_REPORTED = 253,
    perfetto_protos_AtomId_ATOM_APP_FREEZE_CHANGED = 254,
    perfetto_protos_AtomId_ATOM_SNAPSHOT_MERGE_REPORTED = 255,
    perfetto_protos_AtomId_ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED = 256,
    perfetto_protos_AtomId_ATOM_DISPLAY_JANK_REPORTED = 257,
    perfetto_protos_AtomId_ATOM_APP_STANDBY_BUCKET_CHANGED = 258,
    perfetto_protos_AtomId_ATOM_SHARESHEET_STARTED = 259,
    perfetto_protos_AtomId_ATOM_RANKING_SELECTED = 260,
    perfetto_protos_AtomId_ATOM_TVSETTINGS_UI_INTERACTED = 261,
    perfetto_protos_AtomId_ATOM_LAUNCHER_SNAPSHOT = 262,
    perfetto_protos_AtomId_ATOM_PACKAGE_INSTALLER_V2_REPORTED = 263,
    perfetto_protos_AtomId_ATOM_USER_LIFECYCLE_JOURNEY_REPORTED = 264,
    perfetto_protos_AtomId_ATOM_USER_LIFECYCLE_EVENT_OCCURRED = 265,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_SHORTCUT_REPORTED = 266,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_SERVICE_REPORTED = 267,
    perfetto_protos_AtomId_ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED = 268,
    perfetto_protos_AtomId_ATOM_APP_USAGE_EVENT_OCCURRED = 269,
    perfetto_protos_AtomId_ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED = 270,
    perfetto_protos_AtomId_ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED = 271,
    perfetto_protos_AtomId_ATOM_AUTO_REVOKED_APP_INTERACTION = 272,
    perfetto_protos_AtomId_ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION = 273,
    perfetto_protos_AtomId_ATOM_EVS_USAGE_STATS_REPORTED = 274,
    perfetto_protos_AtomId_ATOM_AUDIO_POWER_USAGE_DATA_REPORTED = 275,
    perfetto_protos_AtomId_ATOM_TV_TUNER_STATE_CHANGED = 276,
    perfetto_protos_AtomId_ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED = 277,
    perfetto_protos_AtomId_ATOM_CB_MESSAGE_FILTERED = 278,
    perfetto_protos_AtomId_ATOM_TV_TUNER_DVR_STATUS = 279,
    perfetto_protos_AtomId_ATOM_TV_CAS_SESSION_OPEN_STATUS = 280,
    perfetto_protos_AtomId_ATOM_ASSISTANT_INVOCATION_REPORTED = 281,
    perfetto_protos_AtomId_ATOM_DISPLAY_WAKE_REPORTED = 282,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED = 283,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED = 284,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED = 285,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED = 286,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED = 287,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED = 288,
    perfetto_protos_AtomId_ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED = 289,
    perfetto_protos_AtomId_ATOM_NETWORK_IP_PROVISIONING_REPORTED = 290,
    perfetto_protos_AtomId_ATOM_NETWORK_DHCP_RENEW_REPORTED = 291,
    perfetto_protos_AtomId_ATOM_NETWORK_VALIDATION_REPORTED = 292,
    perfetto_protos_AtomId_ATOM_NETWORK_STACK_QUIRK_REPORTED = 293,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED = 294,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED = 295,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED = 296,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED = 297,
    perfetto_protos_AtomId_ATOM_BLOB_COMMITTED = 298,
    perfetto_protos_AtomId_ATOM_BLOB_LEASED = 299,
    perfetto_protos_AtomId_ATOM_BLOB_OPENED = 300,
    perfetto_protos_AtomId_ATOM_CONTACTS_PROVIDER_STATUS_REPORTED = 301,
    perfetto_protos_AtomId_ATOM_KEYSTORE_KEY_EVENT_REPORTED = 302,
    perfetto_protos_AtomId_ATOM_NETWORK_TETHERING_REPORTED = 303,
    perfetto_protos_AtomId_ATOM_IME_TOUCH_REPORTED = 304,
    perfetto_protos_AtomId_ATOM_UI_INTERACTION_FRAME_INFO_REPORTED = 305,
    perfetto_protos_AtomId_ATOM_UI_ACTION_LATENCY_REPORTED = 306,
    perfetto_protos_AtomId_ATOM_WIFI_DISCONNECT_REPORTED = 307,
    perfetto_protos_AtomId_ATOM_WIFI_CONNECTION_STATE_CHANGED = 308,
    perfetto_protos_AtomId_ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED = 309,
    perfetto_protos_AtomId_ATOM_HDMI_CEC_MESSAGE_REPORTED = 310,
    perfetto_protos_AtomId_ATOM_AIRPLANE_MODE = 311,
    perfetto_protos_AtomId_ATOM_MODEM_RESTART = 312,
    perfetto_protos_AtomId_ATOM_CARRIER_ID_MISMATCH_REPORTED = 313,
    perfetto_protos_AtomId_ATOM_CARRIER_ID_TABLE_UPDATED = 314,
    perfetto_protos_AtomId_ATOM_DATA_STALL_RECOVERY_REPORTED = 315,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED = 316,
    perfetto_protos_AtomId_ATOM_TLS_HANDSHAKE_REPORTED = 317,
    perfetto_protos_AtomId_ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED = 318,
    perfetto_protos_AtomId_ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED = 319,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_PLAYBACK_REPORTED = 320,
    perfetto_protos_AtomId_ATOM_MEDIA_NETWORK_INFO_CHANGED = 321,
    perfetto_protos_AtomId_ATOM_MEDIA_PLAYBACK_STATE_CHANGED = 322,
    perfetto_protos_AtomId_ATOM_MEDIA_PLAYBACK_ERROR_REPORTED = 323,
    perfetto_protos_AtomId_ATOM_MEDIA_PLAYBACK_TRACK_CHANGED = 324,
    perfetto_protos_AtomId_ATOM_WIFI_SCAN_REPORTED = 325,
    perfetto_protos_AtomId_ATOM_WIFI_PNO_SCAN_REPORTED = 326,
    perfetto_protos_AtomId_ATOM_TIF_TUNE_CHANGED = 327,
    perfetto_protos_AtomId_ATOM_AUTO_ROTATE_REPORTED = 328,
    perfetto_protos_AtomId_ATOM_PERFETTO_TRIGGER = 329,
    perfetto_protos_AtomId_ATOM_TRANSCODING_DATA = 330,
    perfetto_protos_AtomId_ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED = 331,
    perfetto_protos_AtomId_ATOM_DEVICE_ROTATED = 333,
    perfetto_protos_AtomId_ATOM_SIM_SPECIFIC_SETTINGS_RESTORED = 334,
    perfetto_protos_AtomId_ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED = 335,
    perfetto_protos_AtomId_ATOM_PIN_STORAGE_EVENT = 336,
    perfetto_protos_AtomId_ATOM_FACE_DOWN_REPORTED = 337,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED = 338,
    perfetto_protos_AtomId_ATOM_REBOOT_ESCROW_PREPARATION_REPORTED = 339,
    perfetto_protos_AtomId_ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED = 340,
    perfetto_protos_AtomId_ATOM_REBOOT_ESCROW_REBOOT_REPORTED = 341,
    perfetto_protos_AtomId_ATOM_BINDER_LATENCY_REPORTED = 342,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED = 343,
    perfetto_protos_AtomId_ATOM_MEDIA_TRANSCODING_SESSION_ENDED = 344,
    perfetto_protos_AtomId_ATOM_MAGNIFICATION_USAGE_REPORTED = 345,
    perfetto_protos_AtomId_ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED = 346,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_CALL_STATS_REPORTED = 347,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED = 348,
    perfetto_protos_AtomId_ATOM_DEVICE_CONTROL_CHANGED = 349,
    perfetto_protos_AtomId_ATOM_DEVICE_STATE_CHANGED = 350,
    perfetto_protos_AtomId_ATOM_INPUTDEVICE_REGISTERED = 351,
    perfetto_protos_AtomId_ATOM_SMARTSPACE_CARD_REPORTED = 352,
    perfetto_protos_AtomId_ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED = 353,
    perfetto_protos_AtomId_ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED = 354,
    perfetto_protos_AtomId_ATOM_AUTH_ENROLL_ACTION_INVOKED = 355,
    perfetto_protos_AtomId_ATOM_AUTH_DEPRECATED_API_USED = 356,
    perfetto_protos_AtomId_ATOM_UNATTENDED_REBOOT_OCCURRED = 357,
    perfetto_protos_AtomId_ATOM_LONG_REBOOT_BLOCKING_REPORTED = 358,
    perfetto_protos_AtomId_ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED = 359,
    perfetto_protos_AtomId_ATOM_FDTRACK_EVENT_OCCURRED = 364,
    perfetto_protos_AtomId_ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED = 365,
    perfetto_protos_AtomId_ATOM_ALARM_BATCH_DELIVERED = 367,
    perfetto_protos_AtomId_ATOM_ALARM_SCHEDULED = 368,
    perfetto_protos_AtomId_ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED = 369,
    perfetto_protos_AtomId_ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED = 370,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED = 371,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_QUERY_STATS_REPORTED = 372,
    perfetto_protos_AtomId_ATOM_APP_PROCESS_DIED = 373,
    perfetto_protos_AtomId_ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED = 374,
    perfetto_protos_AtomId_ATOM_SLOW_INPUT_EVENT_REPORTED = 375,
    perfetto_protos_AtomId_ATOM_ANR_OCCURRED_PROCESSING_STARTED = 376,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_REMOVE_STATS_REPORTED = 377,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_REPORTED = 378,
    perfetto_protos_AtomId_ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION = 379,
    perfetto_protos_AtomId_ATOM_PERMISSION_DETAILS_INTERACTION = 380,
    perfetto_protos_AtomId_ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION = 381,
    perfetto_protos_AtomId_ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION = 382,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED = 383,
    perfetto_protos_AtomId_ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT = 384,
    perfetto_protos_AtomId_ATOM_APP_COMPAT_STATE_CHANGED = 386,
    perfetto_protos_AtomId_ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED = 387,
    perfetto_protos_AtomId_ATOM_SPLITSCREEN_UI_CHANGED = 388,
    perfetto_protos_AtomId_ATOM_NETWORK_DNS_HANDSHAKE_REPORTED = 389,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CODE_PATH_COUNTER = 390,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY = 392,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED = 393,
    perfetto_protos_AtomId_ATOM_NEURALNETWORKS_COMPILATION_COMPLETED = 394,
    perfetto_protos_AtomId_ATOM_NEURALNETWORKS_EXECUTION_COMPLETED = 395,
    perfetto_protos_AtomId_ATOM_NEURALNETWORKS_COMPILATION_FAILED = 396,
    perfetto_protos_AtomId_ATOM_NEURALNETWORKS_EXECUTION_FAILED = 397,
    perfetto_protos_AtomId_ATOM_CONTEXT_HUB_BOOTED = 398,
    perfetto_protos_AtomId_ATOM_CONTEXT_HUB_RESTARTED = 399,
    perfetto_protos_AtomId_ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED = 400,
    perfetto_protos_AtomId_ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED = 401,
    perfetto_protos_AtomId_ATOM_UWB_SESSION_INITED = 402,
    perfetto_protos_AtomId_ATOM_UWB_SESSION_CLOSED = 403,
    perfetto_protos_AtomId_ATOM_UWB_FIRST_RANGING_RECEIVED = 404,
    perfetto_protos_AtomId_ATOM_UWB_RANGING_MEASUREMENT_RECEIVED = 405,
    perfetto_protos_AtomId_ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED = 406,
    perfetto_protos_AtomId_ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED = 407,
    perfetto_protos_AtomId_ATOM_CLIPBOARD_CLEARED = 408,
    perfetto_protos_AtomId_ATOM_VM_CREATION_REQUESTED = 409,
    perfetto_protos_AtomId_ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED = 410,
    perfetto_protos_AtomId_ATOM_APPLICATION_LOCALES_CHANGED = 412,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED = 413,
    perfetto_protos_AtomId_ATOM_FOLD_STATE_DURATION_REPORTED = 414,
    perfetto_protos_AtomId_ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED = 415,
    perfetto_protos_AtomId_ATOM_DISPLAY_HBM_STATE_CHANGED = 416,
    perfetto_protos_AtomId_ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED = 417,
    perfetto_protos_AtomId_ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED = 418,
    perfetto_protos_AtomId_ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED = 419,
    perfetto_protos_AtomId_ATOM_VBMETA_DIGEST_REPORTED = 420,
    perfetto_protos_AtomId_ATOM_APEX_INFO_GATHERED = 421,
    perfetto_protos_AtomId_ATOM_PVM_INFO_GATHERED = 422,
    perfetto_protos_AtomId_ATOM_WEAR_SETTINGS_UI_INTERACTED = 423,
    perfetto_protos_AtomId_ATOM_TRACING_SERVICE_REPORT_EVENT = 424,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED = 425,
    perfetto_protos_AtomId_ATOM_LAUNCHER_LATENCY = 426,
    perfetto_protos_AtomId_ATOM_DROPBOX_ENTRY_DROPPED = 427,
    perfetto_protos_AtomId_ATOM_WIFI_P2P_CONNECTION_REPORTED = 428,
    perfetto_protos_AtomId_ATOM_GAME_STATE_CHANGED = 429,
    perfetto_protos_AtomId_ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED = 430,
    perfetto_protos_AtomId_ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED = 431,
    perfetto_protos_AtomId_ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED = 432,
    perfetto_protos_AtomId_ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED = 433,
    perfetto_protos_AtomId_ATOM_HOTWORD_DETECTOR_EVENTS = 434,
    perfetto_protos_AtomId_ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED = 437,
    perfetto_protos_AtomId_ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED = 440,
    perfetto_protos_AtomId_ATOM_APP_BACKGROUND_RESTRICTIONS_INFO = 441,
    perfetto_protos_AtomId_ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED = 442,
    perfetto_protos_AtomId_ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED = 443,
    perfetto_protos_AtomId_ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED = 444,
    perfetto_protos_AtomId_ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED = 445,
    perfetto_protos_AtomId_ATOM_GNSS_PSDS_DOWNLOAD_REPORTED = 446,
    perfetto_protos_AtomId_ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED = 447,
    perfetto_protos_AtomId_ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED = 448,
    perfetto_protos_AtomId_ATOM_DREAM_UI_EVENT_REPORTED = 449,
    perfetto_protos_AtomId_ATOM_TASK_MANAGER_EVENT_REPORTED = 450,
    perfetto_protos_AtomId_ATOM_CDM_ASSOCIATION_ACTION = 451,
    perfetto_protos_AtomId_ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED = 452,
    perfetto_protos_AtomId_ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED = 453,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED = 454,
    perfetto_protos_AtomId_ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED = 455,
    perfetto_protos_AtomId_ATOM_UWB_DEVICE_ERROR_REPORTED = 456,
    perfetto_protos_AtomId_ATOM_ISOLATED_COMPILATION_SCHEDULED = 457,
    perfetto_protos_AtomId_ATOM_ISOLATED_COMPILATION_ENDED = 458,
    perfetto_protos_AtomId_ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE = 459,
    perfetto_protos_AtomId_ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED = 460,
    perfetto_protos_AtomId_ATOM_TELEPHONY_ANOMALY_DETECTED = 461,
    perfetto_protos_AtomId_ATOM_LETTERBOX_POSITION_CHANGED = 462,
    perfetto_protos_AtomId_ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT = 463,
    perfetto_protos_AtomId_ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO = 464,
    perfetto_protos_AtomId_ATOM_REMOTE_KEY_PROVISIONING_TIMING = 465,
    perfetto_protos_AtomId_ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT = 466,
    perfetto_protos_AtomId_ATOM_SYNC_EXEMPTION_OCCURRED = 468,
    perfetto_protos_AtomId_ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED = 469,
    perfetto_protos_AtomId_ATOM_DOCK_STATE_CHANGED = 470,
    perfetto_protos_AtomId_ATOM_SAFETY_SOURCE_STATE_COLLECTED = 471,
    perfetto_protos_AtomId_ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED = 472,
    perfetto_protos_AtomId_ATOM_SAFETY_CENTER_INTERACTION_REPORTED = 473,
    perfetto_protos_AtomId_ATOM_SETTINGS_PROVIDER_SETTING_CHANGED = 474,
    perfetto_protos_AtomId_ATOM_BROADCAST_DELIVERY_EVENT_REPORTED = 475,
    perfetto_protos_AtomId_ATOM_SERVICE_REQUEST_EVENT_REPORTED = 476,
    perfetto_protos_AtomId_ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED = 477,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DEVICE_NAME_REPORTED = 478,
    perfetto_protos_AtomId_ATOM_CB_CONFIG_UPDATED = 479,
    perfetto_protos_AtomId_ATOM_CB_MODULE_ERROR_REPORTED = 480,
    perfetto_protos_AtomId_ATOM_CB_SERVICE_FEATURE_CHANGED = 481,
    perfetto_protos_AtomId_ATOM_CB_RECEIVER_FEATURE_CHANGED = 482,
    perfetto_protos_AtomId_ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION = 484,
    perfetto_protos_AtomId_ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION = 485,
    perfetto_protos_AtomId_ATOM_PRIVACY_SIGNALS_JOB_FAILURE = 486,
    perfetto_protos_AtomId_ATOM_VIBRATION_REPORTED = 487,
    perfetto_protos_AtomId_ATOM_UWB_RANGING_START = 489,
    perfetto_protos_AtomId_ATOM_APP_COMPACTED_V2 = 491,
    perfetto_protos_AtomId_ATOM_DISPLAY_BRIGHTNESS_CHANGED = 494,
    perfetto_protos_AtomId_ATOM_ACTIVITY_ACTION_BLOCKED = 495,
    perfetto_protos_AtomId_ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED = 504,
    perfetto_protos_AtomId_ATOM_VM_BOOTED = 505,
    perfetto_protos_AtomId_ATOM_VM_EXITED = 506,
    perfetto_protos_AtomId_ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED = 507,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED = 508,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED = 509,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED = 510,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED = 511,
    perfetto_protos_AtomId_ATOM_HEARING_AID_INFO_REPORTED = 513,
    perfetto_protos_AtomId_ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED = 514,
    perfetto_protos_AtomId_ATOM_AMBIENT_MODE_CHANGED = 515,
    perfetto_protos_AtomId_ATOM_ANR_LATENCY_REPORTED = 516,
    perfetto_protos_AtomId_ATOM_RESOURCE_API_INFO = 517,
    perfetto_protos_AtomId_ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED = 518,
    perfetto_protos_AtomId_ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED = 519,
    perfetto_protos_AtomId_ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED = 520,
    perfetto_protos_AtomId_ATOM_AIRPLANE_MODE_SESSION_REPORTED = 521,
    perfetto_protos_AtomId_ATOM_VM_CPU_STATUS_REPORTED = 522,
    perfetto_protos_AtomId_ATOM_VM_MEM_STATUS_REPORTED = 523,
    perfetto_protos_AtomId_ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED = 524,
    perfetto_protos_AtomId_ATOM_DEFAULT_NETWORK_REMATCH_INFO = 525,
    perfetto_protos_AtomId_ATOM_NETWORK_SELECTION_PERFORMANCE = 526,
    perfetto_protos_AtomId_ATOM_NETWORK_NSD_REPORTED = 527,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED = 529,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED = 530,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED = 531,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED = 532,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_GATT_APP_INFO = 533,
    perfetto_protos_AtomId_ATOM_BRIGHTNESS_CONFIGURATION_UPDATED = 534,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED = 538,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED = 539,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED = 540,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED = 541,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY = 542,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY = 543,
    perfetto_protos_AtomId_ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED = 544,
    perfetto_protos_AtomId_ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED = 545,
    perfetto_protos_AtomId_ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED = 546,
    perfetto_protos_AtomId_ATOM_LAUNCHER_IMPRESSION_EVENT = 547,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY = 549,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_EDITED = 551,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED = 552,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED = 553,
    perfetto_protos_AtomId_ATOM_PACKAGE_UNINSTALLATION_REPORTED = 554,
    perfetto_protos_AtomId_ATOM_GAME_MODE_CHANGED = 555,
    perfetto_protos_AtomId_ATOM_GAME_MODE_CONFIGURATION_CHANGED = 556,
    perfetto_protos_AtomId_ATOM_BEDTIME_MODE_STATE_CHANGED = 557,
    perfetto_protos_AtomId_ATOM_NETWORK_SLICE_SESSION_ENDED = 558,
    perfetto_protos_AtomId_ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED = 559,
    perfetto_protos_AtomId_ATOM_NFC_TAG_TYPE_OCCURRED = 560,
    perfetto_protos_AtomId_ATOM_NFC_AID_CONFLICT_OCCURRED = 561,
    perfetto_protos_AtomId_ATOM_NFC_READER_CONFLICT_OCCURRED = 562,
    perfetto_protos_AtomId_ATOM_WS_TILE_LIST_CHANGED = 563,
    perfetto_protos_AtomId_ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION = 564,
    perfetto_protos_AtomId_ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED = 566,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED = 567,
    perfetto_protos_AtomId_ATOM_MEDIA_DRM_CREATED = 568,
    perfetto_protos_AtomId_ATOM_MEDIA_DRM_ERRORED = 569,
    perfetto_protos_AtomId_ATOM_MEDIA_DRM_SESSION_OPENED = 570,
    perfetto_protos_AtomId_ATOM_MEDIA_DRM_SESSION_CLOSED = 571,
    perfetto_protos_AtomId_ATOM_USER_SELECTED_RESOLUTION = 572,
    perfetto_protos_AtomId_ATOM_UNSAFE_INTENT_EVENT_REPORTED = 573,
    perfetto_protos_AtomId_ATOM_PERFORMANCE_HINT_SESSION_REPORTED = 574,
    perfetto_protos_AtomId_ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED = 576,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_TOUCH_REPORTED = 577,
    perfetto_protos_AtomId_ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED = 578,
    perfetto_protos_AtomId_ATOM_LOCATION_ENABLED_STATE_CHANGED = 580,
    perfetto_protos_AtomId_ATOM_IME_REQUEST_FINISHED = 581,
    perfetto_protos_AtomId_ATOM_USB_COMPLIANCE_WARNINGS_REPORTED = 582,
    perfetto_protos_AtomId_ATOM_APP_SUPPORTED_LOCALES_CHANGED = 583,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED = 586,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_PROPERTIES_COLLECTED = 587,
    perfetto_protos_AtomId_ATOM_KERNEL_WAKEUP_ATTRIBUTED = 588,
    perfetto_protos_AtomId_ATOM_SCREEN_STATE_CHANGED_V2 = 589,
    perfetto_protos_AtomId_ATOM_WS_BACKUP_ACTION_REPORTED = 590,
    perfetto_protos_AtomId_ATOM_WS_RESTORE_ACTION_REPORTED = 591,
    perfetto_protos_AtomId_ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED = 592,
    perfetto_protos_AtomId_ATOM_MEDIA_SESSION_UPDATED = 594,
    perfetto_protos_AtomId_ATOM_WEAR_OOBE_STATE_CHANGED = 595,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_UPDATED = 596,
    perfetto_protos_AtomId_ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED = 601,
    perfetto_protos_AtomId_ATOM_WS_COMPLICATION_TAPPED = 602,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_BLOCKING = 780,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED = 822,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED = 823,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_ACTIONED = 824,
    perfetto_protos_AtomId_ATOM_WS_NOTIFICATION_LATENCY = 880,
    perfetto_protos_AtomId_ATOM_WIFI_BYTES_TRANSFER = 10000,
    perfetto_protos_AtomId_ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG = 10001,
    perfetto_protos_AtomId_ATOM_MOBILE_BYTES_TRANSFER = 10002,
    perfetto_protos_AtomId_ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG = 10003,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_BYTES_TRANSFER = 10006,
    perfetto_protos_AtomId_ATOM_KERNEL_WAKELOCK = 10004,
    perfetto_protos_AtomId_ATOM_SUBSYSTEM_SLEEP_STATE = 10005,
    perfetto_protos_AtomId_ATOM_CPU_TIME_PER_UID = 10009,
    perfetto_protos_AtomId_ATOM_CPU_TIME_PER_UID_FREQ = 10010,
    perfetto_protos_AtomId_ATOM_WIFI_ACTIVITY_INFO = 10011,
    perfetto_protos_AtomId_ATOM_MODEM_ACTIVITY_INFO = 10012,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_ACTIVITY_INFO = 10007,
    perfetto_protos_AtomId_ATOM_PROCESS_MEMORY_STATE = 10013,
    perfetto_protos_AtomId_ATOM_SYSTEM_ELAPSED_REALTIME = 10014,
    perfetto_protos_AtomId_ATOM_SYSTEM_UPTIME = 10015,
    perfetto_protos_AtomId_ATOM_CPU_ACTIVE_TIME = 10016,
    perfetto_protos_AtomId_ATOM_CPU_CLUSTER_TIME = 10017,
    perfetto_protos_AtomId_ATOM_DISK_SPACE = 10018,
    perfetto_protos_AtomId_ATOM_REMAINING_BATTERY_CAPACITY = 10019,
    perfetto_protos_AtomId_ATOM_FULL_BATTERY_CAPACITY = 10020,
    perfetto_protos_AtomId_ATOM_TEMPERATURE = 10021,
    perfetto_protos_AtomId_ATOM_BINDER_CALLS = 10022,
    perfetto_protos_AtomId_ATOM_BINDER_CALLS_EXCEPTIONS = 10023,
    perfetto_protos_AtomId_ATOM_LOOPER_STATS = 10024,
    perfetto_protos_AtomId_ATOM_DISK_STATS = 10025,
    perfetto_protos_AtomId_ATOM_DIRECTORY_USAGE = 10026,
    perfetto_protos_AtomId_ATOM_APP_SIZE = 10027,
    perfetto_protos_AtomId_ATOM_CATEGORY_SIZE = 10028,
    perfetto_protos_AtomId_ATOM_PROC_STATS = 10029,
    perfetto_protos_AtomId_ATOM_BATTERY_VOLTAGE = 10030,
    perfetto_protos_AtomId_ATOM_NUM_FINGERPRINTS_ENROLLED = 10031,
    perfetto_protos_AtomId_ATOM_DISK_IO = 10032,
    perfetto_protos_AtomId_ATOM_POWER_PROFILE = 10033,
    perfetto_protos_AtomId_ATOM_PROC_STATS_PKG_PROC = 10034,
    perfetto_protos_AtomId_ATOM_PROCESS_CPU_TIME = 10035,
    perfetto_protos_AtomId_ATOM_CPU_TIME_PER_THREAD_FREQ = 10037,
    perfetto_protos_AtomId_ATOM_ON_DEVICE_POWER_MEASUREMENT = 10038,
    perfetto_protos_AtomId_ATOM_DEVICE_CALCULATED_POWER_USE = 10039,
    perfetto_protos_AtomId_ATOM_PROCESS_MEMORY_HIGH_WATER_MARK = 10042,
    perfetto_protos_AtomId_ATOM_BATTERY_LEVEL = 10043,
    perfetto_protos_AtomId_ATOM_BUILD_INFORMATION = 10044,
    perfetto_protos_AtomId_ATOM_BATTERY_CYCLE_COUNT = 10045,
    perfetto_protos_AtomId_ATOM_DEBUG_ELAPSED_CLOCK = 10046,
    perfetto_protos_AtomId_ATOM_DEBUG_FAILING_ELAPSED_CLOCK = 10047,
    perfetto_protos_AtomId_ATOM_NUM_FACES_ENROLLED = 10048,
    perfetto_protos_AtomId_ATOM_ROLE_HOLDER = 10049,
    perfetto_protos_AtomId_ATOM_DANGEROUS_PERMISSION_STATE = 10050,
    perfetto_protos_AtomId_ATOM_TRAIN_INFO = 10051,
    perfetto_protos_AtomId_ATOM_TIME_ZONE_DATA_INFO = 10052,
    perfetto_protos_AtomId_ATOM_EXTERNAL_STORAGE_INFO = 10053,
    perfetto_protos_AtomId_ATOM_GPU_STATS_GLOBAL_INFO = 10054,
    perfetto_protos_AtomId_ATOM_GPU_STATS_APP_INFO = 10055,
    perfetto_protos_AtomId_ATOM_SYSTEM_ION_HEAP_SIZE = 10056,
    perfetto_protos_AtomId_ATOM_APPS_ON_EXTERNAL_STORAGE_INFO = 10057,
    perfetto_protos_AtomId_ATOM_FACE_SETTINGS = 10058,
    perfetto_protos_AtomId_ATOM_COOLING_DEVICE = 10059,
    perfetto_protos_AtomId_ATOM_APP_OPS = 10060,
    perfetto_protos_AtomId_ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE = 10061,
    perfetto_protos_AtomId_ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO = 10062,
    perfetto_protos_AtomId_ATOM_SURFACEFLINGER_STATS_LAYER_INFO = 10063,
    perfetto_protos_AtomId_ATOM_PROCESS_MEMORY_SNAPSHOT = 10064,
    perfetto_protos_AtomId_ATOM_VMS_CLIENT_STATS = 10065,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_REMOTE_VIEWS = 10066,
    perfetto_protos_AtomId_ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED = 10067,
    perfetto_protos_AtomId_ATOM_GRAPHICS_STATS = 10068,
    perfetto_protos_AtomId_ATOM_RUNTIME_APP_OP_ACCESS = 10069,
    perfetto_protos_AtomId_ATOM_ION_HEAP_SIZE = 10070,
    perfetto_protos_AtomId_ATOM_PACKAGE_NOTIFICATION_PREFERENCES = 10071,
    perfetto_protos_AtomId_ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES = 10072,
    perfetto_protos_AtomId_ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES = 10073,
    perfetto_protos_AtomId_ATOM_GNSS_STATS = 10074,
    perfetto_protos_AtomId_ATOM_ATTRIBUTED_APP_OPS = 10075,
    perfetto_protos_AtomId_ATOM_VOICE_CALL_SESSION = 10076,
    perfetto_protos_AtomId_ATOM_VOICE_CALL_RAT_USAGE = 10077,
    perfetto_protos_AtomId_ATOM_SIM_SLOT_STATE = 10078,
    perfetto_protos_AtomId_ATOM_SUPPORTED_RADIO_ACCESS_FAMILY = 10079,
    perfetto_protos_AtomId_ATOM_SETTING_SNAPSHOT = 10080,
    perfetto_protos_AtomId_ATOM_BLOB_INFO = 10081,
    perfetto_protos_AtomId_ATOM_DATA_USAGE_BYTES_TRANSFER = 10082,
    perfetto_protos_AtomId_ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED = 10083,
    perfetto_protos_AtomId_ATOM_DND_MODE_RULE = 10084,
    perfetto_protos_AtomId_ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS = 10085,
    perfetto_protos_AtomId_ATOM_INCOMING_SMS = 10086,
    perfetto_protos_AtomId_ATOM_OUTGOING_SMS = 10087,
    perfetto_protos_AtomId_ATOM_CARRIER_ID_TABLE_VERSION = 10088,
    perfetto_protos_AtomId_ATOM_DATA_CALL_SESSION = 10089,
    perfetto_protos_AtomId_ATOM_CELLULAR_SERVICE_STATE = 10090,
    perfetto_protos_AtomId_ATOM_CELLULAR_DATA_SERVICE_SWITCH = 10091,
    perfetto_protos_AtomId_ATOM_SYSTEM_MEMORY = 10092,
    perfetto_protos_AtomId_ATOM_IMS_REGISTRATION_TERMINATION = 10093,
    perfetto_protos_AtomId_ATOM_IMS_REGISTRATION_STATS = 10094,
    perfetto_protos_AtomId_ATOM_CPU_TIME_PER_CLUSTER_FREQ = 10095,
    perfetto_protos_AtomId_ATOM_CPU_CYCLES_PER_UID_CLUSTER = 10096,
    perfetto_protos_AtomId_ATOM_DEVICE_ROTATED_DATA = 10097,
    perfetto_protos_AtomId_ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER = 10098,
    perfetto_protos_AtomId_ATOM_MEDIA_DRM_ACTIVITY_INFO = 10099,
    perfetto_protos_AtomId_ATOM_OEM_MANAGED_BYTES_TRANSFER = 10100,
    perfetto_protos_AtomId_ATOM_GNSS_POWER_STATS = 10101,
    perfetto_protos_AtomId_ATOM_TIME_ZONE_DETECTOR_STATE = 10102,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_STORAGE_STATS = 10103,
    perfetto_protos_AtomId_ATOM_RKP_POOL_STATS = 10104,
    perfetto_protos_AtomId_ATOM_PROCESS_DMABUF_MEMORY = 10105,
    perfetto_protos_AtomId_ATOM_PENDING_ALARM_INFO = 10106,
    perfetto_protos_AtomId_ATOM_USER_LEVEL_HIBERNATED_APPS = 10107,
    perfetto_protos_AtomId_ATOM_LAUNCHER_LAYOUT_SNAPSHOT = 10108,
    perfetto_protos_AtomId_ATOM_GLOBAL_HIBERNATED_APPS = 10109,
    perfetto_protos_AtomId_ATOM_INPUT_EVENT_LATENCY_SKETCH = 10110,
    perfetto_protos_AtomId_ATOM_BATTERY_USAGE_STATS_BEFORE_RESET = 10111,
    perfetto_protos_AtomId_ATOM_BATTERY_USAGE_STATS_SINCE_RESET = 10112,
    perfetto_protos_AtomId_ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL = 10113,
    perfetto_protos_AtomId_ATOM_INSTALLED_INCREMENTAL_PACKAGE = 10114,
    perfetto_protos_AtomId_ATOM_TELEPHONY_NETWORK_REQUESTS = 10115,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_STORAGE_INFO = 10116,
    perfetto_protos_AtomId_ATOM_VMSTAT = 10117,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO = 10118,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO = 10119,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO = 10120,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW = 10121,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO = 10122,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO = 10123,
    perfetto_protos_AtomId_ATOM_RKP_ERROR_STATS = 10124,
    perfetto_protos_AtomId_ATOM_KEYSTORE2_CRASH_STATS = 10125,
    perfetto_protos_AtomId_ATOM_VENDOR_APEX_INFO = 10126,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_SHORTCUT_STATS = 10127,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_FLOATING_MENU_STATS = 10128,
    perfetto_protos_AtomId_ATOM_DATA_USAGE_BYTES_TRANSFER_V2 = 10129,
    perfetto_protos_AtomId_ATOM_MEDIA_CAPABILITIES = 10130,
    perfetto_protos_AtomId_ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY = 10131,
    perfetto_protos_AtomId_ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY = 10132,
    perfetto_protos_AtomId_ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS = 10133,
    perfetto_protos_AtomId_ATOM_RCS_CLIENT_PROVISIONING_STATS = 10134,
    perfetto_protos_AtomId_ATOM_RCS_ACS_PROVISIONING_STATS = 10135,
    perfetto_protos_AtomId_ATOM_SIP_DELEGATE_STATS = 10136,
    perfetto_protos_AtomId_ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS = 10137,
    perfetto_protos_AtomId_ATOM_SIP_MESSAGE_RESPONSE = 10138,
    perfetto_protos_AtomId_ATOM_SIP_TRANSPORT_SESSION = 10139,
    perfetto_protos_AtomId_ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT = 10140,
    perfetto_protos_AtomId_ATOM_IMS_DEDICATED_BEARER_EVENT = 10141,
    perfetto_protos_AtomId_ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS = 10142,
    perfetto_protos_AtomId_ATOM_UCE_EVENT_STATS = 10143,
    perfetto_protos_AtomId_ATOM_PRESENCE_NOTIFY_EVENT = 10144,
    perfetto_protos_AtomId_ATOM_GBA_EVENT = 10145,
    perfetto_protos_AtomId_ATOM_PER_SIM_STATUS = 10146,
    perfetto_protos_AtomId_ATOM_GPU_WORK_PER_UID = 10147,
    perfetto_protos_AtomId_ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE = 10148,
    perfetto_protos_AtomId_ATOM_SIGNED_PARTITION_INFO = 10149,
    perfetto_protos_AtomId_ATOM_PINNED_FILE_SIZES_PER_PACKAGE = 10150,
    perfetto_protos_AtomId_ATOM_PENDING_INTENTS_PER_PACKAGE = 10151,
    perfetto_protos_AtomId_ATOM_USER_INFO = 10152,
    perfetto_protos_AtomId_ATOM_TELEPHONY_NETWORK_REQUESTS_V2 = 10153,
    perfetto_protos_AtomId_ATOM_DEVICE_TELEPHONY_PROPERTIES = 10154,
    perfetto_protos_AtomId_ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS = 10155,
    perfetto_protos_AtomId_ATOM_SAFETY_STATE = 10156,
    perfetto_protos_AtomId_ATOM_INCOMING_MMS = 10157,
    perfetto_protos_AtomId_ATOM_OUTGOING_MMS = 10158,
    perfetto_protos_AtomId_ATOM_MULTI_USER_INFO = 10160,
    perfetto_protos_AtomId_ATOM_NETWORK_BPF_MAP_INFO = 10161,
    perfetto_protos_AtomId_ATOM_OUTGOING_SHORT_CODE_SMS = 10162,
    perfetto_protos_AtomId_ATOM_CONNECTIVITY_STATE_SAMPLE = 10163,
    perfetto_protos_AtomId_ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO = 10164,
    perfetto_protos_AtomId_ATOM_GAME_MODE_INFO = 10165,
    perfetto_protos_AtomId_ATOM_GAME_MODE_CONFIGURATION = 10166,
    perfetto_protos_AtomId_ATOM_GAME_MODE_LISTENER = 10167,
    perfetto_protos_AtomId_ATOM_NETWORK_SLICE_REQUEST_COUNT = 10168,
    perfetto_protos_AtomId_ATOM_WS_TILE_SNAPSHOT = 10169,
    perfetto_protos_AtomId_ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT = 10170,
    perfetto_protos_AtomId_ATOM_PROCESS_STATE = 10171,
    perfetto_protos_AtomId_ATOM_PROCESS_ASSOCIATION = 10172,
    perfetto_protos_AtomId_ATOM_ADPF_SYSTEM_COMPONENT_INFO = 10173,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_MEMORY_USE = 10174,
    perfetto_protos_AtomId_ATOM_HDR_CAPABILITIES = 10175,
    perfetto_protos_AtomId_ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT = 10176,
    perfetto_protos_AtomId_ATOM_ACCESSIBILITY_CHECK_RESULT_REPORTED = 910,
    perfetto_protos_AtomId_ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED = 820,
    perfetto_protos_AtomId_ATOM_THERMAL_STATUS_CALLED = 772,
    perfetto_protos_AtomId_ATOM_THERMAL_HEADROOM_CALLED = 773,
    perfetto_protos_AtomId_ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED = 774,
    perfetto_protos_AtomId_ATOM_ADPF_HINT_SESSION_TID_CLEANUP = 839,
    perfetto_protos_AtomId_ATOM_THERMAL_HEADROOM_THRESHOLDS = 10201,
    perfetto_protos_AtomId_ATOM_ADPF_SESSION_SNAPSHOT = 10218,
    perfetto_protos_AtomId_ATOM_JSSCRIPTENGINE_LATENCY_REPORTED = 483,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_API_CALLED = 435,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED = 436,
    perfetto_protos_AtomId_ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED = 490,
    perfetto_protos_AtomId_ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED = 502,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED = 493,
    perfetto_protos_AtomId_ATOM_BACKGROUND_FETCH_PROCESS_REPORTED = 496,
    perfetto_protos_AtomId_ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED = 497,
    perfetto_protos_AtomId_ATOM_RUN_AD_BIDDING_PROCESS_REPORTED = 498,
    perfetto_protos_AtomId_ATOM_RUN_AD_SCORING_PROCESS_REPORTED = 499,
    perfetto_protos_AtomId_ATOM_RUN_AD_SELECTION_PROCESS_REPORTED = 500,
    perfetto_protos_AtomId_ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED = 501,
    perfetto_protos_AtomId_ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED = 503,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS = 512,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_GET_TOPICS_REPORTED = 535,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED = 536,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED = 537,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED = 598,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED = 599,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS = 640,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ERROR_REPORTED = 662,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED = 663,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION = 673,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION = 674,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_JOBS = 675,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT = 676,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS = 695,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED = 697,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED = 698,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENROLLMENT_MATCHED = 699,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_CONSENT_MIGRATED = 702,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENROLLMENT_FAILED = 714,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION = 756,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED = 765,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED = 766,
    perfetto_protos_AtomId_ATOM_DESTINATION_REGISTERED_BEACONS = 767,
    perfetto_protos_AtomId_ATOM_REPORT_INTERACTION_API_CALLED = 768,
    perfetto_protos_AtomId_ATOM_INTERACTION_REPORTING_TABLE_CLEARED = 769,
    perfetto_protos_AtomId_ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED = 788,
    perfetto_protos_AtomId_ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED = 793,
    perfetto_protos_AtomId_ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED = 794,
    perfetto_protos_AtomId_ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED = 795,
    perfetto_protos_AtomId_ATOM_SIGNATURE_VERIFICATION = 807,
    perfetto_protos_AtomId_ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED = 808,
    perfetto_protos_AtomId_ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED = 809,
    perfetto_protos_AtomId_ATOM_K_ANON_INITIALIZE_STATUS_REPORTED = 810,
    perfetto_protos_AtomId_ATOM_K_ANON_SIGN_STATUS_REPORTED = 811,
    perfetto_protos_AtomId_ATOM_K_ANON_JOIN_STATUS_REPORTED = 812,
    perfetto_protos_AtomId_ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED = 813,
    perfetto_protos_AtomId_ATOM_GET_AD_SELECTION_DATA_API_CALLED = 814,
    perfetto_protos_AtomId_ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED = 815,
    perfetto_protos_AtomId_ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED = 834,
    perfetto_protos_AtomId_ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED = 840,
    perfetto_protos_AtomId_ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED = 841,
    perfetto_protos_AtomId_ATOM_ADSERVICES_SHELL_COMMAND_CALLED = 842,
    perfetto_protos_AtomId_ATOM_UPDATE_SIGNALS_API_CALLED = 843,
    perfetto_protos_AtomId_ATOM_ENCODING_JOB_RUN = 844,
    perfetto_protos_AtomId_ATOM_ENCODING_JS_FETCH = 845,
    perfetto_protos_AtomId_ATOM_ENCODING_JS_EXECUTION = 846,
    perfetto_protos_AtomId_ATOM_PERSIST_AD_SELECTION_RESULT_CALLED = 847,
    perfetto_protos_AtomId_ATOM_SERVER_AUCTION_KEY_FETCH_CALLED = 848,
    perfetto_protos_AtomId_ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED = 849,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION = 864,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP = 865,
    perfetto_protos_AtomId_ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED = 876,
    perfetto_protos_AtomId_ATOM_REPORT_IMPRESSION_API_CALLED = 877,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS = 885,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_COBALT_LOGGER_EVENT_REPORTED = 902,
    perfetto_protos_AtomId_ATOM_AD_SERVICES_COBALT_PERIODIC_JOB_EVENT_REPORTED = 903,
    perfetto_protos_AtomId_ATOM_UPDATE_SIGNALS_PROCESS_REPORTED = 905,
    perfetto_protos_AtomId_ATOM_TOPICS_SCHEDULE_EPOCH_JOB_SETTING_REPORTED = 930,
    perfetto_protos_AtomId_ATOM_AI_WALLPAPERS_BUTTON_PRESSED = 706,
    perfetto_protos_AtomId_ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED = 707,
    perfetto_protos_AtomId_ATOM_AI_WALLPAPERS_TERM_SELECTED = 708,
    perfetto_protos_AtomId_ATOM_AI_WALLPAPERS_WALLPAPER_SET = 709,
    perfetto_protos_AtomId_ATOM_AI_WALLPAPERS_SESSION_SUMMARY = 710,
    perfetto_protos_AtomId_ATOM_APEX_INSTALLATION_REQUESTED = 732,
    perfetto_protos_AtomId_ATOM_APEX_INSTALLATION_STAGED = 733,
    perfetto_protos_AtomId_ATOM_APEX_INSTALLATION_ENDED = 734,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED = 385,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED = 579,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED = 825,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED = 826,
    perfetto_protos_AtomId_ATOM_APP_SEARCH_APPS_INDEXER_STATS_REPORTED = 909,
    perfetto_protos_AtomId_ATOM_ART_DATUM_REPORTED = 332,
    perfetto_protos_AtomId_ATOM_ART_DEVICE_DATUM_REPORTED = 550,
    perfetto_protos_AtomId_ATOM_ART_DATUM_DELTA_REPORTED = 565,
    perfetto_protos_AtomId_ATOM_ART_DEX2OAT_REPORTED = 929,
    perfetto_protos_AtomId_ATOM_ART_DEVICE_STATUS = 10205,
    perfetto_protos_AtomId_ATOM_BACKGROUND_DEXOPT_JOB_ENDED = 467,
    perfetto_protos_AtomId_ATOM_PREREBOOT_DEXOPT_JOB_ENDED = 883,
    perfetto_protos_AtomId_ATOM_ODREFRESH_REPORTED = 366,
    perfetto_protos_AtomId_ATOM_ODSIGN_REPORTED = 548,
    perfetto_protos_AtomId_ATOM_AUTOFILL_UI_EVENT_REPORTED = 603,
    perfetto_protos_AtomId_ATOM_AUTOFILL_FILL_REQUEST_REPORTED = 604,
    perfetto_protos_AtomId_ATOM_AUTOFILL_FILL_RESPONSE_REPORTED = 605,
    perfetto_protos_AtomId_ATOM_AUTOFILL_SAVE_EVENT_REPORTED = 606,
    perfetto_protos_AtomId_ATOM_AUTOFILL_SESSION_COMMITTED = 607,
    perfetto_protos_AtomId_ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED = 659,
    perfetto_protos_AtomId_ATOM_CAR_RECENTS_EVENT_REPORTED = 770,
    perfetto_protos_AtomId_ATOM_CAR_CALM_MODE_EVENT_REPORTED = 797,
    perfetto_protos_AtomId_ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED = 852,
    perfetto_protos_AtomId_ATOM_PLUGIN_INITIALIZED = 655,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED = 613,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION = 614,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION = 615,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LE_SESSION_CONNECTED = 656,
    perfetto_protos_AtomId_ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED = 666,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED = 696,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED = 781,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED = 782,
    perfetto_protos_AtomId_ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID = 862,
    perfetto_protos_AtomId_ATOM_LE_APP_SCAN_STATE_CHANGED = 870,
    perfetto_protos_AtomId_ATOM_LE_RADIO_SCAN_STOPPED = 871,
    perfetto_protos_AtomId_ATOM_LE_SCAN_RESULT_RECEIVED = 872,
    perfetto_protos_AtomId_ATOM_LE_SCAN_ABUSED = 873,
    perfetto_protos_AtomId_ATOM_LE_ADV_STATE_CHANGED = 874,
    perfetto_protos_AtomId_ATOM_LE_ADV_ERROR_REPORTED = 875,
    perfetto_protos_AtomId_ATOM_A2DP_SESSION_REPORTED = 904,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED = 916,
    perfetto_protos_AtomId_ATOM_BROADCAST_AUDIO_SESSION_REPORTED = 927,
    perfetto_protos_AtomId_ATOM_BROADCAST_AUDIO_SYNC_REPORTED = 928,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE = 982,
    perfetto_protos_AtomId_ATOM_BLUETOOTH_LE_CONNECTION = 988,
    perfetto_protos_AtomId_ATOM_BROADCAST_SENT = 922,
    perfetto_protos_AtomId_ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT = 900,
    perfetto_protos_AtomId_ATOM_CERTIFICATE_TRANSPARENCY_LOG_LIST_STATE_CHANGED = 934,
    perfetto_protos_AtomId_ATOM_CERTIFICATE_TRANSPARENCY_LOG_LIST_UPDATE_FAILED = 972,
    perfetto_protos_AtomId_ATOM_DAILY_KEEPALIVE_INFO_REPORTED = 650,
    perfetto_protos_AtomId_ATOM_NETWORK_REQUEST_STATE_CHANGED = 779,
    perfetto_protos_AtomId_ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED = 925,
    perfetto_protos_AtomId_ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED = 783,
    perfetto_protos_AtomId_ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED = 979,
    perfetto_protos_AtomId_ATOM_APF_SESSION_INFO_REPORTED = 777,
    perfetto_protos_AtomId_ATOM_IP_CLIENT_RA_INFO_REPORTED = 778,
    perfetto_protos_AtomId_ATOM_VPN_CONNECTION_STATE_CHANGED = 850,
    perfetto_protos_AtomId_ATOM_VPN_CONNECTION_REPORTED = 851,
    perfetto_protos_AtomId_ATOM_CPU_POLICY = 10199,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_API_CALLED = 585,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED = 651,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED = 652,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED = 653,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED = 667,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED = 668,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_GET_REPORTED = 669,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED = 670,
    perfetto_protos_AtomId_ATOM_CREDENTIAL_MANAGER_APIV2_CALLED = 671,
    perfetto_protos_AtomId_ATOM_CRONET_ENGINE_CREATED = 703,
    perfetto_protos_AtomId_ATOM_CRONET_TRAFFIC_REPORTED = 704,
    perfetto_protos_AtomId_ATOM_CRONET_ENGINE_BUILDER_INITIALIZED = 762,
    perfetto_protos_AtomId_ATOM_CRONET_HTTP_FLAGS_INITIALIZED = 763,
    perfetto_protos_AtomId_ATOM_CRONET_INITIALIZED = 764,
    perfetto_protos_AtomId_ATOM_DESKTOP_MODE_UI_CHANGED = 818,
    perfetto_protos_AtomId_ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE = 819,
    perfetto_protos_AtomId_ATOM_DESKTOP_MODE_TASK_SIZE_UPDATED = 935,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED = 726,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED = 727,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED = 728,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED = 789,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED = 790,
    perfetto_protos_AtomId_ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED = 791,
    perfetto_protos_AtomId_ATOM_DEVICE_POLICY_MANAGEMENT_MODE = 10216,
    perfetto_protos_AtomId_ATOM_DEVICE_POLICY_STATE = 10217,
    perfetto_protos_AtomId_ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED = 792,
    perfetto_protos_AtomId_ATOM_EXTERNAL_DISPLAY_STATE_CHANGED = 806,
    perfetto_protos_AtomId_ATOM_DND_STATE_CHANGED = 657,
    perfetto_protos_AtomId_ATOM_DREAM_SETTING_CHANGED = 705,
    perfetto_protos_AtomId_ATOM_DREAM_SETTING_SNAPSHOT = 10192,
    perfetto_protos_AtomId_ATOM_EXPRESS_EVENT_REPORTED = 528,
    perfetto_protos_AtomId_ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED = 593,
    perfetto_protos_AtomId_ATOM_EXPRESS_UID_EVENT_REPORTED = 644,
    perfetto_protos_AtomId_ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED = 658,
    perfetto_protos_AtomId_ATOM_FEDERATED_COMPUTE_API_CALLED = 712,
    perfetto_protos_AtomId_ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED = 771,
    perfetto_protos_AtomId_ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED = 838,
    perfetto_protos_AtomId_ATOM_FULL_SCREEN_INTENT_LAUNCHED = 631,
    perfetto_protos_AtomId_ATOM_BAL_ALLOWED = 632,
    perfetto_protos_AtomId_ATOM_IN_TASK_ACTIVITY_STARTED = 685,
    perfetto_protos_AtomId_ATOM_DEVICE_ORIENTATION_CHANGED = 906,
    perfetto_protos_AtomId_ATOM_CACHED_APPS_HIGH_WATERMARK = 10189,
    perfetto_protos_AtomId_ATOM_STYLUS_PREDICTION_METRICS_REPORTED = 718,
    perfetto_protos_AtomId_ATOM_USER_RISK_EVENT_REPORTED = 725,
    perfetto_protos_AtomId_ATOM_MEDIA_PROJECTION_STATE_CHANGED = 729,
    perfetto_protos_AtomId_ATOM_MEDIA_PROJECTION_TARGET_CHANGED = 730,
    perfetto_protos_AtomId_ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED = 853,
    perfetto_protos_AtomId_ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG = 10200,
    perfetto_protos_AtomId_ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE = 10204,
    perfetto_protos_AtomId_ATOM_BIOMETRIC_FRR_NOTIFICATION = 817,
    perfetto_protos_AtomId_ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION = 830,
    perfetto_protos_AtomId_ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION = 831,
    perfetto_protos_AtomId_ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED = 832,
    perfetto_protos_AtomId_ATOM_SENSITIVE_NOTIFICATION_REDACTION = 833,
    perfetto_protos_AtomId_ATOM_SENSITIVE_CONTENT_APP_PROTECTION = 835,
    perfetto_protos_AtomId_ATOM_APP_RESTRICTION_STATE_CHANGED = 866,
    perfetto_protos_AtomId_ATOM_BATTERY_USAGE_STATS_PER_UID = 10209,
    perfetto_protos_AtomId_ATOM_POSTGC_MEMORY_SNAPSHOT = 924,
    perfetto_protos_AtomId_ATOM_POWER_SAVE_TEMP_ALLOWLIST_CHANGED = 926,
    perfetto_protos_AtomId_ATOM_APP_OP_ACCESS_TRACKED = 931,
    perfetto_protos_AtomId_ATOM_CONTENT_OR_FILE_URI_EVENT_REPORTED = 933,
    perfetto_protos_AtomId_ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED = 584,
    perfetto_protos_AtomId_ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED = 816,
    perfetto_protos_AtomId_ATOM_BATTERY_HEALTH = 10220,
    perfetto_protos_AtomId_ATOM_HDMI_EARC_STATUS_REPORTED = 701,
    perfetto_protos_AtomId_ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED = 724,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_API_CALLED = 616,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_USAGE_STATS = 617,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_STORAGE_STATS = 618,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_API_INVOKED = 643,
    perfetto_protos_AtomId_ATOM_EXERCISE_ROUTE_API_CALLED = 654,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_EXPORT_INVOKED = 907,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_IMPORT_INVOKED = 918,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_EXPORT_IMPORT_STATS_REPORTED = 919,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_UI_IMPRESSION = 623,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_UI_INTERACTION = 624,
    perfetto_protos_AtomId_ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED = 625,
    perfetto_protos_AtomId_ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED = 761,
    perfetto_protos_AtomId_ATOM_IKE_SESSION_TERMINATED = 678,
    perfetto_protos_AtomId_ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED = 760,
    perfetto_protos_AtomId_ATOM_NEGOTIATED_SECURITY_ASSOCIATION = 821,
    perfetto_protos_AtomId_ATOM_KEYBOARD_CONFIGURED = 682,
    perfetto_protos_AtomId_ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED = 683,
    perfetto_protos_AtomId_ATOM_INPUTDEVICE_USAGE_REPORTED = 686,
    perfetto_protos_AtomId_ATOM_INPUT_EVENT_LATENCY_REPORTED = 932,
    perfetto_protos_AtomId_ATOM_TOUCHPAD_USAGE = 10191,
    perfetto_protos_AtomId_ATOM_KERNEL_OOM_KILL_OCCURRED = 754,
    perfetto_protos_AtomId_ATOM_EMERGENCY_STATE_CHANGED = 633,
    perfetto_protos_AtomId_ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED = 868,
    perfetto_protos_AtomId_ATOM_POPULATION_DENSITY_PROVIDER_LOADING_REPORTED = 1002,
    perfetto_protos_AtomId_ATOM_DENSITY_BASED_COARSE_LOCATIONS_USAGE_REPORTED = 1003,
    perfetto_protos_AtomId_ATOM_DENSITY_BASED_COARSE_LOCATIONS_PROVIDER_QUERY_REPORTED = 1004,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED = 600,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_STARTED = 641,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_STOPPED = 642,
    perfetto_protos_AtomId_ATOM_MEDIA_CODEC_RENDERED = 684,
    perfetto_protos_AtomId_ATOM_MEDIA_EDITING_ENDED_REPORTED = 798,
    perfetto_protos_AtomId_ATOM_MTE_STATE = 10181,
    perfetto_protos_AtomId_ATOM_MICROXR_DEVICE_BOOT_COMPLETE_REPORTED = 901,
    perfetto_protos_AtomId_ATOM_NFC_OBSERVE_MODE_STATE_CHANGED = 855,
    perfetto_protos_AtomId_ATOM_NFC_FIELD_CHANGED = 856,
    perfetto_protos_AtomId_ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED = 857,
    perfetto_protos_AtomId_ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED = 858,
    perfetto_protos_AtomId_ATOM_ONDEVICEPERSONALIZATION_API_CALLED = 711,
    perfetto_protos_AtomId_ATOM_COMPONENT_STATE_CHANGED_REPORTED = 863,
    perfetto_protos_AtomId_ATOM_PDF_LOAD_REPORTED = 859,
    perfetto_protos_AtomId_ATOM_PDF_API_USAGE_REPORTED = 860,
    perfetto_protos_AtomId_ATOM_PDF_SEARCH_REPORTED = 861,
    perfetto_protos_AtomId_ATOM_PRESSURE_STALL_INFORMATION = 10229,
    perfetto_protos_AtomId_ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED = 645,
    perfetto_protos_AtomId_ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED = 646,
    perfetto_protos_AtomId_ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION = 647,
    perfetto_protos_AtomId_ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED = 648,
    perfetto_protos_AtomId_ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED = 649,
    perfetto_protos_AtomId_ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED = 827,
    perfetto_protos_AtomId_ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED = 828,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_SESSION_INFO_REPORTED = 886,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_API_INFO_REPORTED = 887,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_UI_EVENT_LOGGED = 888,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED = 889,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED = 890,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED = 891,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED = 892,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED = 893,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_PAGE_INFO_LOGGED = 894,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED = 895,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED = 896,
    perfetto_protos_AtomId_ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED = 897,
    perfetto_protos_AtomId_ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED = 898,
    perfetto_protos_AtomId_ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED = 899,
    perfetto_protos_AtomId_ATOM_ATOM_9999 = 9999,
    perfetto_protos_AtomId_ATOM_ATOM_99999 = 99999,
    perfetto_protos_AtomId_ATOM_SCREEN_OFF_REPORTED = 776,
    perfetto_protos_AtomId_ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED = 836,
    perfetto_protos_AtomId_ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED = 837,
    perfetto_protos_AtomId_ATOM_SCREEN_DIM_REPORTED = 867,
    perfetto_protos_AtomId_ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED = 784,
    perfetto_protos_AtomId_ATOM_BACKUP_SETUP_STATUS_REPORTED = 785,
    perfetto_protos_AtomId_ATOM_RANGING_SESSION_CONFIGURED = 993,
    perfetto_protos_AtomId_ATOM_RANGING_SESSION_STARTED = 994,
    perfetto_protos_AtomId_ATOM_RANGING_SESSION_CLOSED = 995,
    perfetto_protos_AtomId_ATOM_RANGING_TECHNOLOGY_STARTED = 996,
    perfetto_protos_AtomId_ATOM_RANGING_TECHNOLOGY_STOPPED = 997,
    perfetto_protos_AtomId_ATOM_RKPD_POOL_STATS = 664,
    perfetto_protos_AtomId_ATOM_RKPD_CLIENT_OPERATION = 665,
    perfetto_protos_AtomId_ATOM_SANDBOX_API_CALLED = 488,
    perfetto_protos_AtomId_ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED = 735,
    perfetto_protos_AtomId_ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION = 796,
    perfetto_protos_AtomId_ATOM_SANDBOX_SDK_STORAGE = 10159,
    perfetto_protos_AtomId_ATOM_SELINUX_AUDIT_LOG = 799,
    perfetto_protos_AtomId_ATOM_SETTINGS_SPA_REPORTED = 622,
    perfetto_protos_AtomId_ATOM_TEST_EXTENSION_ATOM_REPORTED = 660,
    perfetto_protos_AtomId_ATOM_TEST_RESTRICTED_ATOM_REPORTED = 672,
    perfetto_protos_AtomId_ATOM_STATS_SOCKET_LOSS_REPORTED = 752,
    perfetto_protos_AtomId_ATOM_LOCKSCREEN_SHORTCUT_SELECTED = 611,
    perfetto_protos_AtomId_ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED = 612,
    perfetto_protos_AtomId_ATOM_LAUNCHER_IMPRESSION_EVENT_V2 = 716,
    perfetto_protos_AtomId_ATOM_DISPLAY_SWITCH_LATENCY_TRACKED = 753,
    perfetto_protos_AtomId_ATOM_NOTIFICATION_LISTENER_SERVICE = 829,
    perfetto_protos_AtomId_ATOM_NAV_HANDLE_TOUCH_POINTS = 869,
    perfetto_protos_AtomId_ATOM_COMMUNAL_HUB_WIDGET_EVENT_REPORTED = 908,
    perfetto_protos_AtomId_ATOM_COMMUNAL_HUB_SNAPSHOT = 10226,
    perfetto_protos_AtomId_ATOM_EMERGENCY_NUMBER_DIALED = 637,
    perfetto_protos_AtomId_ATOM_CALL_STATS = 10221,
    perfetto_protos_AtomId_ATOM_CALL_AUDIO_ROUTE_STATS = 10222,
    perfetto_protos_AtomId_ATOM_TELECOM_API_STATS = 10223,
    perfetto_protos_AtomId_ATOM_TELECOM_ERROR_STATS = 10224,
    perfetto_protos_AtomId_ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED = 713,
    perfetto_protos_AtomId_ATOM_EMERGENCY_NUMBERS_INFO = 10180,
    perfetto_protos_AtomId_ATOM_DATA_NETWORK_VALIDATION = 10207,
    perfetto_protos_AtomId_ATOM_DATA_RAT_STATE_CHANGED = 854,
    perfetto_protos_AtomId_ATOM_CONNECTED_CHANNEL_CHANGED = 882,
    perfetto_protos_AtomId_ATOM_IWLAN_UNDERLYING_NETWORK_VALIDATION_RESULT_REPORTED = 923,
    perfetto_protos_AtomId_ATOM_QUALIFIED_RAT_LIST_CHANGED = 634,
    perfetto_protos_AtomId_ATOM_QNS_IMS_CALL_DROP_STATS = 635,
    perfetto_protos_AtomId_ATOM_QNS_FALLBACK_RESTRICTION_CHANGED = 636,
    perfetto_protos_AtomId_ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO = 10177,
    perfetto_protos_AtomId_ATOM_QNS_HANDOVER_TIME_MILLIS = 10178,
    perfetto_protos_AtomId_ATOM_QNS_HANDOVER_PINGPONG = 10179,
    perfetto_protos_AtomId_ATOM_SATELLITE_CONTROLLER = 10182,
    perfetto_protos_AtomId_ATOM_SATELLITE_SESSION = 10183,
    perfetto_protos_AtomId_ATOM_SATELLITE_INCOMING_DATAGRAM = 10184,
    perfetto_protos_AtomId_ATOM_SATELLITE_OUTGOING_DATAGRAM = 10185,
    perfetto_protos_AtomId_ATOM_SATELLITE_PROVISION = 10186,
    perfetto_protos_AtomId_ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER = 10187,
    perfetto_protos_AtomId_ATOM_CARRIER_ROAMING_SATELLITE_SESSION = 10211,
    perfetto_protos_AtomId_ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS = 10212,
    perfetto_protos_AtomId_ATOM_CONTROLLER_STATS_PER_PACKAGE = 10213,
    perfetto_protos_AtomId_ATOM_SATELLITE_ENTITLEMENT = 10214,
    perfetto_protos_AtomId_ATOM_SATELLITE_CONFIG_UPDATER = 10215,
    perfetto_protos_AtomId_ATOM_SATELLITE_ACCESS_CONTROLLER = 10219,
    perfetto_protos_AtomId_ATOM_CELLULAR_IDENTIFIER_DISCLOSED = 800,
    perfetto_protos_AtomId_ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED = 738,
    perfetto_protos_AtomId_ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED = 739,
    perfetto_protos_AtomId_ATOM_THREADNETWORK_DEVICE_INFO_REPORTED = 740,
    perfetto_protos_AtomId_ATOM_BOOT_INTEGRITY_INFO_REPORTED = 775,
    perfetto_protos_AtomId_ATOM_TV_LOW_POWER_STANDBY_POLICY = 679,
    perfetto_protos_AtomId_ATOM_EXTERNAL_TV_INPUT_EVENT = 717,
    perfetto_protos_AtomId_ATOM_TEST_UPROBESTATS_ATOM_REPORTED = 915,
    perfetto_protos_AtomId_ATOM_UWB_ACTIVITY_INFO = 10188,
    perfetto_protos_AtomId_ATOM_MEDIATOR_UPDATED = 721,
    perfetto_protos_AtomId_ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER = 10196,
    perfetto_protos_AtomId_ATOM_SYSPROXY_CONNECTION_UPDATED = 786,
    perfetto_protos_AtomId_ATOM_WEAR_COMPANION_CONNECTION_STATE = 921,
    perfetto_protos_AtomId_ATOM_MEDIA_ACTION_REPORTED = 608,
    perfetto_protos_AtomId_ATOM_MEDIA_CONTROLS_LAUNCHED = 609,
    perfetto_protos_AtomId_ATOM_MEDIA_SESSION_STATE_CHANGED = 677,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY = 757,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE = 758,
    perfetto_protos_AtomId_ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT = 759,
    perfetto_protos_AtomId_ATOM_WEAR_MODE_STATE_CHANGED = 715,
    perfetto_protos_AtomId_ATOM_RENDERER_INITIALIZED = 736,
    perfetto_protos_AtomId_ATOM_SCHEMA_VERSION_RECEIVED = 737,
    perfetto_protos_AtomId_ATOM_LAYOUT_INSPECTED = 741,
    perfetto_protos_AtomId_ATOM_LAYOUT_EXPRESSION_INSPECTED = 742,
    perfetto_protos_AtomId_ATOM_LAYOUT_ANIMATIONS_INSPECTED = 743,
    perfetto_protos_AtomId_ATOM_MATERIAL_COMPONENTS_INSPECTED = 744,
    perfetto_protos_AtomId_ATOM_TILE_REQUESTED = 745,
    perfetto_protos_AtomId_ATOM_STATE_RESPONSE_RECEIVED = 746,
    perfetto_protos_AtomId_ATOM_TILE_RESPONSE_RECEIVED = 747,
    perfetto_protos_AtomId_ATOM_INFLATION_FINISHED = 748,
    perfetto_protos_AtomId_ATOM_INFLATION_FAILED = 749,
    perfetto_protos_AtomId_ATOM_IGNORED_INFLATION_FAILURES_REPORTED = 750,
    perfetto_protos_AtomId_ATOM_DRAWABLE_RENDERED = 751,
    perfetto_protos_AtomId_ATOM_WEAR_TIME_SYNC_REQUESTED = 911,
    perfetto_protos_AtomId_ATOM_WEAR_TIME_UPDATE_STARTED = 912,
    perfetto_protos_AtomId_ATOM_WEAR_TIME_SYNC_ATTEMPT_COMPLETED = 913,
    perfetto_protos_AtomId_ATOM_WEAR_TIME_CHANGED = 914,
    perfetto_protos_AtomId_ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED = 619,
    perfetto_protos_AtomId_ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED = 620,
    perfetto_protos_AtomId_ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED = 621,
    perfetto_protos_AtomId_ATOM_WS_WEAR_TIME_SESSION = 610,
    perfetto_protos_AtomId_ATOM_WS_INCOMING_CALL_ACTION_REPORTED = 626,
    perfetto_protos_AtomId_ATOM_WS_CALL_DISCONNECTION_REPORTED = 627,
    perfetto_protos_AtomId_ATOM_WS_CALL_DURATION_REPORTED = 628,
    perfetto_protos_AtomId_ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED = 629,
    perfetto_protos_AtomId_ATOM_WS_CALL_INTERACTION_REPORTED = 630,
    perfetto_protos_AtomId_ATOM_WS_ON_BODY_STATE_CHANGED = 787,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED = 802,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED = 803,
    perfetto_protos_AtomId_ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED = 804,
    perfetto_protos_AtomId_ATOM_WS_REMOTE_EVENT_USAGE_REPORTED = 920,
    perfetto_protos_AtomId_ATOM_WS_BUGREPORT_REQUESTED = 936,
    perfetto_protos_AtomId_ATOM_WS_BUGREPORT_TRIGGERED = 937,
    perfetto_protos_AtomId_ATOM_WS_BUGREPORT_FINISHED = 938,
    perfetto_protos_AtomId_ATOM_WS_BUGREPORT_RESULT_RECEIVED = 939,
    perfetto_protos_AtomId_ATOM_WS_STANDALONE_MODE_SNAPSHOT = 10197,
    perfetto_protos_AtomId_ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT = 10206,
    perfetto_protos_AtomId_ATOM_WS_PHOTOS_WATCH_FACE_FEATURE_SNAPSHOT = 10225,
    perfetto_protos_AtomId_ATOM_WS_WATCH_FACE_CUSTOMIZATION_SNAPSHOT = 10227,
    perfetto_protos_AtomId_ATOM_WEAR_POWER_MENU_OPENED = 731,
    perfetto_protos_AtomId_ATOM_WEAR_ASSISTANT_OPENED = 755,
    perfetto_protos_AtomId_ATOM_FIRST_OVERLAY_STATE_CHANGED = 917,
    perfetto_protos_AtomId_ATOM_WIFI_AWARE_NDP_REPORTED = 638,
    perfetto_protos_AtomId_ATOM_WIFI_AWARE_ATTACH_REPORTED = 639,
    perfetto_protos_AtomId_ATOM_WIFI_SELF_RECOVERY_TRIGGERED = 661,
    perfetto_protos_AtomId_ATOM_SOFT_AP_STARTED = 680,
    perfetto_protos_AtomId_ATOM_SOFT_AP_STOPPED = 681,
    perfetto_protos_AtomId_ATOM_WIFI_LOCK_RELEASED = 687,
    perfetto_protos_AtomId_ATOM_WIFI_LOCK_DEACTIVATED = 688,
    perfetto_protos_AtomId_ATOM_WIFI_CONFIG_SAVED = 689,
    perfetto_protos_AtomId_ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED = 690,
    perfetto_protos_AtomId_ATOM_WIFI_AWARE_HAL_API_CALLED = 691,
    perfetto_protos_AtomId_ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED = 692,
    perfetto_protos_AtomId_ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED = 693,
    perfetto_protos_AtomId_ATOM_WIFI_THREAD_TASK_EXECUTED = 694,
    perfetto_protos_AtomId_ATOM_WIFI_STATE_CHANGED = 700,
    perfetto_protos_AtomId_ATOM_PNO_SCAN_STARTED = 719,
    perfetto_protos_AtomId_ATOM_PNO_SCAN_STOPPED = 720,
    perfetto_protos_AtomId_ATOM_WIFI_IS_UNUSABLE_REPORTED = 722,
    perfetto_protos_AtomId_ATOM_WIFI_AP_CAPABILITIES_REPORTED = 723,
    perfetto_protos_AtomId_ATOM_SOFT_AP_STATE_CHANGED = 805,
    perfetto_protos_AtomId_ATOM_SCORER_PREDICTION_RESULT_REPORTED = 884,
    perfetto_protos_AtomId_ATOM_WIFI_AWARE_CAPABILITIES = 10190,
    perfetto_protos_AtomId_ATOM_WIFI_MODULE_INFO = 10193,
    perfetto_protos_AtomId_ATOM_WIFI_SETTING_INFO = 10194,
    perfetto_protos_AtomId_ATOM_WIFI_COMPLEX_SETTING_INFO = 10195,
    perfetto_protos_AtomId_ATOM_WIFI_CONFIGURED_NETWORK_INFO = 10198
} perfetto_protos_AtomId;

/* Counter definitions for Linux's /proc/meminfo. */
typedef enum _perfetto_protos_MeminfoCounters {
    perfetto_protos_MeminfoCounters_MEMINFO_UNSPECIFIED = 0,
    perfetto_protos_MeminfoCounters_MEMINFO_MEM_TOTAL = 1,
    perfetto_protos_MeminfoCounters_MEMINFO_MEM_FREE = 2,
    perfetto_protos_MeminfoCounters_MEMINFO_MEM_AVAILABLE = 3,
    perfetto_protos_MeminfoCounters_MEMINFO_BUFFERS = 4,
    perfetto_protos_MeminfoCounters_MEMINFO_CACHED = 5,
    perfetto_protos_MeminfoCounters_MEMINFO_SWAP_CACHED = 6,
    perfetto_protos_MeminfoCounters_MEMINFO_ACTIVE = 7,
    perfetto_protos_MeminfoCounters_MEMINFO_INACTIVE = 8,
    perfetto_protos_MeminfoCounters_MEMINFO_ACTIVE_ANON = 9,
    perfetto_protos_MeminfoCounters_MEMINFO_INACTIVE_ANON = 10,
    perfetto_protos_MeminfoCounters_MEMINFO_ACTIVE_FILE = 11,
    perfetto_protos_MeminfoCounters_MEMINFO_INACTIVE_FILE = 12,
    perfetto_protos_MeminfoCounters_MEMINFO_UNEVICTABLE = 13,
    perfetto_protos_MeminfoCounters_MEMINFO_MLOCKED = 14,
    perfetto_protos_MeminfoCounters_MEMINFO_SWAP_TOTAL = 15,
    perfetto_protos_MeminfoCounters_MEMINFO_SWAP_FREE = 16,
    perfetto_protos_MeminfoCounters_MEMINFO_DIRTY = 17,
    perfetto_protos_MeminfoCounters_MEMINFO_WRITEBACK = 18,
    perfetto_protos_MeminfoCounters_MEMINFO_ANON_PAGES = 19,
    perfetto_protos_MeminfoCounters_MEMINFO_MAPPED = 20,
    perfetto_protos_MeminfoCounters_MEMINFO_SHMEM = 21,
    perfetto_protos_MeminfoCounters_MEMINFO_SLAB = 22,
    perfetto_protos_MeminfoCounters_MEMINFO_SLAB_RECLAIMABLE = 23,
    perfetto_protos_MeminfoCounters_MEMINFO_SLAB_UNRECLAIMABLE = 24,
    perfetto_protos_MeminfoCounters_MEMINFO_KERNEL_STACK = 25,
    perfetto_protos_MeminfoCounters_MEMINFO_PAGE_TABLES = 26,
    perfetto_protos_MeminfoCounters_MEMINFO_COMMIT_LIMIT = 27,
    perfetto_protos_MeminfoCounters_MEMINFO_COMMITED_AS = 28,
    perfetto_protos_MeminfoCounters_MEMINFO_VMALLOC_TOTAL = 29,
    perfetto_protos_MeminfoCounters_MEMINFO_VMALLOC_USED = 30,
    perfetto_protos_MeminfoCounters_MEMINFO_VMALLOC_CHUNK = 31,
    perfetto_protos_MeminfoCounters_MEMINFO_CMA_TOTAL = 32,
    perfetto_protos_MeminfoCounters_MEMINFO_CMA_FREE = 33,
    perfetto_protos_MeminfoCounters_MEMINFO_GPU = 34,
    perfetto_protos_MeminfoCounters_MEMINFO_ZRAM = 35,
    perfetto_protos_MeminfoCounters_MEMINFO_MISC = 36,
    perfetto_protos_MeminfoCounters_MEMINFO_ION_HEAP = 37,
    perfetto_protos_MeminfoCounters_MEMINFO_ION_HEAP_POOL = 38
} perfetto_protos_MeminfoCounters;

/* Counter definitions for Linux's /proc/vmstat. */
typedef enum _perfetto_protos_VmstatCounters {
    perfetto_protos_VmstatCounters_VMSTAT_UNSPECIFIED = 0,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FREE_PAGES = 1,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ALLOC_BATCH = 2,
    perfetto_protos_VmstatCounters_VMSTAT_NR_INACTIVE_ANON = 3,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ACTIVE_ANON = 4,
    perfetto_protos_VmstatCounters_VMSTAT_NR_INACTIVE_FILE = 5,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ACTIVE_FILE = 6,
    perfetto_protos_VmstatCounters_VMSTAT_NR_UNEVICTABLE = 7,
    perfetto_protos_VmstatCounters_VMSTAT_NR_MLOCK = 8,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ANON_PAGES = 9,
    perfetto_protos_VmstatCounters_VMSTAT_NR_MAPPED = 10,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FILE_PAGES = 11,
    perfetto_protos_VmstatCounters_VMSTAT_NR_DIRTY = 12,
    perfetto_protos_VmstatCounters_VMSTAT_NR_WRITEBACK = 13,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SLAB_RECLAIMABLE = 14,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SLAB_UNRECLAIMABLE = 15,
    perfetto_protos_VmstatCounters_VMSTAT_NR_PAGE_TABLE_PAGES = 16,
    perfetto_protos_VmstatCounters_VMSTAT_NR_KERNEL_STACK = 17,
    perfetto_protos_VmstatCounters_VMSTAT_NR_OVERHEAD = 18,
    perfetto_protos_VmstatCounters_VMSTAT_NR_UNSTABLE = 19,
    perfetto_protos_VmstatCounters_VMSTAT_NR_BOUNCE = 20,
    perfetto_protos_VmstatCounters_VMSTAT_NR_VMSCAN_WRITE = 21,
    perfetto_protos_VmstatCounters_VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM = 22,
    perfetto_protos_VmstatCounters_VMSTAT_NR_WRITEBACK_TEMP = 23,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ISOLATED_ANON = 24,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ISOLATED_FILE = 25,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SHMEM = 26,
    perfetto_protos_VmstatCounters_VMSTAT_NR_DIRTIED = 27,
    perfetto_protos_VmstatCounters_VMSTAT_NR_WRITTEN = 28,
    perfetto_protos_VmstatCounters_VMSTAT_NR_PAGES_SCANNED = 29,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_REFAULT = 30,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_ACTIVATE = 31,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_NODERECLAIM = 32,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES = 33,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FREE_CMA = 34,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SWAPCACHE = 35,
    perfetto_protos_VmstatCounters_VMSTAT_NR_DIRTY_THRESHOLD = 36,
    perfetto_protos_VmstatCounters_VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD = 37,
    perfetto_protos_VmstatCounters_VMSTAT_PGPGIN = 38,
    perfetto_protos_VmstatCounters_VMSTAT_PGPGOUT = 39,
    perfetto_protos_VmstatCounters_VMSTAT_PGPGOUTCLEAN = 40,
    perfetto_protos_VmstatCounters_VMSTAT_PSWPIN = 41,
    perfetto_protos_VmstatCounters_VMSTAT_PSWPOUT = 42,
    perfetto_protos_VmstatCounters_VMSTAT_PGALLOC_DMA = 43,
    perfetto_protos_VmstatCounters_VMSTAT_PGALLOC_NORMAL = 44,
    perfetto_protos_VmstatCounters_VMSTAT_PGALLOC_MOVABLE = 45,
    perfetto_protos_VmstatCounters_VMSTAT_PGFREE = 46,
    perfetto_protos_VmstatCounters_VMSTAT_PGACTIVATE = 47,
    perfetto_protos_VmstatCounters_VMSTAT_PGDEACTIVATE = 48,
    perfetto_protos_VmstatCounters_VMSTAT_PGFAULT = 49,
    perfetto_protos_VmstatCounters_VMSTAT_PGMAJFAULT = 50,
    perfetto_protos_VmstatCounters_VMSTAT_PGREFILL_DMA = 51,
    perfetto_protos_VmstatCounters_VMSTAT_PGREFILL_NORMAL = 52,
    perfetto_protos_VmstatCounters_VMSTAT_PGREFILL_MOVABLE = 53,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_DMA = 54,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_NORMAL = 55,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_MOVABLE = 56,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_DIRECT_DMA = 57,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_DIRECT_NORMAL = 58,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_DIRECT_MOVABLE = 59,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_KSWAPD_DMA = 60,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_KSWAPD_NORMAL = 61,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_KSWAPD_MOVABLE = 62,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_DIRECT_DMA = 63,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_DIRECT_NORMAL = 64,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_DIRECT_MOVABLE = 65,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_DIRECT_THROTTLE = 66,
    perfetto_protos_VmstatCounters_VMSTAT_PGINODESTEAL = 67,
    perfetto_protos_VmstatCounters_VMSTAT_SLABS_SCANNED = 68,
    perfetto_protos_VmstatCounters_VMSTAT_KSWAPD_INODESTEAL = 69,
    perfetto_protos_VmstatCounters_VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY = 70,
    perfetto_protos_VmstatCounters_VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY = 71,
    perfetto_protos_VmstatCounters_VMSTAT_PAGEOUTRUN = 72,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL = 73,
    perfetto_protos_VmstatCounters_VMSTAT_PGROTATED = 74,
    perfetto_protos_VmstatCounters_VMSTAT_DROP_PAGECACHE = 75,
    perfetto_protos_VmstatCounters_VMSTAT_DROP_SLAB = 76,
    perfetto_protos_VmstatCounters_VMSTAT_PGMIGRATE_SUCCESS = 77,
    perfetto_protos_VmstatCounters_VMSTAT_PGMIGRATE_FAIL = 78,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_MIGRATE_SCANNED = 79,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_FREE_SCANNED = 80,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_ISOLATED = 81,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_STALL = 82,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_FAIL = 83,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_SUCCESS = 84,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_DAEMON_WAKE = 85,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_CULLED = 86,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_SCANNED = 87,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_RESCUED = 88,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_MLOCKED = 89,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_MUNLOCKED = 90,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_CLEARED = 91,
    perfetto_protos_VmstatCounters_VMSTAT_UNEVICTABLE_PGS_STRANDED = 92,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZSPAGES = 93,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ION_HEAP = 94,
    perfetto_protos_VmstatCounters_VMSTAT_NR_GPU_HEAP = 95,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL_DMA = 96,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL_MOVABLE = 97,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL_NORMAL = 98,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_DAEMON_FREE_SCANNED = 99,
    perfetto_protos_VmstatCounters_VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED = 100,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FASTRPC = 101,
    perfetto_protos_VmstatCounters_VMSTAT_NR_INDIRECTLY_RECLAIMABLE = 102,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ION_HEAP_POOL = 103,
    perfetto_protos_VmstatCounters_VMSTAT_NR_KERNEL_MISC_RECLAIMABLE = 104,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SHADOW_CALL_STACK_BYTES = 105,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SHMEM_HUGEPAGES = 106,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SHMEM_PMDMAPPED = 107,
    perfetto_protos_VmstatCounters_VMSTAT_NR_UNRECLAIMABLE_PAGES = 108,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_ACTIVE_ANON = 109,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_ACTIVE_FILE = 110,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_INACTIVE_ANON = 111,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_INACTIVE_FILE = 112,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_UNEVICTABLE = 113,
    perfetto_protos_VmstatCounters_VMSTAT_NR_ZONE_WRITE_PENDING = 114,
    perfetto_protos_VmstatCounters_VMSTAT_OOM_KILL = 115,
    perfetto_protos_VmstatCounters_VMSTAT_PGLAZYFREE = 116,
    perfetto_protos_VmstatCounters_VMSTAT_PGLAZYFREED = 117,
    perfetto_protos_VmstatCounters_VMSTAT_PGREFILL = 118,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_DIRECT = 119,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_KSWAPD = 120,
    perfetto_protos_VmstatCounters_VMSTAT_PGSKIP_DMA = 121,
    perfetto_protos_VmstatCounters_VMSTAT_PGSKIP_MOVABLE = 122,
    perfetto_protos_VmstatCounters_VMSTAT_PGSKIP_NORMAL = 123,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_DIRECT = 124,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_KSWAPD = 125,
    perfetto_protos_VmstatCounters_VMSTAT_SWAP_RA = 126,
    perfetto_protos_VmstatCounters_VMSTAT_SWAP_RA_HIT = 127,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_RESTORE = 128,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL_DEVICE = 129,
    perfetto_protos_VmstatCounters_VMSTAT_ALLOCSTALL_DMA32 = 130,
    perfetto_protos_VmstatCounters_VMSTAT_BALLOON_DEFLATE = 131,
    perfetto_protos_VmstatCounters_VMSTAT_BALLOON_INFLATE = 132,
    perfetto_protos_VmstatCounters_VMSTAT_BALLOON_MIGRATE = 133,
    perfetto_protos_VmstatCounters_VMSTAT_CMA_ALLOC_FAIL = 134,
    perfetto_protos_VmstatCounters_VMSTAT_CMA_ALLOC_SUCCESS = 135,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FILE_HUGEPAGES = 136,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FILE_PMDMAPPED = 137,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FOLL_PIN_ACQUIRED = 138,
    perfetto_protos_VmstatCounters_VMSTAT_NR_FOLL_PIN_RELEASED = 139,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SEC_PAGE_TABLE_PAGES = 140,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SHADOW_CALL_STACK = 141,
    perfetto_protos_VmstatCounters_VMSTAT_NR_SWAPCACHED = 142,
    perfetto_protos_VmstatCounters_VMSTAT_NR_THROTTLED_WRITTEN = 143,
    perfetto_protos_VmstatCounters_VMSTAT_PGALLOC_DEVICE = 144,
    perfetto_protos_VmstatCounters_VMSTAT_PGALLOC_DMA32 = 145,
    perfetto_protos_VmstatCounters_VMSTAT_PGDEMOTE_DIRECT = 146,
    perfetto_protos_VmstatCounters_VMSTAT_PGDEMOTE_KSWAPD = 147,
    perfetto_protos_VmstatCounters_VMSTAT_PGREUSE = 148,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_ANON = 149,
    perfetto_protos_VmstatCounters_VMSTAT_PGSCAN_FILE = 150,
    perfetto_protos_VmstatCounters_VMSTAT_PGSKIP_DEVICE = 151,
    perfetto_protos_VmstatCounters_VMSTAT_PGSKIP_DMA32 = 152,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_ANON = 153,
    perfetto_protos_VmstatCounters_VMSTAT_PGSTEAL_FILE = 154,
    perfetto_protos_VmstatCounters_VMSTAT_THP_COLLAPSE_ALLOC = 155,
    perfetto_protos_VmstatCounters_VMSTAT_THP_COLLAPSE_ALLOC_FAILED = 156,
    perfetto_protos_VmstatCounters_VMSTAT_THP_DEFERRED_SPLIT_PAGE = 157,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FAULT_ALLOC = 158,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FAULT_FALLBACK = 159,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FAULT_FALLBACK_CHARGE = 160,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FILE_ALLOC = 161,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FILE_FALLBACK = 162,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FILE_FALLBACK_CHARGE = 163,
    perfetto_protos_VmstatCounters_VMSTAT_THP_FILE_MAPPED = 164,
    perfetto_protos_VmstatCounters_VMSTAT_THP_MIGRATION_FAIL = 165,
    perfetto_protos_VmstatCounters_VMSTAT_THP_MIGRATION_SPLIT = 166,
    perfetto_protos_VmstatCounters_VMSTAT_THP_MIGRATION_SUCCESS = 167,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SCAN_EXCEED_NONE_PTE = 168,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SCAN_EXCEED_SHARE_PTE = 169,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SCAN_EXCEED_SWAP_PTE = 170,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SPLIT_PAGE = 171,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SPLIT_PAGE_FAILED = 172,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SPLIT_PMD = 173,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SWPOUT = 174,
    perfetto_protos_VmstatCounters_VMSTAT_THP_SWPOUT_FALLBACK = 175,
    perfetto_protos_VmstatCounters_VMSTAT_THP_ZERO_PAGE_ALLOC = 176,
    perfetto_protos_VmstatCounters_VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED = 177,
    perfetto_protos_VmstatCounters_VMSTAT_VMA_LOCK_ABORT = 178,
    perfetto_protos_VmstatCounters_VMSTAT_VMA_LOCK_MISS = 179,
    perfetto_protos_VmstatCounters_VMSTAT_VMA_LOCK_RETRY = 180,
    perfetto_protos_VmstatCounters_VMSTAT_VMA_LOCK_SUCCESS = 181,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_ACTIVATE_ANON = 182,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_ACTIVATE_FILE = 183,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_NODES = 184,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_REFAULT_ANON = 185,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_REFAULT_FILE = 186,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_RESTORE_ANON = 187,
    perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_RESTORE_FILE = 188
} perfetto_protos_VmstatCounters;

/* Describes the packet type and direction. CMD and EVT are unidirectional, so
 no need to differentiate the direction. */
typedef enum _perfetto_protos_BluetoothTracePacketType {
    perfetto_protos_BluetoothTracePacketType_HCI_CMD = 1,
    perfetto_protos_BluetoothTracePacketType_HCI_EVT = 2,
    perfetto_protos_BluetoothTracePacketType_HCI_ACL_RX = 3,
    perfetto_protos_BluetoothTracePacketType_HCI_ACL_TX = 4,
    perfetto_protos_BluetoothTracePacketType_HCI_SCO_RX = 5,
    perfetto_protos_BluetoothTracePacketType_HCI_SCO_TX = 6,
    perfetto_protos_BluetoothTracePacketType_HCI_ISO_RX = 7,
    perfetto_protos_BluetoothTracePacketType_HCI_ISO_TX = 8
} perfetto_protos_BluetoothTracePacketType;

typedef enum _perfetto_protos_TrafficDirection {
    perfetto_protos_TrafficDirection_DIR_UNSPECIFIED = 0,
    perfetto_protos_TrafficDirection_DIR_INGRESS = 1,
    perfetto_protos_TrafficDirection_DIR_EGRESS = 2
} perfetto_protos_TrafficDirection;

typedef enum _perfetto_protos_TrustedOverlay {
    perfetto_protos_TrustedOverlay_UNSET = 0,
    perfetto_protos_TrustedOverlay_DISABLED = 1,
    perfetto_protos_TrustedOverlay_ENABLED = 2
} perfetto_protos_TrustedOverlay;

/* Must match definition in the IComposerClient HAL */
typedef enum _perfetto_protos_HwcCompositionType {
    /* Invalid composition type */
    perfetto_protos_HwcCompositionType_HWC_TYPE_UNSPECIFIED = 0,
    /* Layer was composited by the client into the client target buffer */
    perfetto_protos_HwcCompositionType_HWC_TYPE_CLIENT = 1,
    /* Layer was composited by the device through hardware overlays */
    perfetto_protos_HwcCompositionType_HWC_TYPE_DEVICE = 2,
    /* Layer was composited by the device using a color */
    perfetto_protos_HwcCompositionType_HWC_TYPE_SOLID_COLOR = 3,
    /* Similar to DEVICE, but the layer position may have been asynchronously set
 through setCursorPosition */
    perfetto_protos_HwcCompositionType_HWC_TYPE_CURSOR = 4,
    /* Layer was composited by the device via a sideband stream */
    perfetto_protos_HwcCompositionType_HWC_TYPE_SIDEBAND = 5,
    /* Layer was composited by hardware optimized for display decoration */
    perfetto_protos_HwcCompositionType_HWC_TYPE_DISPLAY_DECORATION = 6
} perfetto_protos_HwcCompositionType;

typedef enum _perfetto_protos_FtraceParseStatus {
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_UNSPECIFIED = 0,
    /* Not written, used for convenience of implementation: */
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_OK = 1,
    /* Issues with reading data out of the ftrace ring buffer: */
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_UNEXPECTED_READ_ERROR = 2,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_PARTIAL_PAGE_READ = 3,
    /* Ring buffer binary data not matching our understanding of the layout: */
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_INVALID_PAGE_HEADER = 4,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_EVENT_HEADER = 5,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_NULL_PADDING = 6,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_PADDING_LENGTH = 7,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_INVALID_PADDING_LENGTH = 8,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_TIME_EXTEND = 9,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_TIME_STAMP = 10,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_DATA_LENGTH = 11,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_ZERO_DATA_LENGTH = 12,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_INVALID_DATA_LENGTH = 13,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_SHORT_EVENT_ID = 14,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_ABI_END_OVERFLOW = 15,
    /* Issues with parsing the event payload: */
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_SHORT_COMPACT_EVENT = 16,
    perfetto_protos_FtraceParseStatus_FTRACE_STATUS_INVALID_EVENT = 17
} perfetto_protos_FtraceParseStatus;

typedef enum _perfetto_protos_FtraceClock {
    /* There is no FTRACE_CLOCK_BOOT entry as that's the default assumption. When
 the ftrace clock is "boot", it's just omitted (so UNSPECIFIED == BOOT). */
    perfetto_protos_FtraceClock_FTRACE_CLOCK_UNSPECIFIED = 0,
    perfetto_protos_FtraceClock_FTRACE_CLOCK_UNKNOWN = 1,
    perfetto_protos_FtraceClock_FTRACE_CLOCK_GLOBAL = 2,
    perfetto_protos_FtraceClock_FTRACE_CLOCK_LOCAL = 3,
    perfetto_protos_FtraceClock_FTRACE_CLOCK_MONO_RAW = 4
} perfetto_protos_FtraceClock;

typedef enum _perfetto_protos_ChromeCompositorSchedulerAction {
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NONE = 1,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME = 2,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_COMMIT = 3,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE = 4,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE = 5,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_FORCED = 6,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_ABORT = 7,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION = 8,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_PREPARE_TILES = 9,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK = 10,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION = 11,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL = 12,
    perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON = 13
} perfetto_protos_ChromeCompositorSchedulerAction;

/* RAIL Mode is an indication of the kind of work that a Renderer is currently
 performing which is in turn used to prioritise work accordingly.
 A fuller description of these modes can be found https://web.dev/rail/ */
typedef enum _perfetto_protos_ChromeRAILMode {
    perfetto_protos_ChromeRAILMode_RAIL_MODE_NONE = 0,
    perfetto_protos_ChromeRAILMode_RAIL_MODE_RESPONSE = 1,
    perfetto_protos_ChromeRAILMode_RAIL_MODE_ANIMATION = 2,
    perfetto_protos_ChromeRAILMode_RAIL_MODE_IDLE = 3,
    perfetto_protos_ChromeRAILMode_RAIL_MODE_LOAD = 4
} perfetto_protos_ChromeRAILMode;

/* Logical groups for a counter.  This is used in the UI to present the
 related counters together. */
typedef enum _perfetto_protos_GpuCounterDescriptor_GpuCounterGroup {
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED = 0,
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_SYSTEM = 1,
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_VERTICES = 2,
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS = 3,
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES = 4,
    /* Includes counters relating to caching and bandwidth. */
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_MEMORY = 5,
    perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_COMPUTE = 6
} perfetto_protos_GpuCounterDescriptor_GpuCounterGroup;

/* next id: 41 */
typedef enum _perfetto_protos_GpuCounterDescriptor_MeasureUnit {
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_NONE = 0,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_BIT = 1,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_KILOBIT = 2,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MEGABIT = 3,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_GIGABIT = 4,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_TERABIT = 5,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PETABIT = 6,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_BYTE = 7,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_KILOBYTE = 8,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MEGABYTE = 9,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_GIGABYTE = 10,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_TERABYTE = 11,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PETABYTE = 12,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_HERTZ = 13,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_KILOHERTZ = 14,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MEGAHERTZ = 15,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_GIGAHERTZ = 16,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_TERAHERTZ = 17,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PETAHERTZ = 18,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_NANOSECOND = 19,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MICROSECOND = 20,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MILLISECOND = 21,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_SECOND = 22,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MINUTE = 23,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_HOUR = 24,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_VERTEX = 25,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PIXEL = 26,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_TRIANGLE = 27,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PRIMITIVE = 38,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_FRAGMENT = 39,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_MILLIWATT = 28,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_WATT = 29,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_KILOWATT = 30,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_JOULE = 31,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_VOLT = 32,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_AMPERE = 33,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_CELSIUS = 34,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_FAHRENHEIT = 35,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_KELVIN = 36,
    /* Values should be out of 100. */
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_PERCENT = 37,
    perfetto_protos_GpuCounterDescriptor_MeasureUnit_INSTRUCTION = 40
} perfetto_protos_GpuCounterDescriptor_MeasureUnit;

/* Trace modes are tracing presets that are included in the system. */
typedef enum _perfetto_protos_AndroidInputEventConfig_TraceMode {
    /* Preset mode for maximal tracing.
 WARNING: This will bypass all privacy measures on debuggable builds, and
 will record all
          input events processed by the system, regardless of the context
          in which they were processed. It should only be used for tracing
          on a local device or for tests. It should NEVER be used for
          field tracing. */
    perfetto_protos_AndroidInputEventConfig_TraceMode_TRACE_MODE_TRACE_ALL = 0,
    /* Use the tracing rules defined in this config to specify what events to
 trace. */
    perfetto_protos_AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES = 1
} perfetto_protos_AndroidInputEventConfig_TraceMode;

/* The level of tracing that should be applied to an event. */
typedef enum _perfetto_protos_AndroidInputEventConfig_TraceLevel {
    /* Do not trace the input event. */
    perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_NONE = 0,
    /* Trace the event as a redacted event, where certain sensitive fields are
 omitted from the trace, including the coordinates of pointer events and
 the key/scan codes of key events. */
    perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_REDACTED = 1,
    /* Trace the complete event. */
    perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE = 2
} perfetto_protos_AndroidInputEventConfig_TraceLevel;

/* Event group to record, as defined by the modem. */
typedef enum _perfetto_protos_PixelModemConfig_EventGroup {
    perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_UNKNOWN = 0,
    /* Events suitable for low bandwidth tracing only. */
    perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_LOW_BANDWIDTH = 1,
    /* Events suitable for high and low bandwidth tracing. */
    perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH = 2
} perfetto_protos_PixelModemConfig_EventGroup;

typedef enum _perfetto_protos_ProtoLogConfig_TracingMode {
    /* When using the DEFAULT tracing mode, only log groups and levels specified
 in the group_overrides are traced. */
    perfetto_protos_ProtoLogConfig_TracingMode_DEFAULT = 0,
    /* When using the ENABLE_ALL tracing mode, all log groups and levels are
 traced, unless specified in the group_overrides. */
    perfetto_protos_ProtoLogConfig_TracingMode_ENABLE_ALL = 1
} perfetto_protos_ProtoLogConfig_TracingMode;

typedef enum _perfetto_protos_SurfaceFlingerLayersConfig_Mode {
    perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_UNSPECIFIED = 0,
    /* Trace layers snapshots. A snapshot is taken every time a layers change
 occurs. */
    perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_ACTIVE = 1,
    /* Generate layers snapshots from the transactions kept in the
 SurfaceFlinger's internal ring buffer.
 The layers snapshots generation occurs when this data source is flushed. */
    perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_GENERATED = 2,
    /* Trace a single layers snapshot. */
    perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_DUMP = 3,
    /* Default mode (applied by SurfaceFlinger if no mode is specified).
 Same as MODE_GENERATED, but triggers the layers snapshots generation only when a bugreport
 is taken. */
    perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY = 4
} perfetto_protos_SurfaceFlingerLayersConfig_Mode;

typedef enum _perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag {
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_UNSPECIFIED = 0,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_INPUT = 2,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_COMPOSITION = 4,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_EXTRA = 8,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_HWC = 16,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_BUFFERS = 32,
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS = 64,
    /* INPUT | COMPOSITION | EXTRA */
    perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_ALL = 14
} perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag;

typedef enum _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode {
    perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_UNSPECIFIED = 0,
    /* Default mode (applied by SurfaceFlinger if no mode is specified).
 SurfaceFlinger writes its internal ring buffer of transactions every time
 the data source is flushed. The ring buffer contains the SurfaceFlinger's
 initial state and the latest transactions. */
    perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_CONTINUOUS = 1,
    /* SurfaceFlinger writes the initial state and then each incoming
 transaction until the data source is stopped. */
    perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_ACTIVE = 2
} perfetto_protos_SurfaceFlingerTransactionsConfig_Mode;

typedef enum _perfetto_protos_WindowManagerConfig_LogFrequency {
    perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_UNSPECIFIED = 0,
    /* Trace state snapshots when a frame is committed. */
    perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_FRAME = 1,
    /* Trace state snapshots every time a transaction is committed. */
    perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_TRANSACTION = 2,
    /* Trace single state snapshots when the data source is started. */
    perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP = 3
} perfetto_protos_WindowManagerConfig_LogFrequency;

typedef enum _perfetto_protos_WindowManagerConfig_LogLevel {
    perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_UNSPECIFIED = 0,
    /* Logs all elements with maximum amount of information. */
    perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_VERBOSE = 1,
    /* Logs all elements but doesn't write all configuration data. */
    perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_DEBUG = 2,
    /* Logs only visible elements, with the minimum amount of performance
 overhead */
    perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL = 3
} perfetto_protos_WindowManagerConfig_LogLevel;

/* Priority of the tracing session client. A higher priority session may
 preempt a lower priority one in configurations where concurrent sessions
 aren't supported. */
typedef enum _perfetto_protos_ChromeConfig_ClientPriority {
    perfetto_protos_ChromeConfig_ClientPriority_UNKNOWN = 0,
    perfetto_protos_ChromeConfig_ClientPriority_BACKGROUND = 1,
    perfetto_protos_ChromeConfig_ClientPriority_USER_INITIATED = 2
} perfetto_protos_ChromeConfig_ClientPriority;

/* The KernelFlag represent list of kernel flags that we are intrested in.
 To get a more extensive list run 'xperf -providers k'. */
typedef enum _perfetto_protos_EtwConfig_KernelFlag {
    perfetto_protos_EtwConfig_KernelFlag_CSWITCH = 0,
    perfetto_protos_EtwConfig_KernelFlag_DISPATCHER = 1
} perfetto_protos_EtwConfig_KernelFlag;

/* When symbolize_ksyms=true, determines whether the traced_probes daemon
 should keep the symbol map in memory (and reuse it for future tracing
 sessions) or clear it (saving memory) and re-create it on each tracing
 session (wasting cpu and wall time).
 The tradeoff is roughly:
  KSYMS_RETAIN: pay a fixed ~1.2 MB cost after the first trace.
  KSYMS_CLEANUP_ON_STOP: pay a ~300-500ms cost when starting each trace.
 Default behavior: KSYMS_CLEANUP_ON_STOP. */
typedef enum _perfetto_protos_FtraceConfig_KsymsMemPolicy {
    perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_UNSPECIFIED = 0,
    perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_CLEANUP_ON_STOP = 1,
    perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_RETAIN = 2
} perfetto_protos_FtraceConfig_KsymsMemPolicy;

typedef enum _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType {
    perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_UNKNOWN = 0,
    perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_KPROBE = 1,
    perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_KRETPROBE = 2,
    perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_BOTH = 3
} perfetto_protos_FtraceConfig_KprobeEvent_KprobeType;

typedef enum _perfetto_protos_ConsoleConfig_Output {
    perfetto_protos_ConsoleConfig_Output_OUTPUT_UNSPECIFIED = 0,
    perfetto_protos_ConsoleConfig_Output_OUTPUT_STDOUT = 1,
    perfetto_protos_ConsoleConfig_Output_OUTPUT_STDERR = 2
} perfetto_protos_ConsoleConfig_Output;

typedef enum _perfetto_protos_AndroidPowerConfig_BatteryCounters {
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_UNSPECIFIED = 0,
    /* Coulomb counter. */
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CHARGE = 1,
    /* Charge (%). */
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CAPACITY_PERCENT = 2,
    /* Instantaneous current. */
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT = 3,
    /* Avg current. */
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_CURRENT_AVG = 4,
    /* Instantaneous voltage. */
    perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_VOLTAGE = 5
} perfetto_protos_AndroidPowerConfig_BatteryCounters;

typedef enum _perfetto_protos_ProcessStatsConfig_Quirks {
    perfetto_protos_ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED = 0,
    /* This has been deprecated and ignored as per 2018-05-01. Full scan at
 startup is now disabled by default and can be re-enabled using the
 |scan_all_processes_on_start| arg. */
    perfetto_protos_ProcessStatsConfig_Quirks_DISABLE_INITIAL_DUMP = 1,
    perfetto_protos_ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND = 2
} perfetto_protos_ProcessStatsConfig_Quirks;

/* Builtin counter names from the uapi header. Commented with their perf tool
 aliases.
 TODO(rsavitski): consider generating enums for cache events (should be
 finite), and generally make this list as extensive as possible. Excluding
 things like dynamic PMUs since those don't fit into a static enum.
 Next id: 21 */
typedef enum _perfetto_protos_PerfEvents_Counter {
    perfetto_protos_PerfEvents_Counter_UNKNOWN_COUNTER = 0,
    /* cpu-clock */
    perfetto_protos_PerfEvents_Counter_SW_CPU_CLOCK = 1,
    /* page-faults, faults */
    perfetto_protos_PerfEvents_Counter_SW_PAGE_FAULTS = 2,
    /* task-clock */
    perfetto_protos_PerfEvents_Counter_SW_TASK_CLOCK = 3,
    /* context-switches, cs */
    perfetto_protos_PerfEvents_Counter_SW_CONTEXT_SWITCHES = 4,
    /* cpu-migrations, migrations */
    perfetto_protos_PerfEvents_Counter_SW_CPU_MIGRATIONS = 5,
    /* minor-faults */
    perfetto_protos_PerfEvents_Counter_SW_PAGE_FAULTS_MIN = 6,
    /* major-faults */
    perfetto_protos_PerfEvents_Counter_SW_PAGE_FAULTS_MAJ = 7,
    /* alignment-faults */
    perfetto_protos_PerfEvents_Counter_SW_ALIGNMENT_FAULTS = 8,
    /* emulation-faults */
    perfetto_protos_PerfEvents_Counter_SW_EMULATION_FAULTS = 9,
    /* dummy */
    perfetto_protos_PerfEvents_Counter_SW_DUMMY = 20,
    /* cpu-cycles, cycles */
    perfetto_protos_PerfEvents_Counter_HW_CPU_CYCLES = 10,
    /* instructions */
    perfetto_protos_PerfEvents_Counter_HW_INSTRUCTIONS = 11,
    /* cache-references */
    perfetto_protos_PerfEvents_Counter_HW_CACHE_REFERENCES = 12,
    /* cache-misses */
    perfetto_protos_PerfEvents_Counter_HW_CACHE_MISSES = 13,
    /* branch-instructions, branches */
    perfetto_protos_PerfEvents_Counter_HW_BRANCH_INSTRUCTIONS = 14,
    /* branch-misses */
    perfetto_protos_PerfEvents_Counter_HW_BRANCH_MISSES = 15,
    /* bus-cycles */
    perfetto_protos_PerfEvents_Counter_HW_BUS_CYCLES = 16,
    /* stalled-cycles-frontend, idle-cycles-frontend */
    perfetto_protos_PerfEvents_Counter_HW_STALLED_CYCLES_FRONTEND = 17,
    /* stalled-cycles-backend, idle-cycles-backend */
    perfetto_protos_PerfEvents_Counter_HW_STALLED_CYCLES_BACKEND = 18,
    /* ref-cycles */
    perfetto_protos_PerfEvents_Counter_HW_REF_CPU_CYCLES = 19
} perfetto_protos_PerfEvents_Counter;

/* Subset of clocks that is supported by perf timestamping.
 CLOCK_TAI is excluded since it's not expected to be used in practice, but
 would require additions to the trace clock synchronisation logic. */
typedef enum _perfetto_protos_PerfEvents_PerfClock {
    perfetto_protos_PerfEvents_PerfClock_UNKNOWN_PERF_CLOCK = 0,
    perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_REALTIME = 1,
    perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_MONOTONIC = 2,
    perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_MONOTONIC_RAW = 3,
    perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_BOOTTIME = 4
} perfetto_protos_PerfEvents_PerfClock;

/* Userspace unwinding mode. A possible future addition is kernel-unwound
 callchains for frame pointer based systems. */
typedef enum _perfetto_protos_PerfEventConfig_UnwindMode {
    perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_UNKNOWN = 0,
    /* Do not unwind userspace: */
    perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_SKIP = 1,
    /* Use libunwindstack (default): */
    perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_DWARF = 2,
    /* Use userspace frame pointer unwinder: */
    perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_FRAME_POINTER = 3
} perfetto_protos_PerfEventConfig_UnwindMode;

typedef enum _perfetto_protos_SysStatsConfig_StatCounters {
    perfetto_protos_SysStatsConfig_StatCounters_STAT_UNSPECIFIED = 0,
    perfetto_protos_SysStatsConfig_StatCounters_STAT_CPU_TIMES = 1,
    perfetto_protos_SysStatsConfig_StatCounters_STAT_IRQ_COUNTS = 2,
    perfetto_protos_SysStatsConfig_StatCounters_STAT_SOFTIRQ_COUNTS = 3,
    perfetto_protos_SysStatsConfig_StatCounters_STAT_FORK_COUNT = 4
} perfetto_protos_SysStatsConfig_StatCounters;

typedef enum _perfetto_protos_DataSourceConfig_SessionInitiator {
    perfetto_protos_DataSourceConfig_SessionInitiator_SESSION_INITIATOR_UNSPECIFIED = 0,
    /* This trace was initiated from a trusted system app has DUMP and
 USAGE_STATS permission. This system app is expected to not expose the
 trace to the user of the device.
 This is determined by checking the UID initiating the trace. */
    perfetto_protos_DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM = 1
} perfetto_protos_DataSourceConfig_SessionInitiator;

typedef enum _perfetto_protos_TraceConfig_LockdownModeOperation {
    perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED = 0,
    perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_CLEAR = 1,
    perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_SET = 2
} perfetto_protos_TraceConfig_LockdownModeOperation;

/* Compress trace with the given method. Best effort. */
typedef enum _perfetto_protos_TraceConfig_CompressionType {
    perfetto_protos_TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED = 0,
    perfetto_protos_TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE = 1
} perfetto_protos_TraceConfig_CompressionType;

typedef enum _perfetto_protos_TraceConfig_StatsdLogging {
    perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_UNSPECIFIED = 0,
    perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_ENABLED = 1,
    perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_DISABLED = 2
} perfetto_protos_TraceConfig_StatsdLogging;

typedef enum _perfetto_protos_TraceConfig_BufferConfig_FillPolicy {
    perfetto_protos_TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED = 0,
    /* Default behavior. The buffer operates as a conventional ring buffer.
 If the writer is faster than the reader (or if the reader reads only
 after tracing is stopped) newly written packets will overwrite old
 packets. */
    perfetto_protos_TraceConfig_BufferConfig_FillPolicy_RING_BUFFER = 1,
    /* Behaves like RING_BUFFER as long as there is space in the buffer or
 the reader catches up with the writer. As soon as the writer hits
 an unread chunk, it stops accepting new data in the buffer. */
    perfetto_protos_TraceConfig_BufferConfig_FillPolicy_DISCARD = 2
} perfetto_protos_TraceConfig_BufferConfig_FillPolicy;

typedef enum _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode {
    perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED = 0,
    /* When this mode is chosen, data sources are not started until one of the
 |triggers| are received. This supports early initialization and fast
 starting of the tracing system. On triggering, the session will then
 record for |stop_delay_ms|. However if no trigger is seen
 after |trigger_timeout_ms| the session will be stopped and no data will
 be returned. */
    perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_START_TRACING = 1,
    /* When this mode is chosen, the session will be started via the normal
 EnableTracing() & StartTracing(). If no trigger is ever seen
 the session will be stopped after |trigger_timeout_ms| and no data will
 be returned. However if triggered the trace will stop after
 |stop_delay_ms| and any data in the buffer will be returned to the
 consumer. */
    perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING = 2,
    /* When this mode is chosen, this causes a snapshot of the current tracing
 session to be created after |stop_delay_ms| while the current tracing
 session continues undisturbed (% an extra flush). This mode can be
 used only when the tracing session is handled by the "perfetto" cmdline
 client (which is true in 90% of cases). Part of the business logic
 necessary for this behavior, and ensuing file handling, lives in
 perfetto_cmd.cc . On other consumers, this causes only a notification
 of the trigger through a CloneTriggerHit ObservableEvent. The custom
 consumer is supposed to call CloneSession() itself after the event.
 Use use_clone_snapshot_if_available=true when targeting older versions
 of perfetto. */
    perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_CLONE_SNAPSHOT = 4
} perfetto_protos_TraceConfig_TriggerConfig_TriggerMode;

/* A policy specifies which algorithm should be used for filtering the
 string. */
typedef enum _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy {
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_UNSPECIFIED = 0,
    /* Tries to match the string field against |regex_pattern|. If it
 matches, all matching groups are "redacted" (i.e. replaced with a
 constant string) and filtering is terminated (i.e. no further rules are
 checked). If it doesn't match, the string is left unchanged and the
 next rule in chain is considered. */
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_REDACT_GROUPS = 1,
    /* Like |SFP_MATCH_REDACT_GROUPS| but tries to do some pre-work before
 checking the regex. Specifically, it tries to parse the string field as
 an atrace tracepoint and checks if the post-tgid field starts with
 |atrace_post_tgid_starts_with|. The regex matching is only performed if
 this check succeeds. */
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_REDACT_GROUPS = 2,
    /* Tries to match the string field against |regex_pattern|. If it
 matches, filtering is terminated (i.e. no further rules are checked).
 If it doesn't match, the string is left unchanged and the next rule in
 chain is considered. */
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_BREAK = 3,
    /* Like |SFP_MATCH_BREAK| but tries to do some pre-work before checking
 the regex. Specifically, it tries to parse the string field as an
 atrace tracepoint and checks if the post-tgid field starts with
 |atrace_post_tgid_starts_with|. The regex matching is only performed if
 this check succeeds. */
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_BREAK = 4,
    /* Tries to repeatedly search (i.e. find substrings of) the string field
 with |regex_pattern|. For each match, redacts any matching groups (i.e.
 replaced with a constant string). Once there are no further matches,
 filtering is terminated (i.e. no further rules are checked).

 Note that this is policy is a "search" policy not a "match" policy
 unlike the above policies:
  * Match policies require matching the full string i.e. there is an
    implicit leading `^` and trailing `$`.
  * Search policies perform repeated partial matching of the string
    e.g.
      - String: `foo=aaa,bar=123,foo=bbb,baz=456`
      - Pattern: `foo=(\d+)`
      - Output: `foo=P6O,bar=123,foo=P6O,baz=456`
    where P6O is the redaction string

 All of this is only performed after some pre-work where we try to parse
 the string field as an atrace tracepoint and check if the post-tgid
 field starts with |atrace_post_tgid_starts_with|.

 If there are no partial matches, the string is left unchanged and the
 next rule in chain is considered. */
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS = 5
} perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy;

typedef enum _perfetto_protos_TraceStats_FinalFlushOutcome {
    perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_UNSPECIFIED = 0,
    perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_SUCCEEDED = 1,
    perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED = 2
} perfetto_protos_TraceStats_FinalFlushOutcome;

/* The error status, if any, reported to the camera framework. Any status
 other than STATUS_OK indicates a dropped frame.
 Next Enum: 6 */
typedef enum _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus {
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_UNSPECIFIED = 0,
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_OK = 1,
    /* Early metadata was returned to the camera framework with an error. */
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_EARLY_METADATA_ERROR = 2,
    /* Final metadata was returned to the camera framework with an error. */
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FINAL_METADATA_ERROR = 3,
    /* One or more buffers were returned to the camera framework with an error. */
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_BUFFER_ERROR = 4,
    /* The frame was dropped as a result of a flush operation. */
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR = 5
} perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus;

/* Specifies the reason(s) most likely to have caused the jank.
 Used as a bitmask. */
typedef enum _perfetto_protos_FrameTimelineEvent_JankType {
    perfetto_protos_FrameTimelineEvent_JankType_JANK_UNSPECIFIED = 0,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_NONE = 1,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_SF_SCHEDULING = 2,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR = 4,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_DISPLAY_HAL = 8,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED = 16,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED = 32,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED = 64,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING = 128,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_UNKNOWN = 256,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_SF_STUFFING = 512,
    perfetto_protos_FrameTimelineEvent_JankType_JANK_DROPPED = 1024
} perfetto_protos_FrameTimelineEvent_JankType;

/* Specifies the severity of a jank. */
typedef enum _perfetto_protos_FrameTimelineEvent_JankSeverityType {
    perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_UNKNOWN = 0,
    perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_NONE = 1,
    perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_PARTIAL = 2,
    perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_FULL = 3
} perfetto_protos_FrameTimelineEvent_JankSeverityType;

/* Specifies how a frame was presented on screen w.r.t. timing.
 Can be different for SurfaceFrame and DisplayFrame. */
typedef enum _perfetto_protos_FrameTimelineEvent_PresentType {
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED = 0,
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_ON_TIME = 1,
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_LATE = 2,
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_EARLY = 3,
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_DROPPED = 4,
    perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_UNKNOWN = 5
} perfetto_protos_FrameTimelineEvent_PresentType;

/* Specifies if the predictions for the frame are still valid, expired or
 unknown. */
typedef enum _perfetto_protos_FrameTimelineEvent_PredictionType {
    perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED = 0,
    perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_VALID = 1,
    perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED = 2,
    perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN = 3
} perfetto_protos_FrameTimelineEvent_PredictionType;

typedef enum _perfetto_protos_GraphicsFrameEvent_BufferEventType {
    perfetto_protos_GraphicsFrameEvent_BufferEventType_UNSPECIFIED = 0,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_DEQUEUE = 1,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_QUEUE = 2,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_POST = 3,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_ACQUIRE_FENCE = 4,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_LATCH = 5,
    /* HWC will compose this buffer */
    perfetto_protos_GraphicsFrameEvent_BufferEventType_HWC_COMPOSITION_QUEUED = 6,
    /* renderEngine composition */
    perfetto_protos_GraphicsFrameEvent_BufferEventType_FALLBACK_COMPOSITION = 7,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_PRESENT_FENCE = 8,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_RELEASE_FENCE = 9,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_MODIFY = 10,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_DETACH = 11,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_ATTACH = 12,
    perfetto_protos_GraphicsFrameEvent_BufferEventType_CANCEL = 13
} perfetto_protos_GraphicsFrameEvent_BufferEventType;

typedef enum _perfetto_protos_KernelWakelockData_Wakelock_Type {
    perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_UNKNOWN = 0,
    perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_KERNEL = 1,
    perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_NATIVE = 2
} perfetto_protos_KernelWakelockData_Wakelock_Type;

/* constant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H << 32 |
 MagicNumber.MAGIC_NUMBER_L (this is needed because enums have to be 32 bits
 and there's no nice way to put 64bit constants into .proto files. */
typedef enum _perfetto_protos_LayersTraceFileProto_MagicNumber {
    perfetto_protos_LayersTraceFileProto_MagicNumber_INVALID = 0,
    /* LYRT (little-endian ASCII) */
    perfetto_protos_LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L = 1414682956,
    /* RACE (little-endian ASCII) */
    perfetto_protos_LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_H = 1162035538
} perfetto_protos_LayersTraceFileProto_MagicNumber;

/* constant; MAGIC_NUMBER = (long) MAGIC_NUMBER_H << 32 |
 MagicNumber.MAGIC_NUMBER_L (this is needed because enums have to be 32 bits
 and there's no nice way to put 64bit constants into .proto files. */
typedef enum _perfetto_protos_TransactionTraceFile_MagicNumber {
    perfetto_protos_TransactionTraceFile_MagicNumber_INVALID = 0,
    /* TNXT (little-endian ASCII) */
    perfetto_protos_TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L = 1415073364,
    /* RACE (little-endian ASCII) */
    perfetto_protos_TransactionTraceFile_MagicNumber_MAGIC_NUMBER_H = 1162035538
} perfetto_protos_TransactionTraceFile_MagicNumber;

/* Changes are split into ChangesLsb and ChangesMsb. First 32 bits are in
 ChangesLsb and the next 32 bits are in ChangesMsb. This is needed because
 enums have to be 32 bits and there's no nice way to put 64bit constants
 into .proto files. */
typedef enum _perfetto_protos_LayerState_ChangesLsb {
    perfetto_protos_LayerState_ChangesLsb_eChangesLsbNone = 0,
    perfetto_protos_LayerState_ChangesLsb_ePositionChanged = 1,
    perfetto_protos_LayerState_ChangesLsb_eLayerChanged = 2,
    /* unused = 0x00000004; */
    perfetto_protos_LayerState_ChangesLsb_eAlphaChanged = 8,
    perfetto_protos_LayerState_ChangesLsb_eMatrixChanged = 16,
    perfetto_protos_LayerState_ChangesLsb_eTransparentRegionChanged = 32,
    perfetto_protos_LayerState_ChangesLsb_eFlagsChanged = 64,
    perfetto_protos_LayerState_ChangesLsb_eLayerStackChanged = 128,
    perfetto_protos_LayerState_ChangesLsb_eReleaseBufferListenerChanged = 1024,
    perfetto_protos_LayerState_ChangesLsb_eShadowRadiusChanged = 2048,
    perfetto_protos_LayerState_ChangesLsb_eBufferCropChanged = 8192,
    perfetto_protos_LayerState_ChangesLsb_eRelativeLayerChanged = 16384,
    perfetto_protos_LayerState_ChangesLsb_eReparent = 32768,
    perfetto_protos_LayerState_ChangesLsb_eColorChanged = 65536,
    perfetto_protos_LayerState_ChangesLsb_eBufferTransformChanged = 262144,
    perfetto_protos_LayerState_ChangesLsb_eTransformToDisplayInverseChanged = 524288,
    perfetto_protos_LayerState_ChangesLsb_eCropChanged = 1048576,
    perfetto_protos_LayerState_ChangesLsb_eBufferChanged = 2097152,
    perfetto_protos_LayerState_ChangesLsb_eAcquireFenceChanged = 4194304,
    perfetto_protos_LayerState_ChangesLsb_eDataspaceChanged = 8388608,
    perfetto_protos_LayerState_ChangesLsb_eHdrMetadataChanged = 16777216,
    perfetto_protos_LayerState_ChangesLsb_eSurfaceDamageRegionChanged = 33554432,
    perfetto_protos_LayerState_ChangesLsb_eApiChanged = 67108864,
    perfetto_protos_LayerState_ChangesLsb_eSidebandStreamChanged = 134217728,
    perfetto_protos_LayerState_ChangesLsb_eColorTransformChanged = 268435456,
    perfetto_protos_LayerState_ChangesLsb_eHasListenerCallbacksChanged = 536870912,
    perfetto_protos_LayerState_ChangesLsb_eInputInfoChanged = 1073741824,
    /* 0x80000000; (proto stores enums as signed int) */
    perfetto_protos_LayerState_ChangesLsb_eCornerRadiusChanged = -2147483648
} perfetto_protos_LayerState_ChangesLsb;

typedef enum _perfetto_protos_LayerState_ChangesMsb {
    perfetto_protos_LayerState_ChangesMsb_eChangesMsbNone = 0,
    perfetto_protos_LayerState_ChangesMsb_eDestinationFrameChanged = 1,
    perfetto_protos_LayerState_ChangesMsb_eCachedBufferChanged = 2,
    perfetto_protos_LayerState_ChangesMsb_eBackgroundColorChanged = 4,
    perfetto_protos_LayerState_ChangesMsb_eMetadataChanged = 8,
    perfetto_protos_LayerState_ChangesMsb_eColorSpaceAgnosticChanged = 16,
    perfetto_protos_LayerState_ChangesMsb_eFrameRateSelectionPriority = 32,
    perfetto_protos_LayerState_ChangesMsb_eFrameRateChanged = 64,
    perfetto_protos_LayerState_ChangesMsb_eBackgroundBlurRadiusChanged = 128,
    perfetto_protos_LayerState_ChangesMsb_eProducerDisconnect = 256,
    perfetto_protos_LayerState_ChangesMsb_eFixedTransformHintChanged = 512,
    perfetto_protos_LayerState_ChangesMsb_eFrameNumberChanged = 1024,
    perfetto_protos_LayerState_ChangesMsb_eBlurRegionsChanged = 2048,
    perfetto_protos_LayerState_ChangesMsb_eAutoRefreshChanged = 4096,
    perfetto_protos_LayerState_ChangesMsb_eStretchChanged = 8192,
    perfetto_protos_LayerState_ChangesMsb_eTrustedOverlayChanged = 16384,
    perfetto_protos_LayerState_ChangesMsb_eDropInputModeChanged = 32768
} perfetto_protos_LayerState_ChangesMsb;

typedef enum _perfetto_protos_LayerState_Flags {
    perfetto_protos_LayerState_Flags_eFlagsNone = 0,
    perfetto_protos_LayerState_Flags_eLayerHidden = 1,
    perfetto_protos_LayerState_Flags_eLayerOpaque = 2,
    perfetto_protos_LayerState_Flags_eLayerSkipScreenshot = 64,
    perfetto_protos_LayerState_Flags_eLayerSecure = 128,
    perfetto_protos_LayerState_Flags_eEnableBackpressure = 256,
    perfetto_protos_LayerState_Flags_eLayerIsDisplayDecoration = 512
} perfetto_protos_LayerState_Flags;

typedef enum _perfetto_protos_LayerState_DropInputMode {
    perfetto_protos_LayerState_DropInputMode_NONE = 0,
    perfetto_protos_LayerState_DropInputMode_ALL = 1,
    perfetto_protos_LayerState_DropInputMode_OBSCURED = 2
} perfetto_protos_LayerState_DropInputMode;

typedef enum _perfetto_protos_LayerState_BufferData_BufferDataChange {
    perfetto_protos_LayerState_BufferData_BufferDataChange_BufferDataChangeNone = 0,
    perfetto_protos_LayerState_BufferData_BufferDataChange_fenceChanged = 1,
    perfetto_protos_LayerState_BufferData_BufferDataChange_frameNumberChanged = 2,
    perfetto_protos_LayerState_BufferData_BufferDataChange_cachedBufferChanged = 4
} perfetto_protos_LayerState_BufferData_BufferDataChange;

typedef enum _perfetto_protos_LayerState_BufferData_PixelFormat {
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_UNKNOWN = 0,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM = -4,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSLUCENT = -3,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSPARENT = -2,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_OPAQUE = -1,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_8888 = 1,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBX_8888 = 2,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_888 = 3,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_565 = 4,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_BGRA_8888 = 5,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_5551 = 6,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_4444 = 7,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_FP16 = 22,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_1010102 = 43,
    perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8 = 56
} perfetto_protos_LayerState_BufferData_PixelFormat;

typedef enum _perfetto_protos_DisplayState_Changes {
    perfetto_protos_DisplayState_Changes_eChangesNone = 0,
    perfetto_protos_DisplayState_Changes_eSurfaceChanged = 1,
    perfetto_protos_DisplayState_Changes_eLayerStackChanged = 2,
    perfetto_protos_DisplayState_Changes_eDisplayProjectionChanged = 4,
    perfetto_protos_DisplayState_Changes_eDisplaySizeChanged = 8,
    perfetto_protos_DisplayState_Changes_eFlagsChanged = 16
} perfetto_protos_DisplayState_Changes;

typedef enum _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType {
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED = 0,
    /* Traces are triggered by specific range of values of an UMA histogram. */
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE = 1,
    /* Traces are triggered by specific named events in chromium codebase,
 like "second-update-failure". */
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED = 2
} perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType;

typedef enum _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType {
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED = 0,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_SESSION_RESTORE = 1,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_NAVIGATION = 2,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_STARTUP = 3,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_REACHED_CODE = 4,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_CONTENT_TRIGGER = 5,
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE = 1000
} perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType;

typedef enum _perfetto_protos_ChromeTracedValue_NestedType {
    perfetto_protos_ChromeTracedValue_NestedType_DICT = 0,
    perfetto_protos_ChromeTracedValue_NestedType_ARRAY = 1
} perfetto_protos_ChromeTracedValue_NestedType;

typedef enum _perfetto_protos_ChromeLegacyJsonTrace_TraceType {
    perfetto_protos_ChromeLegacyJsonTrace_TraceType_USER_TRACE = 0,
    /* Deprecated. */
    perfetto_protos_ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE = 1
} perfetto_protos_ChromeLegacyJsonTrace_TraceType;

typedef enum _perfetto_protos_InternedV8JsScript_Type {
    perfetto_protos_InternedV8JsScript_Type_TYPE_UNKNOWN = 0,
    perfetto_protos_InternedV8JsScript_Type_TYPE_NORMAL = 1,
    perfetto_protos_InternedV8JsScript_Type_TYPE_EVAL = 2,
    perfetto_protos_InternedV8JsScript_Type_TYPE_MODULE = 3,
    perfetto_protos_InternedV8JsScript_Type_TYPE_NATIVE = 4,
    perfetto_protos_InternedV8JsScript_Type_TYPE_EXTENSION = 5,
    perfetto_protos_InternedV8JsScript_Type_TYPE_INSPECTOR = 6
} perfetto_protos_InternedV8JsScript_Type;

typedef enum _perfetto_protos_InternedV8JsFunction_Kind {
    perfetto_protos_InternedV8JsFunction_Kind_KIND_UNKNOWN = 0,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_NORMAL_FUNCTION = 1,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_MODULE = 2,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_MODULE = 3,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_BASE_CONSTRUCTOR = 4,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_DEFAULT_BASE_CONSTRUCTOR = 5,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_DEFAULT_DERIVED_CONSTRUCTOR = 6,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_DERIVED_CONSTRUCTOR = 7,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_GETTER_FUNCTION = 8,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_GETTER_FUNCTION = 9,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_SETTER_FUNCTION = 10,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_SETTER_FUNCTION = 11,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ARROW_FUNCTION = 12,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_ARROW_FUNCTION = 13,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_FUNCTION = 14,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_CONCISE_METHOD = 15,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_ASYNC_CONCISE_METHOD = 16,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_CONCISE_GENERATOR_METHOD = 17,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_ASYNC_CONCISE_GENERATOR_METHOD = 18,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_ASYNC_GENERATOR_FUNCTION = 19,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_GENERATOR_FUNCTION = 20,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_CONCISE_GENERATOR_METHOD = 21,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_CONCISE_GENERATOR_METHOD = 22,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_CONCISE_METHOD = 23,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_STATIC_CONCISE_METHOD = 24,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_CLASS_MEMBERS_INITIALIZER_FUNCTION = 25,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_CLASS_STATIC_INITIALIZER_FUNCTION = 26,
    perfetto_protos_InternedV8JsFunction_Kind_KIND_INVALID = 27
} perfetto_protos_InternedV8JsFunction_Kind;

typedef enum _perfetto_protos_V8JsCode_Tier {
    perfetto_protos_V8JsCode_Tier_TIER_UNKNOWN = 0,
    perfetto_protos_V8JsCode_Tier_TIER_IGNITION = 1,
    perfetto_protos_V8JsCode_Tier_TIER_SPARKPLUG = 2,
    perfetto_protos_V8JsCode_Tier_TIER_MAGLEV = 3,
    perfetto_protos_V8JsCode_Tier_TIER_TURBOSHAFT = 4,
    perfetto_protos_V8JsCode_Tier_TIER_TURBOFAN = 5
} perfetto_protos_V8JsCode_Tier;

typedef enum _perfetto_protos_V8InternalCode_Type {
    perfetto_protos_V8InternalCode_Type_TYPE_UNKNOWN = 0,
    perfetto_protos_V8InternalCode_Type_TYPE_BYTECODE_HANDLER = 1,
    perfetto_protos_V8InternalCode_Type_TYPE_FOR_TESTING = 2,
    perfetto_protos_V8InternalCode_Type_TYPE_BUILTIN = 3,
    perfetto_protos_V8InternalCode_Type_TYPE_WASM_FUNCTION = 4,
    perfetto_protos_V8InternalCode_Type_TYPE_WASM_TO_CAPI_FUNCTION = 5,
    perfetto_protos_V8InternalCode_Type_TYPE_WASM_TO_JS_FUNCTION = 6,
    perfetto_protos_V8InternalCode_Type_TYPE_JS_TO_WASM_FUNCTION = 7,
    perfetto_protos_V8InternalCode_Type_TYPE_JS_TO_JS_FUNCTION = 8,
    perfetto_protos_V8InternalCode_Type_TYPE_C_WASM_ENTRY = 9
} perfetto_protos_V8InternalCode_Type;

typedef enum _perfetto_protos_V8WasmCode_Tier {
    perfetto_protos_V8WasmCode_Tier_TIER_UNKNOWN = 0,
    perfetto_protos_V8WasmCode_Tier_TIER_LIFTOFF = 1,
    perfetto_protos_V8WasmCode_Tier_TIER_TURBOFAN = 2
} perfetto_protos_V8WasmCode_Tier;

/* DEPRECATED. This enum has moved to ../common/builtin_clock.proto. */
typedef enum _perfetto_protos_ClockSnapshot_Clock_BuiltinClocks {
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_UNKNOWN = 0,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_REALTIME = 1,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_REALTIME_COARSE = 2,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_MONOTONIC = 3,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_COARSE = 4,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_RAW = 5,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_BOOTTIME = 6,
    perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID = 63
} perfetto_protos_ClockSnapshot_Clock_BuiltinClocks;

/* Wait reason for the previous thread. The ordering is important as based on
 the OldThreadWaitReason definition from the link above. The following are
 the possible values: */
typedef enum _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason {
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_EXECUTIVE = 0,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_FREE_PAGE = 1,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_PAGE_IN = 2,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_POOL_ALLOCATION = 3,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_DELAY_EXECUTION = 4,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_SUSPEND = 5,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_USER_REQUEST = 6,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_EXECUTIVE = 7,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_FREE_PAGE = 8,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_IN = 9,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_POOL_ALLOCATION = 10,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_DELAY_EXECUTION = 11,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_SUSPENDED = 12,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_USER_REQUEST = 13,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_EVENT_PAIR = 14,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_QUEUE = 15,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_RECEIVER = 16,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_REPLY = 17,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_VIRTUAL_MEMORY = 18,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_OUT = 19,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_RENDEZ_VOUS = 20,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_KEYED_EVENT = 21,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_TERMINATED = 22,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_PROCESS_IN_SWAP = 23,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_CPU_RATE_CONTROL = 24,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_CALLOUT_STACK = 25,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_KERNEL = 26,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_RESOURCE = 27,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_PUSH_LOCK = 28,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_MUTEX = 29,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_QUANTUM_END = 30,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_DISPATCH_INT = 31,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_PREEMPTED = 32,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_YIELD_EXECUTION = 33,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_FAST_MUTEX = 34,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_GUARD_MUTEX = 35,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_WR_RUNDOWN = 36,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON = 37
} perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason;

/* Wait mode for the previous thread. The ordering is important as based on
 the OldThreadWaitMode definition from the link above. The following are the
 possible values: */
typedef enum _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode {
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_KERNEL_MODE = 0,
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_USER_MODE = 1
} perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode;

/* State of the previous thread. The ordering is important as based on the
 OldThreadState definition from the link above. The following are the
 possible state values: */
typedef enum _perfetto_protos_CSwitchEtwEvent_OldThreadState {
    perfetto_protos_CSwitchEtwEvent_OldThreadState_INITIALIZED = 0,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_READY = 1,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_RUNNING = 2,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_STANDBY = 3,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_TERMINATED = 4,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_WAITING = 5,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_TRANSITION = 6,
    perfetto_protos_CSwitchEtwEvent_OldThreadState_DEFERRED_READY = 7
} perfetto_protos_CSwitchEtwEvent_OldThreadState;

/* The reason for the priority boost. The ordering is important as based on
 the AdjustReason definition from the link above. */
typedef enum _perfetto_protos_ReadyThreadEtwEvent_AdjustReason {
    perfetto_protos_ReadyThreadEtwEvent_AdjustReason_IGNORE_THE_INCREMENT = 0,
    /* Apply the increment, which will decay incrementally at the end of each
 quantum. */
    perfetto_protos_ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT = 1,
    /* Apply the increment as a boost that will decay in its entirety at quantum
 (typically for priority donation). */
    perfetto_protos_ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST = 2
} perfetto_protos_ReadyThreadEtwEvent_AdjustReason;

typedef enum _perfetto_protos_ReadyThreadEtwEvent_TraceFlag {
    perfetto_protos_ReadyThreadEtwEvent_TraceFlag_TRACE_FLAG_UNSPECIFIED = 0,
    /* The thread has been readied from DPC (deferred procedure call). */
    perfetto_protos_ReadyThreadEtwEvent_TraceFlag_THREAD_READIED = 1,
    /* The kernel stack is currently swapped out. */
    perfetto_protos_ReadyThreadEtwEvent_TraceFlag_KERNEL_STACK_SWAPPED_OUT = 2,
    /* The process address space is swapped out. */
    perfetto_protos_ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT = 4
} perfetto_protos_ReadyThreadEtwEvent_TraceFlag;

typedef enum _perfetto_protos_FieldDescriptorProto_Type {
    /* 0 is reserved for errors.
 Order is weird for historical reasons. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_DOUBLE = 1,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_FLOAT = 2,
    /* Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
 negative values are likely. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_INT64 = 3,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_UINT64 = 4,
    /* Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
 negative values are likely. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_INT32 = 5,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_FIXED64 = 6,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_FIXED32 = 7,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_BOOL = 8,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_STRING = 9,
    /* Tag-delimited aggregate.
 Group type is deprecated and not supported in proto3. However, Proto3
 implementations should still be able to parse the group wire format and
 treat group fields as unknown fields. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_GROUP = 10,
    /* Length-delimited aggregate. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_MESSAGE = 11,
    /* New in version 2. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_BYTES = 12,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_UINT32 = 13,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_ENUM = 14,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_SFIXED32 = 15,
    perfetto_protos_FieldDescriptorProto_Type_TYPE_SFIXED64 = 16,
    /* Uses ZigZag encoding. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_SINT32 = 17,
    /* Uses ZigZag encoding. */
    perfetto_protos_FieldDescriptorProto_Type_TYPE_SINT64 = 18
} perfetto_protos_FieldDescriptorProto_Type;

typedef enum _perfetto_protos_FieldDescriptorProto_Label {
    /* 0 is reserved for errors */
    perfetto_protos_FieldDescriptorProto_Label_LABEL_OPTIONAL = 1,
    perfetto_protos_FieldDescriptorProto_Label_LABEL_REQUIRED = 2,
    perfetto_protos_FieldDescriptorProto_Label_LABEL_REPEATED = 3
} perfetto_protos_FieldDescriptorProto_Label;

/* The file type */
typedef enum _perfetto_protos_InodeFileMap_Entry_Type {
    perfetto_protos_InodeFileMap_Entry_Type_UNKNOWN = 0,
    perfetto_protos_InodeFileMap_Entry_Type_FILE = 1,
    perfetto_protos_InodeFileMap_Entry_Type_DIRECTORY = 2
} perfetto_protos_InodeFileMap_Entry_Type;

typedef enum _perfetto_protos_KprobeEvent_KprobeType {
    perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_UNKNOWN = 0,
    perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_BEGIN = 1,
    perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_END = 2,
    perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_INSTANT = 3
} perfetto_protos_KprobeEvent_KprobeType;

typedef enum _perfetto_protos_FtraceStats_Phase {
    perfetto_protos_FtraceStats_Phase_UNSPECIFIED = 0,
    perfetto_protos_FtraceStats_Phase_START_OF_TRACE = 1,
    perfetto_protos_FtraceStats_Phase_END_OF_TRACE = 2
} perfetto_protos_FtraceStats_Phase;

typedef enum _perfetto_protos_GpuLog_Severity {
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED = 0,
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_VERBOSE = 1,
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_DEBUG = 2,
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_INFO = 3,
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_WARNING = 4,
    perfetto_protos_GpuLog_Severity_LOG_SEVERITY_ERROR = 5
} perfetto_protos_GpuLog_Severity;

typedef enum _perfetto_protos_InternedGraphicsContext_Api {
    perfetto_protos_InternedGraphicsContext_Api_UNDEFINED = 0,
    perfetto_protos_InternedGraphicsContext_Api_OPEN_GL = 1,
    perfetto_protos_InternedGraphicsContext_Api_VULKAN = 2,
    perfetto_protos_InternedGraphicsContext_Api_OPEN_CL = 3
} perfetto_protos_InternedGraphicsContext_Api;

typedef enum _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory {
    perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_OTHER = 0,
    perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_GRAPHICS = 1,
    perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_COMPUTE = 2
} perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory;

typedef enum _perfetto_protos_VulkanMemoryEvent_Source {
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_UNSPECIFIED = 0,
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_DRIVER = 1,
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_DEVICE = 2,
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_DEVICE_MEMORY = 3,
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_BUFFER = 4,
    perfetto_protos_VulkanMemoryEvent_Source_SOURCE_IMAGE = 5
} perfetto_protos_VulkanMemoryEvent_Source;

typedef enum _perfetto_protos_VulkanMemoryEvent_Operation {
    perfetto_protos_VulkanMemoryEvent_Operation_OP_UNSPECIFIED = 0,
    /* alloc, create */
    perfetto_protos_VulkanMemoryEvent_Operation_OP_CREATE = 1,
    /* free, destroy(non-bound) */
    perfetto_protos_VulkanMemoryEvent_Operation_OP_DESTROY = 2,
    /* bind buffer and image */
    perfetto_protos_VulkanMemoryEvent_Operation_OP_BIND = 3,
    /* destroy (bound) */
    perfetto_protos_VulkanMemoryEvent_Operation_OP_DESTROY_BOUND = 4,
    /* only annotations */
    perfetto_protos_VulkanMemoryEvent_Operation_OP_ANNOTATIONS = 5
} perfetto_protos_VulkanMemoryEvent_Operation;

typedef enum _perfetto_protos_VulkanMemoryEvent_AllocationScope {
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_UNSPECIFIED = 0,
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_COMMAND = 1,
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_OBJECT = 2,
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_CACHE = 3,
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_DEVICE = 4,
    perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE = 5
} perfetto_protos_VulkanMemoryEvent_AllocationScope;

typedef enum _perfetto_protos_DebugAnnotation_NestedValue_NestedType {
    /* leaf value. */
    perfetto_protos_DebugAnnotation_NestedValue_NestedType_UNSPECIFIED = 0,
    perfetto_protos_DebugAnnotation_NestedValue_NestedType_DICT = 1,
    perfetto_protos_DebugAnnotation_NestedValue_NestedType_ARRAY = 2
} perfetto_protos_DebugAnnotation_NestedValue_NestedType;

typedef enum _perfetto_protos_LogMessage_Priority {
    perfetto_protos_LogMessage_Priority_PRIO_UNSPECIFIED = 0,
    perfetto_protos_LogMessage_Priority_PRIO_UNUSED = 1,
    perfetto_protos_LogMessage_Priority_PRIO_VERBOSE = 2,
    perfetto_protos_LogMessage_Priority_PRIO_DEBUG = 3,
    perfetto_protos_LogMessage_Priority_PRIO_INFO = 4,
    perfetto_protos_LogMessage_Priority_PRIO_WARN = 5,
    perfetto_protos_LogMessage_Priority_PRIO_ERROR = 6,
    perfetto_protos_LogMessage_Priority_PRIO_FATAL = 7
} perfetto_protos_LogMessage_Priority;

/* Enum definition taken from:
 https://source.chromium.org/chromium/chromium/src/+/master:base/android/application_status_listener.h */
typedef enum _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState {
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_UNKNOWN = 0,
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_RUNNING_ACTIVITIES = 1,
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_PAUSED_ACTIVITIES = 2,
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_STOPPED_ACTIVITIES = 3,
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES = 4
} perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState;

typedef enum _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode {
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_NONE = 1,
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_IMMEDIATE = 2,
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_REGULAR = 3,
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_LATE = 4,
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_BLOCKED = 5
} perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState {
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_IDLE = 1,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME = 2,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE = 3
} perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState {
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_IDLE = 1,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_SENT = 2,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_READY_TO_COMMIT = 3
} perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState {
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_NONE = 1,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_ACTIVE = 2,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_CREATING = 3,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT = 4,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION = 5
} perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState {
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_IDLE = 1,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_COMMIT = 2,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_ACTIVATION = 3,
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_DRAW = 4
} perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority {
    perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES = 1,
    perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY = 2,
    perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY = 3
} perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority;

typedef enum _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState {
    perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_HANDLER_UNSPECIFIED = 0,
    perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_AFFECTS_SCROLL_HANDLER = 1,
    perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER = 2
} perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState;

/* JSON format has a "type" field that was always just "BeginFrameArgs" we
 drop this in the proto representation, and instead make the JSON format
 "subtype" field become the type field. */
typedef enum _perfetto_protos_BeginFrameArgs_BeginFrameArgsType {
    perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED = 0,
    perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_INVALID = 1,
    perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_NORMAL = 2,
    perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_MISSED = 3
} perfetto_protos_BeginFrameArgs_BeginFrameArgsType;

typedef enum _perfetto_protos_BeginImplFrameArgs_State {
    perfetto_protos_BeginImplFrameArgs_State_BEGIN_FRAME_FINISHED = 0,
    perfetto_protos_BeginImplFrameArgs_State_BEGIN_FRAME_USING = 1
} perfetto_protos_BeginImplFrameArgs_State;

typedef enum _perfetto_protos_ChromeFrameReporter_State {
    /* The frame did not have any updates to present. */
    perfetto_protos_ChromeFrameReporter_State_STATE_NO_UPDATE_DESIRED = 0,
    /* The frame presented all the desired updates (i.e. any updates requested
 from both the compositor thread and main-threads were handled). */
    perfetto_protos_ChromeFrameReporter_State_STATE_PRESENTED_ALL = 1,
    /* The frame was presented with some updates, but also missed some updates
 (e.g. missed updates from the main-thread, but included updates from the
 compositor thread). */
    perfetto_protos_ChromeFrameReporter_State_STATE_PRESENTED_PARTIAL = 2,
    /* The frame was dropped, i.e. some updates were desired for the frame, but
 was not presented. */
    perfetto_protos_ChromeFrameReporter_State_STATE_DROPPED = 3
} perfetto_protos_ChromeFrameReporter_State;

typedef enum _perfetto_protos_ChromeFrameReporter_FrameDropReason {
    perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_UNSPECIFIED = 0,
    /* Frame was dropped by the display-compositor.
 The display-compositor may drop a frame some times (e.g. the frame missed
 the deadline, or was blocked on surface-sync, etc.) */
    perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_DISPLAY_COMPOSITOR = 1,
    /* Frame was dropped because of the main-thread.
 The main-thread may cause a frame to be dropped, e.g. if the main-thread
 is running expensive javascript, or doing a lot of layout updates, etc. */
    perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_MAIN_THREAD = 2,
    /* Frame was dropped by the client compositor.
 The client compositor can drop some frames too (e.g. attempting to
 recover latency, missing the deadline, etc.). */
    perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_CLIENT_COMPOSITOR = 3
} perfetto_protos_ChromeFrameReporter_FrameDropReason;

typedef enum _perfetto_protos_ChromeFrameReporter_ScrollState {
    perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_NONE = 0,
    perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_MAIN_THREAD = 1,
    perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_COMPOSITOR_THREAD = 2,
    perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_RASTER = 3,
    /* Used when it can't be determined whether a scroll is in progress or not. */
    perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_UNKNOWN = 4
} perfetto_protos_ChromeFrameReporter_ScrollState;

typedef enum _perfetto_protos_ChromeFrameReporter_FrameType {
    perfetto_protos_ChromeFrameReporter_FrameType_FORKED = 0,
    perfetto_protos_ChromeFrameReporter_FrameType_BACKFILL = 1
} perfetto_protos_ChromeFrameReporter_FrameType;

/* NEXT ID: 12
 All step are optional but the enum is ordered (not by number) below in the
 order we expect them to appear if they are emitted in trace in a blocking
 fashion. */
typedef enum _perfetto_protos_ChromeLatencyInfo_Step {
    perfetto_protos_ChromeLatencyInfo_Step_STEP_UNSPECIFIED = 0,
    /* Emitted on the browser main thread. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_SEND_INPUT_EVENT_UI = 3,
    /* Happens on the renderer's compositor. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_IMPL = 5,
    perfetto_protos_ChromeLatencyInfo_Step_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL = 8,
    /* Occurs on the Renderer's main thread. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN = 4,
    perfetto_protos_ChromeLatencyInfo_Step_STEP_MAIN_THREAD_SCROLL_UPDATE = 2,
    perfetto_protos_ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT = 1,
    /* Could be emitted on both the renderer's main OR compositor. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL = 9,
    /* Optionally sometimes HANDLED_INPUT_EVENT_MAIN_OR_IMPL will proxy to the
 renderer's compositor and this will be emitted. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_IMPL = 10,
    /* Renderer's compositor. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_SWAP_BUFFERS = 6,
    /* Happens on the VizCompositor in the GPU process. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_DRAW_AND_SWAP = 7,
    /* Happens on the GPU main thread after the swap has completed. */
    perfetto_protos_ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS = 11 /* See above for NEXT ID, enum steps are not ordered by tag number. */
} perfetto_protos_ChromeLatencyInfo_Step;

/* This enum is a copy of LatencyComponentType enum in Chrome, located in
 ui/latency/latency_info.h, modulo added UNKNOWN value per protobuf
 practices. */
typedef enum _perfetto_protos_ChromeLatencyInfo_LatencyComponentType {
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED = 0,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH = 1,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL = 2,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL = 3,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL = 4,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_UI = 5,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN = 6,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN = 7,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL = 8,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT = 9,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH = 10,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP = 11,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME = 12,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER = 13,
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP = 14
} perfetto_protos_ChromeLatencyInfo_LatencyComponentType;

typedef enum _perfetto_protos_ChromeLatencyInfo_InputType {
    perfetto_protos_ChromeLatencyInfo_InputType_UNSPECIFIED_OR_OTHER = 0,
    perfetto_protos_ChromeLatencyInfo_InputType_TOUCH_MOVED = 1,
    perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_SCROLL_BEGIN = 2,
    perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_SCROLL_UPDATE = 3,
    perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_SCROLL_END = 4,
    perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_TAP = 5,
    perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_TAP_CANCEL = 6
} perfetto_protos_ChromeLatencyInfo_InputType;

typedef enum _perfetto_protos_ChromeLegacyIpc_MessageClass {
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_UNSPECIFIED = 0,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_AUTOMATION = 1,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_FRAME = 2,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_PAGE = 3,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_VIEW = 4,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_WIDGET = 5,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_INPUT = 6,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_TEST = 7,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_WORKER = 8,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_NACL = 9,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_GPU_CHANNEL = 10,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_MEDIA = 11,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_PPAPI = 12,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_CHROME = 13,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_DRAG = 14,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_PRINT = 15,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_EXTENSION = 16,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_TEXT_INPUT_CLIENT = 17,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_BLINK_TEST = 18,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_ACCESSIBILITY = 19,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_PRERENDER = 20,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_CHROMOTING = 21,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_BROWSER_PLUGIN = 22,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_ANDROID_WEB_VIEW = 23,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_NACL_HOST = 24,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_ENCRYPTED_MEDIA = 25,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_CAST = 26,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_GIN_JAVA_BRIDGE = 27,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_CHROME_UTILITY_PRINTING = 28,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_OZONE_GPU = 29,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_WEB_TEST = 30,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_NETWORK_HINTS = 31,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_EXTENSIONS_GUEST_VIEW = 32,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_GUEST_VIEW = 33,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_MEDIA_PLAYER_DELEGATE = 34,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_EXTENSION_WORKER = 35,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_SUBRESOURCE_FILTER = 36,
    perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_UNFREEZABLE_FRAME = 37
} perfetto_protos_ChromeLegacyIpc_MessageClass;

/* Type of the TrackEvent (required if |phase| in LegacyEvent is not set). */
typedef enum _perfetto_protos_TrackEvent_Type {
    perfetto_protos_TrackEvent_Type_TYPE_UNSPECIFIED = 0,
    /* Slice events are events that have a begin and end timestamp, i.e. a
 duration. They can be nested similar to a callstack: If, on the same
 track, event B begins after event A, but before A ends, B is a child
 event of A and will be drawn as a nested event underneath A in the UI.
 Note that child events should always end before their parents (e.g. B
 before A).

 Each slice event is formed by a pair of BEGIN + END events. The END event
 does not need to repeat any TrackEvent fields it has in common with its
 corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
 END pair will be merged during trace import.

 Note that we deliberately chose not to support COMPLETE events (which
 would specify a duration directly) since clients would need to delay
 writing them until the slice is completed, which can result in reordered
 events in the trace and loss of unfinished events at the end of a trace. */
    perfetto_protos_TrackEvent_Type_TYPE_SLICE_BEGIN = 1,
    perfetto_protos_TrackEvent_Type_TYPE_SLICE_END = 2,
    /* Instant events are nestable events without duration. They can be children
 of slice events on the same track. */
    perfetto_protos_TrackEvent_Type_TYPE_INSTANT = 3,
    /* Event that provides a value for a counter track. |track_uuid| should
 refer to a counter track and |counter_value| set to the new value. Note
 that most other TrackEvent fields (e.g. categories, name, ..) are not
 supported for TYPE_COUNTER events. See also CounterDescriptor. */
    perfetto_protos_TrackEvent_Type_TYPE_COUNTER = 4
} perfetto_protos_TrackEvent_Type;

typedef enum _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection {
    perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED = 0,
    perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_IN = 1,
    perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_OUT = 2,
    perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT = 3
} perfetto_protos_TrackEvent_LegacyEvent_FlowDirection;

typedef enum _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope {
    perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED = 0,
    perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_GLOBAL = 1,
    perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_PROCESS = 2,
    perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD = 3
} perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope;

typedef enum _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail {
    perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL = 0,
    perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_LIGHT = 1,
    perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND = 2
} perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail;

typedef enum _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units {
    perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED = 0,
    perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_BYTES = 1,
    perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT = 2
} perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units;

typedef enum _perfetto_protos_HeapGraphRoot_Type {
    perfetto_protos_HeapGraphRoot_Type_ROOT_UNKNOWN = 0,
    perfetto_protos_HeapGraphRoot_Type_ROOT_JNI_GLOBAL = 1,
    perfetto_protos_HeapGraphRoot_Type_ROOT_JNI_LOCAL = 2,
    perfetto_protos_HeapGraphRoot_Type_ROOT_JAVA_FRAME = 3,
    perfetto_protos_HeapGraphRoot_Type_ROOT_NATIVE_STACK = 4,
    perfetto_protos_HeapGraphRoot_Type_ROOT_STICKY_CLASS = 5,
    perfetto_protos_HeapGraphRoot_Type_ROOT_THREAD_BLOCK = 6,
    perfetto_protos_HeapGraphRoot_Type_ROOT_MONITOR_USED = 7,
    perfetto_protos_HeapGraphRoot_Type_ROOT_THREAD_OBJECT = 8,
    perfetto_protos_HeapGraphRoot_Type_ROOT_INTERNED_STRING = 9,
    perfetto_protos_HeapGraphRoot_Type_ROOT_FINALIZING = 10,
    perfetto_protos_HeapGraphRoot_Type_ROOT_DEBUGGER = 11,
    perfetto_protos_HeapGraphRoot_Type_ROOT_REFERENCE_CLEANUP = 12,
    perfetto_protos_HeapGraphRoot_Type_ROOT_VM_INTERNAL = 13,
    perfetto_protos_HeapGraphRoot_Type_ROOT_JNI_MONITOR = 14
} perfetto_protos_HeapGraphRoot_Type;

typedef enum _perfetto_protos_HeapGraphType_Kind {
    perfetto_protos_HeapGraphType_Kind_KIND_UNKNOWN = 0,
    perfetto_protos_HeapGraphType_Kind_KIND_NORMAL = 1,
    perfetto_protos_HeapGraphType_Kind_KIND_NOREFERENCES = 2,
    perfetto_protos_HeapGraphType_Kind_KIND_STRING = 3,
    perfetto_protos_HeapGraphType_Kind_KIND_ARRAY = 4,
    perfetto_protos_HeapGraphType_Kind_KIND_CLASS = 5,
    perfetto_protos_HeapGraphType_Kind_KIND_CLASSLOADER = 6,
    perfetto_protos_HeapGraphType_Kind_KIND_DEXCACHE = 7,
    perfetto_protos_HeapGraphType_Kind_KIND_SOFT_REFERENCE = 8,
    perfetto_protos_HeapGraphType_Kind_KIND_WEAK_REFERENCE = 9,
    perfetto_protos_HeapGraphType_Kind_KIND_FINALIZER_REFERENCE = 10,
    perfetto_protos_HeapGraphType_Kind_KIND_PHANTOM_REFERENCE = 11
} perfetto_protos_HeapGraphType_Kind;

typedef enum _perfetto_protos_HeapGraphObject_HeapType {
    perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_UNKNOWN = 0,
    perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_APP = 1,
    perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_ZYGOTE = 2,
    perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_BOOT_IMAGE = 3
} perfetto_protos_HeapGraphObject_HeapType;

typedef enum _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError {
    perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE = 0,
    perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_HIT_TIMEOUT = 1,
    perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS = 2
} perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError;

typedef enum _perfetto_protos_Profiling_CpuMode {
    perfetto_protos_Profiling_CpuMode_MODE_UNKNOWN = 0,
    perfetto_protos_Profiling_CpuMode_MODE_KERNEL = 1,
    perfetto_protos_Profiling_CpuMode_MODE_USER = 2,
    /* The following values aren't expected, but included for completeness: */
    perfetto_protos_Profiling_CpuMode_MODE_HYPERVISOR = 3,
    perfetto_protos_Profiling_CpuMode_MODE_GUEST_KERNEL = 4,
    perfetto_protos_Profiling_CpuMode_MODE_GUEST_USER = 5
} perfetto_protos_Profiling_CpuMode;

/* Enumeration of libunwindstack's error codes.
 NB: the integral representations of the two enums are different. */
typedef enum _perfetto_protos_Profiling_StackUnwindError {
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN = 0,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_NONE = 1,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_MEMORY_INVALID = 2,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_UNWIND_INFO = 3,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_UNSUPPORTED = 4,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_INVALID_MAP = 5,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_MAX_FRAMES_EXCEEDED = 6,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_REPEATED_FRAME = 7,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_INVALID_ELF = 8,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_SYSTEM_CALL = 9,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_THREAD_TIMEOUT = 10,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST = 11,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_BAD_ARCH = 12,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_MAPS_PARSE = 13,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_INVALID_PARAMETER = 14,
    perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_PTRACE_CALL = 15
} perfetto_protos_Profiling_StackUnwindError;

/* If set, indicates that the profiler encountered a sample that was relevant,
 but was skipped. */
typedef enum _perfetto_protos_PerfSample_SampleSkipReason {
    perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN = 0,
    perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_READ_STAGE = 1,
    perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_STAGE = 2,
    perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE = 3,
    perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_NOT_IN_SCOPE = 4
} perfetto_protos_PerfSample_SampleSkipReason;

typedef enum _perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason {
    perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN = 0,
    perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL = 1
} perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason;

/* Type of resource that may have exhibited pressure stalls.
    * _SOME indicates some resource tasks stalled.
    * _FULL indicates all non-idle resource tasks stalled simultaneously. */
typedef enum _perfetto_protos_SysStats_PsiSample_PsiResource {
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_UNSPECIFIED = 0,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_SOME = 1,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_FULL = 2,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_SOME = 3,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_FULL = 4,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_SOME = 5,
    perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL = 6
} perfetto_protos_SysStats_PsiSample_PsiResource;

/* See chromium's content::ProcessType. */
typedef enum _perfetto_protos_ProcessDescriptor_ChromeProcessType {
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_UNSPECIFIED = 0,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_BROWSER = 1,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_RENDERER = 2,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_UTILITY = 3,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_ZYGOTE = 4,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_SANDBOX_HELPER = 5,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_GPU = 6,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_PLUGIN = 7,
    perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER = 8
} perfetto_protos_ProcessDescriptor_ChromeProcessType;

typedef enum _perfetto_protos_ThreadDescriptor_ChromeThreadType {
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_UNSPECIFIED = 0,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MAIN = 1,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_IO = 2,
    /* Scheduler: */
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_WORKER = 3,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FG_WORKER = 4,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FB_BLOCKING = 5,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_BLOCKING = 6,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_SERVICE = 7,
    /* Compositor: */
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR = 8,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_VIZ_COMPOSITOR = 9,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR_WORKER = 10,
    /* Renderer: */
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SERVICE_WORKER = 11,
    /* Tracing related threads: */
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MEMORY_INFRA = 50,
    perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SAMPLING_PROFILER = 51
} perfetto_protos_ThreadDescriptor_ChromeThreadType;

/* See chromium's content::ProcessType. */
typedef enum _perfetto_protos_ChromeProcessDescriptor_ProcessType {
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_UNSPECIFIED = 0,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_BROWSER = 1,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_RENDERER = 2,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_UTILITY = 3,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_ZYGOTE = 4,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SANDBOX_HELPER = 5,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_GPU = 6,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_PPAPI_PLUGIN = 7,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_PPAPI_BROKER = 8,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_NETWORK = 9,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_TRACING = 10,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_STORAGE = 11,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_AUDIO = 12,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_DATA_DECODER = 13,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_UTIL_WIN = 14,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_PROXY_RESOLVER = 15,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_CDM = 16,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_VIDEO_CAPTURE = 17,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_UNZIPPER = 18,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_MIRRORING = 19,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_FILEPATCHER = 20,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_TTS = 21,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_PRINTING = 22,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_QUARANTINE = 23,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_CROS_LOCALSEARCH = 24,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER = 25,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_FILEUTIL = 26,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_PRINTCOMPOSITOR = 27,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_PAINTPREVIEW = 28,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_SPEECHRECOGNITION = 29,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_XRDEVICE = 30,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_READICON = 31,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_LANGUAGEDETECTION = 32,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_SHARING = 33,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_MEDIAPARSER = 34,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_QRCODEGENERATOR = 35,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_PROFILEIMPORT = 36,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_IME = 37,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_RECORDING = 38,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_SHAPEDETECTION = 39,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_RENDERER_EXTENSION = 40,
    perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_MEDIA_FOUNDATION = 41
} perfetto_protos_ChromeProcessDescriptor_ProcessType;

typedef enum _perfetto_protos_ChromeThreadDescriptor_ThreadType {
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_UNSPECIFIED = 0,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_MAIN = 1,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_IO = 2,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_WORKER = 3,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_WORKER = 4,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_POOL_FG_BLOCKING = 5,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_POOL_BG_BLOCKING = 6,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_POOL_SERVICE = 7,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR = 8,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_VIZ_COMPOSITOR = 9,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_WORKER = 10,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_SERVICE_WORKER = 11,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_NETWORK_SERVICE = 12,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_CHILD_IO = 13,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_BROWSER_IO = 14,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_BROWSER_MAIN = 15,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_RENDERER_MAIN = 16,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_UTILITY_MAIN = 17,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_GPU_MAIN = 18,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_CACHE_BLOCKFILE = 19,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_MEDIA = 20,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_AUDIO_OUTPUTDEVICE = 21,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_AUDIO_INPUTDEVICE = 22,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_GPU_MEMORY = 23,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_GPU_VSYNC = 24,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_DXA_VIDEODECODER = 25,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_BROWSER_WATCHDOG = 26,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WEBRTC_NETWORK = 27,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WINDOW_OWNER = 28,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WEBRTC_SIGNALING = 29,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WEBRTC_WORKER = 30,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_PPAPI_MAIN = 31,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_GPU_WATCHDOG = 32,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_SWAPPER = 33,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_GAMEPAD_POLLING = 34,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WEBCRYPTO = 35,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_DATABASE = 36,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_PROXYRESOLVER = 37,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_DEVTOOLSADB = 38,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_NETWORKCONFIGWATCHER = 39,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_WASAPI_RENDER = 40,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_LOADER_LOCK_SAMPLER = 41,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_MEMORY_INFRA = 50,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_SAMPLING_PROFILER = 51,
    perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_GPU = 52
} perfetto_protos_ChromeThreadDescriptor_ThreadType;

/* Built-in counters, usually with special meaning in the client library,
 trace processor, legacy JSON format, or UI. Trace processor will infer a
 track name from the enum value if none is provided in TrackDescriptor. */
typedef enum _perfetto_protos_CounterDescriptor_BuiltinCounterType {
    perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_UNSPECIFIED = 0,
    /* implies UNIT_TIME_NS. */
    perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_TIME_NS = 1,
    /* implies UNIT_COUNT. */
    perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT = 2
} perfetto_protos_CounterDescriptor_BuiltinCounterType;

/* Type of the values for the counters - to supply lower granularity units,
 see also |unit_multiplier|. */
typedef enum _perfetto_protos_CounterDescriptor_Unit {
    perfetto_protos_CounterDescriptor_Unit_UNIT_UNSPECIFIED = 0,
    perfetto_protos_CounterDescriptor_Unit_UNIT_TIME_NS = 1,
    perfetto_protos_CounterDescriptor_Unit_UNIT_COUNT = 2,
    perfetto_protos_CounterDescriptor_Unit_UNIT_SIZE_BYTES = 3 /* TODO(eseckler): Support more units as necessary. */
} perfetto_protos_CounterDescriptor_Unit;

/* Specifies how the UI should display child tracks of this track (i.e. tracks
 where `parent_uuid` is specified to this track `uuid`). Note that this
 value is simply a *hint* to the UI: the UI is not guarnateed to respect
 this if it has a good reason not to do so.

 Note: for tracks where `thread` or `process` are set, this option is
 *ignored*. See `parent_uuid` for details. */
typedef enum _perfetto_protos_TrackDescriptor_ChildTracksOrdering {
    /* The default ordering, with no bearing on how the UI will visualise the
 tracks. */
    perfetto_protos_TrackDescriptor_ChildTracksOrdering_UNKNOWN = 0,
    /* Order tracks by `name` or `static_name` depending on which one has been
 specified. */
    perfetto_protos_TrackDescriptor_ChildTracksOrdering_LEXICOGRAPHIC = 1,
    /* Order tracks by the first `ts` event in a track. */
    perfetto_protos_TrackDescriptor_ChildTracksOrdering_CHRONOLOGICAL = 2,
    /* Order tracks by `sibling_order_rank` of child tracks. Child tracks with
 the lower values will be shown before tracks with higher values. Tracks
 with no value will be treated as having 0 rank. */
    perfetto_protos_TrackDescriptor_ChildTracksOrdering_EXPLICIT = 3
} perfetto_protos_TrackDescriptor_ChildTracksOrdering;

typedef enum _perfetto_protos_TracePacket_SequenceFlags {
    perfetto_protos_TracePacket_SequenceFlags_SEQ_UNSPECIFIED = 0,
    /* Set by the writer to indicate that it will re-emit any incremental data
 for the packet's sequence before referring to it again. This includes
 interned data as well as periodically emitted data like
 Process/ThreadDescriptors. This flag only affects the current packet
 sequence (see |trusted_packet_sequence_id|).

 When set, this TracePacket and subsequent TracePackets on the same
 sequence will not refer to any incremental data emitted before this
 TracePacket. For example, previously emitted interned data will be
 re-emitted if it is referred to again.

 When the reader detects packet loss (|previous_packet_dropped|), it needs
 to skip packets in the sequence until the next one with this flag set, to
 ensure intact incremental data. */
    perfetto_protos_TracePacket_SequenceFlags_SEQ_INCREMENTAL_STATE_CLEARED = 1,
    /* This packet requires incremental state, such as TracePacketDefaults or
 InternedData, to be parsed correctly. The trace reader should skip this
 packet if incremental state is not valid on this sequence, i.e. if no
 packet with the SEQ_INCREMENTAL_STATE_CLEARED flag has been seen on the
 current |trusted_packet_sequence_id|. */
    perfetto_protos_TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE = 2
} perfetto_protos_TracePacket_SequenceFlags;

/* Struct definitions */
typedef struct _perfetto_protos_FtraceDescriptor {
    /* Report the available atrace categories.

 Used by Traceur via `perfetto --query`. */
    pb_callback_t atrace_categories;
} perfetto_protos_FtraceDescriptor;

typedef struct _perfetto_protos_FtraceDescriptor_AtraceCategory {
    pb_callback_t name;
    pb_callback_t description;
} perfetto_protos_FtraceDescriptor_AtraceCategory;

/* Description of GPU counters.
 This message is sent by a GPU counter producer to specify the counters
 available in the hardware. */
typedef struct _perfetto_protos_GpuCounterDescriptor {
    pb_callback_t specs;
    pb_callback_t blocks;
    /* optional.  Minimum sampling period supported by the producer in
 nanoseconds. */
    bool has_min_sampling_period_ns;
    uint64_t min_sampling_period_ns;
    /* optional.  Maximum sampling period supported by the producer in
 nanoseconds. */
    bool has_max_sampling_period_ns;
    uint64_t max_sampling_period_ns;
    /* optional.  The producer supports counter sampling by instrumenting the
 command buffer. */
    bool has_supports_instrumented_sampling;
    bool supports_instrumented_sampling;
} perfetto_protos_GpuCounterDescriptor;

typedef struct _perfetto_protos_GpuCounterDescriptor_GpuCounterSpec {
    bool has_counter_id;
    uint32_t counter_id;
    pb_callback_t name;
    pb_callback_t description;
    pb_size_t which_peak_value;
    union _perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_peak_value {
        int64_t int_peak_value;
        double double_peak_value;
    } peak_value;
    pb_callback_t numerator_units;
    pb_callback_t denominator_units;
    bool has_select_by_default;
    bool select_by_default;
    pb_callback_t groups;
} perfetto_protos_GpuCounterDescriptor_GpuCounterSpec;

/* Allow producer to group counters into block to represent counter islands.
 A capacity may be specified to indicate the number of counters that can be
 enable simultaneously in that block. */
typedef struct _perfetto_protos_GpuCounterDescriptor_GpuCounterBlock {
    /* required. Unique ID for the counter group. */
    bool has_block_id;
    uint32_t block_id;
    /* optional. Number of counters supported by the block. No limit if unset. */
    bool has_block_capacity;
    uint32_t block_capacity;
    /* optional. Name of block. */
    pb_callback_t name;
    /* optional. Description for the block. */
    pb_callback_t description;
    /* list of counters that are part of the block. */
    pb_callback_t counter_ids;
} perfetto_protos_GpuCounterDescriptor_GpuCounterBlock;

typedef struct _perfetto_protos_TrackEventCategory {
    pb_callback_t name;
    pb_callback_t description;
    pb_callback_t tags;
} perfetto_protos_TrackEventCategory;

typedef struct _perfetto_protos_TrackEventDescriptor {
    pb_callback_t available_categories;
} perfetto_protos_TrackEventDescriptor;

/* This message is sent from Producer(s) to the tracing Service when registering
 to advertise their capabilities. It describes the structure of tracing
 protos that will be produced by the data source and the supported filters. */
typedef struct _perfetto_protos_DataSourceDescriptor {
    /* e.g., "linux.ftrace", "chromium.tracing" */
    pb_callback_t name;
    /* When true the data source is expected to ack the stop request through the
 NotifyDataSourceStopped() IPC. This field has been introduced after
 Android P in Jul 2018 and is not supported on older versions. */
    bool has_will_notify_on_stop;
    bool will_notify_on_stop;
    /* When true the data source is expected to ack the start request through the
 NotifyDataSourceStarted() IPC. This field has been introduced after
 Android P in March 2019 and is not supported on older versions. */
    bool has_will_notify_on_start;
    bool will_notify_on_start;
    /* If true, opt into receiving the ClearIncrementalState() IPC. This should be
 set if the data source writes packets that refer to previous trace
 contents, and knows how to stop referring to the already-emitted data. */
    bool has_handles_incremental_state_clear;
    bool handles_incremental_state_clear;
    /* Optional specification about available GPU counters. */
    bool has_gpu_counter_descriptor;
    perfetto_protos_GpuCounterDescriptor gpu_counter_descriptor;
    bool has_track_event_descriptor;
    perfetto_protos_TrackEventDescriptor track_event_descriptor;
    /* When non-zero, this is a unique ID within the scope of the Producer for
 this data source (it is NOT globally unique). This is useful to
 differentiate between data sources with matching names when calling
 UpdateDataSource(). This field has been introduced in November 2021
 (v22, Android T) and is not supported on older versions. */
    bool has_id;
    uint64_t id;
    bool has_ftrace_descriptor;
    perfetto_protos_FtraceDescriptor ftrace_descriptor;
    /* If true, indicates that the data source does nothing upon Flush. This
 allows the service to reduce the flush-related IPC traffic and better deal
 with frozen producers (see go/perfetto-frozen). This is usually the case
 for data sources like 'track_event' that don't have access to the various
 thread task runners to post a flush task and rely purely on server-side
 scraping.
 Introduced in v39 / Android V. */
    bool has_no_flush;
    bool no_flush;
} perfetto_protos_DataSourceDescriptor;

/* Reports the state of the tracing service. Used to gather details about the
 data sources connected.
 See ConsumerPort::QueryServiceState(). */
typedef struct _perfetto_protos_TracingServiceState {
    /* Lists all the producers connected. */
    pb_callback_t producers;
    /* Lists the data sources available. */
    pb_callback_t data_sources;
    /* Total number of tracing sessions. */
    bool has_num_sessions;
    int32_t num_sessions;
    /* Number of tracing sessions in the started state. Always <= num_sessions. */
    bool has_num_sessions_started;
    int32_t num_sessions_started;
    /* The version of traced (the same returned by `traced --version`).
 This is a human readable string with and its format varies depending on
 the build system and the repo (standalone vs AOSP).
 This is intended for human debugging only. */
    pb_callback_t tracing_service_version;
    /* Lists the tracing sessions active AND owned by a consumer that has the same
 UID of the caller (or all of them if the caller is root).
 Introduced in v24 / Android T. */
    pb_callback_t tracing_sessions;
    /* This is always set to true from v24 and beyond. This flag is only used to
 tell the difference between: (1) talking to a recent service which happens
 to have no tracing session active; (2) talking to an older version of the
 service which will never report any tracing session. */
    bool has_supports_tracing_sessions;
    bool supports_tracing_sessions;
} perfetto_protos_TracingServiceState;

/* Describes a producer process. */
typedef struct _perfetto_protos_TracingServiceState_Producer {
    /* Unique ID of the producer (monotonic counter). */
    bool has_id;
    int32_t id;
    /* Typically matches the process name. */
    pb_callback_t name;
    /* Unix uid of the remote process. */
    bool has_uid;
    int32_t uid;
    /* The version of the client library used by the producer.
 This is a human readable string with and its format varies depending on
 the build system and the repo (standalone vs AOSP).
 This is intended for human debugging only. */
    pb_callback_t sdk_version;
    /* Unix pid of the remote process. Supported only on Linux-based systems.
 Introduced in v24 / Android T. */
    bool has_pid;
    int32_t pid;
    /* Returns true if the process appears to be frozen (Android only).
 Introduced in Perfetto V49 / Android 24Q4. */
    bool has_frozen;
    bool frozen;
} perfetto_protos_TracingServiceState_Producer;

/* Describes a data source registered by a producer. Data sources are listed
 regardless of the fact that they are being used or not. */
typedef struct _perfetto_protos_TracingServiceState_DataSource {
    /* Descriptor passed by the data source when calling RegisterDataSource(). */
    bool has_ds_descriptor;
    perfetto_protos_DataSourceDescriptor ds_descriptor;
    /* ID of the producer, as per Producer.id. */
    bool has_producer_id;
    int32_t producer_id;
} perfetto_protos_TracingServiceState_DataSource;

typedef struct _perfetto_protos_TracingServiceState_TracingSession {
    /* The TracingSessionID. */
    bool has_id;
    uint64_t id;
    /* The Unix uid of the consumer that started the session.
 This is meaningful only if the caller is root. In all other cases only
 tracing sessions that match the caller UID will be displayed. */
    bool has_consumer_uid;
    int32_t consumer_uid;
    /* Internal state of the tracing session.
 These strings are FYI only and subjected to change. */
    pb_callback_t state;
    /* The unique_session_name as set in the trace config (might be empty). */
    pb_callback_t unique_session_name;
    /* The number and size of each buffer. */
    pb_callback_t buffer_size_kb;
    /* Duration, as specified in the TraceConfig.duration_ms. */
    bool has_duration_ms;
    uint32_t duration_ms;
    /* Number of data sources involved in the session. */
    bool has_num_data_sources;
    uint32_t num_data_sources;
    /* Time when the session was started, in the CLOCK_REALTIME domain.
 Available only on Linux-based systems. */
    bool has_start_realtime_ns;
    int64_t start_realtime_ns;
    /* The bugreport_score, as set in TraceConfig.bugreport_score. */
    bool has_bugreport_score;
    int32_t bugreport_score;
    /* As per TraceConfig.bugreport_filename. */
    pb_callback_t bugreport_filename;
    /* If true, the session is in the STARTED state. If false the session is in
 any other state (see `state` field). */
    bool has_is_started;
    bool is_started;
} perfetto_protos_TracingServiceState_TracingSession;

/* Data source that lists game modes and game interventions of games
 on an Android device. */
typedef struct _perfetto_protos_AndroidGameInterventionListConfig {
    /* If not empty, emit info about only the following list of package names
 (exact match, no regex). Otherwise, emit info about all packages. */
    pb_callback_t package_name_filter;
} perfetto_protos_AndroidGameInterventionListConfig;

/* Custom configuration for the "android.input.inputevent" data source.

 NOTE: Input traces can only be taken on debuggable (userdebug/eng) builds!

 Next ID: 5 */
typedef struct _perfetto_protos_AndroidInputEventConfig {
    /* The tracing mode to use. If unspecified, it will default to
 TRACE_MODE_USE_RULES. */
    bool has_mode;
    perfetto_protos_AndroidInputEventConfig_TraceMode mode;
    /* The list of rules to use to determine the trace level of events.
 Each event will be traced using the TraceLevel of the first rule that it
 triggers from this list. The rules are evaluated in the order in which they
 are specified. If an event does not match any of the rules,
 TRACE_LEVEL_NONE will be used by default. */
    pb_callback_t rules;
    /* Trace input events processed by the system as they are being dispatched
 to application windows. All trace rules will apply.
   - If this flag is used without enabling trace_dispatcher_window_dispatch,
   it will
     trace InputDispatcher's inbound events (which does not include events
     synthesized within InputDispatcher) that match the rules.
   - If used with trace_dispatcher_window_dispatch, all inbound and outbound
   events
     matching the rules, including all events synthesized within
     InputDispatcher, will be traced. */
    bool has_trace_dispatcher_input_events;
    bool trace_dispatcher_input_events;
    /* Trace details about which windows the system is sending each input event
 to. All trace rules will apply. */
    bool has_trace_dispatcher_window_dispatch;
    bool trace_dispatcher_window_dispatch;
} perfetto_protos_AndroidInputEventConfig;

/* A rule that specifies the TraceLevel for an event based on matching
 conditions. All matchers in the rule are optional. To trigger this rule, an
 event must match all of its specified matchers (i.e. the matchers function
 like a series of conditions connected by a logical 'AND' operator). A rule
 with no specified matchers will match all events. Next ID: 6 */
typedef struct _perfetto_protos_AndroidInputEventConfig_TraceRule {
    /* The trace level to be used for events that trigger this rule.
 If unspecified, TRACE_LEVEL_NONE will be used by default. */
    bool has_trace_level;
    perfetto_protos_AndroidInputEventConfig_TraceLevel trace_level;
    /* Package matchers

 Respectively matches if all or any of the target apps for this event are
 contained in the specified list of package names.

 Intended usage:
   - Use match_all_packages to selectively allow tracing for the listed
   packages.
   - Use match_any_packages to selectively deny tracing for certain
   packages.

 WARNING: Great care must be taken when designing rules for field tracing!
          This is because each event is almost always sent to more than
          one app.
              For example, when allowing tracing for a package that has a
              spy window
          over the display (e.g. SystemUI) using match_any_packages,
          essentially all input will be recorded on that display. This is
          because the events will be sent to the spy as well as the
          foreground app, and regardless of what the foreground app is,
          the event will end up being traced.
              Alternatively, when attempting to block tracing for specific
              packages using
          match_all_packages, no events will likely be blocked. This is
          because the event will also be sent to other apps (such as, but
          not limited to, ones with spy windows), so the matcher will not
          match unless all other targets are also listed under the
          match_all_packages list. */
    pb_callback_t match_all_packages;
    pb_callback_t match_any_packages;
    /* Matches if the event is secure, which means that at least one of the
 targets of this event is using the window flag FLAG_SECURE. */
    bool has_match_secure;
    bool match_secure;
    /* Matches if there was an active IME connection while this event was being
 processed. */
    bool has_match_ime_connection_active;
    bool match_ime_connection_active;
} perfetto_protos_AndroidInputEventConfig_TraceRule;

typedef struct _perfetto_protos_AndroidLogConfig {
    pb_callback_t log_ids;
    /* If set ignores all log messages whose prio is < the given value. */
    bool has_min_prio;
    perfetto_protos_AndroidLogPriority min_prio;
    /* If non-empty ignores all log messages whose tag doesn't match one of the
 specified values. */
    pb_callback_t filter_tags;
} perfetto_protos_AndroidLogConfig;

/* Data source that polls for display state. This should only be used for
 backward-compatibility; AndroidSystemPropertyConfig should be preferred. */
typedef struct _perfetto_protos_AndroidPolledStateConfig {
    /* Frequency of polling. If absent the state will be recorded once, at the
 start of the trace.
 This is required to be > 100ms to avoid excessive CPU usage. */
    bool has_poll_ms;
    uint32_t poll_ms;
} perfetto_protos_AndroidPolledStateConfig;

/* Data source that controls the system properties used to guard initialization
 of track_event producers (i.e. Skia) in apps using HWUI, and certain
 processes like SurfaceFlinger.

 This data source only tells Skia to initialized the Perfetto SDK and start
 routing data to the Track Event system instead of ATrace. For those events
 to actually show up in a trace, the track_event data source must be used as
 well. The Perfetto SDK cannot be de-initialized, so some long-lived apps and
 processes may need to be restarted for Skia to revert to using ATrace if
 Track Events are no longer desired.

 In addition to switching Skia to use Perfetto's track_event data source,
 this "guard" also controls Skia's "broad tracing", which removes Skia's
 internal tracing constraints and allows the track_event config to specify
 which categories should be traced. Filtering to the "skia.always" category
 *tag* in a track_event config can be used to re-enable the standard
 constraints typically used with ATrace.

 Data source name: android.sdk_sysprop_guard
 Introduced in Android 14 (U) QPR1.
 Next id: 4 */
typedef struct _perfetto_protos_AndroidSdkSyspropGuardConfig {
    /* If true, configures SurfaceFlinger to initialize Skia's Perfetto
 integration with the track_event data source in RenderEngine.
 If false or omitted, the simpler ATrace fallback is used.

 NOTE: once enabled, Skia will only revert to ATrace if SurfaceFlinger is
 restarted.

 Specifically this sets the following system properties:
   - debug.tracing.ctl.renderengine.skia_tracing_enabled
   - debug.tracing.ctl.renderengine.skia_use_perfetto_track_events

 Does not affect actual track_event data *collection*, which must be
 configured separately. */
    bool has_surfaceflinger_skia_track_events;
    bool surfaceflinger_skia_track_events;
    /* If true, configures HWUI apps to initialize Skia's Perfetto integration
 with the track_event data source. hwui_package_name_filter
 can be used to control which apps are affected.
 If false or omitted, the simpler ATrace fallback is used.

 NOTE: once enabled, Skia will only revert to ATrace if the app is
 restarted.

 ATTENTION: affects ALL HWUI APPS if hwui_package_name_filter is not set!
 If filtering is NOT set, this controls these GLOBAL system properties:
   - debug.tracing.ctl.hwui.skia_tracing_enabled
   - debug.tracing.ctl.hwui.skia_use_perfetto_track_events
 If filtering IS set, this controls these APP-SPECIFIC system properties,
 for each package listed in the filter:
   - debug.tracing.ctl.hwui.skia_tracing_enabled.<package.name>
   - debug.tracing.ctl.hwui.skia_use_perfetto_track_events.<package.name>

 Does not affect actual track_event data *collection*, which must be
 configured separately. */
    bool has_hwui_skia_track_events;
    bool hwui_skia_track_events;
    /* If non-empty, hwui_skia_track_events applies to only the packages listed.
 Otherwise, hwui_skia_track_events applies globally to all HWUI apps. */
    pb_callback_t hwui_package_name_filter;
} perfetto_protos_AndroidSdkSyspropGuardConfig;

/* Data source that polls for system properties. */
typedef struct _perfetto_protos_AndroidSystemPropertyConfig {
    /* Frequency of polling. If absent the state will be recorded once, at the
 start of the trace.
 This is required to be > 100ms to avoid excessive CPU usage. */
    bool has_poll_ms;
    uint32_t poll_ms;
    /* Properties to poll. All property names must start with "debug.tracing.". */
    pb_callback_t property_name;
} perfetto_protos_AndroidSystemPropertyConfig;

/* Configuration for the android.app_wakelocks data source. */
typedef struct _perfetto_protos_AppWakelocksConfig {
    /* Specifies the delay (in milliseconds) after which the data source will
 attempt to write events. Writing less frequently reduces the trace size by
 making better use of the packed arrays and reducing the total number of
 TracePackets needed (which each have dozens of bytes of overhead). The
 suggested delay is 5000ms. */
    bool has_write_delay_ms;
    int32_t write_delay_ms;
    /* When set, wakelocks held for less than this amount of time are filtered
 from the resulting trace. Note: duration is computed by matching wakelocks
 with identical attributes, not by tracking the underlying objects. The
 threshold should be < the trace's flush_period_ms. */
    bool has_filter_duration_below_ms;
    int32_t filter_duration_below_ms;
    /* When true, the owner_pid is dropped from the resulting output, reducing the
 size of the interning tables. */
    bool has_drop_owner_pid;
    bool drop_owner_pid;
} perfetto_protos_AppWakelocksConfig;

/* Data source that records kernel (and native) wakelock data. */
typedef struct _perfetto_protos_KernelWakelocksConfig {
    /* Record at this frequency. */
    bool has_poll_ms;
    uint32_t poll_ms;
} perfetto_protos_KernelWakelocksConfig;

/* Network tracing data source that records details on all packets sent or
 received by the network. */
typedef struct _perfetto_protos_NetworkPacketTraceConfig {
    /* Polling frequency in milliseconds. Network tracing writes to a fixed size
 ring buffer. The polling interval should be such that the ring buffer is
 unlikely to fill in that interval (or that filling is an acceptable risk).
 The minimum polling rate is 100ms (values below this are ignored).
 Introduced in Android 14 (U). */
    bool has_poll_ms;
    uint32_t poll_ms;
    /* The aggregation_threshold is the number of packets at which an event will
 switch from per-packet details to aggregate details. For example, a value
 of 50 means that if a particular event (grouped by the unique combinations
 of metadata fields: {interface, direction, uid, etc}) has fewer than 50
 packets, the exact timestamp and length are recorded for each packet. If
 there were 50 or more packets in an event, it would only record the total
 duration, packets, and length. A value of zero or unspecified will always
/ record per-packet details. A value of 1 always records aggregate details. */
    bool has_aggregation_threshold;
    uint32_t aggregation_threshold;
    /* Specifies the maximum number of packet contexts to intern at a time. This
 prevents the interning table from growing too large and controls whether
 interning is enabled or disabled (a value of zero disables interning and
 is the default). When a data sources interning table reaches this amount,
 packet contexts will be inlined into NetworkPacketEvents. */
    bool has_intern_limit;
    uint32_t intern_limit;
    /* The following fields specify whether certain fields should be dropped from
 the output. Dropping fields improves normalization results, reduces the
 size of the interning table, and slightly reduces event size. */
    bool has_drop_local_port;
    bool drop_local_port;
    bool has_drop_remote_port;
    bool drop_remote_port;
    bool has_drop_tcp_flags;
    bool drop_tcp_flags;
} perfetto_protos_NetworkPacketTraceConfig;

/* Data source that lists details (such as version code) about packages on an
 Android device. */
typedef struct _perfetto_protos_PackagesListConfig {
    /* If not empty, emit info about only the following list of package names
 (exact match, no regex). Otherwise, emit info about all packages. */
    pb_callback_t package_name_filter;
} perfetto_protos_PackagesListConfig;

/* Data source that records events from the modem. */
typedef struct _perfetto_protos_PixelModemConfig {
    bool has_event_group;
    perfetto_protos_PixelModemConfig_EventGroup event_group;
    /* If set, record only events with these hashes. */
    pb_callback_t pigweed_hash_allow_list;
    /* If set and allow_list is not set, deny events with these hashes. */
    pb_callback_t pigweed_hash_deny_list;
} perfetto_protos_PixelModemConfig;

/* Custom configuration for the "android.protolog" data source.
 ProtoLog is a logging mechanism that is intented to be more efficient than
 logcat. This configures what logs to capture in the tracing instance. */
typedef struct _perfetto_protos_ProtoLogConfig {
    /* Specified the configurations for each of the logging groups. If none is
 specified for a group the defaults will be used. */
    pb_callback_t group_overrides;
    /* Specified what tracing mode to use for the tracing instance. */
    bool has_tracing_mode;
    perfetto_protos_ProtoLogConfig_TracingMode tracing_mode;
    /* If set, any message with log level higher than this level (inclusive) will
 be traced. Group overrides take precedence over this value. */
    bool has_default_log_from_level;
    perfetto_protos_ProtoLogLevel default_log_from_level;
} perfetto_protos_ProtoLogConfig;

typedef struct _perfetto_protos_ProtoLogGroup {
    /* The ProtoLog group name this configuration entry applies to. */
    pb_callback_t group_name;
    /* Specify the level from which to start capturing protologs.
 e.g. if ProtoLogLevel.WARN is specified only warning, errors and fatal log
 message will be traced. */
    bool has_log_from;
    perfetto_protos_ProtoLogLevel log_from;
    /* When set to true we will collect the stacktrace for each protolog message
 in this group that we are tracing. */
    bool has_collect_stacktrace;
    bool collect_stacktrace;
} perfetto_protos_ProtoLogGroup;

/* Custom configuration for the "android.surfaceflinger.layers" data source. */
typedef struct _perfetto_protos_SurfaceFlingerLayersConfig {
    bool has_mode;
    perfetto_protos_SurfaceFlingerLayersConfig_Mode mode;
    pb_callback_t trace_flags;
} perfetto_protos_SurfaceFlingerLayersConfig;

/* Custom configuration for the "android.surfaceflinger.transactions" data
 source. */
typedef struct _perfetto_protos_SurfaceFlingerTransactionsConfig {
    bool has_mode;
    perfetto_protos_SurfaceFlingerTransactionsConfig_Mode mode;
} perfetto_protos_SurfaceFlingerTransactionsConfig;

/* Custom configuration for the "android.windowmanager" data source. */
typedef struct _perfetto_protos_WindowManagerConfig {
    bool has_log_frequency;
    perfetto_protos_WindowManagerConfig_LogFrequency log_frequency;
    bool has_log_level;
    perfetto_protos_WindowManagerConfig_LogLevel log_level;
} perfetto_protos_WindowManagerConfig;

typedef struct _perfetto_protos_ChromeConfig {
    pb_callback_t trace_config;
    /* When enabled, the data source should only fill in fields in the output that
 are not potentially privacy sensitive. */
    bool has_privacy_filtering_enabled;
    bool privacy_filtering_enabled;
    /* Instead of emitting binary protobuf, convert the trace data to the legacy
 JSON format. Note that the trace data will still be returned as a series of
 TracePackets, but the embedded data will be JSON instead of serialized
 protobuf. */
    bool has_convert_to_legacy_json;
    bool convert_to_legacy_json;
    bool has_client_priority;
    perfetto_protos_ChromeConfig_ClientPriority client_priority;
    /* Applicable only when using legacy JSON format.
 If |json_agent_label_filter| is not empty, only data pertaining to
 the specified tracing agent label (e.g. "traceEvents") will be returned. */
    pb_callback_t json_agent_label_filter;
} perfetto_protos_ChromeConfig;

typedef struct _perfetto_protos_ChromiumHistogramSamplesConfig {
    /* List of histograms to record. If no histogram is specified, all histograms
 are recorded. */
    pb_callback_t histograms;
    /* Default: false (i.e. histogram names are NOT filtered out by default)
 When true, histogram_name will be filtered out. */
    bool has_filter_histogram_names;
    bool filter_histogram_names;
} perfetto_protos_ChromiumHistogramSamplesConfig;

/* Records when a value within the specified bounds [min_value, max_value] is
 emitted into a Chrome histogram. */
typedef struct _perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample {
    pb_callback_t histogram_name;
    bool has_min_value;
    int64_t min_value;
    bool has_max_value;
    int64_t max_value;
} perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample;

typedef struct _perfetto_protos_ChromiumSystemMetricsConfig {
    /* Samples counters every X ms. */
    bool has_sampling_interval_ms;
    uint32_t sampling_interval_ms;
} perfetto_protos_ChromiumSystemMetricsConfig;

typedef struct _perfetto_protos_V8Config {
    /* Whether to log the actual content of scripts (e.g. content of the JS file
 that was compiled to generate code).
 ATTENTION: This could considerably increase the size of the resuling trace
            file. */
    bool has_log_script_sources;
    bool log_script_sources;
    /* Whether to log the generated code for jitted functions (machine code or
 bytecode).
 ATTENTION: This could considerably increase the size of the resuling trace
            file. */
    bool has_log_instructions;
    bool log_instructions;
} perfetto_protos_V8Config;

/* Proto definition based on the struct _EVENT_TRACE_PROPERTIES definition
 See: https://learn.microsoft.com/en-us/windows/win32/api/evntrace/
 ns-evntrace-event_trace_properties */
typedef struct _perfetto_protos_EtwConfig {
    /* The kernel_flags determines the flags that will be used by the etw tracing
 session. These kernel flags have been built to expose the useful events
 captured from the kernel mode only. */
    pb_callback_t kernel_flags;
} perfetto_protos_EtwConfig;

typedef struct _perfetto_protos_FtraceConfig_KprobeEvent {
    /* Kernel function name to attach to, for example "fuse_file_write_iter" */
    pb_callback_t probe;
    bool has_type;
    perfetto_protos_FtraceConfig_KprobeEvent_KprobeType type;
} perfetto_protos_FtraceConfig_KprobeEvent;

/* Configuration for compact encoding of scheduler events. When enabled (and
 recording the relevant ftrace events), specific high-volume events are
 encoded in a denser format than normal. */
typedef struct _perfetto_protos_FtraceConfig_CompactSchedConfig {
    /* If true, and sched_switch or sched_waking ftrace events are enabled,
 record those events in the compact format.

 If the field is unset, the default is:
 * perfetto v42.0+: enabled
 * before: disabled */
    bool has_enabled;
    bool enabled;
} perfetto_protos_FtraceConfig_CompactSchedConfig;

/* Optional filter for "ftrace/print" events.

 The filter consists of multiple rules. As soon as a rule matches (the rules
 are processed in order), its `allow` field will be used as the outcome: if
 `allow` is true, the event will be included in the trace, otherwise it will
 be discarded. If an event does not match any rule, it will be allowed by
 default (a rule with an empty prefix and allow=false, disallows everything
 by default). */
typedef struct _perfetto_protos_FtraceConfig_PrintFilter {
    pb_callback_t rules;
} perfetto_protos_FtraceConfig_PrintFilter;

/* Next id: 31 */
typedef struct _perfetto_protos_FtraceConfig {
    /* Ftrace events to record, example: "sched/sched_switch". */
    pb_callback_t ftrace_events;
    /* Android-specific event categories: */
    pb_callback_t atrace_categories;
    pb_callback_t atrace_apps;
    /* Size of each per-cpu kernel ftrace ring buffer.
 Not guaranteed if there are multiple concurrent tracing sessions, as the
 buffers cannot be resized without pausing recording in the kernel. */
    bool has_buffer_size_kb;
    uint32_t buffer_size_kb;
    /* If set, specifies how often the tracing daemon reads from the kernel ring
 buffer. Not guaranteed if there are multiple concurrent tracing sessions.
 Leave unset unless you're fine-tuning a local config. */
    bool has_drain_period_ms;
    uint32_t drain_period_ms;
    bool has_compact_sched;
    perfetto_protos_FtraceConfig_CompactSchedConfig compact_sched;
    /* Enables symbol name resolution against /proc/kallsyms.
 It requires that either traced_probes is running as root or that
 kptr_restrict has been manually lowered.
 It does not disclose KASLR, symbol addresses are mangled. */
    bool has_symbolize_ksyms;
    bool symbolize_ksyms;
    /* By default the kernel symbolizer is lazily initialized on a deferred task
 to reduce ftrace's time-to-start-recording. Unfortunately that makes
 ksyms integration tests hard. This flag forces the kernel symbolizer to be
 initialized synchronously on the data source start and hence avoiding
 timing races in tests.
 DEPRECATED in v28 / Android U. This is now the default behavior, setting it
 to true is a no-op. */
    bool has_initialize_ksyms_synchronously_for_testing;
    bool initialize_ksyms_synchronously_for_testing;
    /* When this boolean is true AND the ftrace_events contains "kmem/rss_stat",
 this option causes traced_probes to enable the "kmem/rss_stat_throttled"
 event instead if present, and fall back to "kmem/rss_stat" if not present.
 The historical context for this is the following:
 - Up to Android S (12), the rss_stat was internally throttled in its
   kernel implementation.
 - A change introduced in the kernels after S has introduced a new
   "rss_stat_throttled" making the original "rss_stat" event unthrottled
   (hence very spammy).
 - Not all Android T/13 devices will receive a new kernel though, hence we
   need to deal with both cases.
 For more context: go/rss-stat-throttled. */
    bool has_throttle_rss_stat;
    bool throttle_rss_stat;
    /* If true, avoid enabling events that aren't statically known by
 traced_probes. Otherwise, the default is to emit such events as
 GenericFtraceEvent protos.
 Prefer to keep this flag at its default. This was added for Android
 tracing, where atrace categories and/or atrace HAL requested events can
 expand to events that aren't of interest to the tracing user.
 Introduced in: Android T. */
    bool has_disable_generic_events;
    bool disable_generic_events;
    bool has_ksyms_mem_policy;
    perfetto_protos_FtraceConfig_KsymsMemPolicy ksyms_mem_policy;
    /* The subset of syscalls to record. To record all syscalls, leave this unset
 and add "ftrace_events: raw_syscalls/sys_{enter,exit}" to the config.
 * before perfetto v43, requires the config to also enable
   raw_syscalls/sys_{enter,exit}.
 * perfetto v43+ does the right thing if you set only this field.
 Example: ["sys_read", "sys_open"].
 Introduced in: Android U. */
    pb_callback_t syscall_events;
    /* If true, enable the "function_graph" kernel tracer that emits events
 whenever a kernel function is entered and exited
 (funcgraph_entry/funcgraph_exit).
 Notes on use:
 * Requires |symbolize_ksyms| for function name resolution.
 * Use |function_filters| or |function_graph_roots| to constrain the traced
   set of functions, otherwise the event bandwidth will be too high for
   practical use.
 * The data source might be rejected if there is already a concurrent
   ftrace data source that does not use function graph itself, as we do not
   support switching kernel tracers mid-trace.
 * Requires a kernel compiled with CONFIG_FUNCTION_GRAPH_TRACER. This is
   enabled if "cat /sys/kernel/tracing/available_tracers" includes
   "function_graph".
 Android:
 * Available only on debuggable builds.
 * Introduced in: Android U. */
    bool has_enable_function_graph;
    bool enable_function_graph;
    /* Constrains the set of functions traced when |enable_function_graph| is
 true. Supports globs, e.g. "sched*". You can specify multiple filters,
 in which case all matching functions will be traced. See kernel
 documentation on ftrace "set_ftrace_filter" file for more details.
 Android:
 * Available only on debuggable builds.
 * Introduced in: Android U. */
    pb_callback_t function_filters;
    /* If |enable_function_graph| is true, trace this set of functions *and* all
 of its callees. Supports globs. Can be set together with
 |function_filters|, in which case only callees matching the filter will be
 traced. If setting both, you most likely want all roots to also be
 included in |function_filters|.
 Android:
 * Available only on debuggable builds.
 * Introduced in: Android U. */
    pb_callback_t function_graph_roots;
    bool has_print_filter;
    perfetto_protos_FtraceConfig_PrintFilter print_filter;
    /* If true, does not clear ftrace buffers before the start of the program.
 This makes sense only if this is the first ftrace data source instance
 created after the daemon has been started. Can be useful for gathering boot
 traces, if ftrace has been separately configured (e.g. via kernel
 commandline). */
    bool has_preserve_ftrace_buffer;
    bool preserve_ftrace_buffer;
    /* If true, overrides the default timestamp clock and uses a raw hardware
 based monotonic clock for getting timestamps.
 * Introduced in: Android U. */
    bool has_use_monotonic_raw_clock;
    bool use_monotonic_raw_clock;
    /* If |instance_name| is not empty, then attempt to use that tracefs instance
 for event recording. Normally, this means
 `/sys/kernel/tracing/instances/$instance_name`.

 The name "hyp" is reserved.

 The instance must already exist, the tracing daemon *will not* create it
 for you as it typically doesn't have such permissions.
 Only a subset of features is guaranteed to work with non-default instances,
 at the time of writing:
  * ftrace_events
  * buffer_size_kb */
    pb_callback_t instance_name;
    /* If true, |buffer_size_kb| is interpreted as a lower bound, allowing the
 implementation to choose a bigger buffer size.

 Most configs for perfetto v43+ should simply leave both fields unset.

 If you need a config compatible with a range of perfetto builds and you
 used to set a non-default buffer_size_kb, consider setting both fields.
 Example:
   buffer_size_kb: 4096
   buffer_size_lower_bound: true
 On older builds, the per-cpu buffers will be exactly 4 MB.
 On v43+, buffers will be at least 4 MB.
 In both cases, neither is guaranteed if there are other concurrent
 perfetto ftrace sessions, as the buffers cannot be resized without pausing
 the recording in the kernel.
 Introduced in: perfetto v43. */
    bool has_buffer_size_lower_bound;
    bool buffer_size_lower_bound;
    /* Some processes can emit data through atrace or through the perfetto SDK via
 the "track_event" data source. For these categories, the SDK will be
 preferred, if possible, for this config. */
    pb_callback_t atrace_categories_prefer_sdk;
    /* If set, the tracing daemon will read kernel ring buffers as soon as
 they're filled past this percentage of occupancy. In other words, a value
 of 50 means that a read pass is triggered as soon as any per-cpu buffer is
 half-full. Not guaranteed if there are multiple concurrent tracing
 sessions.
 Currently does nothing on Linux kernels below v6.9.
 Introduced in: perfetto v48. */
    bool has_drain_buffer_percent;
    uint32_t drain_buffer_percent;
    /* Ftrace events to record, specific for kprobes and kretprobes */
    pb_callback_t kprobe_events;
    /* For perfetto developer use. If true and on a debuggable android build,
 serialise raw tracing pages that the implementation cannot parse. */
    bool has_debug_ftrace_abi;
    bool debug_ftrace_abi;
} perfetto_protos_FtraceConfig;

/* Matches an atrace message of the form:
 <type>|pid|<prefix>... */
typedef struct _perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage {
    pb_callback_t type;
    pb_callback_t prefix;
} perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage;

typedef struct _perfetto_protos_FtraceConfig_PrintFilter_Rule {
    pb_size_t which_match;
    union _perfetto_protos_FtraceConfig_PrintFilter_Rule_match {
        /* This rule matches if `prefix` matches exactly with the beginning of
     the "ftrace/print" "buf" field. */
        pb_callback_t prefix;
        /* This rule matches if the "buf" field contains an atrace-style print
     message as specified in `atrace_msg`. */
        perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage atrace_msg;
    } match;
    bool has_allow;
    bool allow;
} perfetto_protos_FtraceConfig_PrintFilter_Rule;

typedef struct _perfetto_protos_GpuCounterConfig {
    /* Desired sampling interval for counters. */
    bool has_counter_period_ns;
    uint64_t counter_period_ns;
    /* List of counters to be sampled. Counter IDs correspond to the ones
 described in GpuCounterSpec in the data source descriptor. */
    pb_callback_t counter_ids;
    /* Sample counters by instrumenting command buffers. */
    bool has_instrumented_sampling;
    bool instrumented_sampling;
    /* Fix gpu clock rate during trace session. */
    bool has_fix_gpu_clock;
    bool fix_gpu_clock;
} perfetto_protos_GpuCounterConfig;

typedef struct _perfetto_protos_GpuRenderStagesConfig {
    /* Enable to separate the color and depth/stencil load and store stages
 into a separate stages. If disabled, the depth/stencil load and store
 stages will be combined.  Disabled by default. This option has no effect if
 Low Overhead mode is enabled. */
    bool has_full_loadstore;
    bool full_loadstore;
    /* Use the low overhead mode for traces. In this mode render stages are
 combined into a single workload stage. This provides less granular data but
 induces minimal GPU overhead. Disabled by default. */
    bool has_low_overhead;
    bool low_overhead;
    /* Trace metrics to capture for each render stage */
    pb_callback_t trace_metrics;
} perfetto_protos_GpuRenderStagesConfig;

typedef struct _perfetto_protos_VulkanMemoryConfig {
    /* Tracking driver memory usage events */
    bool has_track_driver_memory_usage;
    bool track_driver_memory_usage;
    /* Tracking device memory usage events */
    bool has_track_device_memory_usage;
    bool track_device_memory_usage;
} perfetto_protos_VulkanMemoryConfig;

typedef struct _perfetto_protos_InodeFileConfig {
    /* How long to pause between batches. */
    bool has_scan_interval_ms;
    uint32_t scan_interval_ms;
    /* How long to wait before the first scan in order to accumulate inodes. */
    bool has_scan_delay_ms;
    uint32_t scan_delay_ms;
    /* How many inodes to scan in one batch. */
    bool has_scan_batch_size;
    uint32_t scan_batch_size;
    /* Do not scan for inodes not found in the static map. */
    bool has_do_not_scan;
    bool do_not_scan;
    /* If non-empty, only scan inodes corresponding to block devices named in
 this list. */
    pb_callback_t scan_mount_points;
    /* When encountering an inode belonging to a block device corresponding
 to one of the mount points in this map, scan its scan_roots instead. */
    pb_callback_t mount_point_mapping;
} perfetto_protos_InodeFileConfig;

typedef struct _perfetto_protos_InodeFileConfig_MountPointMappingEntry {
    pb_callback_t mountpoint;
    pb_callback_t scan_roots;
} perfetto_protos_InodeFileConfig_MountPointMappingEntry;

typedef struct _perfetto_protos_ConsoleConfig {
    bool has_output;
    perfetto_protos_ConsoleConfig_Output output;
    bool has_enable_colors;
    bool enable_colors;
} perfetto_protos_ConsoleConfig;

/* Configuration for trace packet interception. Used for diverting trace data to
 non-Perfetto sources (e.g., logging to the console, ETW) when using the
 Perfetto SDK. */
typedef struct _perfetto_protos_InterceptorConfig {
    /* Matches the name given to RegisterInterceptor(). */
    pb_callback_t name;
    bool has_console_config;
    perfetto_protos_ConsoleConfig console_config;
} perfetto_protos_InterceptorConfig;

typedef struct _perfetto_protos_AndroidPowerConfig {
    bool has_battery_poll_ms;
    uint32_t battery_poll_ms;
    pb_callback_t battery_counters;
    /* Where available enables per-power-rail measurements. */
    bool has_collect_power_rails;
    bool collect_power_rails;
    /* Provides a breakdown of energy estimation for various subsystem (e.g. GPU).
 Available from Android S. */
    bool has_collect_energy_estimation_breakdown;
    bool collect_energy_estimation_breakdown;
    /* Provides a breakdown of time in state for various subsystems.
 Available from Android U. */
    bool has_collect_entity_state_residency;
    bool collect_entity_state_residency;
} perfetto_protos_AndroidPowerConfig;

typedef struct _perfetto_protos_ProcessStatsConfig {
    pb_callback_t quirks;
    /* If enabled all processes will be scanned and dumped when the trace starts. */
    bool has_scan_all_processes_on_start;
    bool scan_all_processes_on_start;
    /* If enabled thread names are also recoded (this is redundant if sched_switch
 is enabled). */
    bool has_record_thread_names;
    bool record_thread_names;
    /* If > 0 samples counters (see process_stats.proto) from
 /proc/pid/status and oom_score_adj every X ms.
 It will also sample /proc/pid/smaps_rollup if scan_smaps_rollup = true.
 This is required to be > 100ms to avoid excessive CPU usage. */
    bool has_proc_stats_poll_ms;
    uint32_t proc_stats_poll_ms;
    /* This is required to be either = 0 or a multiple of |proc_stats_poll_ms|
 (default: |proc_stats_poll_ms|). If = 0, will be set to
 |proc_stats_poll_ms|. Non-multiples will be rounded down to the nearest
 multiple. */
    bool has_proc_stats_cache_ttl_ms;
    uint32_t proc_stats_cache_ttl_ms;
    /* Niche feature: If true this will resolve file descriptors for each process
 so these can be mapped to their actual device or file.
 Requires raw_syscalls/sys_{enter,exit} ftrace events to be enabled or
 new fds opened after initially scanning a process will not be
 recognized. */
    bool has_resolve_process_fds;
    bool resolve_process_fds;
    /* If true, output will include memory stats from /proc/pid/smaps_rollup.

 Does NOT work with the Android system daemon by default, as it requires
 running the recording process (traced_probes or tracebox) as root. It is
 possible to avoid the root requirement, but the exact steps depend on the
 Linux distibution. The proc file requires passing a PTRACE_MODE_READ
 check, and might be further covered by the procfs "hidepid" mount option. */
    bool has_scan_smaps_rollup;
    bool scan_smaps_rollup;
    /* If true: process descriptions will include process age (starttime in
 /proc/pid/stat).
 Introduced in: perfetto v44. */
    bool has_record_process_age;
    bool record_process_age;
    /* If true and |proc_stats_poll_ms| is true, process stats will include time
 spent running in user/kernel mode (utime/stime in /proc/pid/stat).
 Introduced in: perfetto v44. */
    bool has_record_process_runtime;
    bool record_process_runtime;
} perfetto_protos_ProcessStatsConfig;

typedef struct _perfetto_protos_HeapprofdConfig_ContinuousDumpConfig {
    /* ms to wait before first dump. */
    bool has_dump_phase_ms;
    uint32_t dump_phase_ms;
    /* ms to wait between following dumps. */
    bool has_dump_interval_ms;
    uint32_t dump_interval_ms;
} perfetto_protos_HeapprofdConfig_ContinuousDumpConfig;

/* Configuration for go/heapprofd.
 Next id: 28 */
typedef struct _perfetto_protos_HeapprofdConfig {
    /* Sampling rate for all heaps not specified via heap_sampling_intervals.

 These are:
 * All heaps if heap_sampling_intervals is empty.
 * Those profiled due to all_heaps and not named in heaps if
   heap_sampling_intervals is not empty.
 * The implicit libc.malloc heap if heaps is empty.

 Set to 1 for perfect accuracy.
 Otherwise, sample every sample_interval_bytes on average.

 See
 https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
 for more details.

 BUGS
 Before Android 12, setting this to 0 would crash the target process.

 N.B. This must be explicitly set to a non-zero value for all heaps (with
 this field or with heap_sampling_intervals), otherwise the producer will
 not start. */
    bool has_sampling_interval_bytes;
    uint64_t sampling_interval_bytes;
    /* E.g. surfaceflinger, com.android.phone
 This input is normalized in the following way: if it contains slashes,
 everything up to the last slash is discarded. If it contains "@",
 everything after the first @ is discared.
 E.g. /system/bin/surfaceflinger@1.0 normalizes to surfaceflinger.
 This transformation is also applied to the processes' command lines when
 matching. */
    pb_callback_t process_cmdline;
    /* For watermark based triggering or local debugging. */
    pb_callback_t pid;
    /* Profile all processes eligible for profiling on the system.
 See
 https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
 for which processes are eligible.

 On unmodified userdebug builds, this will lead to system crashes. Zygote
 will crash when trying to launch a new process as it will have an
 unexpected open socket to heapprofd.

 heapprofd will likely be overloaded by the amount of data for low
 sampling intervals. */
    bool has_all;
    bool all;
    /* Dump at a predefined interval. */
    bool has_continuous_dump_config;
    perfetto_protos_HeapprofdConfig_ContinuousDumpConfig continuous_dump_config;
    /* Do not emit function names for mappings starting with this prefix.
 E.g. /system to not emit symbols for any system libraries. */
    pb_callback_t skip_symbol_prefix;
    /* Size of the shared memory buffer between the profiled processes and
 heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
 MiB.

 Needs to be:
 * at least 8192,
 * a power of two,
 * a multiple of 4096. */
    bool has_shmem_size_bytes;
    uint64_t shmem_size_bytes;
    /* When the shmem buffer is full, block the client instead of ending the
 trace. Use with caution as this will significantly slow down the target
 process. */
    bool has_block_client;
    bool block_client;
    /* Do not profile processes from startup, only match already running
 processes.

 Can not be set at the same time as no_running.
 Introduced in Android 11. */
    bool has_no_startup;
    bool no_startup;
    /* Do not profile running processes. Only match processes on startup.

 Can not be set at the same time as no_startup.
 Introduced in Android 11. */
    bool has_no_running;
    bool no_running;
    /* Cause heapprofd to emit a single dump at the end, showing the memory usage
 at the point in time when the sampled heap usage of the process was at its
 maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
 self_allocated and self_freed to not be set.
 Introduced in Android 11. */
    bool has_dump_at_max;
    bool dump_at_max;
    /* If set, stop the trace session after blocking the client for this
 timeout. Needs to be larger than 100 us, otherwise no retries are done.
 Introduced in Android 11. */
    bool has_block_client_timeout_us;
    uint32_t block_client_timeout_us;
    /* Do not profile processes whose anon RSS + swap < given value.
 Introduced in Android 11. */
    bool has_min_anonymous_memory_kb;
    uint32_t min_anonymous_memory_kb;
    /* Stop profile if heapprofd memory usage goes beyond the given value.
 Introduced in Android 11. */
    bool has_max_heapprofd_memory_kb;
    uint32_t max_heapprofd_memory_kb;
    /* Stop profile if heapprofd CPU time since start of this data-source
 goes beyond given value.
 Introduced in Android 11. */
    bool has_max_heapprofd_cpu_secs;
    uint64_t max_heapprofd_cpu_secs;
    /* Escape hatch if the session is being torn down because of a forked child
 that shares memory space, but is not correctly identified as a vforked
 child.
 Introduced in Android 11. */
    bool has_disable_fork_teardown;
    bool disable_fork_teardown;
    /* We try to automatically detect when a target applicatation vforks but then
 does a memory allocation (or free). This auto-detection can be disabled
 with this.
 Introduced in Android 11. */
    bool has_disable_vfork_detection;
    bool disable_vfork_detection;
    /* Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
 "malloc".

 Introduced in Android 12. */
    pb_callback_t heaps;
    /* Sample all heaps registered by target process. Introduced in Android 12. */
    bool has_all_heaps;
    bool all_heaps;
    /* If given, needs to be the same length as heaps and gives the sampling
 interval for the respective entry in heaps.

 Otherwise, sampling_interval_bytes is used.

 It is recommended to set sampling_interval_bytes to a reasonable default
 value when using this, as a value of 0 for sampling_interval_bytes will
 crash the target process before Android 12.

 Introduced in Android 12.

 All values must be non-zero or the producer will not start. */
    pb_callback_t heap_sampling_intervals;
    bool has_stream_allocations;
    bool stream_allocations;
    /* If less than the given numbers of bytes are left free in the shared
 memory buffer, increase sampling interval by a factor of two.
 Adaptive sampling is disabled when set to 0. */
    bool has_adaptive_sampling_shmem_threshold;
    uint64_t adaptive_sampling_shmem_threshold;
    /* Stop doubling the sampling_interval once the sampling interval has reached
 this value. */
    bool has_adaptive_sampling_max_sampling_interval_bytes;
    uint64_t adaptive_sampling_max_sampling_interval_bytes;
    /* Only profile target if it was installed by one of the packages given.
 Special values are:
 * @system: installed on the system partition
 * @product: installed on the product partition
 * @null: sideloaded
 Supported on Android 12+. */
    pb_callback_t target_installed_by;
    /* Which heaps not to sample, e.g. "libc.malloc". This is useful when used in
 combination with all_heaps;

 Introduced in Android 12. */
    pb_callback_t exclude_heaps;
} perfetto_protos_HeapprofdConfig;

/* If dump_interval_ms != 0, the following configuration is used. */
typedef struct _perfetto_protos_JavaHprofConfig_ContinuousDumpConfig {
    /* ms to wait before first continuous dump.
 A dump is always created at the beginning of the trace. */
    bool has_dump_phase_ms;
    uint32_t dump_phase_ms;
    /* ms to wait between following dumps. */
    bool has_dump_interval_ms;
    uint32_t dump_interval_ms;
    /* If true, scans all the processes to find `process_cmdline` and filter by
 `min_anonymous_memory_kb` only at data source start. Default on Android
 S-.

 If false, rescans all the processes to find on every dump. Default on
 Android T+. */
    bool has_scan_pids_only_on_start;
    bool scan_pids_only_on_start;
} perfetto_protos_JavaHprofConfig_ContinuousDumpConfig;

/* Configuration for managed app heap graph snapshots. */
typedef struct _perfetto_protos_JavaHprofConfig {
    /* Command line allowlist, matched against the /proc/<pid>/cmdline (not the
 comm string). The semantics of this field were changed since its original
 introduction.

 On Android T+ (13+), this field can specify a single wildcard (*), and
 the profiler will attempt to match it in two possible ways:
 * if the pattern starts with a '/', then it is matched against the first
   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
   "/bin/echo".
 * otherwise the pattern is matched against the part of argv0
   corresponding to the binary name (this is unrelated to /proc/pid/exe).
   For example "echo" would match "/bin/echo".

 On Android S (12) and below, both this pattern and /proc/pid/cmdline get
 normalized prior to an exact string comparison. Normalization is as
 follows: (1) trim everything beyond the first null or "@" byte; (2) if
 the string contains forward slashes, trim everything up to and including
 the last one.

 Implementation note: in either case, at most 511 characters of cmdline
 are considered. */
    pb_callback_t process_cmdline;
    /* For watermark based triggering or local debugging. */
    pb_callback_t pid;
    /* Dump at a predefined interval. */
    bool has_continuous_dump_config;
    perfetto_protos_JavaHprofConfig_ContinuousDumpConfig continuous_dump_config;
    /* Do not profile processes whose anon RSS + swap < given value. */
    bool has_min_anonymous_memory_kb;
    uint32_t min_anonymous_memory_kb;
    /* Include the process' /proc/self/smaps.
 This only shows maps that:
 * start with /system
 * start with /vendor
 * start with /data/app
 * contain "extracted in memory from Y", where Y matches any of the above */
    bool has_dump_smaps;
    bool dump_smaps;
    /* Exclude objects of the following types from the profile. This can be
 useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner". */
    pb_callback_t ignored_types;
    /* Only profile target if it was installed by one of the packages given.
 Special values are:
 * @system: installed on the system partition
 * @product: installed on the product partition
 * @null: sideloaded
 Supported on Android 12+. */
    pb_callback_t target_installed_by;
} perfetto_protos_JavaHprofConfig;

typedef struct _perfetto_protos_PerfEvents {
    char dummy_field;
} perfetto_protos_PerfEvents;

typedef struct _perfetto_protos_PerfEvents_Tracepoint {
    /* Group and name for the tracepoint, acceptable forms:
 * "sched/sched_switch"
 * "sched:sched_switch" */
    pb_callback_t name;
    /* Optional field-level filter for the tracepoint. Only events matching this
 filter will be counted (and therefore contribute to the sampling period).
 Example: "prev_pid >= 42 && next_pid == 0".
 For full syntax, see kernel documentation on "Event filtering":
 https://www.kernel.org/doc/Documentation/trace/events.txt */
    pb_callback_t filter;
} perfetto_protos_PerfEvents_Tracepoint;

/* Syscall-level description of the event, propagated to the perf_event_attr
 struct. Primarily for local use-cases, since the event availability and
 encoding is hardware-specific. */
typedef struct _perfetto_protos_PerfEvents_RawEvent {
    bool has_type;
    uint32_t type;
    bool has_config;
    uint64_t config;
    bool has_config1;
    uint64_t config1;
    bool has_config2;
    uint64_t config2;
} perfetto_protos_PerfEvents_RawEvent;

/* The primary event to count. If recording multiple events, this
 counter is the "group leader".
 Commented from the perspective of its use in |PerfEventConfig|.
 Next id: 12 */
typedef struct _perfetto_protos_PerfEvents_Timebase {
    pb_size_t which_interval;
    union _perfetto_protos_PerfEvents_Timebase_interval {
        /* Per-cpu sampling will occur every |period| counts of |event|.
     Prefer |frequency| by default, as it's easier to oversample with a
     fixed period.
     Not guaranteed to be honored as the kernel can throttle the sampling
     rate if it's too high. */
        uint64_t period;
        /* Per-cpu sampling frequency in Hz, as requested from the kernel. Not the
     same as 1/period.
     Details: the actual sampling will still be based on a period, but the
     kernel will dynamically adjust it based on the observed event rate, to
     approximate this frequency. Works best with steady-rate events like
     timers.
     Not guaranteed to be honored as the kernel can throttle the sampling
     rate if it's too high. */
        uint64_t frequency;
        /* Per-cpu values are read by the userspace every interval. If using this
     mode, only follower events are supported. Options such as
     |PerfEventConfig.CallstackSampling| are incompatible.
     The period can't be guaranteed to be exact since the readings are taken
     by userspace. */
        uint32_t poll_period_ms;
    } interval;
    pb_size_t which_event;
    union _perfetto_protos_PerfEvents_Timebase_event {
        perfetto_protos_PerfEvents_Tracepoint tracepoint;
        perfetto_protos_PerfEvents_Counter counter;
        perfetto_protos_PerfEvents_RawEvent raw_event;
    } event;
    /* Optional arbitrary name for the event, to identify it in the parsed
 trace. Does *not* affect the profiling itself. If unset, the trace
 parser will choose a suitable name. */
    pb_callback_t name;
    /* If set, samples will be timestamped with the given clock.
 If unset, the clock is chosen by the implementation.
 For software events, prefer PERF_CLOCK_BOOTTIME. However it cannot be
 used for hardware events (due to interrupt safety), for which the
 recommendation is to use one of the monotonic clocks. */
    bool has_timestamp_clock;
    perfetto_protos_PerfEvents_PerfClock timestamp_clock;
} perfetto_protos_PerfEvents_Timebase;

/* Additional events associated with a leader.
 Configuration is similar to Timebase event. Because data acquisition is
 driven by the leader there is no option to configure the clock or the
 frequency. */
typedef struct _perfetto_protos_FollowerEvent {
    pb_size_t which_event;
    union _perfetto_protos_FollowerEvent_event {
        perfetto_protos_PerfEvents_Counter counter;
        perfetto_protos_PerfEvents_Tracepoint tracepoint;
        perfetto_protos_PerfEvents_RawEvent raw_event;
    } event;
    pb_callback_t name;
} perfetto_protos_FollowerEvent;

typedef struct _perfetto_protos_PerfEventConfig_Scope {
    /* Process ID (TGID) allowlist. If this list is not empty, only matching
 samples will be retained. If multiple allow/deny-lists are
 specified by the config, then all of them are evaluated for each sampled
 process. */
    pb_callback_t target_pid;
    /* Command line allowlist, matched against the /proc/<pid>/cmdline (not the
 comm string). The semantics of this field were changed since its original
 introduction.

 On Android T+ (13+), this field can specify a single wildcard (*), and
 the profiler will attempt to match it in two possible ways:
 * if the pattern starts with a '/', then it is matched against the first
   segment of the cmdline (i.e. argv0). For example "/bin/e*" would match
   "/bin/echo".
 * otherwise the pattern is matched against the part of argv0
   corresponding to the binary name (this is unrelated to /proc/pid/exe).
   For example "echo" would match "/bin/echo".

 On Android S (12) and below, both this pattern and /proc/pid/cmdline get
 normalized prior to an exact string comparison. Normalization is as
 follows: (1) trim everything beyond the first null or "@" byte; (2) if
 the string contains forward slashes, trim everything up to and including
 the last one.

 Implementation note: in either case, at most 511 characters of cmdline
 are considered. */
    pb_callback_t target_cmdline;
    /* List of excluded pids. */
    pb_callback_t exclude_pid;
    /* List of excluded cmdlines. See description of |target_cmdline| for how
 this is handled. */
    pb_callback_t exclude_cmdline;
    /* Number of additional command lines to sample. Only those which are
 neither explicitly included nor excluded will be considered. Processes
 are accepted on a first come, first served basis. */
    bool has_additional_cmdline_count;
    uint32_t additional_cmdline_count;
    /* If set to N, all encountered processes will be put into one of the N
 possible bins, and only one randomly-chosen bin will be selected for
 unwinding. The binning is simply "pid % N", under the assumption that
 low-order bits of pids are roughly uniformly distributed. Other explicit
 inclusions/exclusions in this |Scope| message are still respected.

 The profiler will report the chosen shard in PerfSampleDefaults, and the
 values will be queryable in trace processor under the "stats" table as
 "perf_process_shard_count" and "perf_chosen_process_shard".

 NB: all data sources in a config that set |process_shard_count| must set
 it to the same value. The profiler will choose one bin for all those data
 sources. */
    bool has_process_shard_count;
    uint32_t process_shard_count;
} perfetto_protos_PerfEventConfig_Scope;

typedef struct _perfetto_protos_PerfEventConfig_CallstackSampling {
    /* Defines a set of processes for which samples are retained/skipped. If
 unset, all samples are kept, but beware that it will be very heavy on the
 stack unwinder, which might start dropping samples due to overload. */
    bool has_scope;
    perfetto_protos_PerfEventConfig_Scope scope;
    /* If true, callstacks will include the kernel-space frames. Such frames can
 be identified by a magical "kernel" string as their mapping name.
 Requires traced_perf to be running as root, or kptr_restrict to have been
 manually unrestricted. On Android, the platform should do the right thing
 on debug builds.
 This does *not* disclose KASLR, as only the function names are emitted. */
    bool has_kernel_frames;
    bool kernel_frames;
    /* Whether to record and unwind userspace callstacks. If unset, defaults to
 including userspace (UNWIND_DWARF) both for backwards compatibility and
 as the most common default (this defaulting is only applicable if the
 outer CallstackSampling message is explicitly set). */
    bool has_user_frames;
    perfetto_protos_PerfEventConfig_UnwindMode user_frames;
} perfetto_protos_PerfEventConfig_CallstackSampling;

/* Configuration for the traced_perf profiler.

 Example config for basic cpu profiling:
   perf_event_config {
     timebase {
       frequency: 80
     }
     callstack_sampling {
       scope {
         target_cmdline: "surfaceflinger"
         target_cmdline: "system_server"
       }
       kernel_frames: true
     }
   }

 Next id: 21 */
typedef struct _perfetto_protos_PerfEventConfig {
    /* Note: legacy configs had to set |all_cpus| to true to pass parsing.
 We rely on this to detect such configs. */
    bool has_all_cpus;
    bool all_cpus;
    bool has_sampling_frequency;
    uint32_t sampling_frequency;
    /* Size (in 4k pages) of each per-cpu ring buffer that is filled by the
 kernel. If set, must be a power of two.
 If unset, an implementation-defined default is used. */
    bool has_ring_buffer_pages;
    uint32_t ring_buffer_pages;
    pb_callback_t target_pid;
    pb_callback_t target_cmdline;
    pb_callback_t exclude_pid;
    pb_callback_t exclude_cmdline;
    /* How often the per-cpu ring buffers are read by the producer.
 If unset, an implementation-defined default is used. */
    bool has_ring_buffer_read_period_ms;
    uint32_t ring_buffer_read_period_ms;
    /* Timeout for the remote /proc/<pid>/{maps,mem} file descriptors for a
 sampled process. This is primarily for Android, where this lookup is
 asynchronous. As long as the producer is waiting, the associated samples
 will be kept enqueued (putting pressure on the capacity of the shared
 unwinding queue). Once a lookup for a process expires, all associated
 samples are discarded. However, if the lookup still succeeds after the
 timeout, future samples will be handled normally.
 If unset, an implementation-defined default is used. */
    bool has_remote_descriptor_timeout_ms;
    uint32_t remote_descriptor_timeout_ms;
    /* Optional period for clearing state cached by the unwinder. This is a heavy
 operation that is only necessary for traces that target a wide set of
 processes, and require the memory footprint to be reset periodically.
 If unset, the cached state will not be cleared. */
    bool has_unwind_state_clear_period_ms;
    uint32_t unwind_state_clear_period_ms;
    bool has_additional_cmdline_count;
    uint32_t additional_cmdline_count;
    bool has_kernel_frames;
    bool kernel_frames;
    /* Stop the data source if traced_perf's combined {RssAnon + Swap} memory
 footprint exceeds this value. */
    bool has_max_daemon_memory_kb;
    uint32_t max_daemon_memory_kb;
    /* What event to sample on, and how often.
 Defined in common/perf_events.proto. */
    bool has_timebase;
    perfetto_protos_PerfEvents_Timebase timebase;
    /* If set, the profiler will sample userspace processes' callstacks at the
 interval specified by the |timebase|.
 If unset, the profiler will record only the event counts. */
    bool has_callstack_sampling;
    perfetto_protos_PerfEventConfig_CallstackSampling callstack_sampling;
    /* Drop samples if the heap memory held by the samples in the unwinder queue
 is above the given limit. This counts the memory across all concurrent data
 sources (not just this one's), and there is no fairness guarantee - the
 whole quota might be used up by a concurrent source. */
    bool has_max_enqueued_footprint_kb;
    uint64_t max_enqueued_footprint_kb;
    /* If set, only profile target if it was installed by a package with one of
 these names. Special values:
 * "@system": installed on the system partition
 * "@product": installed on the product partition
 * "@null": sideloaded
 Supported on Android 12+. */
    pb_callback_t target_installed_by;
    /* Other events associated with the leader described in the timebase. */
    pb_callback_t followers;
    /* List of cpu indices for counting. If empty, the default is all cpus.

 Note: this is not inside |callstack_sampling.scope| as it also applies to
 counter-only traces. A future change will likely reorganise the options,
 but this field will continue to be supported.

 Available since: perfetto v50. */
    pb_callback_t target_cpu;
} perfetto_protos_PerfEventConfig;

/* This file is named 'statsd_tracing_config.proto' rather than
 'statsd_config.proto' (which would be more consistent with the other
 config protos) so it doesn't show up and confuse folks looking for
 the existing statsd_config.proto for configuring statsd itself.
 Same for the config proto itself. */
typedef struct _perfetto_protos_StatsdTracingConfig {
    /* This is for the common case of the atom id being known in the enum AtomId. */
    pb_callback_t push_atom_id;
    /* Escape hatch for Atom IDs that are not yet in the AtomId enum
 (e.g. non-upstream atoms that don't exist in AOSP). */
    pb_callback_t raw_push_atom_id;
    pb_callback_t pull_config;
} perfetto_protos_StatsdTracingConfig;

typedef struct _perfetto_protos_StatsdPullAtomConfig {
    pb_callback_t pull_atom_id;
    pb_callback_t raw_pull_atom_id;
    bool has_pull_frequency_ms;
    int32_t pull_frequency_ms;
    pb_callback_t packages;
} perfetto_protos_StatsdPullAtomConfig;

/* This file defines the configuration for the Linux /proc poller data source,
 which injects counters in the trace.
 Counters that are needed in the trace must be explicitly listed in the
 *_counters fields. This is to avoid spamming the trace with all counters
 at all times.
 The sampling rate is configurable. All polling rates (*_period_ms) need
 to be integer multiples of each other.
 OK:     [10ms, 10ms, 10ms],  [10ms, 20ms, 10ms],  [10ms, 20ms, 60ms]
 Not OK: [10ms, 10ms, 11ms],  [10ms, 15ms, 20ms] */
typedef struct _perfetto_protos_SysStatsConfig {
    /* Polls /proc/meminfo every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage.
 Cost: 0.3 ms [read] + 0.07 ms [parse + trace injection] */
    bool has_meminfo_period_ms;
    uint32_t meminfo_period_ms;
    /* If empty all known counters are reported. Otherwise, only the counters
 specified below are reported. */
    pb_callback_t meminfo_counters;
    /* Polls /proc/vmstat every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage.
 Cost: 0.2 ms [read] + 0.3 ms [parse + trace injection] */
    bool has_vmstat_period_ms;
    uint32_t vmstat_period_ms;
    pb_callback_t vmstat_counters;
    /* Pols /proc/stat every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage.
 Cost: 4.1 ms [read] + 1.9 ms [parse + trace injection] */
    bool has_stat_period_ms;
    uint32_t stat_period_ms;
    pb_callback_t stat_counters;
    /* Polls /sys/devfreq/ * /curfreq every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage.
 This option can be used to record unchanging values.
 Updates from frequency changes can come from ftrace/set_clock_rate. */
    bool has_devfreq_period_ms;
    uint32_t devfreq_period_ms;
    /* Polls /sys/devices/system/cpu/cpu* /cpufreq/cpuinfo_cur_freq every X ms.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_cpufreq_period_ms;
    uint32_t cpufreq_period_ms;
    /* Polls /proc/buddyinfo every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_buddyinfo_period_ms;
    uint32_t buddyinfo_period_ms;
    /* Polls /proc/diskstats every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_diskstat_period_ms;
    uint32_t diskstat_period_ms;
    /* Polls /proc/pressure/ * every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_psi_period_ms;
    uint32_t psi_period_ms;
    /* Polls /sys/class/thermal/ * every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_thermal_period_ms;
    uint32_t thermal_period_ms;
    /* Polls /sys/devices/system/cpu/cpu* /cpuidle/state* every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_cpuidle_period_ms;
    uint32_t cpuidle_period_ms;
    /* Polls device-specific GPU frequency info every X ms, if non-zero.
 This is required to be > 10ms to avoid excessive CPU usage. */
    bool has_gpufreq_period_ms;
    uint32_t gpufreq_period_ms;
} perfetto_protos_SysStatsConfig;

/* This data-source does a one-off recording of system information when
 the trace starts.
 Currently this includes:
 - Values of
 /sys/devices/system/cpu/cpu* /cpufreq/scaling_available_frequencies This
 datasource has no configuration options at present. */
typedef struct _perfetto_protos_SystemInfoConfig {
    char dummy_field;
} perfetto_protos_SystemInfoConfig;

typedef struct _perfetto_protos_TestConfig_DummyFields {
    bool has_field_uint32;
    uint32_t field_uint32;
    bool has_field_int32;
    int32_t field_int32;
    bool has_field_uint64;
    uint64_t field_uint64;
    bool has_field_int64;
    int64_t field_int64;
    bool has_field_fixed64;
    uint64_t field_fixed64;
    bool has_field_sfixed64;
    int64_t field_sfixed64;
    bool has_field_fixed32;
    uint32_t field_fixed32;
    bool has_field_sfixed32;
    int32_t field_sfixed32;
    bool has_field_double;
    double field_double;
    bool has_field_float;
    float field_float;
    bool has_field_sint64;
    int64_t field_sint64;
    bool has_field_sint32;
    int32_t field_sint32;
    pb_callback_t field_string;
    pb_callback_t field_bytes;
} perfetto_protos_TestConfig_DummyFields;

/* The configuration for a fake producer used in tests. */
typedef struct _perfetto_protos_TestConfig {
    /* The number of messages the fake producer should send. */
    bool has_message_count;
    uint32_t message_count;
    /* The maximum number of messages which should be sent each second.
 The actual obserced speed may be lower if the producer is unable to
 work fast enough.
 If this is zero or unset, the producer will send as fast as possible. */
    bool has_max_messages_per_second;
    uint32_t max_messages_per_second;
    /* The seed value for a simple multiplicative congruential pseudo-random
 number sequence. */
    bool has_seed;
    uint32_t seed;
    /* The size of each message in bytes. Should be greater than or equal 5 to
 account for the number of bytes needed to encode the random number and a
 null byte for the string. */
    bool has_message_size;
    uint32_t message_size;
    /* Whether the producer should send a event batch when the data source is
 is initially registered. */
    bool has_send_batch_on_register;
    bool send_batch_on_register;
    bool has_dummy_fields;
    perfetto_protos_TestConfig_DummyFields dummy_fields;
} perfetto_protos_TestConfig;

typedef struct _perfetto_protos_TrackEventConfig { /* The following fields define the set of enabled trace categories. Each list
 item is a glob.

 To determine if category is enabled, it is checked against the filters in
 the following order:

   1. Exact matches in enabled categories.
   2. Exact matches in enabled tags.
   3. Exact matches in disabled categories.
   4. Exact matches in disabled tags.
   5. Pattern matches in enabled categories.
   6. Pattern matches in enabled tags.
   7. Pattern matches in disabled categories.
   8. Pattern matches in disabled tags.

 If none of the steps produced a match:
  - In the C++ SDK (`perfetto::Category`), categories are enabled by
  default.
  - In the C SDK (`PerfettoTeCategory`), categories are disabled by default.

 Examples:

  - To enable all non-slow/debug categories:

       enabled_categories: "*"

  - To enable specific categories:

       disabled_categories: "*"
       enabled_categories: "my_category"
       enabled_categories: "my_category2"

  - To enable only categories with a specific tag:

       disabled_tags: "*"
       enabled_tags: "my_tag" */
    /* Default: [] */
    pb_callback_t disabled_categories;
    /* Default: [] */
    pb_callback_t enabled_categories;
    /* Default: ["slow", "debug"] */
    pb_callback_t disabled_tags;
    /* Default: [] */
    pb_callback_t enabled_tags;
    /* Default: false (i.e. enabled by default) */
    bool has_disable_incremental_timestamps;
    bool disable_incremental_timestamps;
    /* Allows to specify a custom unit different than the default (ns).
 Also affects thread timestamps if enable_thread_time_sampling = true.
 A multiplier of 1000 means that a timestamp = 3 should be interpreted as
 3000 ns = 3 us.
 Default: 1 (if unset, it should be read as 1). */
    bool has_timestamp_unit_multiplier;
    uint64_t timestamp_unit_multiplier;
    /* Default: false (i.e. debug_annotations is NOT filtered out by default)
 When true, any debug annotations provided as arguments to the
 TRACE_EVENT macros are not written into the trace. Typed arguments will
 still be emitted even if set to true. */
    bool has_filter_debug_annotations;
    bool filter_debug_annotations;
    /* Default : false (i.e. disabled)
 When true, the SDK samples and emits the current thread time counter value
 for each event on the current thread's track. This value represents the
 total CPU time consumed by that thread since its creation. Note that if a
 thread is not scheduled by OS for some duration, that time won't be
 included in thread_time.
 Learn more : "CLOCK_THREAD_CPUTIME_ID" flag at
 https://linux.die.net/man/3/clock_gettime */
    bool has_enable_thread_time_sampling;
    bool enable_thread_time_sampling;
    /* Default: false (i.e. dynamic event names are NOT filtered out by default)
 When true, event_names wrapped in perfetto::DynamicString will be filtered
 out. */
    bool has_filter_dynamic_event_names;
    bool filter_dynamic_event_names;
} perfetto_protos_TrackEventConfig;

/* The configuration that is passed to each data source when starting tracing.
 Next id: 136 */
typedef struct _perfetto_protos_DataSourceConfig {
    /* Data source unique name, e.g., "linux.ftrace". This must match
 the name passed by the data source when it registers (see
 RegisterDataSource()). */
    pb_callback_t name;
    /* The index of the logging buffer where TracePacket(s) will be stored.
 This field doesn't make a major difference for the Producer(s). The final
 logging buffers, in fact, are completely owned by the Service. We just ask
 the Producer to copy this number into the chunk headers it emits, so that
 the Service can quickly identify the buffer where to move the chunks into
 without expensive lookups on its fastpath. */
    bool has_target_buffer;
    uint32_t target_buffer;
    /* Set by the service to indicate the duration of the trace.
 DO NOT SET in consumer as this will be overridden by the service. */
    bool has_trace_duration_ms;
    uint32_t trace_duration_ms;
    /* Set by the service to indicate which tracing session the data source
 belongs to. The intended use case for this is checking if two data sources,
 one of which produces metadata for the other one, belong to the same trace
 session and hence should be linked together.
 This field was introduced in Aug 2018 after Android P.
 DO NOT SET in consumer as this will be overridden by the service. */
    bool has_tracing_session_id;
    uint64_t tracing_session_id;
    /* Set by the service to indicate whether this tracing session has extra
 guardrails.
 DO NOT SET in consumer as this will be overridden by the service. */
    bool has_enable_extra_guardrails;
    bool enable_extra_guardrails;
    /* Set by the service to indicate how long it waits after StopDataSource.
 DO NOT SET in consumer as this will be overridden by the service. */
    bool has_stop_timeout_ms;
    uint32_t stop_timeout_ms;
    /* Set by the service to indicate which user initiated this trace.
 DO NOT SET in consumer as this will be overridden by the service. */
    bool has_session_initiator;
    perfetto_protos_DataSourceConfig_SessionInitiator session_initiator;
    /* Data source name: linux.ftrace */
    bool has_ftrace_config;
    perfetto_protos_FtraceConfig ftrace_config;
    /* Chrome is special as it doesn't use the perfetto IPC layer. We want to
 avoid proto serialization and de-serialization there because that would
 just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
 C++ class for it so it can pass around plain C++ objets. */
    bool has_chrome_config;
    perfetto_protos_ChromeConfig chrome_config;
    /* Data source name: linux.inode_file_map */
    bool has_inode_file_config;
    perfetto_protos_InodeFileConfig inode_file_config;
    /* Data source name: linux.process_stats */
    bool has_process_stats_config;
    perfetto_protos_ProcessStatsConfig process_stats_config;
    /* Data source name: linux.sys_stats */
    bool has_sys_stats_config;
    perfetto_protos_SysStatsConfig sys_stats_config;
    /* Data source name: android.heapprofd
 Introduced in Android 10. */
    bool has_heapprofd_config;
    perfetto_protos_HeapprofdConfig heapprofd_config;
    /* Data source name: android.power */
    bool has_android_power_config;
    perfetto_protos_AndroidPowerConfig android_power_config;
    /* Data source name: android.log */
    bool has_android_log_config;
    perfetto_protos_AndroidLogConfig android_log_config;
    /* Data source name: gpu.counters */
    bool has_gpu_counter_config;
    perfetto_protos_GpuCounterConfig gpu_counter_config;
    /* Data source name: android.packages_list */
    bool has_packages_list_config;
    perfetto_protos_PackagesListConfig packages_list_config;
    /* Data source name: android.java_hprof
 Introduced in Android 11. */
    bool has_java_hprof_config;
    perfetto_protos_JavaHprofConfig java_hprof_config;
    /* Data source name: linux.perf */
    bool has_perf_event_config;
    perfetto_protos_PerfEventConfig perf_event_config;
    /* Data source name: vulkan.memory_tracker */
    bool has_vulkan_memory_config;
    perfetto_protos_VulkanMemoryConfig vulkan_memory_config;
    /* Data source name: track_event */
    bool has_track_event_config;
    perfetto_protos_TrackEventConfig track_event_config;
    /* Data source name: android.polled_state */
    bool has_android_polled_state_config;
    perfetto_protos_AndroidPolledStateConfig android_polled_state_config;
    /* If an interceptor is specified here, packets for this data source will be
 rerouted to the interceptor instead of the main trace buffer. This can be
 used, for example, to write trace data into ETW or for logging trace points
 to the console.

 Note that interceptors are only supported by data sources registered
 through the Perfetto SDK API. Data sources that don't use that API (e.g.,
 traced_probes) may not support interception. */
    bool has_interceptor_config;
    perfetto_protos_InterceptorConfig interceptor_config;
    /* Data source name: android.game_interventions */
    bool has_android_game_intervention_list_config;
    perfetto_protos_AndroidGameInterventionListConfig android_game_intervention_list_config;
    /* Data source name: android.statsd */
    bool has_statsd_tracing_config;
    perfetto_protos_StatsdTracingConfig statsd_tracing_config;
    /* Data source name: android.system_property */
    bool has_android_system_property_config;
    perfetto_protos_AndroidSystemPropertyConfig android_system_property_config;
    /* Data source name: linux.system_info */
    bool has_system_info_config;
    perfetto_protos_SystemInfoConfig system_info_config;
    /* Data source name: android.network_packets.
 Introduced in Android 14 (U). */
    bool has_network_packet_trace_config;
    perfetto_protos_NetworkPacketTraceConfig network_packet_trace_config;
    /* Data source name: android.surfaceflinger.layers */
    bool has_surfaceflinger_layers_config;
    perfetto_protos_SurfaceFlingerLayersConfig surfaceflinger_layers_config;
    /* If true, |trace_duration_ms| should count also time in suspend. This
 is propagated from TraceConfig.prefer_suspend_clock_for_duration. */
    bool has_prefer_suspend_clock_for_duration;
    bool prefer_suspend_clock_for_duration;
    /* Data source name: android.surfaceflinger.transactions */
    bool has_surfaceflinger_transactions_config;
    perfetto_protos_SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config;
    /* Data source name: android.sdk_sysprop_guard
 Introduced in Android 14 (U) QPR1. */
    bool has_android_sdk_sysprop_guard_config;
    perfetto_protos_AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config;
    /* Data source name: windows.etw */
    bool has_etw_config;
    perfetto_protos_EtwConfig etw_config;
    /* Data source name: android.protolog */
    bool has_protolog_config;
    perfetto_protos_ProtoLogConfig protolog_config;
    /* Data source name: code.v8.dev */
    bool has_v8_config;
    perfetto_protos_V8Config v8_config;
    /* Data source name: android.input.inputevent */
    bool has_android_input_event_config;
    perfetto_protos_AndroidInputEventConfig android_input_event_config;
    /* Data source name: android.pixel.modem */
    bool has_pixel_modem_config;
    perfetto_protos_PixelModemConfig pixel_modem_config;
    /* Data source name: android.windowmanager */
    bool has_windowmanager_config;
    perfetto_protos_WindowManagerConfig windowmanager_config;
    /* Data source name: org.chromium.system_metrics */
    bool has_chromium_system_metrics;
    perfetto_protos_ChromiumSystemMetricsConfig chromium_system_metrics;
    /* Data source name: android.kernel_wakelocks */
    bool has_kernel_wakelocks_config;
    perfetto_protos_KernelWakelocksConfig kernel_wakelocks_config;
    /* Data source name: gpu.renderstages */
    bool has_gpu_renderstages_config;
    perfetto_protos_GpuRenderStagesConfig gpu_renderstages_config;
    /* Data source name: org.chromium.histogram_samples */
    bool has_chromium_histogram_samples;
    perfetto_protos_ChromiumHistogramSamplesConfig chromium_histogram_samples;
    /* Data source name: android.app_wakelocks */
    bool has_app_wakelocks_config;
    perfetto_protos_AppWakelocksConfig app_wakelocks_config;
    /* This is a fallback mechanism to send a free-form text config to the
 producer. In theory this should never be needed. All the code that
 is part of the platform (i.e. traced service) is supposed to *not* truncate
 the trace config proto and propagate unknown fields. However, if anything
 in the pipeline (client or backend) ends up breaking this forward compat
 plan, this field will become the escape hatch to allow future data sources
 to get some meaningful configuration. */
    pb_callback_t legacy_config;
    /* This field is only used for testing. */
    bool has_for_testing;
    perfetto_protos_TestConfig for_testing;
} perfetto_protos_DataSourceConfig;

typedef struct _perfetto_protos_TraceConfig_BufferConfig {
    bool has_size_kb;
    uint32_t size_kb;
    bool has_fill_policy;
    perfetto_protos_TraceConfig_BufferConfig_FillPolicy fill_policy;
    /* When true the buffer is moved (rather than copied) onto the cloned
 session, and an empty buffer of the same size is allocated in the source
 tracing session. This feature will likely get deprecated in the future.
 It been introduced mainly to support the surfaceflinger snapshot dump
 for bugreports, where SF can dumps O(400MB) into the bugreport trace. In
 that case we don't want to retain another in-memory copy of the buffer. */
    bool has_transfer_on_clone;
    bool transfer_on_clone;
    /* Used in conjunction with transfer_on_clone. When true the buffer is
 cleared before issuing the Flush(reason=kTraceClone). This is to ensure
 that if the data source took too long to write the data in a previous
 clone-related flush, we don't end up with a mixture of leftovers from
 the previous write and new data. */
    bool has_clear_before_clone;
    bool clear_before_clone;
} perfetto_protos_TraceConfig_BufferConfig;

typedef struct _perfetto_protos_TraceConfig_DataSource {
    /* Filters and data-source specific config. It contains also the unique name
 of the data source, the one passed in the  DataSourceDescriptor when they
 register on the service. */
    bool has_config;
    perfetto_protos_DataSourceConfig config;
    /* Optional. If multiple producers (~processes) expose the same data source
 and either |producer_name_filter| or |producer_name_regex_filter| is set,
 the data source is enabled only for producers whose names match any of
 the filters.
 |producer_name_filter| has to be an exact match, while
 |producer_name_regex_filter| is a regular expression.
 This allows to enable a data source only for specific processes.
 The "repeated" fields have OR semantics: specifying a filter ["foo",
 "bar"] will enable data sources on both "foo" and "bar" (if they exist). */
    pb_callback_t producer_name_filter;
    pb_callback_t producer_name_regex_filter;
} perfetto_protos_TraceConfig_DataSource;

/* Config for disabling builtin data sources in the tracing service. */
typedef struct _perfetto_protos_TraceConfig_BuiltinDataSource {
    /* Disable emitting clock timestamps into the trace. */
    bool has_disable_clock_snapshotting;
    bool disable_clock_snapshotting;
    /* Disable echoing the original trace config in the trace. */
    bool has_disable_trace_config;
    bool disable_trace_config;
    /* Disable emitting system info (build fingerprint, cpuinfo, etc). */
    bool has_disable_system_info;
    bool disable_system_info;
    /* Disable emitting events for data-source state changes (e.g. the marker
 for all data sources having ACKed the start of the trace). */
    bool has_disable_service_events;
    bool disable_service_events;
    /* The authoritative clock domain for the trace. Defaults to BOOTTIME. See
 also ClockSnapshot's primary_trace_clock. The configured value is written
 into the trace as part of the ClockSnapshots emitted by the service.
 Trace processor will attempt to translate packet/event timestamps from
 various data sources (and their chosen clock domains) to this domain
 during import. Added in Android R. */
    bool has_primary_trace_clock;
    perfetto_protos_BuiltinClock primary_trace_clock;
    /* Time interval in between snapshotting of sync markers, clock snapshots,
 stats, and other periodic service-emitted events. Note that the service
 only keeps track of the first and the most recent snapshot until
 ReadBuffers() is called. */
    bool has_snapshot_interval_ms;
    uint32_t snapshot_interval_ms;
    /* Hints to the service that a suspend-aware (i.e. counting time in suspend)
 clock should be used for periodic snapshots of service-emitted events.
 This means, if a snapshot *should* have happened during suspend, it will
 happen immediately after the device resumes.

 Choosing a clock like this is done on best-effort basis; not all
 platforms (e.g. Windows) expose a clock which can be used for periodic
 tasks counting suspend. If such a clock is not available, the service
 falls back to the best-available alternative.

 Introduced in Android S.
 TODO(lalitm): deprecate this in T and make this the default if nothing
 crashes in S. */
    bool has_prefer_suspend_clock_for_snapshot;
    bool prefer_suspend_clock_for_snapshot;
    /* Disables the reporting of per-trace-writer histograms in TraceStats. */
    bool has_disable_chunk_usage_histograms;
    bool disable_chunk_usage_histograms;
} perfetto_protos_TraceConfig_BuiltinDataSource;

typedef struct _perfetto_protos_TraceConfig_ProducerConfig {
    /* Identifies the producer for which this config is for. */
    pb_callback_t producer_name;
    /* Specifies the preferred size of the shared memory buffer. If the size is
 larger than the max size, the max will be used. If it is smaller than
 the page size or doesn't fit pages evenly into it, it will fall back to
 the size specified by the producer or finally the default shared memory
 size. */
    bool has_shm_size_kb;
    uint32_t shm_size_kb;
    /* Specifies the preferred size of each page in the shared memory buffer.
 Must be an integer multiple of 4K. */
    bool has_page_size_kb;
    uint32_t page_size_kb;
} perfetto_protos_TraceConfig_ProducerConfig;

/* Contains statsd-specific metadata about an alert associated with the trace. */
typedef struct _perfetto_protos_TraceConfig_StatsdMetadata {
    /* The identifier of the alert which triggered this trace. */
    bool has_triggering_alert_id;
    int64_t triggering_alert_id;
    /* The uid which registered the triggering configuration with statsd. */
    bool has_triggering_config_uid;
    int32_t triggering_config_uid;
    /* The identifier of the config which triggered the alert. */
    bool has_triggering_config_id;
    int64_t triggering_config_id;
    /* The identifier of the subscription which triggered this trace. */
    bool has_triggering_subscription_id;
    int64_t triggering_subscription_id;
} perfetto_protos_TraceConfig_StatsdMetadata;

/* Contains flags which override the default values of the guardrails inside
 Perfetto. */
typedef struct _perfetto_protos_TraceConfig_GuardrailOverrides {
    /* Override the default limit (in bytes) for uploading data to server within
 a 24 hour period.
 On R-, this override only affected userdebug builds. Since S, it also
 affects user builds.
 In 24Q3+ (V+), this override is a noop because upload guardrail logic
 was removed from Perfetto. */
    bool has_max_upload_per_day_bytes;
    uint64_t max_upload_per_day_bytes;
    /* Overrides the guardrail for maximum trace buffer size.
 Available on U+ */
    bool has_max_tracing_buffer_size_kb;
    uint32_t max_tracing_buffer_size_kb;
} perfetto_protos_TraceConfig_GuardrailOverrides;

/* Triggers allow producers to start or stop the tracing session when an event
 occurs.

 For example if we are tracing probabilistically, most traces will be
 uninteresting. Triggers allow us to keep only the interesting ones such as
 those traces during which the device temperature reached a certain
 threshold. In this case the producer can activate a trigger to keep
 (STOP_TRACING) the trace, otherwise it can also begin a trace
 (START_TRACING) because it knows something is about to happen. */
typedef struct _perfetto_protos_TraceConfig_TriggerConfig {
    bool has_trigger_mode;
    perfetto_protos_TraceConfig_TriggerConfig_TriggerMode trigger_mode;
    /* A list of triggers which are related to this configuration. If ANY
 trigger is seen then an action will be performed based on |trigger_mode|. */
    pb_callback_t triggers;
    /* Required and must be positive if a TriggerConfig is specified. This is
 how long this TraceConfig should wait for a trigger to arrive. After this
 period of time if no trigger is seen the TracingSession will be cleaned
 up. */
    bool has_trigger_timeout_ms;
    uint32_t trigger_timeout_ms;
    /* This flag is really a workaround for b/274931668. This is needed only
 when deploying configs to different versions of the tracing service.
 When this is set to true this has the same effect of setting trigger_mode
 to CLONE_SNAPSHOT on newer versions of the service. This boolean has been
 introduced to allow to have configs that use CLONE_SNAPSHOT on newer
 versions of Android and fall back to STOP_TRACING on older versions where
 CLONE_SNAPSHOT did not exist.
 When using this flag, trigger_mode must be set to STOP_TRACING. */
    bool has_use_clone_snapshot_if_available;
    bool use_clone_snapshot_if_available;
} perfetto_protos_TraceConfig_TriggerConfig;

typedef struct _perfetto_protos_TraceConfig_TriggerConfig_Trigger {
    /* The producer must specify this name to activate the trigger. */
    pb_callback_t name;
    /* An std::regex that will match the producer that can activate this
 trigger. This is optional. If unset any producers can activate this
 trigger. */
    pb_callback_t producer_name_regex;
    /* After a trigger is received either in START_TRACING or STOP_TRACING
 mode then the trace will end |stop_delay_ms| after triggering.
 In CLONE_SNAPSHOT mode, this is the delay between the trigger and the
 snapshot.
 If |prefer_suspend_clock_for_duration| is set, the duration will be
 based on wall-clock, counting also time in suspend. */
    bool has_stop_delay_ms;
    uint32_t stop_delay_ms;
    /* Limits the number of traces this trigger can start/stop in a rolling
 24 hour window. If this field is unset or zero, no limit is applied and
 activiation of this trigger *always* starts/stops the trace. */
    bool has_max_per_24_h;
    uint32_t max_per_24_h;
    /* A value between 0 and 1 which encodes the probability of skipping a
 trigger with this name. This is useful for reducing the probability
 of high-frequency triggers from dominating trace finaization. If this
 field is unset or zero, the trigger will *never* be skipped. If this
 field is greater than or equal to 1, this trigger will *always* be
 skipped i.e. it will be as if this trigger was never included in the
 first place.
 This probability check is applied *before* any other limits. For
 example, if |max_per_24_h| is also set, first we will check if the
 probability bar is met and only then will we check the |max_per_24_h|
 limit. */
    bool has_skip_probability;
    double skip_probability;
} perfetto_protos_TraceConfig_TriggerConfig_Trigger;

/* Configuration for trace contents that reference earlier trace data. For
 example, a data source might intern strings, and emit packets containing
 {interned id : string} pairs. Future packets from that data source can then
 use the interned ids instead of duplicating the raw string contents. The
 trace parser will then need to use that interning table to fully interpret
 the rest of the trace. */
typedef struct _perfetto_protos_TraceConfig_IncrementalStateConfig {
    /* If nonzero, notify eligible data sources to clear their incremental state
 periodically, with the given period. The notification is sent only to
 data sources that have |handles_incremental_state_clear| set in their
 DataSourceDescriptor. The notification requests that the data source
 stops referring to past trace contents. This is particularly useful when
 tracing in ring buffer mode, where it is not exceptional to overwrite old
 trace data.

 Warning: this time-based global clearing is likely to be removed in the
 future, to be replaced with a smarter way of sending the notifications
 only when necessary. */
    bool has_clear_period_ms;
    uint32_t clear_period_ms;
} perfetto_protos_TraceConfig_IncrementalStateConfig;

/* Android-only. Not for general use. If set, saves the trace into an
 incident. This field is read by perfetto_cmd, rather than the tracing
 service. This field must be set when passing the --upload flag to
 perfetto_cmd. */
typedef struct _perfetto_protos_TraceConfig_IncidentReportConfig { /* In this message, either:
  * all of |destination_package|, |destination_class| and |privacy_level|
    must be set.
  * |skip_incidentd| must be explicitly set to true. */
    pb_callback_t destination_package;
    pb_callback_t destination_class;
    /* Level of filtering in the requested incident. See |Destination| in
 frameworks/base/core/proto/android/privacy.proto. */
    bool has_privacy_level;
    int32_t privacy_level;
    /* If true, do not write the trace into dropbox (i.e. incident only).
 Otherwise, write to both dropbox and incident.
 TODO(lalitm): remove this field as we no longer use Dropbox. */
    bool has_skip_dropbox;
    bool skip_dropbox;
    /* If true, then skips saving the trace to incidentd.

 This flag is useful in testing (e.g. Perfetto-statsd integration tests)
 or when we explicitly don't want traces to go to incidentd even when they
 usually would (e.g. configs deployed using statsd but only used for
 inclusion in bugreports using |bugreport_score|).

 The motivation for having this flag, instead of just not setting
 |incident_report_config|, is prevent accidents where
 |incident_report_config| is omitted by mistake. */
    bool has_skip_incidentd;
    bool skip_incidentd;
} perfetto_protos_TraceConfig_IncidentReportConfig;

/* A rule specifies how strings should be filtered. */
typedef struct _perfetto_protos_TraceConfig_TraceFilter_StringFilterRule {
    /* The policy (i.e. algorithm) dictating how strings matching this rule
 should be handled. */
    bool has_policy;
    perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy policy;
    /* The regex pattern used to match against each string. */
    pb_callback_t regex_pattern;
    /* The string which should appear after the tgid in atrace tracepoint
 strings. */
    pb_callback_t atrace_payload_starts_with;
} perfetto_protos_TraceConfig_TraceFilter_StringFilterRule;

/* A chain is a list of rules which string will be sequentially checked
 against. */
typedef struct _perfetto_protos_TraceConfig_TraceFilter_StringFilterChain {
    pb_callback_t rules;
} perfetto_protos_TraceConfig_TraceFilter_StringFilterChain;

/* When set applies a post-filter to the trace contents using the filter
 provided. The filter is applied at ReadBuffers() time and works both in the
 case of IPC readback and write_into_file. This filter can be generated
 using `tools/proto_filter -s schema.proto -F filter_out.bytes` or
 `-T filter_out.escaped_string` (for .pbtx). See go/trace-filtering for
 design.

 Introduced in Android S, but it was broken (b/195065199). Reintroduced in
 Android T with a different field number. Updated in Android U with a new
 bytecode version which supports string filtering. */
typedef struct _perfetto_protos_TraceConfig_TraceFilter { /* =========================
 Filter bytecode.
 ========================= */
    /* The bytecode as implemented in Android T. */
    pb_callback_t bytecode;
    /* The bytecode as implemented in Android U. Adds support for string
 filtering. */
    pb_callback_t bytecode_v2;
    bool has_string_filter_chain;
    perfetto_protos_TraceConfig_TraceFilter_StringFilterChain string_filter_chain;
} perfetto_protos_TraceConfig_TraceFilter;

/* Android-only. Not for general use. If set, reports the trace to the
 Android framework. This field is read by perfetto_cmd, rather than the
 tracing service. This field must be set when passing the --upload flag to
 perfetto_cmd. */
typedef struct _perfetto_protos_TraceConfig_AndroidReportConfig { /* In this message, either:
  * |reporter_service_package| and |reporter_service_class| must be set.
  * |skip_reporting| must be explicitly set to true. */
    pb_callback_t reporter_service_package;
    pb_callback_t reporter_service_class;
    /* If true, then skips reporting the trace to Android framework.

 This flag is useful in testing (e.g. Perfetto-statsd integration tests)
 or when we explicitly don't want to report traces to the framework even
 when they usually would (e.g. configs deployed using statsd but only
 used for inclusion in bugreports using |bugreport_score|).

 The motivation for having this flag, instead of just not setting
 |framework_report_config|, is prevent accidents where
 |framework_report_config| is omitted by mistake. */
    bool has_skip_report;
    bool skip_report;
    /* If true, will direct the Android framework to read the data in trace
 file and pass it to the reporter class over a pipe instead of passing
 the file descriptor directly.

 This flag is needed because the Android test framework does not
 currently support priv-app helper apps (in terms of SELinux) and we
 really don't want to add an allow rule for untrusted_app to receive
 trace fds.

 Because of this, we instead will direct the framework to create a new
 pipe and pass this to the reporter process instead. As the pipe is
 created by the framework, we won't have any problems with SELinux
 (system_server is already allowed to pass pipe fds, even
 to untrusted apps).

 As the name suggests this option *MUST* only be used for testing.
 Note that the framework will reject (and drop) files which are too
 large both for simplicity and to be minimize the amount of data we
 pass to a non-priv app (note that the framework will still check
 manifest permissions even though SELinux permissions are worked around). */
    bool has_use_pipe_in_framework_for_testing;
    bool use_pipe_in_framework_for_testing;
} perfetto_protos_TraceConfig_AndroidReportConfig;

/* If set, delays the start of tracing by a random duration. The duration is
 chosen from a uniform distribution between the specified minimum and
 maximum.
 Note: this delay is implemented by perfetto_cmd *not* by traced so will
 not work if you communicate with traced directly over the consumer API.
 Introduced in Android T. */
typedef struct _perfetto_protos_TraceConfig_CmdTraceStartDelay {
    bool has_min_delay_ms;
    uint32_t min_delay_ms;
    bool has_max_delay_ms;
    uint32_t max_delay_ms;
} perfetto_protos_TraceConfig_CmdTraceStartDelay;

/* The overall config that is used when starting a new tracing session through
 ProducerPort::StartTracing().
 It contains the general config for the logging buffer(s) and the configs for
 all the data source being enabled.

 Next id: 40. */
typedef struct _perfetto_protos_TraceConfig {
    pb_callback_t buffers;
    pb_callback_t data_sources;
    /* If specified, the trace will be stopped |duration_ms| after starting.
 This does *not* count the time the system is suspended, so we will run
 for duration_ms of system activity, not wall time.

 However in case of traces with triggers, see
 TriggerConfig.trigger_timeout_ms instead. */
    bool has_duration_ms;
    uint32_t duration_ms;
    /* This is set when --dropbox is passed to the Perfetto command line client
 and enables guardrails that limit resource usage for traces requested
 by statsd. */
    bool has_enable_extra_guardrails;
    bool enable_extra_guardrails;
    /* Reject producers that are not running under the same UID as the tracing
 service. */
    bool has_lockdown_mode;
    perfetto_protos_TraceConfig_LockdownModeOperation lockdown_mode;
    pb_callback_t producers;
    /* Statsd-specific metadata. */
    bool has_statsd_metadata;
    perfetto_protos_TraceConfig_StatsdMetadata statsd_metadata;
    /* When true && |output_path| is empty, the EnableTracing() request must
 provide a file descriptor. The service will then periodically read packets
 out of the trace buffer and store it into the passed file.
 If |output_path| is not empty no fd should be passed, the service
 will create a new file and write into that (see comment below). */
    bool has_write_into_file;
    bool write_into_file;
    /* Optional. If non-zero tunes the write period. A min value of 100ms is
 enforced (i.e. smaller values are ignored). */
    bool has_file_write_period_ms;
    uint32_t file_write_period_ms;
    /* Optional. When non zero the periodic write stops once at most X bytes
 have been written into the file. Tracing is disabled when this limit is
 reached, even if |duration_ms| has not been reached yet. */
    bool has_max_file_size_bytes;
    uint64_t max_file_size_bytes;
    bool has_guardrail_overrides;
    perfetto_protos_TraceConfig_GuardrailOverrides guardrail_overrides;
    /* When true, data sources are not started until an explicit call to
 StartTracing() on the consumer port. This is to support early
 initialization and fast trace triggering. This can be used only when the
 Consumer explicitly triggers the StartTracing() method.
 This should not be used in a remote trace config via statsd, doing so will
 result in a hung trace session. */
    bool has_deferred_start;
    bool deferred_start;
    /* When set, it periodically issues a Flush() to all data source, forcing them
 to commit their data into the tracing service. This can be used for
 quasi-real-time streaming mode and to guarantee some partial ordering of
 events in the trace in windows of X ms. */
    bool has_flush_period_ms;
    uint32_t flush_period_ms;
    /* Wait for this long for producers to acknowledge flush requests.
 Default 5s. */
    bool has_flush_timeout_ms;
    uint32_t flush_timeout_ms;
    /* Android-only. If set, sends an intent to the Traceur system app when the
 trace ends to notify it about the trace readiness. */
    bool has_notify_traceur;
    bool notify_traceur;
    bool has_trigger_config;
    perfetto_protos_TraceConfig_TriggerConfig trigger_config;
    /* When this is non-empty the perfetto command line tool will ignore the rest
 of this TraceConfig and instead connect to the perfetto service as a
 producer and send these triggers, potentially stopping or starting traces
 that were previous configured to use a TriggerConfig. */
    pb_callback_t activate_triggers;
    /* No longer needed as we unconditionally allow tracing on user builds. */
    bool has_allow_user_build_tracing;
    bool allow_user_build_tracing;
    bool has_builtin_data_sources;
    perfetto_protos_TraceConfig_BuiltinDataSource builtin_data_sources;
    bool has_incremental_state_config;
    perfetto_protos_TraceConfig_IncrementalStateConfig incremental_state_config;
    /* If set the tracing service will ensure there is at most one tracing session
 with this key. */
    pb_callback_t unique_session_name;
    /* Wait for this long for producers to acknowledge stop requests.
 Default 5s. */
    bool has_data_source_stop_timeout_ms;
    uint32_t data_source_stop_timeout_ms;
    bool has_compression_type;
    perfetto_protos_TraceConfig_CompressionType compression_type;
    bool has_incident_report_config;
    perfetto_protos_TraceConfig_IncidentReportConfig incident_report_config;
    /* An identifier clients can use to tie this trace to other logging.
 DEPRECATED as per v32. See TracePacket.trace_uuid for the authoritative
 Trace UUID. If this field is set, the tracing service will respect the
 requested UUID (i.e. TracePacket.trace_uuid == this field) but only if
 gap-less snapshotting is not used. */
    bool has_trace_uuid_msb;
    int64_t trace_uuid_msb;
    bool has_trace_uuid_lsb;
    int64_t trace_uuid_lsb;
    /* This must point to a non-existing file. If the file exists the service
 will NOT overwrite and will fail instead as a security precaution.
 On Android, when this is used with the system traced, the path must be
 within /data/misc/perfetto-traces/ or the trace will fail.
 This option has been introduced in Android R. Before R write_into_file
 can be used only with the "pass a file descriptor over IPC" mode. */
    pb_callback_t output_path;
    /* This field was introduced in Android S.
 Android-only. If set to a value > 0, marks the trace session as a candidate
 for being attached to a bugreport. This field effectively acts as a z-index
 for bugreports. When Android's dumpstate runs perfetto
 --save-for-bugreport, traced will pick the tracing session with the highest
 score (score <= 0 is ignored) and:
 On Android S, T:  will steal its contents, save the trace into
     a known path and stop prematurely.
 On Android U+: will create a read-only snapshot and save that into a known
     path, without stoppin the original tracing session.
 When this field is set the tracing session becomes eligible to be cloned
 by other UIDs. */
    bool has_bugreport_score;
    int32_t bugreport_score;
    /* Android-only. Not for general use. If specified, sets the logging to statsd
 of guardrails and checkpoints in the tracing service. perfetto_cmd sets
 this to enabled (if not explicitly set in the config) when specifying
 --upload. */
    bool has_statsd_logging;
    perfetto_protos_TraceConfig_StatsdLogging statsd_logging;
    bool has_trace_filter;
    perfetto_protos_TraceConfig_TraceFilter trace_filter;
    bool has_android_report_config;
    perfetto_protos_TraceConfig_AndroidReportConfig android_report_config;
    bool has_cmd_trace_start_delay;
    perfetto_protos_TraceConfig_CmdTraceStartDelay cmd_trace_start_delay;
    /* If true, tries to use CLOCK_BOOTTIME for duration_ms rather than
 CLOCK_MONOTONIC (which doesn't count time in suspend). Supported only on
 Linux/Android, no-op on other platforms. This is used when dealing with
 long (e.g. 24h) traces, where suspend can inflate them to weeks of
 wall-time, making them more likely to hit device reboots (and hence loss).
 This option also changes consistently the semantic of
 TriggerConfig.stop_delay_ms. */
    bool has_prefer_suspend_clock_for_duration;
    bool prefer_suspend_clock_for_duration;
    /* When set, defines name of the file that will be saved under
 /data/misc/perfetto-traces/bugreport/ when using --save-all-for-bugreport.
 If omitted, traces will be named systrace.pftrace, systrace_1.pftrace, etc,
 starting from the highest `bugreport_score`.
 Introduced in v42 / Android V. */
    pb_callback_t bugreport_filename;
    pb_callback_t session_semaphores;
} perfetto_protos_TraceConfig;

/* When non-empty, ensures that for a each semaphore named `name at most
 `max_other_session_count`` *other* sessions (whose value is taken of the
 minimum of all values specified by this config or any already-running
 session) can be be running.

 If a semaphore "acquisition" fails, EnableTracing will return an error
 and the tracing session will not be started (or elgible to start in
 the case of deferred sessions).

 This is easiest to explain with an example. Suppose the tracing service has
 the following active tracing sessions:
   S1 = [{name=foo, max_other_session_count=2},
         {name=bar, max_other_session_count=0}]
   S2 = [{name=foo, max_other_session_count=1},
         {name=baz, max_other_session_count=1}]

 Then, for a new session, the following would be the expected behaviour of
 EnableSession given the state of `session_semaphores`.
   Q: session_semaphores = []
   A: Allowed because it does not specify any semaphores. Will be allowed
      no matter the state of any other tracing session.
   Q: session_semaphores = [{name=baz, max_other_session_count=1}]
   A: Allowed because both S2 and this config specify
      max_other_session_count=1 for baz.
   Q: session_semaphores = [{name=foo, max_other_session_count=3}]
   A: Denied because S2 specified max_other_session_count=1 for foo and S1
      takes that slot.
   Q: session_semaphores = [{name=bar, max_other_session_count=0}]
   A: Denied because S1 takes the the slot specified by both S1 and
      this config.

 Introduced in 24Q3 (Android V). */
typedef struct _perfetto_protos_TraceConfig_SessionSemaphore {
    /* The name of the semaphore. Acts as a unique identifier across all
 tracing sessions (including the one being started). */
    pb_callback_t name;
    /* The maximum number of *other* sesssions which specify the same semaphore
 which can be active. The minimum of this value across all tracing
 sessions and the value specified by the config is used when deciding
 whether the tracing session can be started. */
    bool has_max_other_session_count;
    uint64_t max_other_session_count;
} perfetto_protos_TraceConfig_SessionSemaphore;

/* From TraceBuffer::Stats.

 Next id: 21. */
typedef struct _perfetto_protos_TraceStats_BufferStats {
    /* Num. bytes written into the circular buffer, including chunk headers. */
    bool has_bytes_written;
    uint64_t bytes_written;
    /* Num. chunks (!= packets) written into the buffer. */
    bool has_chunks_written;
    uint64_t chunks_written;
    /* Num. chunks overwritten before they have been read (i.e. loss of data). */
    bool has_chunks_overwritten;
    uint64_t chunks_overwritten;
    /* Num. times the ring buffer wrapped around. */
    bool has_write_wrap_count;
    uint64_t write_wrap_count;
    /* Num. out-of-band (OOB) patches that succeeded. */
    bool has_patches_succeeded;
    uint64_t patches_succeeded;
    /* Num. OOB patches that failed (e.g., the chunk to patch was gone). */
    bool has_patches_failed;
    uint64_t patches_failed;
    /* Num. readaheads (for large multi-chunk packet reads) that ended up in a
 successful packet read. */
    bool has_readaheads_succeeded;
    uint64_t readaheads_succeeded;
    /* Num. readaheads aborted because of missing chunks in the sequence stream.
 Note that a small number > 0 is totally expected: occasionally, when
 issuing a read, the very last packet in a sequence might be incomplete
 (because the producer is still writing it while we read). The read will
 stop at that point, for that sequence, increasing this counter. */
    bool has_readaheads_failed;
    uint64_t readaheads_failed;
    /* Num. of violations of the SharedMemoryABI found while writing or reading
 the buffer. This is an indication of either a bug in the producer(s) or
 malicious producer(s). */
    bool has_abi_violations;
    uint64_t abi_violations;
    /* Num. chunks (!= packets) rewritten into the buffer. This means we rewrote
 the same chunk with additional packets appended to the end. */
    bool has_chunks_rewritten;
    uint64_t chunks_rewritten;
    /* Num. chunks that were committed out of order. */
    bool has_chunks_committed_out_of_order;
    uint64_t chunks_committed_out_of_order;
    /* Size of the circular buffer in bytes. */
    bool has_buffer_size;
    uint64_t buffer_size;
    /* Num. bytes overwritten before they have been read (i.e. loss of data). */
    bool has_bytes_overwritten;
    uint64_t bytes_overwritten;
    /* Total size of chunks that were fully read from the circular buffer by the
 consumer. This may not be equal to |bytes_written| either in the middle
 of tracing, or if |chunks_overwritten| is non-zero. Note that this is the
 size of the chunks read from the buffer, including chunk headers, which
 will be different from the total size of packets returned to the
 consumer.

 The current utilization of the trace buffer (mid-tracing) can be obtained
 by subtracting |bytes_read| and |bytes_overwritten| from |bytes_written|,
 adding the difference of |padding_bytes_written| and
 |padding_bytes_cleared|, and comparing this sum to the |buffer_size|.
 Note that this represents the total size of buffered data in the buffer,
 yet this data may be spread non-contiguously through the buffer and may
 be overridden before the utilization reaches 100%. */
    bool has_bytes_read;
    uint64_t bytes_read;
    /* Num. bytes that were allocated as padding between chunks in the circular
 buffer. */
    bool has_padding_bytes_written;
    uint64_t padding_bytes_written;
    /* Num. of padding bytes that were removed from the circular buffer when
 they were overwritten.

 The difference between |padding_bytes_written| and
 |padding_bytes_cleared| denotes the total size of padding currently
 present in the buffer. */
    bool has_padding_bytes_cleared;
    uint64_t padding_bytes_cleared;
    /* Num. chunks (!= packets) that were fully read from the circular buffer by
 the consumer. This may not be equal to |chunks_written| either in the
 middle of tracing, or if |chunks_overwritten| is non-zero. */
    bool has_chunks_read;
    uint64_t chunks_read;
    /* Num. chunks discarded (i.e. loss of data). Can be > 0 only when a buffer
 is configured with FillPolicy == DISCARD. */
    bool has_chunks_discarded;
    uint64_t chunks_discarded;
    /* Num. of times the service detected packet loss on a trace writer
 sequence. This is usually caused by exhaustion of available chunks in the
 writer process's SMB. Note that this relies on the client's TraceWriter
 indicating this loss to the service -- packets lost for other reasons are
 not reflected in this stat. */
    bool has_trace_writer_packet_loss;
    uint64_t trace_writer_packet_loss;
} perfetto_protos_TraceStats_BufferStats;

/* Per TraceWriter stat. Each {producer, trace writer} tuple is publicly
 visible as a unique sequence ID in the trace. */
typedef struct _perfetto_protos_TraceStats_WriterStats {
    /* This matches the TracePacket.trusted_packet_sequence_id and is used to
 correlate the stats with the actual packet types. */
    bool has_sequence_id;
    uint64_t sequence_id;
    /* These two arrays have the same cardinality and match the cardinality of
 chunk_payload_histogram_def + 1 (for the overflow bucket, see below).
 `sum` contains the SUM(entries) and `counts` contains the COUNT(entries)
 for each bucket. */
    pb_callback_t chunk_payload_histogram_counts;
    pb_callback_t chunk_payload_histogram_sum;
    /* The buffer index (0..N, as defined in the TraceConfig). */
    bool has_buffer;
    uint32_t buffer;
} perfetto_protos_TraceStats_WriterStats;

/* This is set only when the TraceConfig specifies a TraceFilter. */
typedef struct _perfetto_protos_TraceStats_FilterStats {
    bool has_input_packets;
    uint64_t input_packets;
    bool has_input_bytes;
    uint64_t input_bytes;
    bool has_output_bytes;
    uint64_t output_bytes;
    bool has_errors;
    uint64_t errors;
    bool has_time_taken_ns;
    uint64_t time_taken_ns;
    /* The number of bytes discarded by the filter (i.e. output - input).
 The array has one entry for each buffer defined in the config (unless no
 packets for that buffer were seen and hence filtered).
 Note: the SUM(bytes_discarded_per_buffer) will be <= but not == the total
 (output_bytes - input_bytes) because the filter might also discard
 server-generated synthetic packets, that have no buffer index. */
    pb_callback_t bytes_discarded_per_buffer;
} perfetto_protos_TraceStats_FilterStats;

/* Statistics for the internals of the tracing service.

 Next id: 19. */
typedef struct _perfetto_protos_TraceStats {
    /* Stats for the TraceBuffer(s) of the current trace session. */
    pb_callback_t buffer_stats;
    /* Num. producers connected (whether they are involved in the current tracing
 session or not). */
    bool has_producers_connected;
    uint32_t producers_connected;
    /* Num. producers ever seen for all trace sessions since startup (it's a good
 proxy for inferring num. producers crashed / killed). */
    bool has_producers_seen;
    uint64_t producers_seen;
    /* Num. data sources registered for all trace sessions. */
    bool has_data_sources_registered;
    uint32_t data_sources_registered;
    /* Num. data sources ever seen for all trace sessions since startup. */
    bool has_data_sources_seen;
    uint64_t data_sources_seen;
    /* Num. concurrently active tracing sessions. */
    bool has_tracing_sessions;
    uint32_t tracing_sessions;
    /* Num. buffers for all tracing session (not just the current one). This will
 be >= buffer_stats.size(), because the latter is only about the current
 session. */
    bool has_total_buffers;
    uint32_t total_buffers;
    /* Num. chunks that were discarded by the service before attempting to commit
 them to a buffer, e.g. because the producer specified an invalid buffer ID. */
    bool has_chunks_discarded;
    uint64_t chunks_discarded;
    /* Num. patches that were discarded by the service before attempting to apply
 them to a buffer, e.g. because the producer specified an invalid buffer ID. */
    bool has_patches_discarded;
    uint64_t patches_discarded;
    /* Packets that failed validation of the TrustedPacket. If this is > 0, there
 is a bug in the producer. */
    bool has_invalid_packets;
    uint64_t invalid_packets;
    bool has_filter_stats;
    perfetto_protos_TraceStats_FilterStats filter_stats;
    /* Count of Flush() requests (either from the Consumer, or self-induced
 periodic flushes). The final Flush() is also included in the count. */
    bool has_flushes_requested;
    uint64_t flushes_requested;
    /* The count of the Flush() requests that were completed successfully.
 In a well behaving trace this should always be == `flush_requests`. */
    bool has_flushes_succeeded;
    uint64_t flushes_succeeded;
    /* The count of the Flush() requests that failed (in most timed out).
 In a well behaving trace this should always be == 0. */
    bool has_flushes_failed;
    uint64_t flushes_failed;
    bool has_final_flush_outcome;
    perfetto_protos_TraceStats_FinalFlushOutcome final_flush_outcome;
    /* The thresholds of each the `writer_stats` histogram buckets. This is
 emitted only once as all WriterStats share the same bucket layout.
 This field has the same cardinality of the
 `writer_stats.chunk_payload_histogram_{counts,sum}` - 1.
 (The -1 is because the last overflow bucket is not reported in the _def).
 An array of values [10, 100, 1000] in the _def array means that there are
 four buckets (3 + the implicit overflow bucket):
 [0]: x <= 10; [1]: 100 < x <= 1000; [2]: 1000 < x <= 1000; [3]: x > 1000. */
    pb_callback_t chunk_payload_histogram_def;
    pb_callback_t writer_stats;
} perfetto_protos_TraceStats;

typedef struct _perfetto_protos_AndroidGameInterventionList {
    pb_callback_t game_packages;
    /* True when at least one error occurred when parsing
 game_mode_intervention.list */
    bool has_parse_error;
    bool parse_error;
    /* Failed to open / read game_mode_intervention.list */
    bool has_read_error;
    bool read_error;
} perfetto_protos_AndroidGameInterventionList;

typedef struct _perfetto_protos_AndroidGameInterventionList_GameModeInfo {
    bool has_mode;
    uint32_t mode;
    bool has_use_angle;
    bool use_angle;
    bool has_resolution_downscale;
    float resolution_downscale;
    bool has_fps;
    float fps;
} perfetto_protos_AndroidGameInterventionList_GameModeInfo;

typedef struct _perfetto_protos_AndroidGameInterventionList_GamePackageInfo {
    pb_callback_t name;
    bool has_uid;
    uint64_t uid;
    bool has_current_mode;
    uint32_t current_mode;
    pb_callback_t game_mode_info;
} perfetto_protos_AndroidGameInterventionList_GamePackageInfo;

typedef struct _perfetto_protos_AndroidLogPacket_LogEvent {
    /* The log buffer (e.g. MAIN, SYSTEM, RADIO) the event comes from. */
    bool has_log_id;
    perfetto_protos_AndroidLogId log_id;
    /* PID (TGID), TID and UID of the task that emitted the event. */
    bool has_pid;
    int32_t pid;
    bool has_tid;
    int32_t tid;
    bool has_uid;
    int32_t uid;
    /* Timestamp [ns]. The clock source is CLOCK_REALTIME, unlike many other
 Perfetto trace events that instead use CLOCK_BOOTTIME. The trace
 processor will take care of realigning clocks using the ClockSnapshot(s). */
    bool has_timestamp;
    uint64_t timestamp;
    /* When log_id == LID_EVENTS, |tag| corresponds to the event name defined in
 the second column of /system/etc/event-log-tags. For all other events,
 |tag| is the app-specified argument passed to __android_log_write(). */
    pb_callback_t tag;
    /* Empty when log_id == LID_EVENTS. */
    bool has_prio;
    perfetto_protos_AndroidLogPriority prio;
    /* Empty when log_id == LID_EVENTS. */
    pb_callback_t message;
    /* Only populated when log_id == LID_EVENTS. */
    pb_callback_t args;
} perfetto_protos_AndroidLogPacket_LogEvent;

typedef struct _perfetto_protos_AndroidLogPacket_LogEvent_Arg {
    pb_callback_t name;
    pb_size_t which_value;
    union _perfetto_protos_AndroidLogPacket_LogEvent_Arg_value {
        int64_t int_value;
        float float_value;
        pb_callback_t string_value;
    } value;
} perfetto_protos_AndroidLogPacket_LogEvent_Arg;

/* Stats are emitted only upon Flush() and are monotonic (i.e. they are
 absolute counters since the beginning of the lifetime of the tracing
 session and NOT relative to the previous Stats snapshot). */
typedef struct _perfetto_protos_AndroidLogPacket_Stats {
    /* Total number of log events seen, including errors and skipped entries
 (num of events stored in the trace = total - failed - skipped). */
    bool has_num_total;
    uint64_t num_total;
    /* Parser failures. */
    bool has_num_failed;
    uint64_t num_failed;
    /* Messages skipped due to filters. */
    bool has_num_skipped;
    uint64_t num_skipped;
} perfetto_protos_AndroidLogPacket_Stats;

typedef struct _perfetto_protos_AndroidLogPacket {
    pb_callback_t events;
    bool has_stats;
    perfetto_protos_AndroidLogPacket_Stats stats;
} perfetto_protos_AndroidLogPacket;

typedef struct _perfetto_protos_AndroidSystemProperty {
    pb_callback_t values;
} perfetto_protos_AndroidSystemProperty;

typedef struct _perfetto_protos_AndroidSystemProperty_PropertyValue {
    pb_callback_t name;
    pb_callback_t value;
} perfetto_protos_AndroidSystemProperty_PropertyValue;

/* AppWakelockInfo describes the time-independent properties of a wakelock, such
 as the owning package or wakelock tag. This is interned to reduce trace size.
 Event bundles refer to interned wakelock info by the iid. */
typedef struct _perfetto_protos_AppWakelockInfo {
    /* The interned id of this wakelock. */
    bool has_iid;
    int32_t iid;
    /* The app-provided tag of the wakelock. */
    pb_callback_t tag;
    /* The wakelock flags (such as partial vs full). */
    bool has_flags;
    int32_t flags;
    /* The pid that created the wakelock. */
    bool has_owner_pid;
    int32_t owner_pid;
    /* The uid that created the wakelock. */
    bool has_owner_uid;
    int32_t owner_uid;
    /* The uid of the work source root (if present). */
    bool has_work_uid;
    int32_t work_uid;
} perfetto_protos_AppWakelockInfo;

/* AppWakelockBundle describes one or more wakelock events. Events are written
 in two paired array, such that the details for event i are in intern_id[i]
 and encoded_ts[i]. */
typedef struct _perfetto_protos_AppWakelockBundle {
    /* The interned id for the WakelockInfo of the event. */
    pb_callback_t intern_id;
    /* The timestamp and event type, encoded as:
   (event_time - packet_time) << 1 | (acquired ? 1 : 0) */
    pb_callback_t encoded_ts;
    /* For writing single packets (mainly by tokenization). */
    bool has_info;
    perfetto_protos_AppWakelockInfo info;
    bool has_acquired;
    bool acquired;
} perfetto_protos_AppWakelockBundle;

/* Trace event for bluetooth */
typedef struct _perfetto_protos_BluetoothTraceEvent {
    /* Packet type and direction */
    bool has_packet_type;
    perfetto_protos_BluetoothTracePacketType packet_type;
    /* Total count of the packets collected during the collection interval */
    bool has_count;
    uint32_t count;
    /* Total cumulative length of the packets collected during the collection
 interval */
    bool has_length;
    uint32_t length;
    /* The collection interval in nanoseconds. This is the duration between the
 first and last packets collected. */
    bool has_duration;
    uint32_t duration;
    /* In case of CMD type, further breakdown of the type of command */
    bool has_op_code;
    uint32_t op_code;
    /* In the case of EVT type, further breakdown of the type of event */
    bool has_event_code;
    uint32_t event_code;
    /* When applicable for EVT type, further breakdown of event type into specific
 subevent */
    bool has_subevent_code;
    uint32_t subevent_code;
    /* Associated handle for the bluetooth packet */
    bool has_connection_handle;
    uint32_t connection_handle;
} perfetto_protos_BluetoothTraceEvent;

/* A profiling event corresponding to a single camera frame. This message
 collects important details and timestamps involved in producing a single
 camera frame.
 Next ID: 17 */
typedef struct _perfetto_protos_AndroidCameraFrameEvent {
    /* Identifier for the CameraCaptureSession this frame originates from. See:
 https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession */
    bool has_session_id;
    uint64_t session_id;
    /* Identifier for the camera sensor that is the source of this frame. This may
 be either a physical or logical camera (up to vendor interpretation). */
    bool has_camera_id;
    uint32_t camera_id;
    /* The frame number identifying this frame on this camera. */
    bool has_frame_number;
    int64_t frame_number;
    /* Identifier for the CaptureRequest. See:
 https://developer.android.com/reference/android/hardware/camera2/CaptureRequest

 If multiple cameras are streaming simultaneously, the request_id may be
 used to identify which frames were captured in service of the same request. */
    bool has_request_id;
    int64_t request_id;
    /* The CLOCK_BOOTTIME timestamp at which the camera framework request is
 received by the camera HAL pipeline. Note that this request may wait for
 some time before processing actually begins. See also
 request_processing_started_ns. */
    bool has_request_received_ns;
    int64_t request_received_ns;
    /* The CLOCK_BOOTTIME timestamp at which the framework request is accepted for
 processing by the camera HAL pipeline. This is the time at which the
 pipeline actually begins to work on the request. */
    bool has_request_processing_started_ns;
    int64_t request_processing_started_ns;
    /* The CLOCK_BOOTTIME timestamp at which the sensor begins its exposure. */
    bool has_start_of_exposure_ns;
    int64_t start_of_exposure_ns;
    /* The CLOCK_BOOTTIME timestamp corresponding to the sensor start of frame
 event. */
    bool has_start_of_frame_ns;
    int64_t start_of_frame_ns;
    /* The CLOCK_BOOTTIME timestamp at which the camera HAL has sent all responses
 for the frame. */
    bool has_responses_all_sent_ns;
    int64_t responses_all_sent_ns;
    bool has_capture_result_status;
    perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus capture_result_status;
    /* The number of sensor frames that were skipped between this frame and the
 previous frame. Under normal operation, this should be zero. Any number
 greater than zero indicates dropped sensor frames. */
    bool has_skipped_sensor_frames;
    int32_t skipped_sensor_frames;
    /* The value of CONTROL_CAPTURE_INTENT. See:
 https://developer.android.com/reference/android/hardware/camera2/CaptureRequest#CONTROL_CAPTURE_INTENT */
    bool has_capture_intent;
    int32_t capture_intent;
    /* The number of streams in the capture request. */
    bool has_num_streams;
    int32_t num_streams;
    pb_callback_t node_processing_details;
    /* These fields capture vendor-specific additions to this proto message. In
 practice `vendor_data` typically contains a serialized message of the
 vendor's design, and `vendor_data_version` is incremented each time there
 is a backwards incompatible change made to the message. */
    bool has_vendor_data_version;
    int32_t vendor_data_version;
    pb_callback_t vendor_data;
} perfetto_protos_AndroidCameraFrameEvent;

/* A profiling event corresponding to a single node processing within the camera
 pipeline. Intuitively this corresponds to a single stage of processing to
 produce a camera frame.
 Next ID: 6 */
typedef struct _perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails {
    bool has_node_id;
    int64_t node_id;
    /* The timestamp at which node processing begins to run. */
    bool has_start_processing_ns;
    int64_t start_processing_ns;
    /* The timestamp at which node processing finishes running. */
    bool has_end_processing_ns;
    int64_t end_processing_ns;
    /* The delay between inputs becoming ready and the node actually beginning to
 run. */
    bool has_scheduling_latency_ns;
    int64_t scheduling_latency_ns;
} perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails;

/* Although vendor implementations may vary, camera pipeline processing is
 typically arranged into a directed graph-like structure. This message is
 used to record that graph. */
typedef struct _perfetto_protos_AndroidCameraSessionStats_CameraGraph {
    pb_callback_t nodes;
    pb_callback_t edges;
} perfetto_protos_AndroidCameraSessionStats_CameraGraph;

/* A profiling event that may be emitted periodically (i.e., at a slower rate
 than `AndroidCameraFrameEvent`s) to record fixed and aggregated camera
 session-specific values. */
typedef struct _perfetto_protos_AndroidCameraSessionStats {
    /* Identifier for the CameraCaptureSession this frame originates from. See:
 https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession */
    bool has_session_id;
    uint64_t session_id;
    bool has_graph;
    perfetto_protos_AndroidCameraSessionStats_CameraGraph graph;
} perfetto_protos_AndroidCameraSessionStats;

typedef struct _perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode {
    bool has_node_id;
    int64_t node_id;
    /* A list of inputs consumed by this node. */
    pb_callback_t input_ids;
    /* A list of outputs produced by this node. */
    pb_callback_t output_ids;
    /* These fields capture vendor-specific additions to this proto message. In
 practice `vendor_data` typically contains a serialized message of the
 vendor's design, and `vendor_data_version` is incremented each time there
 is a backwards incompatible change made to the message. */
    bool has_vendor_data_version;
    int32_t vendor_data_version;
    pb_callback_t vendor_data;
} perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode;

/* An adjacency list describing connections between CameraNodes, mapping
 nodes and their outputs to other nodes that consume them as inputs. */
typedef struct _perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge {
    /* The pair of IDs identifying the node and output connected by this edge. */
    bool has_output_node_id;
    int64_t output_node_id;
    bool has_output_id;
    int64_t output_id;
    /* The pair of IDs identifying the node and input connected by this edge. */
    bool has_input_node_id;
    int64_t input_node_id;
    bool has_input_id;
    int64_t input_id;
    /* These fields capture vendor-specific additions to this proto message. In
 practice `vendor_data` typically contains a serialized message of the
 vendor's design, and `vendor_data_version` is incremented each time there
 is a backwards incompatible change made to the message. */
    bool has_vendor_data_version;
    int32_t vendor_data_version;
    pb_callback_t vendor_data;
} perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge;

/* Indicates the start of expected timeline slice for SurfaceFrames. */
typedef struct _perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart {
    /* Cookie used to correlate between the start and end messages of the same
 frame. Since all values except the ts are same for start and end, cookie
 helps in preventing redundant data transmission.
 The same cookie is used only by start and end messages of a single frame
 and is otherwise unique. */
    bool has_cookie;
    int64_t cookie;
    /* Token received by the app for its work. Can be shared between multiple
 layers of the same app (example: pip mode). */
    bool has_token;
    int64_t token;
    /* The corresponding DisplayFrame token is required to link the App's work
 with SurfaceFlinger's work. Many SurfaceFrames can be mapped to a single
 DisplayFrame.
 this.display_frame_token = DisplayFrame.token */
    bool has_display_frame_token;
    int64_t display_frame_token;
    /* Pid of the app. Used in creating the timeline tracks (and slices) inside
 the respective process track group. */
    bool has_pid;
    int32_t pid;
    pb_callback_t layer_name;
} perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart;

/* Indicates the start of actual timeline slice for SurfaceFrames. Also
 includes the jank information. */
typedef struct _perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart {
    /* Cookie used to correlate between the start and end messages of the same
 frame. Since all values except the ts are same for start and end, cookie
 helps in preventing redundant data transmission.
 The same cookie is used only by start and end messages of a single frame
 and is otherwise unique. */
    bool has_cookie;
    int64_t cookie;
    /* Token received by the app for its work. Can be shared between multiple
 layers of the same app (example: pip mode). */
    bool has_token;
    int64_t token;
    /* The corresponding DisplayFrame token is required to link the App's work
 with SurfaceFlinger's work. Many SurfaceFrames can be mapped to a single
 DisplayFrame.
 this.display_frame_token = DisplayFrame.token */
    bool has_display_frame_token;
    int64_t display_frame_token;
    /* Pid of the app. Used in creating the timeline tracks (and slices) inside
 the respective process track group. */
    bool has_pid;
    int32_t pid;
    pb_callback_t layer_name;
    bool has_present_type;
    perfetto_protos_FrameTimelineEvent_PresentType present_type;
    bool has_on_time_finish;
    bool on_time_finish;
    bool has_gpu_composition;
    bool gpu_composition;
    /* A bitmask of JankType. More than one reason can be attributed to a janky
 frame. */
    bool has_jank_type;
    int32_t jank_type;
    bool has_prediction_type;
    perfetto_protos_FrameTimelineEvent_PredictionType prediction_type;
    bool has_is_buffer;
    bool is_buffer;
    bool has_jank_severity_type;
    perfetto_protos_FrameTimelineEvent_JankSeverityType jank_severity_type;
} perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart;

/* Indicates the start of expected timeline slice for DisplayFrames. */
typedef struct _perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart {
    /* Cookie used to correlate between the start and end messages of the same
 frame. Since all values except the ts are same for start and end, cookie
 helps in preventing redundant data transmission.
 The same cookie is used only by start and end messages of a single frame
 and is otherwise unique. */
    bool has_cookie;
    int64_t cookie;
    /* Token received by SurfaceFlinger for its work
 this.token = SurfaceFrame.display_frame_token */
    bool has_token;
    int64_t token;
    /* Pid of SurfaceFlinger. Used in creating the timeline tracks (and slices)
 inside the SurfaceFlinger process group. */
    bool has_pid;
    int32_t pid;
} perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart;

/* Indicates the start of actual timeline slice for DisplayFrames. Also
 includes the jank information. */
typedef struct _perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart {
    /* Cookie used to correlate between the start and end messages of the same
 frame. Since all values except the ts are same for start and end, cookie
 helps in preventing redundant data transmission.
 The same cookie is used only by start and end messages of a single frame
 and is otherwise unique. */
    bool has_cookie;
    int64_t cookie;
    /* Token received by SurfaceFlinger for its work
 this.token = SurfaceFrame.display_frame_token */
    bool has_token;
    int64_t token;
    /* Pid of SurfaceFlinger. Used in creating the timeline tracks (and slices)
 inside the SurfaceFlinger process group. */
    bool has_pid;
    int32_t pid;
    bool has_present_type;
    perfetto_protos_FrameTimelineEvent_PresentType present_type;
    bool has_on_time_finish;
    bool on_time_finish;
    bool has_gpu_composition;
    bool gpu_composition;
    /* A bitmask of JankType. More than one reason can be attributed to a janky
 frame. */
    bool has_jank_type;
    int32_t jank_type;
    bool has_prediction_type;
    perfetto_protos_FrameTimelineEvent_PredictionType prediction_type;
    bool has_jank_severity_type;
    perfetto_protos_FrameTimelineEvent_JankSeverityType jank_severity_type;
} perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart;

/* FrameEnd just sends the cookie to indicate that the corresponding
 <display/surface>frame slice's end. */
typedef struct _perfetto_protos_FrameTimelineEvent_FrameEnd {
    bool has_cookie;
    int64_t cookie;
} perfetto_protos_FrameTimelineEvent_FrameEnd;

/* Generated by SurfaceFlinger's FrameTimeline (go/adaptive-scheduling-fr).
 Used in comparing the expected timeline of a frame to the actual timeline.
 Key terms:
    1) DisplayFrame - represents SurfaceFlinger's work on a frame(composited)
    2) SurfaceFrame - represents App's work on its frame
    3) Timeline = start to end of a component's(app/SF) work on a frame.
 SurfaceFlinger composites frames from many apps together, so
    One DisplayFrame can map to N SurfaceFrame(s)
 This relationship can be reconstructed by using
    DisplayFrame.token = SurfaceFrame.display_frame_token */
typedef struct _perfetto_protos_FrameTimelineEvent {
    pb_size_t which_event;
    union _perfetto_protos_FrameTimelineEvent_event {
        perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart expected_display_frame_start;
        perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart actual_display_frame_start;
        perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart expected_surface_frame_start;
        perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart actual_surface_frame_start;
        perfetto_protos_FrameTimelineEvent_FrameEnd frame_end;
    } event;
} perfetto_protos_FrameTimelineEvent;

/* Generated by Android's GpuService. */
typedef struct _perfetto_protos_GpuMemTotalEvent {
    bool has_gpu_id;
    uint32_t gpu_id;
    bool has_pid;
    uint32_t pid;
    bool has_size;
    uint64_t size;
} perfetto_protos_GpuMemTotalEvent;

typedef struct _perfetto_protos_GraphicsFrameEvent_BufferEvent {
    bool has_frame_number;
    uint32_t frame_number;
    bool has_type;
    perfetto_protos_GraphicsFrameEvent_BufferEventType type;
    pb_callback_t layer_name;
    /* If no duration is set, the event is an instant event. */
    bool has_duration_ns;
    uint64_t duration_ns;
    /* Unique buffer identifier. */
    bool has_buffer_id;
    uint32_t buffer_id;
} perfetto_protos_GraphicsFrameEvent_BufferEvent;

/* Generated by Android's SurfaceFlinger. */
typedef struct _perfetto_protos_GraphicsFrameEvent {
    bool has_buffer_event;
    perfetto_protos_GraphicsFrameEvent_BufferEvent buffer_event;
} perfetto_protos_GraphicsFrameEvent;

typedef struct _perfetto_protos_InitialDisplayState {
    /* Same values as android.view.Display.STATE_* */
    bool has_display_state;
    int32_t display_state;
    bool has_brightness;
    double brightness;
} perfetto_protos_InitialDisplayState;

typedef struct _perfetto_protos_KernelWakelockData {
    /* This is only emitted when we encounter new wakelocks. */
    pb_callback_t wakelock;
    /* Interning id. */
    pb_callback_t wakelock_id;
    /* If we interned the wakelock name in this packet, this is the total time
 the wakelock has been held.
 If not, it's a delta from the last time we saw it. */
    pb_callback_t time_held_millis;
} perfetto_protos_KernelWakelockData;

typedef struct _perfetto_protos_KernelWakelockData_Wakelock {
    /* Interning id. */
    bool has_wakelock_id;
    uint32_t wakelock_id;
    /* Name of the wakelock. */
    pb_callback_t wakelock_name;
    /* Type of the wakelock. We record data about both true kernel wakelocks
 and "native" wakelocks which are taken in userspace but are more
 conceptually similar to kernel wakelocks than normal userspace ones. */
    bool has_wakelock_type;
    perfetto_protos_KernelWakelockData_Wakelock_Type wakelock_type;
} perfetto_protos_KernelWakelockData_Wakelock;

/* NetworkPacketEvent records the details of a single packet sent or received
 on the network (in Linux kernel terminology, one sk_buff struct). */
typedef struct _perfetto_protos_NetworkPacketEvent {
    /* The direction traffic is flowing for this event. */
    bool has_direction;
    perfetto_protos_TrafficDirection direction;
    /* The name of the interface if available (e.g. 'rmnet0'). */
    pb_callback_t interface;
    /* The length of the packet in bytes (wire_size - L2_header_size). Ignored
 when using NetworkPacketEvent as the ctx in either NetworkPacketBundle or
 NetworkPacketContext. */
    bool has_length;
    uint32_t length;
    /* The Linux user id associated with the packet's socket. */
    bool has_uid;
    uint32_t uid;
    /* The Android network tag associated with the packet's socket. */
    bool has_tag;
    uint32_t tag;
    /* The packet's IP protocol (TCP=6, UDP=17, etc). */
    bool has_ip_proto;
    uint32_t ip_proto;
    /* The packet's TCP flags as a bitmask (FIN=0x1, SYN=0x2, RST=0x4, etc). */
    bool has_tcp_flags;
    uint32_t tcp_flags;
    /* The local udp/tcp port of the packet. */
    bool has_local_port;
    uint32_t local_port;
    /* The remote udp/tcp port of the packet. */
    bool has_remote_port;
    uint32_t remote_port;
    /* The 1-byte ICMP type identifier. */
    bool has_icmp_type;
    uint32_t icmp_type;
    /* The 1-byte ICMP code identifier. */
    bool has_icmp_code;
    uint32_t icmp_code;
} perfetto_protos_NetworkPacketEvent;

/* NetworkPacketBundle bundles one or more packets sharing the same attributes. */
typedef struct _perfetto_protos_NetworkPacketBundle {
    pb_size_t which_packet_context;
    union _perfetto_protos_NetworkPacketBundle_packet_context {
        /* The intern id for looking up the associated packet context. */
        uint64_t iid;
        /* The inlined context for events in this bundle. */
        perfetto_protos_NetworkPacketEvent ctx;
    } packet_context;
    /* The timestamp of the i-th packet encoded as the nanoseconds since the
 enclosing TracePacket's timestamp. */
    pb_callback_t packet_timestamps;
    /* The length of the i-th packet in bytes (wire_size - L2_header_size). */
    pb_callback_t packet_lengths;
    /* Total number of packets in the bundle (when above aggregation_threshold). */
    bool has_total_packets;
    uint32_t total_packets;
    /* Duration between first and last packet (when above aggregation_threshold). */
    bool has_total_duration;
    uint64_t total_duration;
    /* Total packet length in bytes (when above aggregation_threshold). */
    bool has_total_length;
    uint64_t total_length;
} perfetto_protos_NetworkPacketBundle;

/* An internable packet context. */
typedef struct _perfetto_protos_NetworkPacketContext {
    bool has_iid;
    uint64_t iid;
    bool has_ctx;
    perfetto_protos_NetworkPacketEvent ctx;
} perfetto_protos_NetworkPacketContext;

typedef struct _perfetto_protos_PackagesList {
    pb_callback_t packages;
    /* At least one error occurred parsing the packages.list. */
    bool has_parse_error;
    bool parse_error;
    /* Failed to open / read packages.list. */
    bool has_read_error;
    bool read_error;
} perfetto_protos_PackagesList;

typedef struct _perfetto_protos_PackagesList_PackageInfo {
    pb_callback_t name;
    bool has_uid;
    uint64_t uid;
    bool has_debuggable;
    bool debuggable;
    bool has_profileable_from_shell;
    bool profileable_from_shell;
    bool has_version_code;
    int64_t version_code;
} perfetto_protos_PackagesList_PackageInfo;

typedef struct _perfetto_protos_PixelModemEvents {
    /* Pigweed-format dehydrated events. */
    pb_callback_t events;
    /* Timestamps of the events, converted to CLOCK_BOOTTIME. The first
 timestamp is the absolute timestamp of the first event. Subsequent
 timestamps are deltas from the previous timestamp.
 The nth entry from `events` gets the nth entry here. */
    pb_callback_t event_time_nanos;
} perfetto_protos_PixelModemEvents;

/* NB: this is not emitted in the trace but can be prepended later. */
typedef struct _perfetto_protos_PixelModemTokenDatabase {
    /* Pigweed-format database to allow event rehydration. */
    pb_callback_t database;
} perfetto_protos_PixelModemTokenDatabase;

/* represents a single log entry */
typedef struct _perfetto_protos_ProtoLogMessage {
    /* log statement identifier, created from message string and log level. */
    bool has_message_id;
    uint64_t message_id;
    /* string parameters passed to the log call that have been interned. */
    pb_callback_t str_param_iids;
    /* integer parameters passed to the log call. */
    pb_callback_t sint64_params;
    /* floating point parameters passed to the log call. */
    pb_callback_t double_params;
    /* boolean parameters passed to the log call. */
    pb_callback_t boolean_params;
    /* id of the interned stacktrace string
 (only dumped if explicitly confuigured to do so) */
    bool has_stacktrace_iid;
    uint32_t stacktrace_iid;
} perfetto_protos_ProtoLogMessage;

/* contains all the data required to fully decode the protolog messages */
typedef struct _perfetto_protos_ProtoLogViewerConfig {
    pb_callback_t messages;
    pb_callback_t groups;
} perfetto_protos_ProtoLogViewerConfig;

typedef struct _perfetto_protos_ProtoLogViewerConfig_MessageData {
    /* the id of the message that is logged in a ProtoLogMessage */
    bool has_message_id;
    uint64_t message_id;
    /* the string representation of the message */
    pb_callback_t message;
    /* the level of the message */
    bool has_level;
    perfetto_protos_ProtoLogLevel level;
    /* the id of the log group this message belongs to */
    bool has_group_id;
    uint32_t group_id;
    /* path to the file where the message was logged */
    pb_callback_t location;
} perfetto_protos_ProtoLogViewerConfig_MessageData;

/* information about a ProtoLog log group */
typedef struct _perfetto_protos_ProtoLogViewerConfig_Group {
    bool has_id;
    uint32_t id;
    pb_callback_t name;
    pb_callback_t tag;
} perfetto_protos_ProtoLogViewerConfig_Group;

/* ShellTransition messages record information about the shell transitions in
 the system. This is used to track the animations that are created and execute
 through the shell transition system. */
typedef struct _perfetto_protos_ShellTransition {
    /* The unique identifier of the transition. */
    bool has_id;
    int32_t id;
    /* The time the transition was created on the WM side
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_create_time_ns;
    int64_t create_time_ns;
    /* The time the transition was sent from the WM side to shell
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_send_time_ns;
    int64_t send_time_ns;
    /* The time the transition was dispatched by shell to execute
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_dispatch_time_ns;
    int64_t dispatch_time_ns;
    /* If the transition merge was accepted by the transition handler, this
 contains the time the transition was merged into transition with id
 `merge_target`.
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_merge_time_ns;
    int64_t merge_time_ns;
    /* The time shell proposed the transition should be merged to the transition
 handler into transition with id `merge_target`.
 (using SystemClock.elapsedRealtimeNanos()). */
    bool has_merge_request_time_ns;
    int64_t merge_request_time_ns;
    /* If the transition was aborted on the shell side, this is the time that
 occurred.
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_shell_abort_time_ns;
    int64_t shell_abort_time_ns;
    /* If the transition was aborted on the wm side, this is the time that
 occurred.
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_wm_abort_time_ns;
    int64_t wm_abort_time_ns;
    /* The time WM considers the transition to be complete.
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_finish_time_ns;
    int64_t finish_time_ns;
    /* The id of the transaction that WM proposed to use as the starting
 transaction. It contains all the layer changes required to setup the
 transition and should be executed right at the start of the transition
 by the transition handler. */
    bool has_start_transaction_id;
    uint64_t start_transaction_id;
    /* The if of the transaction that WM proposed to use as the finish
 transaction. It contains all the layer changes required to set the final
 state of the transition. */
    bool has_finish_transaction_id;
    uint64_t finish_transaction_id;
    /* The id of the handler that executed the transition. A HandlerMappings
 message in the trace will contain the mapping of id to a string
 representation of the handler. */
    bool has_handler;
    int32_t handler;
    /* The transition type of this transition (e.g. TO_FRONT, OPEN, CLOSE). */
    bool has_type;
    int32_t type;
    /* The list of targets that are part of this transition. */
    pb_callback_t targets;
    /* The id of the transition we have requested to merge or have merged this
 transition into. */
    bool has_merge_target;
    int32_t merge_target;
    /* The flags set on this transition. */
    bool has_flags;
    int32_t flags;
    /* The time the starting window was removed. Tracked because this can
 happen after the transition finishes, but the app may not yet be visible
 until the starting window is removed. So in a sense the transition is not
 finished until the starting window is removed. (b/284302118)
 (using SystemClock.elapsedRealtimeNanos()) */
    bool has_starting_window_remove_time_ns;
    int64_t starting_window_remove_time_ns;
} perfetto_protos_ShellTransition;

/* Contains the information about the windows targeted in a transition. */
typedef struct _perfetto_protos_ShellTransition_Target {
    /* The transition mode of this target (e.g. TO_FRONT, CLOSE...) */
    bool has_mode;
    int32_t mode;
    /* The layer id of this target. */
    bool has_layer_id;
    int32_t layer_id;
    /* The window id of this target. */
    bool has_window_id;
    int32_t window_id;
    /* The flags set on this target. */
    bool has_flags;
    int32_t flags;
} perfetto_protos_ShellTransition_Target;

/* Contains mappings from handler ids to string representation of the handlers. */
typedef struct _perfetto_protos_ShellHandlerMappings {
    pb_callback_t mapping;
} perfetto_protos_ShellHandlerMappings;

typedef struct _perfetto_protos_ShellHandlerMapping {
    /* The id of the handler used in the ShellTransition message. */
    bool has_id;
    int32_t id;
    /* A human readable and meaningful string representation of the handler. */
    pb_callback_t name;
} perfetto_protos_ShellHandlerMapping;

typedef struct _perfetto_protos_RectProto {
    bool has_left;
    int32_t left;
    bool has_top;
    int32_t top;
    bool has_right;
    int32_t right;
    bool has_bottom;
    int32_t bottom;
} perfetto_protos_RectProto;

typedef struct _perfetto_protos_RegionProto {
    pb_callback_t rect;
} perfetto_protos_RegionProto;

typedef struct _perfetto_protos_SizeProto {
    bool has_w;
    int32_t w;
    bool has_h;
    int32_t h;
} perfetto_protos_SizeProto;

typedef struct _perfetto_protos_TransformProto {
    bool has_dsdx;
    float dsdx;
    bool has_dtdx;
    float dtdx;
    bool has_dsdy;
    float dsdy;
    bool has_dtdy;
    float dtdy;
    bool has_type;
    int32_t type;
} perfetto_protos_TransformProto;

typedef struct _perfetto_protos_ColorProto {
    bool has_r;
    float r;
    bool has_g;
    float g;
    bool has_b;
    float b;
    bool has_a;
    float a;
} perfetto_protos_ColorProto;

typedef struct _perfetto_protos_InputWindowInfoProto {
    bool has_layout_params_flags;
    uint32_t layout_params_flags;
    bool has_layout_params_type;
    int32_t layout_params_type;
    bool has_frame;
    perfetto_protos_RectProto frame;
    bool has_touchable_region;
    perfetto_protos_RegionProto touchable_region;
    bool has_surface_inset;
    int32_t surface_inset;
    bool has_visible;
    bool visible;
    bool has_can_receive_keys;
    bool can_receive_keys;
    bool has_focusable;
    bool focusable;
    bool has_has_wallpaper;
    bool has_wallpaper;
    bool has_global_scale_factor;
    float global_scale_factor;
    bool has_window_x_scale;
    float window_x_scale;
    bool has_window_y_scale;
    float window_y_scale;
    bool has_crop_layer_id;
    int32_t crop_layer_id;
    bool has_replace_touchable_region_with_crop;
    bool replace_touchable_region_with_crop;
    bool has_touchable_region_crop;
    perfetto_protos_RectProto touchable_region_crop;
    bool has_transform;
    perfetto_protos_TransformProto transform;
    bool has_input_config;
    uint32_t input_config;
} perfetto_protos_InputWindowInfoProto;

typedef struct _perfetto_protos_BlurRegion {
    bool has_blur_radius;
    uint32_t blur_radius;
    bool has_corner_radius_tl;
    uint32_t corner_radius_tl;
    bool has_corner_radius_tr;
    uint32_t corner_radius_tr;
    bool has_corner_radius_bl;
    uint32_t corner_radius_bl;
    bool has_corner_radius_br;
    float corner_radius_br;
    bool has_alpha;
    float alpha;
    bool has_left;
    int32_t left;
    bool has_top;
    int32_t top;
    bool has_right;
    int32_t right;
    bool has_bottom;
    int32_t bottom;
} perfetto_protos_BlurRegion;

typedef struct _perfetto_protos_ColorTransformProto {
    /* This will be a 4x4 matrix of float values */
    pb_callback_t val;
} perfetto_protos_ColorTransformProto;

/* Message used by Winscope to process legacy trace files.
 Represents a file full of surface flinger trace entries.
 Encoded, it should start with 0x4c 0x59 0x52 0x54 0x52 0x41 0x43 0x45
 (.LYRTRACE), such that they can be easily identified. */
typedef struct _perfetto_protos_LayersTraceFileProto {
    /* Must be the first field, set to value in MagicNumber */
    bool has_magic_number;
    uint64_t magic_number;
    pb_callback_t entry;
    /* Offset between real-time clock and elapsed time clock in nanoseconds.
 Calculated as: systemTime(SYSTEM_TIME_REALTIME) -
 systemTime(SYSTEM_TIME_MONOTONIC) */
    bool has_real_to_elapsed_time_offset_nanos;
    uint64_t real_to_elapsed_time_offset_nanos;
} perfetto_protos_LayersTraceFileProto;

/* Contains a list of all layers. */
typedef struct _perfetto_protos_LayersProto {
    pb_callback_t layers;
} perfetto_protos_LayersProto;

typedef struct _perfetto_protos_LayersSnapshotProto {
    /* elapsed realtime in nanos since boot of when this entry was logged */
    bool has_elapsed_realtime_nanos;
    int64_t elapsed_realtime_nanos;
    /* SurfaceFlinger's stage where the snapshot was triggered.
 Currently either "visibleRegionsDirty" or "bufferLatched". */
    pb_callback_t where;
    bool has_layers;
    perfetto_protos_LayersProto layers;
    /* Blob for the current HWC information for all layers, reported by dumpsys.
 Example:
   "maxDownScale: 4, maxFullWidth: 8192, HWState: 1, AssignedState: 3, ..." */
    pb_callback_t hwc_blob;
    /* Excludes state sent during composition like visible region and composition
 type. */
    bool has_excludes_composition_state;
    bool excludes_composition_state;
    /* Number of missed entries since the last entry was recorded. */
    bool has_missed_entries;
    uint32_t missed_entries;
    pb_callback_t displays;
    bool has_vsync_id;
    int64_t vsync_id;
} perfetto_protos_LayersSnapshotProto;

typedef struct _perfetto_protos_DisplayProto {
    bool has_id;
    uint64_t id;
    /* Display descriptor, e.g. "Built-In Screen" */
    pb_callback_t name;
    bool has_layer_stack;
    uint32_t layer_stack;
    bool has_size;
    perfetto_protos_SizeProto size;
    bool has_layer_stack_space_rect;
    perfetto_protos_RectProto layer_stack_space_rect;
    bool has_transform;
    perfetto_protos_TransformProto transform;
    bool has_is_virtual;
    bool is_virtual;
    bool has_dpi_x;
    double dpi_x;
    bool has_dpi_y;
    double dpi_y;
} perfetto_protos_DisplayProto;

typedef struct _perfetto_protos_LayerProto_MetadataEntry {
    bool has_key;
    int32_t key;
    pb_callback_t value;
} perfetto_protos_LayerProto_MetadataEntry;

typedef struct _perfetto_protos_PositionProto {
    bool has_x;
    float x;
    bool has_y;
    float y;
} perfetto_protos_PositionProto;

typedef struct _perfetto_protos_FloatRectProto {
    bool has_left;
    float left;
    bool has_top;
    float top;
    bool has_right;
    float right;
    bool has_bottom;
    float bottom;
} perfetto_protos_FloatRectProto;

typedef struct _perfetto_protos_ActiveBufferProto {
    bool has_width;
    uint32_t width;
    bool has_height;
    uint32_t height;
    bool has_stride;
    uint32_t stride;
    bool has_format;
    int32_t format;
    bool has_usage;
    uint64_t usage;
} perfetto_protos_ActiveBufferProto;

/* Information about each layer. */
typedef struct _perfetto_protos_LayerProto {
    /* unique id per layer. */
    bool has_id;
    int32_t id;
    /* unique name per layer.
 Example: "Wallpaper". */
    pb_callback_t name;
    /* list of children this layer may have. May be empty. */
    pb_callback_t children;
    /* list of layers that are z order relative to this layer. */
    pb_callback_t relatives;
    /* The type of layer.
 Examples: "ContainerLayer", "BufferStateLayer". */
    pb_callback_t type;
    bool has_transparent_region;
    perfetto_protos_RegionProto transparent_region;
    bool has_visible_region;
    perfetto_protos_RegionProto visible_region;
    bool has_damage_region;
    perfetto_protos_RegionProto damage_region;
    bool has_layer_stack;
    uint32_t layer_stack;
    /* The layer's z order. Can be z order in layer stack, relative to parent,
 or relative to another layer specified in zOrderRelative. */
    bool has_z;
    int32_t z;
    /* The layer's position on the display. */
    bool has_position;
    perfetto_protos_PositionProto position;
    /* The layer's requested position. */
    bool has_requested_position;
    perfetto_protos_PositionProto requested_position;
    /* The layer's size. */
    bool has_size;
    perfetto_protos_SizeProto size;
    /* The layer's crop in its own bounds. */
    bool has_crop;
    perfetto_protos_RectProto crop;
    /* The layer's crop in its parent's bounds. */
    bool has_final_crop;
    perfetto_protos_RectProto final_crop;
    bool has_is_opaque;
    bool is_opaque;
    bool has_invalidate;
    bool invalidate;
    /* Composition states's dataspace.
 Examples: "STANDARD_BT709", "STANDARD_BT601_625".
 See full enum in
 frameworks/native/libs/nativewindow/include/android/data_space.h */
    pb_callback_t dataspace;
    /* Buffer's pixel format
 Examples: "PIXEL_FORMAT_TRANSLUCENT", "PIXEL_FORMAT_RGBA_8888".
 See full enum in frameworks/native/libs/ui/include/ui/PixelFormat.h */
    pb_callback_t pixel_format;
    /* The layer's actual color. */
    bool has_color;
    perfetto_protos_ColorProto color;
    /* The layer's requested color. */
    bool has_requested_color;
    perfetto_protos_ColorProto requested_color;
    /* Can be any combination of
    hidden = 0x01
    opaque = 0x02,
    secure = 0x80, */
    bool has_flags;
    uint32_t flags;
    /* The layer's actual transform */
    bool has_transform;
    perfetto_protos_TransformProto transform;
    /* The layer's requested transform. */
    bool has_requested_transform;
    perfetto_protos_TransformProto requested_transform;
    /* The parent layer. This value can be null if there is no parent. */
    bool has_parent;
    int32_t parent;
    /* The layer that this layer has a z order relative to. This value can be
 null. */
    bool has_z_order_relative_of;
    int32_t z_order_relative_of;
    /* This value can be null if there's nothing to draw. */
    bool has_active_buffer;
    perfetto_protos_ActiveBufferProto active_buffer;
    /* The number of frames available. */
    bool has_queued_frames;
    int32_t queued_frames;
    bool has_refresh_pending;
    bool refresh_pending;
    /* The layer's composer backend destination frame */
    bool has_hwc_frame;
    perfetto_protos_RectProto hwc_frame;
    /* The layer's composer backend source crop */
    bool has_hwc_crop;
    perfetto_protos_FloatRectProto hwc_crop;
    /* The layer's composer backend transform */
    bool has_hwc_transform;
    int32_t hwc_transform;
    bool has_window_type;
    int32_t window_type;
    bool has_app_id;
    int32_t app_id;
    /* The layer's composition type */
    bool has_hwc_composition_type;
    perfetto_protos_HwcCompositionType hwc_composition_type;
    /* If it's a buffer layer, indicate if the content is protected */
    bool has_is_protected;
    bool is_protected;
    /* Current frame number being rendered. */
    bool has_curr_frame;
    uint64_t curr_frame;
    /* A list of barriers that the layer is waiting to update state. */
    pb_callback_t barrier_layer;
    /* If active_buffer is not null, record its transform. */
    bool has_buffer_transform;
    perfetto_protos_TransformProto buffer_transform;
    bool has_effective_scaling_mode;
    int32_t effective_scaling_mode;
    /* Layer's corner radius. */
    bool has_corner_radius;
    float corner_radius;
    /* Metadata map. May be empty. */
    pb_callback_t metadata;
    bool has_effective_transform;
    perfetto_protos_TransformProto effective_transform;
    bool has_source_bounds;
    perfetto_protos_FloatRectProto source_bounds;
    bool has_bounds;
    perfetto_protos_FloatRectProto bounds;
    bool has_screen_bounds;
    perfetto_protos_FloatRectProto screen_bounds;
    bool has_input_window_info;
    perfetto_protos_InputWindowInfoProto input_window_info;
    /* Crop used to draw the rounded corner. */
    bool has_corner_radius_crop;
    perfetto_protos_FloatRectProto corner_radius_crop;
    /* length of the shadow to draw around the layer, it may be set on the
 layer or set by a parent layer. */
    bool has_shadow_radius;
    float shadow_radius;
    bool has_color_transform;
    perfetto_protos_ColorTransformProto color_transform;
    bool has_is_relative_of;
    bool is_relative_of;
    /* Layer's background blur radius in pixels. */
    bool has_background_blur_radius;
    int32_t background_blur_radius;
    bool has_owner_uid;
    uint32_t owner_uid;
    /* Regions of a layer, where blur should be applied. */
    pb_callback_t blur_regions;
    bool has_is_trusted_overlay;
    bool is_trusted_overlay;
    /* Corner radius explicitly set on layer rather than inherited */
    bool has_requested_corner_radius;
    float requested_corner_radius;
    bool has_destination_frame;
    perfetto_protos_RectProto destination_frame;
    bool has_original_id;
    uint32_t original_id;
    bool has_trusted_overlay;
    perfetto_protos_TrustedOverlay trusted_overlay;
} perfetto_protos_LayerProto;

typedef struct _perfetto_protos_BarrierLayerProto {
    /* layer id the barrier is waiting on. */
    bool has_id;
    int32_t id;
    /* frame number the barrier is waiting on. */
    bool has_frame_number;
    uint64_t frame_number;
} perfetto_protos_BarrierLayerProto;

/* Message used by Winscope to process legacy trace files.
 Represents a file full of surface flinger transactions.
 Encoded, it should start with 0x54 0x4E 0x58 0x54 0x52 0x41 0x43 0x45
 (.TNXTRACE), such that they can be easily identified. */
typedef struct _perfetto_protos_TransactionTraceFile {
    /* Must be the first field, set to value in MagicNumber */
    bool has_magic_number;
    uint64_t magic_number;
    pb_callback_t entry;
    /* offset between real-time clock and elapsed time clock in nanoseconds.
 Calculated as: systemTime(SYSTEM_TIME_REALTIME) -
 systemTime(SYSTEM_TIME_MONOTONIC) */
    bool has_real_to_elapsed_time_offset_nanos;
    uint64_t real_to_elapsed_time_offset_nanos;
    bool has_version;
    uint32_t version;
} perfetto_protos_TransactionTraceFile;

typedef struct _perfetto_protos_TransactionTraceEntry {
    bool has_elapsed_realtime_nanos;
    int64_t elapsed_realtime_nanos;
    bool has_vsync_id;
    int64_t vsync_id;
    pb_callback_t transactions;
    pb_callback_t added_layers;
    pb_callback_t destroyed_layers;
    pb_callback_t added_displays;
    pb_callback_t removed_displays;
    pb_callback_t destroyed_layer_handles;
    bool has_displays_changed;
    bool displays_changed;
    pb_callback_t displays;
} perfetto_protos_TransactionTraceEntry;

typedef struct _perfetto_protos_LayerCreationArgs {
    bool has_layer_id;
    uint32_t layer_id;
    pb_callback_t name;
    bool has_flags;
    uint32_t flags;
    bool has_parent_id;
    uint32_t parent_id;
    bool has_mirror_from_id;
    uint32_t mirror_from_id;
    bool has_add_to_root;
    bool add_to_root;
    bool has_layer_stack_to_mirror;
    uint32_t layer_stack_to_mirror;
} perfetto_protos_LayerCreationArgs;

typedef struct _perfetto_protos_Transform {
    bool has_dsdx;
    float dsdx;
    bool has_dtdx;
    float dtdx;
    bool has_dtdy;
    float dtdy;
    bool has_dsdy;
    float dsdy;
    bool has_tx;
    float tx;
    bool has_ty;
    float ty;
} perfetto_protos_Transform;

typedef struct _perfetto_protos_DisplayInfo {
    bool has_layer_stack;
    uint32_t layer_stack;
    bool has_display_id;
    int32_t display_id;
    bool has_logical_width;
    int32_t logical_width;
    bool has_logical_height;
    int32_t logical_height;
    bool has_transform_inverse;
    perfetto_protos_Transform transform_inverse;
    bool has_transform;
    perfetto_protos_Transform transform;
    bool has_receives_input;
    bool receives_input;
    bool has_is_secure;
    bool is_secure;
    bool has_is_primary;
    bool is_primary;
    bool has_is_virtual;
    bool is_virtual;
    bool has_rotation_flags;
    int32_t rotation_flags;
    bool has_transform_hint;
    int32_t transform_hint;
} perfetto_protos_DisplayInfo;

typedef struct _perfetto_protos_TransactionState {
    bool has_pid;
    int32_t pid;
    bool has_uid;
    int32_t uid;
    bool has_vsync_id;
    int64_t vsync_id;
    bool has_input_event_id;
    int32_t input_event_id;
    bool has_post_time;
    int64_t post_time;
    bool has_transaction_id;
    uint64_t transaction_id;
    pb_callback_t layer_changes;
    pb_callback_t display_changes;
    pb_callback_t merged_transaction_ids;
} perfetto_protos_TransactionState;

typedef struct _perfetto_protos_LayerState_Matrix22 {
    bool has_dsdx;
    float dsdx;
    bool has_dtdx;
    float dtdx;
    bool has_dtdy;
    float dtdy;
    bool has_dsdy;
    float dsdy;
} perfetto_protos_LayerState_Matrix22;

typedef struct _perfetto_protos_LayerState_Color3 {
    bool has_r;
    float r;
    bool has_g;
    float g;
    bool has_b;
    float b;
} perfetto_protos_LayerState_Color3;

typedef struct _perfetto_protos_LayerState_BufferData {
    bool has_buffer_id;
    uint64_t buffer_id;
    bool has_width;
    uint32_t width;
    bool has_height;
    uint32_t height;
    bool has_frame_number;
    uint64_t frame_number;
    bool has_flags;
    uint32_t flags;
    bool has_cached_buffer_id;
    uint64_t cached_buffer_id;
    bool has_pixel_format;
    perfetto_protos_LayerState_BufferData_PixelFormat pixel_format;
    bool has_usage;
    uint64_t usage;
} perfetto_protos_LayerState_BufferData;

typedef struct _perfetto_protos_LayerState_WindowInfo {
    bool has_layout_params_flags;
    uint32_t layout_params_flags;
    bool has_layout_params_type;
    int32_t layout_params_type;
    bool has_touchable_region;
    perfetto_protos_RegionProto touchable_region;
    bool has_surface_inset;
    int32_t surface_inset;
    /* unused */
    bool has_focusable;
    bool focusable;
    /* unused */
    bool has_has_wallpaper;
    bool has_wallpaper;
    bool has_global_scale_factor;
    float global_scale_factor;
    bool has_crop_layer_id;
    uint32_t crop_layer_id;
    bool has_replace_touchable_region_with_crop;
    bool replace_touchable_region_with_crop;
    bool has_touchable_region_crop;
    perfetto_protos_RectProto touchable_region_crop;
    bool has_transform;
    perfetto_protos_Transform transform;
    bool has_input_config;
    uint32_t input_config;
} perfetto_protos_LayerState_WindowInfo;

/* Keep insync with layer_state_t */
typedef struct _perfetto_protos_LayerState {
    bool has_layer_id;
    uint32_t layer_id;
    bool has_what;
    uint64_t what;
    bool has_x;
    float x;
    bool has_y;
    float y;
    bool has_z;
    int32_t z;
    bool has_w;
    uint32_t w;
    bool has_h;
    uint32_t h;
    bool has_layer_stack;
    uint32_t layer_stack;
    bool has_flags;
    uint32_t flags;
    bool has_mask;
    uint32_t mask;
    bool has_matrix;
    perfetto_protos_LayerState_Matrix22 matrix;
    bool has_corner_radius;
    float corner_radius;
    bool has_background_blur_radius;
    uint32_t background_blur_radius;
    bool has_parent_id;
    uint32_t parent_id;
    bool has_relative_parent_id;
    uint32_t relative_parent_id;
    bool has_alpha;
    float alpha;
    bool has_color;
    perfetto_protos_LayerState_Color3 color;
    bool has_transparent_region;
    perfetto_protos_RegionProto transparent_region;
    bool has_transform;
    uint32_t transform;
    bool has_transform_to_display_inverse;
    bool transform_to_display_inverse;
    bool has_crop;
    perfetto_protos_RectProto crop;
    bool has_buffer_data;
    perfetto_protos_LayerState_BufferData buffer_data;
    bool has_api;
    int32_t api;
    bool has_has_sideband_stream;
    bool has_sideband_stream;
    bool has_color_transform;
    perfetto_protos_ColorTransformProto color_transform;
    pb_callback_t blur_regions;
    bool has_window_info_handle;
    perfetto_protos_LayerState_WindowInfo window_info_handle;
    bool has_bg_color_alpha;
    float bg_color_alpha;
    bool has_bg_color_dataspace;
    int32_t bg_color_dataspace;
    bool has_color_space_agnostic;
    bool color_space_agnostic;
    bool has_shadow_radius;
    float shadow_radius;
    bool has_frame_rate_selection_priority;
    int32_t frame_rate_selection_priority;
    bool has_frame_rate;
    float frame_rate;
    bool has_frame_rate_compatibility;
    int32_t frame_rate_compatibility;
    bool has_change_frame_rate_strategy;
    int32_t change_frame_rate_strategy;
    bool has_fixed_transform_hint;
    uint32_t fixed_transform_hint;
    bool has_frame_number;
    uint64_t frame_number;
    bool has_auto_refresh;
    bool auto_refresh;
    /* unused */
    bool has_is_trusted_overlay;
    bool is_trusted_overlay;
    bool has_buffer_crop;
    perfetto_protos_RectProto buffer_crop;
    bool has_destination_frame;
    perfetto_protos_RectProto destination_frame;
    bool has_drop_input_mode;
    perfetto_protos_LayerState_DropInputMode drop_input_mode;
    bool has_trusted_overlay;
    perfetto_protos_TrustedOverlay trusted_overlay;
} perfetto_protos_LayerState;

typedef struct _perfetto_protos_DisplayState {
    bool has_id;
    int32_t id;
    bool has_what;
    uint32_t what;
    bool has_flags;
    uint32_t flags;
    bool has_layer_stack;
    uint32_t layer_stack;
    bool has_orientation;
    uint32_t orientation;
    bool has_layer_stack_space_rect;
    perfetto_protos_RectProto layer_stack_space_rect;
    bool has_oriented_display_space_rect;
    perfetto_protos_RectProto oriented_display_space_rect;
    bool has_width;
    uint32_t width;
    bool has_height;
    uint32_t height;
} perfetto_protos_DisplayState;

typedef struct _perfetto_protos_WinscopeExtensions {
    pb_extension_t *extensions;
} perfetto_protos_WinscopeExtensions;

/* This message is not intended to be written by the chrome on the device.
 It's emitted on the host by the telemetry benchmark infrastructure (it's a
 part of the trace that's written by the telemetry tracing agent). */
typedef struct _perfetto_protos_ChromeBenchmarkMetadata {
    /* Time when the benchmark execution started (host unixtime in microseconds). */
    bool has_benchmark_start_time_us;
    int64_t benchmark_start_time_us;
    /* Time when this particular story was run (host unixtime in microseconds). */
    bool has_story_run_time_us;
    int64_t story_run_time_us;
    /* Name of benchmark. */
    pb_callback_t benchmark_name;
    /* Description of benchmark. */
    pb_callback_t benchmark_description;
    /* Optional label. */
    pb_callback_t label;
    /* Name of story. */
    pb_callback_t story_name;
    /* List of story tags. */
    pb_callback_t story_tags;
    /* Index of the story run (>0 if the same story was run several times). */
    bool has_story_run_index;
    int32_t story_run_index;
    /* Whether this run failed. */
    bool has_had_failures;
    bool had_failures;
} perfetto_protos_ChromeBenchmarkMetadata;

/* Finch name and group based on the ActiveGroupId. */
typedef struct _perfetto_protos_ChromeMetadataPacket_FinchHash {
    bool has_name;
    uint32_t name;
    bool has_group;
    uint32_t group;
} perfetto_protos_ChromeMetadataPacket_FinchHash;

/* Configuration of histogram trigger. */
typedef struct _perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule {
    /* UMA histogram name hash, same as HistogramEventProto.name_hash. */
    bool has_histogram_name_hash;
    uint64_t histogram_name_hash;
    /* Range of values of the histogram that activates trigger. */
    bool has_histogram_min_trigger;
    int64_t histogram_min_trigger;
    bool has_histogram_max_trigger;
    int64_t histogram_max_trigger;
} perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule;

/* Configuration of named trigger. */
typedef struct _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule {
    bool has_event_type;
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType event_type;
    /* If |event_type| is CONTENT_TRIGGER, then this stores the hash of the
 content-trigger that actually fired. */
    bool has_content_trigger_name_hash;
    uint64_t content_trigger_name_hash;
} perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule;

/* Information about a trigger rule defined in the experiment config. */
typedef struct _perfetto_protos_BackgroundTracingMetadata_TriggerRule {
    bool has_trigger_type;
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType trigger_type;
    bool has_histogram_rule;
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule histogram_rule;
    bool has_named_rule;
    perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule named_rule;
    /* Hash of the rule name. */
    bool has_name_hash;
    uint32_t name_hash;
} perfetto_protos_BackgroundTracingMetadata_TriggerRule;

/* Metadata related to background tracing scenarios, states and triggers. */
typedef struct _perfetto_protos_BackgroundTracingMetadata {
    /* Specifies the rule that caused the trace to be uploaded. */
    bool has_triggered_rule;
    perfetto_protos_BackgroundTracingMetadata_TriggerRule triggered_rule;
    /* List of all active triggers in current session, when trace was triggered. */
    pb_callback_t active_rules;
    /* Hash of the scenario name. */
    bool has_scenario_name_hash;
    uint32_t scenario_name_hash;
} perfetto_protos_BackgroundTracingMetadata;

/* Metadata for chrome traces. */
typedef struct _perfetto_protos_ChromeMetadataPacket {
    bool has_background_tracing_metadata;
    perfetto_protos_BackgroundTracingMetadata background_tracing_metadata;
    /* Version code of Chrome used by Android's Play Store. This field is only set
 on Android. */
    bool has_chrome_version_code;
    int32_t chrome_version_code;
    /* Comma separated list of enabled categories for tracing. The list of
 possible category strings are listed in code
 base/trace_event/builtin_categories.h. */
    pb_callback_t enabled_categories;
    /* List of Finch study/groups that apply to this trace. */
    pb_callback_t field_trial_hashes;
} perfetto_protos_ChromeMetadataPacket;

typedef struct _perfetto_protos_ChromeTracedValue {
    bool has_nested_type;
    perfetto_protos_ChromeTracedValue_NestedType nested_type;
    pb_callback_t dict_keys;
    pb_callback_t dict_values;
    pb_callback_t array_values;
    bool has_int_value;
    int32_t int_value;
    bool has_double_value;
    double double_value;
    bool has_bool_value;
    bool bool_value;
    pb_callback_t string_value;
} perfetto_protos_ChromeTracedValue;

typedef struct _perfetto_protos_ChromeStringTableEntry {
    pb_callback_t value;
    bool has_index;
    int32_t index;
} perfetto_protos_ChromeStringTableEntry;

/* Deprecated, use TrackEvent protos instead. */
typedef struct _perfetto_protos_ChromeTraceEvent {
    pb_callback_t name;
    bool has_timestamp;
    int64_t timestamp;
    bool has_phase;
    int32_t phase;
    bool has_thread_id;
    int32_t thread_id;
    bool has_duration;
    int64_t duration;
    bool has_thread_duration;
    int64_t thread_duration;
    pb_callback_t scope;
    bool has_id;
    uint64_t id;
    bool has_flags;
    uint32_t flags;
    pb_callback_t category_group_name;
    bool has_process_id;
    int32_t process_id;
    bool has_thread_timestamp;
    int64_t thread_timestamp;
    bool has_bind_id;
    uint64_t bind_id;
    pb_callback_t args;
    /* Takes precedence over respectively |name| and
 |category_group_name_index| if set,
 and are indices into |string_table|. */
    bool has_name_index;
    uint32_t name_index;
    bool has_category_group_name_index;
    uint32_t category_group_name_index;
} perfetto_protos_ChromeTraceEvent;

typedef struct _perfetto_protos_ChromeTraceEvent_Arg {
    pb_callback_t name;
    pb_size_t which_value;
    union _perfetto_protos_ChromeTraceEvent_Arg_value {
        bool bool_value;
        uint64_t uint_value;
        int64_t int_value;
        double double_value;
        pb_callback_t string_value;
        /* Pointers are stored in a separate type as the JSON output treats them
     differently from other uint64 values. */
        uint64_t pointer_value;
        pb_callback_t json_value;
        perfetto_protos_ChromeTracedValue traced_value;
    } value;
    /* Takes precedence over |name| if set,
 and is an index into |string_table|. */
    bool has_name_index;
    uint32_t name_index;
} perfetto_protos_ChromeTraceEvent_Arg;

typedef struct _perfetto_protos_ChromeMetadata {
    pb_callback_t name;
    pb_size_t which_value;
    union _perfetto_protos_ChromeMetadata_value {
        pb_callback_t string_value;
        bool bool_value;
        int64_t int_value;
        pb_callback_t json_value;
    } value;
} perfetto_protos_ChromeMetadata;

/* Subtraces produced in legacy json format by Chrome tracing agents not yet
 updated to support the new binary format, e.g. ETW and CrOS ARC.
 TODO(eseckler): Update these agents to become perfetto producers. */
typedef struct _perfetto_protos_ChromeLegacyJsonTrace {
    bool has_type;
    perfetto_protos_ChromeLegacyJsonTrace_TraceType type;
    pb_callback_t data;
} perfetto_protos_ChromeLegacyJsonTrace;

typedef struct _perfetto_protos_ChromeEventBundle {
    /* Deprecated, use TrackEvent protos instead. */
    pb_callback_t trace_events;
    /* TODO(ssid): This should be deprecated in favor of ChromeMetadataPacket
 which contains typed fields. */
    pb_callback_t metadata;
    /* Contents of a string table that's valid for
 the whole ChromeEventBundle entry. */
    pb_callback_t string_table;
    /* ftrace output from CrOS and Cast system tracing agents.
 TODO(eseckler): Replace system traces with native perfetto service. */
    pb_callback_t legacy_ftrace_output;
    pb_callback_t legacy_json_trace;
} perfetto_protos_ChromeEventBundle;

/* Information about a specific trigger during a background tracing scenario
 Associated packet timestamps are useful to delimitate a scenario range in a
 trace. Triggers are also useful for filtering traces. */
typedef struct _perfetto_protos_ChromeTrigger {
    /* Name of the trigger which was received. */
    pb_callback_t trigger_name;
    /* SHA1 hash of the trigger name. */
    bool has_trigger_name_hash;
    uint32_t trigger_name_hash;
    /* Flow id which should terminate on this trigger. */
    bool has_flow_id;
    uint64_t flow_id;
} perfetto_protos_ChromeTrigger;

/* Strings used by V8 can have different encodings, instead of coverting to a
 common encoding (e.g. UTF-8) on device is expensive. Instead we send the
 "raw" string and do the convestion at trace ingestion time.

 ATTENTION: There is some overhead in using a message (as opossed to having
 the `oneof encoded_string`` direcly embedded in the message), so use this
 message in places were these extra bytes don't matter that much.
 Next id: 5 */
typedef struct _perfetto_protos_V8String {
    pb_size_t which_encoded_string;
    union _perfetto_protos_V8String_encoded_string {
        /* ISO/IEC 8859-1:1998 encoding aka latin1
     https://en.wikipedia.org/wiki/ISO/IEC_8859-1 */
        pb_callback_t latin1;
        /* UTF-16 Little Endian Encoding */
        pb_callback_t utf16_le;
        /* UTF-16 Big Endian Encoding */
        pb_callback_t utf16_be;
    } encoded_string;
} perfetto_protos_V8String;

/* Interned version of V8String */
typedef struct _perfetto_protos_InternedV8String {
    bool has_iid;
    uint64_t iid;
    pb_size_t which_encoded_string;
    union _perfetto_protos_InternedV8String_encoded_string {
        /* ISO/IEC 8859-1:1998 encoding aka latin1
     https://en.wikipedia.org/wiki/ISO/IEC_8859-1 */
        pb_callback_t latin1;
        /* UTF-16 Little Endian Encoding */
        pb_callback_t utf16_le;
        /* UTF-16 Big Endian Encoding */
        pb_callback_t utf16_be;
    } encoded_string;
} perfetto_protos_InternedV8String;

/* Represents a script that was compiled to generate code. Some V8 code is
 generated out of scripts and will reference a V8Script other types of code
 will not (e.g. builtins). */
typedef struct _perfetto_protos_InternedV8JsScript {
    bool has_iid;
    uint64_t iid;
    /* Unique in a given isolate */
    bool has_script_id;
    int32_t script_id;
    bool has_type;
    perfetto_protos_InternedV8JsScript_Type type;
    bool has_name;
    perfetto_protos_V8String name;
    /* Actual source of the script */
    bool has_source;
    perfetto_protos_V8String source;
} perfetto_protos_InternedV8JsScript;

typedef struct _perfetto_protos_InternedV8WasmScript {
    bool has_iid;
    uint64_t iid;
    /* Unique in a given isolate */
    bool has_script_id;
    int32_t script_id;
    pb_callback_t url;
    /* Raw transferred wasm native module wire bytes. */
    pb_callback_t wire_bytes;
} perfetto_protos_InternedV8WasmScript;

typedef struct _perfetto_protos_InternedV8JsFunction {
    bool has_iid;
    uint64_t iid;
    bool has_v8_js_function_name_iid;
    uint64_t v8_js_function_name_iid;
    bool has_v8_js_script_iid;
    uint64_t v8_js_script_iid;
    bool has_is_toplevel;
    bool is_toplevel;
    bool has_kind;
    perfetto_protos_InternedV8JsFunction_Kind kind;
    /* Where in the script source this function is defined. This is counted in
 bytes not characters. */
    bool has_byte_offset;
    uint32_t byte_offset;
    bool has_line;
    uint32_t line;
    bool has_column;
    uint32_t column;
} perfetto_protos_InternedV8JsFunction;

/* A code range is a virtual memory cage that may contain executable code.
 Depending on the Isolate settings the Isolate might have one or not.
 See:
 https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/code-range.h
 If the isolate defines code range this will be tracked here. */
typedef struct _perfetto_protos_InternedV8Isolate_CodeRange {
    bool has_base_address;
    uint64_t base_address;
    bool has_size;
    uint64_t size;
    /* Used when short builtin calls are enabled, where embedded builtins are
 copied into the CodeRange so calls can be nearer. */
    bool has_embedded_blob_code_copy_start_address;
    uint64_t embedded_blob_code_copy_start_address;
    /* Whether this code range is shared with other Isolates in the same process */
    bool has_is_process_wide;
    bool is_process_wide;
} perfetto_protos_InternedV8Isolate_CodeRange;

/* A V8 Isolate instance. A V8 Isolate represents an isolated instance of the V8
 engine. */
typedef struct _perfetto_protos_InternedV8Isolate {
    bool has_iid;
    uint64_t iid;
    bool has_pid;
    uint32_t pid;
    /* Process unique isolate id. */
    bool has_isolate_id;
    int32_t isolate_id;
    bool has_code_range;
    perfetto_protos_InternedV8Isolate_CodeRange code_range;
    /* The embedded blob holds code for built in functions that are precompiled in
 the V8 library. */
    bool has_embedded_blob_code_start_address;
    uint64_t embedded_blob_code_start_address;
    bool has_embedded_blob_code_size;
    uint64_t embedded_blob_code_size;
} perfetto_protos_InternedV8Isolate;

typedef struct _perfetto_protos_V8JsCode {
    bool has_v8_isolate_iid;
    uint64_t v8_isolate_iid;
    bool has_tid;
    uint32_t tid;
    bool has_v8_js_function_iid;
    uint64_t v8_js_function_iid;
    bool has_tier;
    perfetto_protos_V8JsCode_Tier tier;
    bool has_instruction_start;
    uint64_t instruction_start;
    bool has_instruction_size_bytes;
    uint64_t instruction_size_bytes;
    pb_size_t which_instructions;
    union _perfetto_protos_V8JsCode_instructions {
        pb_callback_t machine_code;
        pb_callback_t bytecode;
    } instructions;
} perfetto_protos_V8JsCode;

typedef struct _perfetto_protos_V8InternalCode {
    bool has_v8_isolate_iid;
    uint64_t v8_isolate_iid;
    bool has_tid;
    uint32_t tid;
    pb_callback_t name;
    bool has_type;
    perfetto_protos_V8InternalCode_Type type;
    bool has_builtin_id;
    int32_t builtin_id;
    bool has_instruction_start;
    uint64_t instruction_start;
    bool has_instruction_size_bytes;
    uint64_t instruction_size_bytes;
    pb_callback_t machine_code;
} perfetto_protos_V8InternalCode;

typedef struct _perfetto_protos_V8WasmCode {
    bool has_v8_isolate_iid;
    uint64_t v8_isolate_iid;
    bool has_tid;
    uint32_t tid;
    bool has_v8_wasm_script_iid;
    uint64_t v8_wasm_script_iid;
    pb_callback_t function_name;
    bool has_tier;
    perfetto_protos_V8WasmCode_Tier tier;
    bool has_code_offset_in_module;
    int32_t code_offset_in_module;
    bool has_instruction_start;
    uint64_t instruction_start;
    bool has_instruction_size_bytes;
    uint64_t instruction_size_bytes;
    pb_callback_t machine_code;
} perfetto_protos_V8WasmCode;

typedef struct _perfetto_protos_V8RegExpCode {
    bool has_v8_isolate_iid;
    uint64_t v8_isolate_iid;
    bool has_tid;
    uint32_t tid;
    bool has_pattern;
    perfetto_protos_V8String pattern;
    bool has_instruction_start;
    uint64_t instruction_start;
    bool has_instruction_size_bytes;
    uint64_t instruction_size_bytes;
    pb_callback_t machine_code;
} perfetto_protos_V8RegExpCode;

/* Move event for V8 code (JS / Wasm / Internal / Regexp) that was relocated in
 memory by V8's GC. */
typedef struct _perfetto_protos_V8CodeMove {
    bool has_isolate_iid;
    uint64_t isolate_iid;
    bool has_tid;
    uint32_t tid;
    bool has_from_instruction_start_address;
    uint64_t from_instruction_start_address;
    bool has_to_instruction_start_address;
    uint64_t to_instruction_start_address;
    bool has_instruction_size_bytes;
    uint64_t instruction_size_bytes;
    pb_size_t which_to_instructions;
    union _perfetto_protos_V8CodeMove_to_instructions {
        pb_callback_t to_machine_code;
        pb_callback_t to_bytecode;
    } to_instructions;
} perfetto_protos_V8CodeMove;

typedef struct _perfetto_protos_V8CodeDefaults {
    bool has_tid;
    uint32_t tid;
} perfetto_protos_V8CodeDefaults;

/* A snapshot of clock readings to allow for trace alignment. */
typedef struct _perfetto_protos_ClockSnapshot {
    pb_callback_t clocks;
    /* The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
 be overridden in TraceConfig's builtin_data_sources. Trace processor will
 attempt to translate packet/event timestamps from various data sources (and
 their chosen clock domains) to this domain during import. */
    bool has_primary_trace_clock;
    perfetto_protos_BuiltinClock primary_trace_clock;
} perfetto_protos_ClockSnapshot;

typedef struct _perfetto_protos_ClockSnapshot_Clock {
    /* Clock IDs have the following semantic:
 [1, 63]:    Builtin types, see BuiltinClock from
             ../common/builtin_clock.proto.
 [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
             are only valid within the same |trusted_packet_sequence_id|
             (i.e. only for TracePacket(s) emitted by the same TraceWriter
             that emitted the clock snapshot).
 [128, MAX]: Reserved for future use. The idea is to allow global clock
             IDs and setting this ID to hash(full_clock_name) & ~127. */
    bool has_clock_id;
    uint32_t clock_id;
    /* Absolute timestamp. Unit is ns unless specified otherwise by the
 unit_multiplier_ns field below. */
    bool has_timestamp;
    uint64_t timestamp;
    /* When true each TracePacket's timestamp should be interpreted as a delta
 from the last TracePacket's timestamp (referencing this clock) emitted by
 the same packet_sequence_id. Should only be used for user-defined
 sequence-local clocks. The first packet timestamp after each
 ClockSnapshot that contains this clock is relative to the |timestamp| in
 the ClockSnapshot. */
    bool has_is_incremental;
    bool is_incremental;
    /* Allows to specify a custom unit different than the default (ns) for this
 clock domain. A multiplier of 1000 means that a timestamp = 3 should be
 interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
 trace need to use the same unit. */
    bool has_unit_multiplier_ns;
    uint64_t unit_multiplier_ns;
} perfetto_protos_ClockSnapshot_Clock;

/* Proto definition based on the Thread_v2 CSwitch class definition
 See: https://learn.microsoft.com/en-us/windows/win32/etw/cswitch */
typedef struct _perfetto_protos_CSwitchEtwEvent {
    /* New thread ID after the switch. */
    bool has_new_thread_id;
    uint32_t new_thread_id;
    /* Previous thread ID. */
    bool has_old_thread_id;
    uint32_t old_thread_id;
    /* Thread priority of the new thread. */
    bool has_new_thread_priority;
    int32_t new_thread_priority;
    /* Thread priority of the previous thread. */
    bool has_old_thread_priority;
    int32_t old_thread_priority;
    /* The index of the C-state that was last used by the processor. A value of 0
 represents the lightest idle state with higher values representing deeper
 C-states. */
    bool has_previous_c_state;
    uint32_t previous_c_state;
    bool has_old_thread_wait_reason;
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason old_thread_wait_reason;
    bool has_old_thread_wait_mode;
    perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode old_thread_wait_mode;
    bool has_old_thread_state;
    perfetto_protos_CSwitchEtwEvent_OldThreadState old_thread_state;
    /* Ideal wait time of the previous thread. */
    bool has_old_thread_wait_ideal_processor;
    int32_t old_thread_wait_ideal_processor;
    /* Wait time for the new thread. */
    bool has_new_thread_wait_time;
    uint32_t new_thread_wait_time;
} perfetto_protos_CSwitchEtwEvent;

/* Proto definition based on the Thread_v2 CSwitch class definition
 See: https://learn.microsoft.com/en-us/windows/win32/etw/readythread */
typedef struct _perfetto_protos_ReadyThreadEtwEvent {
    /* The thread identifier of the thread being readied for execution. */
    bool has_t_thread_id;
    uint32_t t_thread_id;
    bool has_adjust_reason;
    perfetto_protos_ReadyThreadEtwEvent_AdjustReason adjust_reason;
    /* The value by which the priority is being adjusted. */
    bool has_adjust_increment;
    int32_t adjust_increment;
    bool has_flag;
    perfetto_protos_ReadyThreadEtwEvent_TraceFlag flag;
} perfetto_protos_ReadyThreadEtwEvent;

typedef struct _perfetto_protos_EtwTraceEvent {
    bool has_timestamp;
    uint64_t timestamp;
    pb_size_t which_event;
    union _perfetto_protos_EtwTraceEvent_event {
        perfetto_protos_CSwitchEtwEvent c_switch;
        perfetto_protos_ReadyThreadEtwEvent ready_thread;
    } event;
    bool has_cpu;
    uint32_t cpu;
} perfetto_protos_EtwTraceEvent;

/* The result of tracing one or more etw event uses per-processor buffers where
 an in-use buffer is assigned to each processor at all times. Therefore,
 collecting multiple events they should already be synchronized. */
typedef struct _perfetto_protos_EtwTraceEventBundle {
    bool has_cpu;
    uint32_t cpu;
    pb_callback_t event;
} perfetto_protos_EtwTraceEventBundle;

/* The protocol compiler can output a FileDescriptorSet containing the .proto
 files it parses. */
typedef struct _perfetto_protos_FileDescriptorSet {
    pb_callback_t file;
} perfetto_protos_FileDescriptorSet;

/* Describes a complete .proto file. */
typedef struct _perfetto_protos_FileDescriptorProto {
    /* file name, relative to root of source tree */
    pb_callback_t name;
    /* e.g. "foo", "foo.bar", etc. */
    pb_callback_t package;
    /* Names of files imported by this file. */
    pb_callback_t dependency;
    /* All top-level definitions in this file. */
    pb_callback_t message_type;
    pb_callback_t enum_type;
    pb_callback_t extension;
    /* Indexes of the public imported files in the dependency list above. */
    pb_callback_t public_dependency;
    /* Indexes of the weak imported files in the dependency list.
 For Google-internal migration only. Do not use. */
    pb_callback_t weak_dependency;
} perfetto_protos_FileDescriptorProto;

/* Describes a message type. */
typedef struct _perfetto_protos_DescriptorProto {
    pb_callback_t name;
    pb_callback_t field;
    pb_callback_t nested_type;
    pb_callback_t enum_type;
    pb_callback_t extension;
    pb_callback_t oneof_decl;
    pb_callback_t reserved_range;
    /* Reserved field names, which may not be used by fields in the same message.
 A given name may only be reserved once. */
    pb_callback_t reserved_name;
} perfetto_protos_DescriptorProto;

/* Range of reserved tag numbers. Reserved tag numbers may not be used by
 fields or extension ranges in the same message. Reserved ranges may
 not overlap. */
typedef struct _perfetto_protos_DescriptorProto_ReservedRange {
    /* Inclusive. */
    bool has_start;
    int32_t start;
    /* Exclusive. */
    bool has_end;
    int32_t end;
} perfetto_protos_DescriptorProto_ReservedRange;

/* A message representing a option the parser does not recognize. This only
 appears in options protos created by the compiler::Parser class.
 DescriptorPool resolves these when building Descriptor objects. Therefore,
 options protos in descriptor objects (e.g. returned by Descriptor::options(),
 or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 in them. */
typedef struct _perfetto_protos_UninterpretedOption {
    pb_callback_t name;
    /* The value of the uninterpreted option, in whatever type the tokenizer
 identified it as during parsing. Exactly one of these should be set. */
    pb_callback_t identifier_value;
    bool has_positive_int_value;
    uint64_t positive_int_value;
    bool has_negative_int_value;
    int64_t negative_int_value;
    bool has_double_value;
    double double_value;
    pb_callback_t string_value;
    pb_callback_t aggregate_value;
} perfetto_protos_UninterpretedOption;

/* The name of the uninterpreted option.  Each string represents a segment in
 a dot-separated name.  is_extension is true iff a segment represents an
 extension (denoted with parentheses in options specs in .proto files).
 E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
 "foo.(bar.baz).moo". */
typedef struct _perfetto_protos_UninterpretedOption_NamePart {
    pb_callback_t name_part;
    bool has_is_extension;
    bool is_extension;
} perfetto_protos_UninterpretedOption_NamePart;

typedef struct _perfetto_protos_FieldOptions {
    /* The packed option can be enabled for repeated primitive fields to enable
 a more efficient representation on the wire. Rather than repeatedly
 writing the tag and type for each element, the entire array is encoded as
 a single length-delimited blob. In proto3, only explicit setting it to
 false will avoid using packed encoding. */
    bool has_packed;
    bool packed;
    /* The parser stores options it doesn't recognize here. See above. */
    pb_callback_t uninterpreted_option;
} perfetto_protos_FieldOptions;

/* Describes a field within a message. */
typedef struct _perfetto_protos_FieldDescriptorProto {
    pb_callback_t name;
    /* For extensions, this is the name of the type being extended.  It is
 resolved in the same manner as type_name. */
    pb_callback_t extendee;
    bool has_number;
    int32_t number;
    bool has_label;
    perfetto_protos_FieldDescriptorProto_Label label;
    /* If type_name is set, this need not be set.  If both this and type_name
 are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP. */
    bool has_type;
    perfetto_protos_FieldDescriptorProto_Type type;
    /* For message and enum types, this is the name of the type.  If the name
 starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
 rules are used to find the type (i.e. first the nested types within this
 message are searched, then within the parent, on up to the root
 namespace). */
    pb_callback_t type_name;
    /* For numeric types, contains the original text representation of the value.
 For booleans, "true" or "false".
 For strings, contains the default text contents (not escaped in any way).
 For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
 TODO(kenton):  Base-64 encode? */
    pb_callback_t default_value;
    bool has_options;
    perfetto_protos_FieldOptions options;
    /* If set, gives the index of a oneof in the containing type's oneof_decl
 list.  This field is a member of that oneof. */
    bool has_oneof_index;
    int32_t oneof_index;
} perfetto_protos_FieldDescriptorProto;

/* Describes an enum type. */
typedef struct _perfetto_protos_EnumDescriptorProto {
    pb_callback_t name;
    pb_callback_t value;
    /* Reserved enum value names, which may not be reused. A given name may only
 be reserved once. */
    pb_callback_t reserved_name;
} perfetto_protos_EnumDescriptorProto;

/* Describes a value within an enum. */
typedef struct _perfetto_protos_EnumValueDescriptorProto {
    pb_callback_t name;
    bool has_number;
    int32_t number;
} perfetto_protos_EnumValueDescriptorProto;

typedef struct _perfetto_protos_OneofOptions {
    pb_extension_t *extensions;
} perfetto_protos_OneofOptions;

/* Describes a oneof. */
typedef struct _perfetto_protos_OneofDescriptorProto {
    pb_callback_t name;
    bool has_options;
    perfetto_protos_OneofOptions options;
} perfetto_protos_OneofDescriptorProto;

/* This message contains descriptors used to parse extension fields of
 TrackEvent.

 See docs/design-docs/extensions.md for more details. */
typedef struct _perfetto_protos_ExtensionDescriptor {
    bool has_extension_set;
    perfetto_protos_FileDescriptorSet extension_set;
} perfetto_protos_ExtensionDescriptor;

/* Represents the mapping between inode numbers in a block device and their path
 on the filesystem */
typedef struct _perfetto_protos_InodeFileMap {
    bool has_block_device_id;
    uint64_t block_device_id;
    /* The mount points of the block device, e.g. ["system"]. */
    pb_callback_t mount_points;
    /* The list of all the entries from the block device */
    pb_callback_t entries;
} perfetto_protos_InodeFileMap;

/* Representation of Entry */
typedef struct _perfetto_protos_InodeFileMap_Entry {
    bool has_inode_number;
    uint64_t inode_number;
    /* The path to the file, e.g. "etc/file.xml"
 List of strings for multiple hardlinks */
    pb_callback_t paths;
    bool has_type;
    perfetto_protos_InodeFileMap_Entry_Type type;
} perfetto_protos_InodeFileMap_Entry;

typedef struct _perfetto_protos_AndroidFsDatareadEndFtraceEvent {
    bool has_bytes;
    int32_t bytes;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
} perfetto_protos_AndroidFsDatareadEndFtraceEvent;

typedef struct _perfetto_protos_AndroidFsDatareadStartFtraceEvent {
    bool has_bytes;
    int32_t bytes;
    pb_callback_t cmdline;
    bool has_i_size;
    int64_t i_size;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    pb_callback_t pathbuf;
    bool has_pid;
    int32_t pid;
} perfetto_protos_AndroidFsDatareadStartFtraceEvent;

typedef struct _perfetto_protos_AndroidFsDatawriteEndFtraceEvent {
    bool has_bytes;
    int32_t bytes;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
} perfetto_protos_AndroidFsDatawriteEndFtraceEvent;

typedef struct _perfetto_protos_AndroidFsDatawriteStartFtraceEvent {
    bool has_bytes;
    int32_t bytes;
    pb_callback_t cmdline;
    bool has_i_size;
    int64_t i_size;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    pb_callback_t pathbuf;
    bool has_pid;
    int32_t pid;
} perfetto_protos_AndroidFsDatawriteStartFtraceEvent;

typedef struct _perfetto_protos_AndroidFsFsyncEndFtraceEvent {
    bool has_bytes;
    int32_t bytes;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
} perfetto_protos_AndroidFsFsyncEndFtraceEvent;

typedef struct _perfetto_protos_AndroidFsFsyncStartFtraceEvent {
    pb_callback_t cmdline;
    bool has_i_size;
    int64_t i_size;
    bool has_ino;
    uint64_t ino;
    pb_callback_t pathbuf;
    bool has_pid;
    int32_t pid;
} perfetto_protos_AndroidFsFsyncStartFtraceEvent;

typedef struct _perfetto_protos_BclIrqTriggerFtraceEvent {
    bool has_id;
    int32_t id;
    bool has_throttle;
    int32_t throttle;
    bool has_cpu0_limit;
    int32_t cpu0_limit;
    bool has_cpu1_limit;
    int32_t cpu1_limit;
    bool has_cpu2_limit;
    int32_t cpu2_limit;
    bool has_tpu_limit;
    int32_t tpu_limit;
    bool has_gpu_limit;
    int32_t gpu_limit;
    bool has_voltage;
    int32_t voltage;
    bool has_capacity;
    int32_t capacity;
} perfetto_protos_BclIrqTriggerFtraceEvent;

typedef struct _perfetto_protos_BinderTransactionFtraceEvent {
    bool has_debug_id;
    int32_t debug_id;
    bool has_target_node;
    int32_t target_node;
    bool has_to_proc;
    int32_t to_proc;
    bool has_to_thread;
    int32_t to_thread;
    bool has_reply;
    int32_t reply;
    bool has_code;
    uint32_t code;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_BinderTransactionFtraceEvent;

typedef struct _perfetto_protos_BinderTransactionReceivedFtraceEvent {
    bool has_debug_id;
    int32_t debug_id;
} perfetto_protos_BinderTransactionReceivedFtraceEvent;

typedef struct _perfetto_protos_BinderSetPriorityFtraceEvent {
    bool has_proc;
    int32_t proc;
    bool has_thread;
    int32_t thread;
    bool has_old_prio;
    uint32_t old_prio;
    bool has_new_prio;
    uint32_t new_prio;
    bool has_desired_prio;
    uint32_t desired_prio;
} perfetto_protos_BinderSetPriorityFtraceEvent;

typedef struct _perfetto_protos_BinderLockFtraceEvent {
    pb_callback_t tag;
} perfetto_protos_BinderLockFtraceEvent;

typedef struct _perfetto_protos_BinderLockedFtraceEvent {
    pb_callback_t tag;
} perfetto_protos_BinderLockedFtraceEvent;

typedef struct _perfetto_protos_BinderUnlockFtraceEvent {
    pb_callback_t tag;
} perfetto_protos_BinderUnlockFtraceEvent;

typedef struct _perfetto_protos_BinderTransactionAllocBufFtraceEvent {
    bool has_data_size;
    uint64_t data_size;
    bool has_debug_id;
    int32_t debug_id;
    bool has_offsets_size;
    uint64_t offsets_size;
    bool has_extra_buffers_size;
    uint64_t extra_buffers_size;
} perfetto_protos_BinderTransactionAllocBufFtraceEvent;

typedef struct _perfetto_protos_BinderCommandFtraceEvent {
    bool has_cmd;
    uint32_t cmd;
} perfetto_protos_BinderCommandFtraceEvent;

typedef struct _perfetto_protos_BinderReturnFtraceEvent {
    bool has_cmd;
    uint32_t cmd;
} perfetto_protos_BinderReturnFtraceEvent;

typedef struct _perfetto_protos_BlockRqIssueFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_bytes;
    uint32_t bytes;
    pb_callback_t rwbs;
    pb_callback_t comm;
    pb_callback_t cmd;
} perfetto_protos_BlockRqIssueFtraceEvent;

typedef struct _perfetto_protos_BlockBioBackmergeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockBioBackmergeFtraceEvent;

typedef struct _perfetto_protos_BlockBioBounceFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockBioBounceFtraceEvent;

typedef struct _perfetto_protos_BlockBioCompleteFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_error;
    int32_t error;
    pb_callback_t rwbs;
} perfetto_protos_BlockBioCompleteFtraceEvent;

typedef struct _perfetto_protos_BlockBioFrontmergeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockBioFrontmergeFtraceEvent;

typedef struct _perfetto_protos_BlockBioQueueFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockBioQueueFtraceEvent;

typedef struct _perfetto_protos_BlockBioRemapFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_old_dev;
    uint64_t old_dev;
    bool has_old_sector;
    uint64_t old_sector;
    pb_callback_t rwbs;
} perfetto_protos_BlockBioRemapFtraceEvent;

typedef struct _perfetto_protos_BlockDirtyBufferFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_size;
    uint64_t size;
} perfetto_protos_BlockDirtyBufferFtraceEvent;

typedef struct _perfetto_protos_BlockGetrqFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockGetrqFtraceEvent;

typedef struct _perfetto_protos_BlockPlugFtraceEvent {
    pb_callback_t comm;
} perfetto_protos_BlockPlugFtraceEvent;

typedef struct _perfetto_protos_BlockRqAbortFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_errors;
    int32_t errors;
    pb_callback_t rwbs;
    pb_callback_t cmd;
} perfetto_protos_BlockRqAbortFtraceEvent;

typedef struct _perfetto_protos_BlockRqCompleteFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_errors;
    int32_t errors;
    pb_callback_t rwbs;
    pb_callback_t cmd;
    bool has_error;
    int32_t error;
} perfetto_protos_BlockRqCompleteFtraceEvent;

typedef struct _perfetto_protos_BlockRqInsertFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_bytes;
    uint32_t bytes;
    pb_callback_t rwbs;
    pb_callback_t comm;
    pb_callback_t cmd;
} perfetto_protos_BlockRqInsertFtraceEvent;

typedef struct _perfetto_protos_BlockRqRemapFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_old_dev;
    uint64_t old_dev;
    bool has_old_sector;
    uint64_t old_sector;
    bool has_nr_bios;
    uint32_t nr_bios;
    pb_callback_t rwbs;
} perfetto_protos_BlockRqRemapFtraceEvent;

typedef struct _perfetto_protos_BlockRqRequeueFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_errors;
    int32_t errors;
    pb_callback_t rwbs;
    pb_callback_t cmd;
} perfetto_protos_BlockRqRequeueFtraceEvent;

typedef struct _perfetto_protos_BlockSleeprqFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockSleeprqFtraceEvent;

typedef struct _perfetto_protos_BlockSplitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_new_sector;
    uint64_t new_sector;
    pb_callback_t rwbs;
    pb_callback_t comm;
} perfetto_protos_BlockSplitFtraceEvent;

typedef struct _perfetto_protos_BlockTouchBufferFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_size;
    uint64_t size;
} perfetto_protos_BlockTouchBufferFtraceEvent;

typedef struct _perfetto_protos_BlockUnplugFtraceEvent {
    bool has_nr_rq;
    int32_t nr_rq;
    pb_callback_t comm;
} perfetto_protos_BlockUnplugFtraceEvent;

typedef struct _perfetto_protos_BlockIoStartFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_bytes;
    uint32_t bytes;
    bool has_ioprio;
    uint32_t ioprio;
    pb_callback_t rwbs;
    pb_callback_t comm;
    pb_callback_t cmd;
} perfetto_protos_BlockIoStartFtraceEvent;

typedef struct _perfetto_protos_BlockIoDoneFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sector;
    uint64_t sector;
    bool has_nr_sector;
    uint32_t nr_sector;
    bool has_bytes;
    uint32_t bytes;
    bool has_ioprio;
    uint32_t ioprio;
    pb_callback_t rwbs;
    pb_callback_t comm;
    pb_callback_t cmd;
} perfetto_protos_BlockIoDoneFtraceEvent;

typedef struct _perfetto_protos_CgroupAttachTaskFtraceEvent {
    bool has_dst_root;
    int32_t dst_root;
    bool has_dst_id;
    int32_t dst_id;
    bool has_pid;
    int32_t pid;
    pb_callback_t comm;
    pb_callback_t cname;
    bool has_dst_level;
    int32_t dst_level;
    pb_callback_t dst_path;
} perfetto_protos_CgroupAttachTaskFtraceEvent;

typedef struct _perfetto_protos_CgroupMkdirFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_id;
    int32_t id;
    pb_callback_t cname;
    bool has_level;
    int32_t level;
    pb_callback_t path;
} perfetto_protos_CgroupMkdirFtraceEvent;

typedef struct _perfetto_protos_CgroupRemountFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_ss_mask;
    uint32_t ss_mask;
    pb_callback_t name;
} perfetto_protos_CgroupRemountFtraceEvent;

typedef struct _perfetto_protos_CgroupRmdirFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_id;
    int32_t id;
    pb_callback_t cname;
    bool has_level;
    int32_t level;
    pb_callback_t path;
} perfetto_protos_CgroupRmdirFtraceEvent;

typedef struct _perfetto_protos_CgroupTransferTasksFtraceEvent {
    bool has_dst_root;
    int32_t dst_root;
    bool has_dst_id;
    int32_t dst_id;
    bool has_pid;
    int32_t pid;
    pb_callback_t comm;
    pb_callback_t cname;
    bool has_dst_level;
    int32_t dst_level;
    pb_callback_t dst_path;
} perfetto_protos_CgroupTransferTasksFtraceEvent;

typedef struct _perfetto_protos_CgroupDestroyRootFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_ss_mask;
    uint32_t ss_mask;
    pb_callback_t name;
} perfetto_protos_CgroupDestroyRootFtraceEvent;

typedef struct _perfetto_protos_CgroupReleaseFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_id;
    int32_t id;
    pb_callback_t cname;
    bool has_level;
    int32_t level;
    pb_callback_t path;
} perfetto_protos_CgroupReleaseFtraceEvent;

typedef struct _perfetto_protos_CgroupRenameFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_id;
    int32_t id;
    pb_callback_t cname;
    bool has_level;
    int32_t level;
    pb_callback_t path;
} perfetto_protos_CgroupRenameFtraceEvent;

typedef struct _perfetto_protos_CgroupSetupRootFtraceEvent {
    bool has_root;
    int32_t root;
    bool has_ss_mask;
    uint32_t ss_mask;
    pb_callback_t name;
} perfetto_protos_CgroupSetupRootFtraceEvent;

typedef struct _perfetto_protos_ClkEnableFtraceEvent {
    pb_callback_t name;
} perfetto_protos_ClkEnableFtraceEvent;

typedef struct _perfetto_protos_ClkDisableFtraceEvent {
    pb_callback_t name;
} perfetto_protos_ClkDisableFtraceEvent;

typedef struct _perfetto_protos_ClkSetRateFtraceEvent {
    pb_callback_t name;
    bool has_rate;
    uint64_t rate;
} perfetto_protos_ClkSetRateFtraceEvent;

typedef struct _perfetto_protos_CmaAllocStartFtraceEvent {
    bool has_align;
    uint32_t align;
    bool has_count;
    uint32_t count;
    pb_callback_t name;
} perfetto_protos_CmaAllocStartFtraceEvent;

typedef struct _perfetto_protos_CmaAllocInfoFtraceEvent {
    bool has_align;
    uint32_t align;
    bool has_count;
    uint32_t count;
    bool has_err_iso;
    uint32_t err_iso;
    bool has_err_mig;
    uint32_t err_mig;
    bool has_err_test;
    uint32_t err_test;
    pb_callback_t name;
    bool has_nr_mapped;
    uint64_t nr_mapped;
    bool has_nr_migrated;
    uint64_t nr_migrated;
    bool has_nr_reclaimed;
    uint64_t nr_reclaimed;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_CmaAllocInfoFtraceEvent;

typedef struct _perfetto_protos_MmCompactionBeginFtraceEvent {
    bool has_zone_start;
    uint64_t zone_start;
    bool has_migrate_pfn;
    uint64_t migrate_pfn;
    bool has_free_pfn;
    uint64_t free_pfn;
    bool has_zone_end;
    uint64_t zone_end;
    bool has_sync;
    uint32_t sync;
} perfetto_protos_MmCompactionBeginFtraceEvent;

typedef struct _perfetto_protos_MmCompactionDeferCompactionFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_idx;
    uint32_t idx;
    bool has_order;
    int32_t order;
    bool has_considered;
    uint32_t considered;
    bool has_defer_shift;
    uint32_t defer_shift;
    bool has_order_failed;
    int32_t order_failed;
} perfetto_protos_MmCompactionDeferCompactionFtraceEvent;

typedef struct _perfetto_protos_MmCompactionDeferredFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_idx;
    uint32_t idx;
    bool has_order;
    int32_t order;
    bool has_considered;
    uint32_t considered;
    bool has_defer_shift;
    uint32_t defer_shift;
    bool has_order_failed;
    int32_t order_failed;
} perfetto_protos_MmCompactionDeferredFtraceEvent;

typedef struct _perfetto_protos_MmCompactionDeferResetFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_idx;
    uint32_t idx;
    bool has_order;
    int32_t order;
    bool has_considered;
    uint32_t considered;
    bool has_defer_shift;
    uint32_t defer_shift;
    bool has_order_failed;
    int32_t order_failed;
} perfetto_protos_MmCompactionDeferResetFtraceEvent;

typedef struct _perfetto_protos_MmCompactionEndFtraceEvent {
    bool has_zone_start;
    uint64_t zone_start;
    bool has_migrate_pfn;
    uint64_t migrate_pfn;
    bool has_free_pfn;
    uint64_t free_pfn;
    bool has_zone_end;
    uint64_t zone_end;
    bool has_sync;
    uint32_t sync;
    bool has_status;
    int32_t status;
} perfetto_protos_MmCompactionEndFtraceEvent;

typedef struct _perfetto_protos_MmCompactionFinishedFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_idx;
    uint32_t idx;
    bool has_order;
    int32_t order;
    bool has_ret;
    int32_t ret;
} perfetto_protos_MmCompactionFinishedFtraceEvent;

typedef struct _perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent {
    bool has_start_pfn;
    uint64_t start_pfn;
    bool has_end_pfn;
    uint64_t end_pfn;
    bool has_nr_scanned;
    uint64_t nr_scanned;
    bool has_nr_taken;
    uint64_t nr_taken;
} perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent;

typedef struct _perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent {
    bool has_start_pfn;
    uint64_t start_pfn;
    bool has_end_pfn;
    uint64_t end_pfn;
    bool has_nr_scanned;
    uint64_t nr_scanned;
    bool has_nr_taken;
    uint64_t nr_taken;
} perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent;

typedef struct _perfetto_protos_MmCompactionKcompactdSleepFtraceEvent {
    bool has_nid;
    int32_t nid;
} perfetto_protos_MmCompactionKcompactdSleepFtraceEvent;

typedef struct _perfetto_protos_MmCompactionKcompactdWakeFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_order;
    int32_t order;
    bool has_classzone_idx;
    uint32_t classzone_idx;
    bool has_highest_zoneidx;
    uint32_t highest_zoneidx;
} perfetto_protos_MmCompactionKcompactdWakeFtraceEvent;

typedef struct _perfetto_protos_MmCompactionMigratepagesFtraceEvent {
    bool has_nr_migrated;
    uint64_t nr_migrated;
    bool has_nr_failed;
    uint64_t nr_failed;
} perfetto_protos_MmCompactionMigratepagesFtraceEvent;

typedef struct _perfetto_protos_MmCompactionSuitableFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_idx;
    uint32_t idx;
    bool has_order;
    int32_t order;
    bool has_ret;
    int32_t ret;
} perfetto_protos_MmCompactionSuitableFtraceEvent;

typedef struct _perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent {
    bool has_order;
    int32_t order;
    bool has_gfp_mask;
    uint32_t gfp_mask;
    bool has_mode;
    uint32_t mode;
    bool has_prio;
    int32_t prio;
} perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent;

typedef struct _perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_order;
    int32_t order;
    bool has_classzone_idx;
    uint32_t classzone_idx;
    bool has_highest_zoneidx;
    uint32_t highest_zoneidx;
} perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent;

typedef struct _perfetto_protos_ParamSetValueCpmFtraceEvent {
    pb_callback_t body;
    bool has_value;
    uint32_t value;
    bool has_timestamp;
    int64_t timestamp;
} perfetto_protos_ParamSetValueCpmFtraceEvent;

typedef struct _perfetto_protos_CpuhpExitFtraceEvent {
    bool has_cpu;
    uint32_t cpu;
    bool has_idx;
    int32_t idx;
    bool has_ret;
    int32_t ret;
    bool has_state;
    int32_t state;
} perfetto_protos_CpuhpExitFtraceEvent;

typedef struct _perfetto_protos_CpuhpMultiEnterFtraceEvent {
    bool has_cpu;
    uint32_t cpu;
    bool has_fun;
    uint64_t fun;
    bool has_idx;
    int32_t idx;
    bool has_target;
    int32_t target;
} perfetto_protos_CpuhpMultiEnterFtraceEvent;

typedef struct _perfetto_protos_CpuhpEnterFtraceEvent {
    bool has_cpu;
    uint32_t cpu;
    bool has_fun;
    uint64_t fun;
    bool has_idx;
    int32_t idx;
    bool has_target;
    int32_t target;
} perfetto_protos_CpuhpEnterFtraceEvent;

typedef struct _perfetto_protos_CpuhpLatencyFtraceEvent {
    bool has_cpu;
    uint32_t cpu;
    bool has_ret;
    int32_t ret;
    bool has_state;
    uint32_t state;
    bool has_time;
    uint64_t time;
} perfetto_protos_CpuhpLatencyFtraceEvent;

typedef struct _perfetto_protos_CpuhpPauseFtraceEvent {
    bool has_active_cpus;
    uint32_t active_cpus;
    bool has_cpus;
    uint32_t cpus;
    bool has_pause;
    uint32_t pause;
    bool has_time;
    uint32_t time;
} perfetto_protos_CpuhpPauseFtraceEvent;

typedef struct _perfetto_protos_CrosEcSensorhubDataFtraceEvent {
    bool has_current_time;
    int64_t current_time;
    bool has_current_timestamp;
    int64_t current_timestamp;
    bool has_delta;
    int64_t delta;
    bool has_ec_fifo_timestamp;
    uint32_t ec_fifo_timestamp;
    bool has_ec_sensor_num;
    uint32_t ec_sensor_num;
    bool has_fifo_timestamp;
    int64_t fifo_timestamp;
} perfetto_protos_CrosEcSensorhubDataFtraceEvent;

typedef struct _perfetto_protos_DcvshFreqFtraceEvent {
    bool has_cpu;
    uint64_t cpu;
    bool has_freq;
    uint64_t freq;
} perfetto_protos_DcvshFreqFtraceEvent;

typedef struct _perfetto_protos_DevfreqFrequencyFtraceEvent {
    pb_callback_t dev_name;
    bool has_freq;
    uint64_t freq;
    bool has_prev_freq;
    uint64_t prev_freq;
    bool has_busy_time;
    uint64_t busy_time;
    bool has_total_time;
    uint64_t total_time;
} perfetto_protos_DevfreqFrequencyFtraceEvent;

typedef struct _perfetto_protos_DmaFenceInitFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_DmaFenceInitFtraceEvent;

typedef struct _perfetto_protos_DmaFenceEmitFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_DmaFenceEmitFtraceEvent;

typedef struct _perfetto_protos_DmaFenceSignaledFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_DmaFenceSignaledFtraceEvent;

typedef struct _perfetto_protos_DmaFenceWaitStartFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_DmaFenceWaitStartFtraceEvent;

typedef struct _perfetto_protos_DmaFenceWaitEndFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_DmaFenceWaitEndFtraceEvent;

typedef struct _perfetto_protos_DmaHeapStatFtraceEvent {
    bool has_inode;
    uint64_t inode;
    bool has_len;
    int64_t len;
    bool has_total_allocated;
    uint64_t total_allocated;
} perfetto_protos_DmaHeapStatFtraceEvent;

typedef struct _perfetto_protos_DpuTracingMarkWriteFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t trace_name;
    bool has_trace_begin;
    uint32_t trace_begin;
    pb_callback_t name;
    bool has_type;
    uint32_t type;
    bool has_value;
    int32_t value;
} perfetto_protos_DpuTracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent {
    bool has_header;
    uint32_t header;
    bool has_payload;
    uint32_t payload;
} perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent;

typedef struct _perfetto_protos_DpuDsiRxFtraceEvent {
    bool has_cmd;
    uint32_t cmd;
    bool has_rx_buf;
    uint32_t rx_buf;
} perfetto_protos_DpuDsiRxFtraceEvent;

typedef struct _perfetto_protos_DpuDsiTxFtraceEvent {
    bool has_type;
    uint32_t type;
    bool has_tx_buf;
    uint32_t tx_buf;
    bool has_last;
    uint32_t last;
    bool has_delay_ms;
    uint32_t delay_ms;
} perfetto_protos_DpuDsiTxFtraceEvent;

typedef struct _perfetto_protos_DpuDispDpuUnderrunFtraceEvent {
    bool has_id;
    int32_t id;
    bool has_frames_pending;
    int32_t frames_pending;
    bool has_vsync_count;
    int32_t vsync_count;
} perfetto_protos_DpuDispDpuUnderrunFtraceEvent;

typedef struct _perfetto_protos_DpuDispVblankIrqEnableFtraceEvent {
    bool has_id;
    int32_t id;
    bool has_output_id;
    int32_t output_id;
    bool has_enable;
    int32_t enable;
} perfetto_protos_DpuDispVblankIrqEnableFtraceEvent;

typedef struct _perfetto_protos_DrmVblankEventFtraceEvent {
    bool has_crtc;
    int32_t crtc;
    bool has_high_prec;
    uint32_t high_prec;
    bool has_seq;
    uint32_t seq;
    bool has_time;
    int64_t time;
} perfetto_protos_DrmVblankEventFtraceEvent;

typedef struct _perfetto_protos_DrmVblankEventDeliveredFtraceEvent {
    bool has_crtc;
    int32_t crtc;
    bool has_file;
    uint64_t file;
    bool has_seq;
    uint32_t seq;
} perfetto_protos_DrmVblankEventDeliveredFtraceEvent;

typedef struct _perfetto_protos_Ext4DaWriteBeginFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4DaWriteBeginFtraceEvent;

typedef struct _perfetto_protos_Ext4DaWriteEndFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_copied;
    uint32_t copied;
} perfetto_protos_Ext4DaWriteEndFtraceEvent;

typedef struct _perfetto_protos_Ext4SyncFileEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_parent;
    uint64_t parent;
    bool has_datasync;
    int32_t datasync;
} perfetto_protos_Ext4SyncFileEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4SyncFileExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4SyncFileExitFtraceEvent;

typedef struct _perfetto_protos_Ext4AllocDaBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_data_blocks;
    uint32_t data_blocks;
    bool has_meta_blocks;
    uint32_t meta_blocks;
} perfetto_protos_Ext4AllocDaBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4AllocateBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_block;
    uint64_t block;
    bool has_len;
    uint32_t len;
    bool has_logical;
    uint32_t logical;
    bool has_lleft;
    uint32_t lleft;
    bool has_lright;
    uint32_t lright;
    bool has_goal;
    uint64_t goal;
    bool has_pleft;
    uint64_t pleft;
    bool has_pright;
    uint64_t pright;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4AllocateBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4AllocateInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_dir;
    uint64_t dir;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4AllocateInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_new_size;
    int64_t new_size;
} perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent;

typedef struct _perfetto_protos_Ext4CollapseRangeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
} perfetto_protos_Ext4CollapseRangeFtraceEvent;

typedef struct _perfetto_protos_Ext4DaReleaseSpaceFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_i_blocks;
    uint64_t i_blocks;
    bool has_freed_blocks;
    int32_t freed_blocks;
    bool has_reserved_data_blocks;
    int32_t reserved_data_blocks;
    bool has_reserved_meta_blocks;
    int32_t reserved_meta_blocks;
    bool has_allocated_meta_blocks;
    int32_t allocated_meta_blocks;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4DaReleaseSpaceFtraceEvent;

typedef struct _perfetto_protos_Ext4DaReserveSpaceFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_i_blocks;
    uint64_t i_blocks;
    bool has_reserved_data_blocks;
    int32_t reserved_data_blocks;
    bool has_reserved_meta_blocks;
    int32_t reserved_meta_blocks;
    bool has_mode;
    uint32_t mode;
    bool has_md_needed;
    int32_t md_needed;
} perfetto_protos_Ext4DaReserveSpaceFtraceEvent;

typedef struct _perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_i_blocks;
    uint64_t i_blocks;
    bool has_used_blocks;
    int32_t used_blocks;
    bool has_reserved_data_blocks;
    int32_t reserved_data_blocks;
    bool has_reserved_meta_blocks;
    int32_t reserved_meta_blocks;
    bool has_allocated_meta_blocks;
    int32_t allocated_meta_blocks;
    bool has_quota_claim;
    int32_t quota_claim;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent;

typedef struct _perfetto_protos_Ext4DaWritePagesFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_first_page;
    uint64_t first_page;
    bool has_nr_to_write;
    int64_t nr_to_write;
    bool has_sync_mode;
    int32_t sync_mode;
    bool has_b_blocknr;
    uint64_t b_blocknr;
    bool has_b_size;
    uint32_t b_size;
    bool has_b_state;
    uint32_t b_state;
    bool has_io_done;
    int32_t io_done;
    bool has_pages_written;
    int32_t pages_written;
} perfetto_protos_Ext4DaWritePagesFtraceEvent;

typedef struct _perfetto_protos_Ext4DaWritePagesExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint64_t lblk;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4DaWritePagesExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4DirectIOEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint64_t len;
    bool has_rw;
    int32_t rw;
} perfetto_protos_Ext4DirectIOEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4DirectIOExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint64_t len;
    bool has_rw;
    int32_t rw;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4DirectIOExitFtraceEvent;

typedef struct _perfetto_protos_Ext4DiscardBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_blk;
    uint64_t blk;
    bool has_count;
    uint64_t count;
} perfetto_protos_Ext4DiscardBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4DiscardPreallocationsFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_len;
    uint32_t len;
    bool has_needed;
    uint32_t needed;
} perfetto_protos_Ext4DiscardPreallocationsFtraceEvent;

typedef struct _perfetto_protos_Ext4DropInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_drop;
    int32_t drop;
} perfetto_protos_Ext4DropInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4EsCacheExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_pblk;
    uint64_t pblk;
    bool has_status;
    uint32_t status;
} perfetto_protos_Ext4EsCacheExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
} perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_pblk;
    uint64_t pblk;
    bool has_status;
    uint64_t status;
} perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent;

typedef struct _perfetto_protos_Ext4EsInsertExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_pblk;
    uint64_t pblk;
    bool has_status;
    uint64_t status;
} perfetto_protos_Ext4EsInsertExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
} perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4EsLookupExtentExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_pblk;
    uint64_t pblk;
    bool has_status;
    uint64_t status;
    bool has_found;
    int32_t found;
} perfetto_protos_Ext4EsLookupExtentExitFtraceEvent;

typedef struct _perfetto_protos_Ext4EsRemoveExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    int64_t lblk;
    bool has_len;
    int64_t len;
} perfetto_protos_Ext4EsRemoveExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4EsShrinkFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_nr_shrunk;
    int32_t nr_shrunk;
    bool has_scan_time;
    uint64_t scan_time;
    bool has_nr_skipped;
    int32_t nr_skipped;
    bool has_retried;
    int32_t retried;
} perfetto_protos_Ext4EsShrinkFtraceEvent;

typedef struct _perfetto_protos_Ext4EsShrinkCountFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_nr_to_scan;
    int32_t nr_to_scan;
    bool has_cache_cnt;
    int32_t cache_cnt;
} perfetto_protos_Ext4EsShrinkCountFtraceEvent;

typedef struct _perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_nr_to_scan;
    int32_t nr_to_scan;
    bool has_cache_cnt;
    int32_t cache_cnt;
} perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4EsShrinkScanExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_nr_shrunk;
    int32_t nr_shrunk;
    bool has_cache_cnt;
    int32_t cache_cnt;
} perfetto_protos_Ext4EsShrinkScanExitFtraceEvent;

typedef struct _perfetto_protos_Ext4EvictInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nlink;
    int32_t nlink;
} perfetto_protos_Ext4EvictInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_m_lblk;
    uint32_t m_lblk;
    bool has_m_len;
    uint32_t m_len;
    bool has_u_lblk;
    uint32_t u_lblk;
    bool has_u_len;
    uint32_t u_len;
    bool has_u_pblk;
    uint64_t u_pblk;
} perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_m_lblk;
    uint32_t m_lblk;
    bool has_m_len;
    uint32_t m_len;
    bool has_u_lblk;
    uint32_t u_lblk;
    bool has_u_len;
    uint32_t u_len;
    bool has_u_pblk;
    uint64_t u_pblk;
    bool has_i_lblk;
    uint32_t i_lblk;
    bool has_i_len;
    uint32_t i_len;
    bool has_i_pblk;
    uint64_t i_pblk;
} perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_flags;
    int32_t flags;
    bool has_lblk;
    uint32_t lblk;
    bool has_pblk;
    uint64_t pblk;
    bool has_len;
    uint32_t len;
    bool has_allocated;
    uint32_t allocated;
    bool has_newblk;
    uint64_t newblk;
} perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtInCacheFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4ExtInCacheFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtLoadExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pblk;
    uint64_t pblk;
    bool has_lblk;
    uint32_t lblk;
} perfetto_protos_Ext4ExtLoadExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_flags;
    uint32_t flags;
    bool has_pblk;
    uint64_t pblk;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_mflags;
    uint32_t mflags;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtPutInCacheFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_start;
    uint64_t start;
} perfetto_protos_Ext4ExtPutInCacheFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_start;
    uint32_t start;
    bool has_end;
    uint32_t end;
    bool has_depth;
    int32_t depth;
} perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_start;
    uint32_t start;
    bool has_end;
    uint32_t end;
    bool has_depth;
    int32_t depth;
    bool has_partial;
    int64_t partial;
    bool has_eh_entries;
    uint32_t eh_entries;
    bool has_pc_lblk;
    uint32_t pc_lblk;
    bool has_pc_pclu;
    uint64_t pc_pclu;
    bool has_pc_state;
    int32_t pc_state;
} perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtRmIdxFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pblk;
    uint64_t pblk;
} perfetto_protos_Ext4ExtRmIdxFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtRmLeafFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_partial;
    int64_t partial;
    bool has_start;
    uint32_t start;
    bool has_ee_lblk;
    uint32_t ee_lblk;
    bool has_ee_pblk;
    uint64_t ee_pblk;
    bool has_ee_len;
    int32_t ee_len;
    bool has_pc_lblk;
    uint32_t pc_lblk;
    bool has_pc_pclu;
    uint64_t pc_pclu;
    bool has_pc_state;
    int32_t pc_state;
} perfetto_protos_Ext4ExtRmLeafFtraceEvent;

typedef struct _perfetto_protos_Ext4ExtShowExtentFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pblk;
    uint64_t pblk;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
} perfetto_protos_Ext4ExtShowExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4FallocateEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
    bool has_mode;
    int32_t mode;
    bool has_pos;
    int64_t pos;
} perfetto_protos_Ext4FallocateEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4FallocateExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_blocks;
    uint32_t blocks;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4FallocateExitFtraceEvent;

typedef struct _perfetto_protos_Ext4FindDelallocRangeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_from;
    uint32_t from;
    bool has_to;
    uint32_t to;
    bool has_reverse;
    int32_t reverse;
    bool has_found;
    int32_t found;
    bool has_found_blk;
    uint32_t found_blk;
} perfetto_protos_Ext4FindDelallocRangeFtraceEvent;

typedef struct _perfetto_protos_Ext4ForgetFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_block;
    uint64_t block;
    bool has_is_metadata;
    int32_t is_metadata;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4ForgetFtraceEvent;

typedef struct _perfetto_protos_Ext4FreeBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_block;
    uint64_t block;
    bool has_count;
    uint64_t count;
    bool has_flags;
    int32_t flags;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4FreeBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4FreeInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_uid;
    uint32_t uid;
    bool has_gid;
    uint32_t gid;
    bool has_blocks;
    uint64_t blocks;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4FreeInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_flags;
    uint32_t flags;
    bool has_lblk;
    uint32_t lblk;
    bool has_pblk;
    uint64_t pblk;
    bool has_len;
    uint32_t len;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent;

typedef struct _perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
} perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent;

typedef struct _perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4IndMapBlocksExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_flags;
    uint32_t flags;
    bool has_pblk;
    uint64_t pblk;
    bool has_lblk;
    uint32_t lblk;
    bool has_len;
    uint32_t len;
    bool has_mflags;
    uint32_t mflags;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4IndMapBlocksExitFtraceEvent;

typedef struct _perfetto_protos_Ext4InsertRangeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
} perfetto_protos_Ext4InsertRangeFtraceEvent;

typedef struct _perfetto_protos_Ext4InvalidatepageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
    bool has_offset;
    uint64_t offset;
    bool has_length;
    uint32_t length;
} perfetto_protos_Ext4InvalidatepageFtraceEvent;

typedef struct _perfetto_protos_Ext4JournalStartFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ip;
    uint64_t ip;
    bool has_blocks;
    int32_t blocks;
    bool has_rsv_blocks;
    int32_t rsv_blocks;
    bool has_nblocks;
    int32_t nblocks;
    bool has_revoke_creds;
    int32_t revoke_creds;
} perfetto_protos_Ext4JournalStartFtraceEvent;

typedef struct _perfetto_protos_Ext4JournalStartReservedFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ip;
    uint64_t ip;
    bool has_blocks;
    int32_t blocks;
} perfetto_protos_Ext4JournalStartReservedFtraceEvent;

typedef struct _perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
    bool has_offset;
    uint64_t offset;
    bool has_length;
    uint32_t length;
} perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent;

typedef struct _perfetto_protos_Ext4JournalledWriteEndFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_copied;
    uint32_t copied;
} perfetto_protos_Ext4JournalledWriteEndFtraceEvent;

typedef struct _perfetto_protos_Ext4LoadInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
} perfetto_protos_Ext4LoadInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4LoadInodeBitmapFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_group;
    uint32_t group;
} perfetto_protos_Ext4LoadInodeBitmapFtraceEvent;

typedef struct _perfetto_protos_Ext4MarkInodeDirtyFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ip;
    uint64_t ip;
} perfetto_protos_Ext4MarkInodeDirtyFtraceEvent;

typedef struct _perfetto_protos_Ext4MbBitmapLoadFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_group;
    uint32_t group;
} perfetto_protos_Ext4MbBitmapLoadFtraceEvent;

typedef struct _perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_group;
    uint32_t group;
} perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent;

typedef struct _perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_needed;
    int32_t needed;
} perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent;

typedef struct _perfetto_protos_Ext4MbNewGroupPaFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pa_pstart;
    uint64_t pa_pstart;
    bool has_pa_lstart;
    uint64_t pa_lstart;
    bool has_pa_len;
    uint32_t pa_len;
} perfetto_protos_Ext4MbNewGroupPaFtraceEvent;

typedef struct _perfetto_protos_Ext4MbNewInodePaFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pa_pstart;
    uint64_t pa_pstart;
    bool has_pa_lstart;
    uint64_t pa_lstart;
    bool has_pa_len;
    uint32_t pa_len;
} perfetto_protos_Ext4MbNewInodePaFtraceEvent;

typedef struct _perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_pa_pstart;
    uint64_t pa_pstart;
    bool has_pa_len;
    uint32_t pa_len;
} perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent;

typedef struct _perfetto_protos_Ext4MbReleaseInodePaFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_block;
    uint64_t block;
    bool has_count;
    uint32_t count;
} perfetto_protos_Ext4MbReleaseInodePaFtraceEvent;

typedef struct _perfetto_protos_Ext4MballocAllocFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_orig_logical;
    uint32_t orig_logical;
    bool has_orig_start;
    int32_t orig_start;
    bool has_orig_group;
    uint32_t orig_group;
    bool has_orig_len;
    int32_t orig_len;
    bool has_goal_logical;
    uint32_t goal_logical;
    bool has_goal_start;
    int32_t goal_start;
    bool has_goal_group;
    uint32_t goal_group;
    bool has_goal_len;
    int32_t goal_len;
    bool has_result_logical;
    uint32_t result_logical;
    bool has_result_start;
    int32_t result_start;
    bool has_result_group;
    uint32_t result_group;
    bool has_result_len;
    int32_t result_len;
    bool has_found;
    uint32_t found;
    bool has_groups;
    uint32_t groups;
    bool has_buddy;
    uint32_t buddy;
    bool has_flags;
    uint32_t flags;
    bool has_tail;
    uint32_t tail;
    bool has_cr;
    uint32_t cr;
} perfetto_protos_Ext4MballocAllocFtraceEvent;

typedef struct _perfetto_protos_Ext4MballocDiscardFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_result_start;
    int32_t result_start;
    bool has_result_group;
    uint32_t result_group;
    bool has_result_len;
    int32_t result_len;
} perfetto_protos_Ext4MballocDiscardFtraceEvent;

typedef struct _perfetto_protos_Ext4MballocFreeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_result_start;
    int32_t result_start;
    bool has_result_group;
    uint32_t result_group;
    bool has_result_len;
    int32_t result_len;
} perfetto_protos_Ext4MballocFreeFtraceEvent;

typedef struct _perfetto_protos_Ext4MballocPreallocFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_orig_logical;
    uint32_t orig_logical;
    bool has_orig_start;
    int32_t orig_start;
    bool has_orig_group;
    uint32_t orig_group;
    bool has_orig_len;
    int32_t orig_len;
    bool has_result_logical;
    uint32_t result_logical;
    bool has_result_start;
    int32_t result_start;
    bool has_result_group;
    uint32_t result_group;
    bool has_result_len;
    int32_t result_len;
} perfetto_protos_Ext4MballocPreallocFtraceEvent;

typedef struct _perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_orig_ino;
    uint64_t orig_ino;
    bool has_uid;
    uint32_t uid;
    bool has_gid;
    uint32_t gid;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent;

typedef struct _perfetto_protos_Ext4PunchHoleFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
    bool has_mode;
    int32_t mode;
} perfetto_protos_Ext4PunchHoleFtraceEvent;

typedef struct _perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_group;
    uint32_t group;
    bool has_prefetch;
    uint32_t prefetch;
} perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent;

typedef struct _perfetto_protos_Ext4ReadpageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
} perfetto_protos_Ext4ReadpageFtraceEvent;

typedef struct _perfetto_protos_Ext4ReleasepageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
} perfetto_protos_Ext4ReleasepageFtraceEvent;

typedef struct _perfetto_protos_Ext4RemoveBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_from;
    uint32_t from;
    bool has_to;
    uint32_t to;
    bool has_partial;
    int64_t partial;
    bool has_ee_pblk;
    uint64_t ee_pblk;
    bool has_ee_lblk;
    uint32_t ee_lblk;
    bool has_ee_len;
    uint32_t ee_len;
    bool has_pc_lblk;
    uint32_t pc_lblk;
    bool has_pc_pclu;
    uint64_t pc_pclu;
    bool has_pc_state;
    int32_t pc_state;
} perfetto_protos_Ext4RemoveBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4RequestBlocksFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_len;
    uint32_t len;
    bool has_logical;
    uint32_t logical;
    bool has_lleft;
    uint32_t lleft;
    bool has_lright;
    uint32_t lright;
    bool has_goal;
    uint64_t goal;
    bool has_pleft;
    uint64_t pleft;
    bool has_pright;
    uint64_t pright;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4RequestBlocksFtraceEvent;

typedef struct _perfetto_protos_Ext4RequestInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_dir;
    uint64_t dir;
    bool has_mode;
    uint32_t mode;
} perfetto_protos_Ext4RequestInodeFtraceEvent;

typedef struct _perfetto_protos_Ext4SyncFsFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_wait;
    int32_t wait;
} perfetto_protos_Ext4SyncFsFtraceEvent;

typedef struct _perfetto_protos_Ext4TrimAllFreeFtraceEvent {
    bool has_dev_major;
    int32_t dev_major;
    bool has_dev_minor;
    int32_t dev_minor;
    bool has_group;
    uint32_t group;
    bool has_start;
    int32_t start;
    bool has_len;
    int32_t len;
} perfetto_protos_Ext4TrimAllFreeFtraceEvent;

typedef struct _perfetto_protos_Ext4TrimExtentFtraceEvent {
    bool has_dev_major;
    int32_t dev_major;
    bool has_dev_minor;
    int32_t dev_minor;
    bool has_group;
    uint32_t group;
    bool has_start;
    int32_t start;
    bool has_len;
    int32_t len;
} perfetto_protos_Ext4TrimExtentFtraceEvent;

typedef struct _perfetto_protos_Ext4TruncateEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_blocks;
    uint64_t blocks;
} perfetto_protos_Ext4TruncateEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4TruncateExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_blocks;
    uint64_t blocks;
} perfetto_protos_Ext4TruncateExitFtraceEvent;

typedef struct _perfetto_protos_Ext4UnlinkEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_parent;
    uint64_t parent;
    bool has_size;
    int64_t size;
} perfetto_protos_Ext4UnlinkEnterFtraceEvent;

typedef struct _perfetto_protos_Ext4UnlinkExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_Ext4UnlinkExitFtraceEvent;

typedef struct _perfetto_protos_Ext4WriteBeginFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_Ext4WriteBeginFtraceEvent;

typedef struct _perfetto_protos_Ext4WriteEndFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_copied;
    uint32_t copied;
} perfetto_protos_Ext4WriteEndFtraceEvent;

typedef struct _perfetto_protos_Ext4WritepageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
} perfetto_protos_Ext4WritepageFtraceEvent;

typedef struct _perfetto_protos_Ext4WritepagesFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nr_to_write;
    int64_t nr_to_write;
    bool has_pages_skipped;
    int64_t pages_skipped;
    bool has_range_start;
    int64_t range_start;
    bool has_range_end;
    int64_t range_end;
    bool has_writeback_index;
    uint64_t writeback_index;
    bool has_sync_mode;
    int32_t sync_mode;
    bool has_for_kupdate;
    uint32_t for_kupdate;
    bool has_range_cyclic;
    uint32_t range_cyclic;
} perfetto_protos_Ext4WritepagesFtraceEvent;

typedef struct _perfetto_protos_Ext4WritepagesResultFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
    bool has_pages_written;
    int32_t pages_written;
    bool has_pages_skipped;
    int64_t pages_skipped;
    bool has_writeback_index;
    uint64_t writeback_index;
    bool has_sync_mode;
    int32_t sync_mode;
} perfetto_protos_Ext4WritepagesResultFtraceEvent;

typedef struct _perfetto_protos_Ext4ZeroRangeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
    bool has_mode;
    int32_t mode;
} perfetto_protos_Ext4ZeroRangeFtraceEvent;

typedef struct _perfetto_protos_F2fsDoSubmitBioFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_btype;
    int32_t btype;
    bool has_sync;
    uint32_t sync;
    bool has_sector;
    uint64_t sector;
    bool has_size;
    uint32_t size;
} perfetto_protos_F2fsDoSubmitBioFtraceEvent;

typedef struct _perfetto_protos_F2fsEvictInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pino;
    uint64_t pino;
    bool has_mode;
    uint32_t mode;
    bool has_size;
    int64_t size;
    bool has_nlink;
    uint32_t nlink;
    bool has_blocks;
    uint64_t blocks;
    bool has_advise;
    uint32_t advise;
} perfetto_protos_F2fsEvictInodeFtraceEvent;

typedef struct _perfetto_protos_F2fsFallocateFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_mode;
    int32_t mode;
    bool has_offset;
    int64_t offset;
    bool has_len;
    int64_t len;
    bool has_size;
    int64_t size;
    bool has_blocks;
    uint64_t blocks;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsFallocateFtraceEvent;

typedef struct _perfetto_protos_F2fsGetDataBlockFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_iblock;
    uint64_t iblock;
    bool has_bh_start;
    uint64_t bh_start;
    bool has_bh_size;
    uint64_t bh_size;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsGetDataBlockFtraceEvent;

typedef struct _perfetto_protos_F2fsGetVictimFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_type;
    int32_t type;
    bool has_gc_type;
    int32_t gc_type;
    bool has_alloc_mode;
    int32_t alloc_mode;
    bool has_gc_mode;
    int32_t gc_mode;
    bool has_victim;
    uint32_t victim;
    bool has_ofs_unit;
    uint32_t ofs_unit;
    bool has_pre_victim;
    uint32_t pre_victim;
    bool has_prefree;
    uint32_t prefree;
    bool has_free;
    uint32_t free;
    bool has_cost;
    uint32_t cost;
} perfetto_protos_F2fsGetVictimFtraceEvent;

typedef struct _perfetto_protos_F2fsIgetFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pino;
    uint64_t pino;
    bool has_mode;
    uint32_t mode;
    bool has_size;
    int64_t size;
    bool has_nlink;
    uint32_t nlink;
    bool has_blocks;
    uint64_t blocks;
    bool has_advise;
    uint32_t advise;
} perfetto_protos_F2fsIgetFtraceEvent;

typedef struct _perfetto_protos_F2fsIgetExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsIgetExitFtraceEvent;

typedef struct _perfetto_protos_F2fsNewInodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsNewInodeFtraceEvent;

typedef struct _perfetto_protos_F2fsReadpageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_index;
    uint64_t index;
    bool has_blkaddr;
    uint64_t blkaddr;
    bool has_type;
    int32_t type;
    bool has_dir;
    int32_t dir;
    bool has_dirty;
    int32_t dirty;
    bool has_uptodate;
    int32_t uptodate;
} perfetto_protos_F2fsReadpageFtraceEvent;

typedef struct _perfetto_protos_F2fsReserveNewBlockFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_nid;
    uint32_t nid;
    bool has_ofs_in_node;
    uint32_t ofs_in_node;
} perfetto_protos_F2fsReserveNewBlockFtraceEvent;

typedef struct _perfetto_protos_F2fsSetPageDirtyFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_type;
    int32_t type;
    bool has_dir;
    int32_t dir;
    bool has_index;
    uint64_t index;
    bool has_dirty;
    int32_t dirty;
    bool has_uptodate;
    int32_t uptodate;
} perfetto_protos_F2fsSetPageDirtyFtraceEvent;

typedef struct _perfetto_protos_F2fsSubmitWritePageFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_type;
    int32_t type;
    bool has_index;
    uint64_t index;
    bool has_block;
    uint32_t block;
} perfetto_protos_F2fsSubmitWritePageFtraceEvent;

typedef struct _perfetto_protos_F2fsSyncFileEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pino;
    uint64_t pino;
    bool has_mode;
    uint32_t mode;
    bool has_size;
    int64_t size;
    bool has_nlink;
    uint32_t nlink;
    bool has_blocks;
    uint64_t blocks;
    bool has_advise;
    uint32_t advise;
} perfetto_protos_F2fsSyncFileEnterFtraceEvent;

typedef struct _perfetto_protos_F2fsSyncFileExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_need_cp;
    uint32_t need_cp;
    bool has_datasync;
    int32_t datasync;
    bool has_ret;
    int32_t ret;
    bool has_cp_reason;
    int32_t cp_reason;
} perfetto_protos_F2fsSyncFileExitFtraceEvent;

typedef struct _perfetto_protos_F2fsSyncFsFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_dirty;
    int32_t dirty;
    bool has_wait;
    int32_t wait;
} perfetto_protos_F2fsSyncFsFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pino;
    uint64_t pino;
    bool has_mode;
    uint32_t mode;
    bool has_size;
    int64_t size;
    bool has_nlink;
    uint32_t nlink;
    bool has_blocks;
    uint64_t blocks;
    bool has_advise;
    uint32_t advise;
} perfetto_protos_F2fsTruncateFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_size;
    int64_t size;
    bool has_blocks;
    uint64_t blocks;
    bool has_from;
    uint64_t from;
} perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateBlocksExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsTruncateBlocksExitFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nid;
    uint32_t nid;
    bool has_ofs;
    uint32_t ofs;
    bool has_free;
    int32_t free;
} perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_size;
    int64_t size;
    bool has_blocks;
    uint64_t blocks;
    bool has_from;
    uint64_t from;
} perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateNodeFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nid;
    uint32_t nid;
    bool has_blk_addr;
    uint32_t blk_addr;
} perfetto_protos_F2fsTruncateNodeFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateNodesEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nid;
    uint32_t nid;
    bool has_blk_addr;
    uint32_t blk_addr;
} perfetto_protos_F2fsTruncateNodesEnterFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncateNodesExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsTruncateNodesExitFtraceEvent;

typedef struct _perfetto_protos_F2fsTruncatePartialNodesFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_nid;
    uint32_t nid;
    bool has_depth;
    int32_t depth;
    bool has_err;
    int32_t err;
} perfetto_protos_F2fsTruncatePartialNodesFtraceEvent;

typedef struct _perfetto_protos_F2fsUnlinkEnterFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_size;
    int64_t size;
    bool has_blocks;
    uint64_t blocks;
    pb_callback_t name;
} perfetto_protos_F2fsUnlinkEnterFtraceEvent;

typedef struct _perfetto_protos_F2fsUnlinkExitFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_ret;
    int32_t ret;
} perfetto_protos_F2fsUnlinkExitFtraceEvent;

typedef struct _perfetto_protos_F2fsVmPageMkwriteFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_type;
    int32_t type;
    bool has_dir;
    int32_t dir;
    bool has_index;
    uint64_t index;
    bool has_dirty;
    int32_t dirty;
    bool has_uptodate;
    int32_t uptodate;
} perfetto_protos_F2fsVmPageMkwriteFtraceEvent;

typedef struct _perfetto_protos_F2fsWriteBeginFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_flags;
    uint32_t flags;
} perfetto_protos_F2fsWriteBeginFtraceEvent;

typedef struct _perfetto_protos_F2fsWriteCheckpointFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_is_umount;
    uint32_t is_umount;
    pb_callback_t msg;
    bool has_reason;
    int32_t reason;
} perfetto_protos_F2fsWriteCheckpointFtraceEvent;

typedef struct _perfetto_protos_F2fsWriteEndFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ino;
    uint64_t ino;
    bool has_pos;
    int64_t pos;
    bool has_len;
    uint32_t len;
    bool has_copied;
    uint32_t copied;
} perfetto_protos_F2fsWriteEndFtraceEvent;

typedef struct _perfetto_protos_F2fsIostatFtraceEvent {
    bool has_app_bio;
    uint64_t app_bio;
    bool has_app_brio;
    uint64_t app_brio;
    bool has_app_dio;
    uint64_t app_dio;
    bool has_app_drio;
    uint64_t app_drio;
    bool has_app_mio;
    uint64_t app_mio;
    bool has_app_mrio;
    uint64_t app_mrio;
    bool has_app_rio;
    uint64_t app_rio;
    bool has_app_wio;
    uint64_t app_wio;
    bool has_dev;
    uint64_t dev;
    bool has_fs_cdrio;
    uint64_t fs_cdrio;
    bool has_fs_cp_dio;
    uint64_t fs_cp_dio;
    bool has_fs_cp_mio;
    uint64_t fs_cp_mio;
    bool has_fs_cp_nio;
    uint64_t fs_cp_nio;
    bool has_fs_dio;
    uint64_t fs_dio;
    bool has_fs_discard;
    uint64_t fs_discard;
    bool has_fs_drio;
    uint64_t fs_drio;
    bool has_fs_gc_dio;
    uint64_t fs_gc_dio;
    bool has_fs_gc_nio;
    uint64_t fs_gc_nio;
    bool has_fs_gdrio;
    uint64_t fs_gdrio;
    bool has_fs_mio;
    uint64_t fs_mio;
    bool has_fs_mrio;
    uint64_t fs_mrio;
    bool has_fs_nio;
    uint64_t fs_nio;
    bool has_fs_nrio;
    uint64_t fs_nrio;
} perfetto_protos_F2fsIostatFtraceEvent;

typedef struct _perfetto_protos_F2fsIostatLatencyFtraceEvent {
    bool has_d_rd_avg;
    uint32_t d_rd_avg;
    bool has_d_rd_cnt;
    uint32_t d_rd_cnt;
    bool has_d_rd_peak;
    uint32_t d_rd_peak;
    bool has_d_wr_as_avg;
    uint32_t d_wr_as_avg;
    bool has_d_wr_as_cnt;
    uint32_t d_wr_as_cnt;
    bool has_d_wr_as_peak;
    uint32_t d_wr_as_peak;
    bool has_d_wr_s_avg;
    uint32_t d_wr_s_avg;
    bool has_d_wr_s_cnt;
    uint32_t d_wr_s_cnt;
    bool has_d_wr_s_peak;
    uint32_t d_wr_s_peak;
    bool has_dev;
    uint64_t dev;
    bool has_m_rd_avg;
    uint32_t m_rd_avg;
    bool has_m_rd_cnt;
    uint32_t m_rd_cnt;
    bool has_m_rd_peak;
    uint32_t m_rd_peak;
    bool has_m_wr_as_avg;
    uint32_t m_wr_as_avg;
    bool has_m_wr_as_cnt;
    uint32_t m_wr_as_cnt;
    bool has_m_wr_as_peak;
    uint32_t m_wr_as_peak;
    bool has_m_wr_s_avg;
    uint32_t m_wr_s_avg;
    bool has_m_wr_s_cnt;
    uint32_t m_wr_s_cnt;
    bool has_m_wr_s_peak;
    uint32_t m_wr_s_peak;
    bool has_n_rd_avg;
    uint32_t n_rd_avg;
    bool has_n_rd_cnt;
    uint32_t n_rd_cnt;
    bool has_n_rd_peak;
    uint32_t n_rd_peak;
    bool has_n_wr_as_avg;
    uint32_t n_wr_as_avg;
    bool has_n_wr_as_cnt;
    uint32_t n_wr_as_cnt;
    bool has_n_wr_as_peak;
    uint32_t n_wr_as_peak;
    bool has_n_wr_s_avg;
    uint32_t n_wr_s_avg;
    bool has_n_wr_s_cnt;
    uint32_t n_wr_s_cnt;
    bool has_n_wr_s_peak;
    uint32_t n_wr_s_peak;
} perfetto_protos_F2fsIostatLatencyFtraceEvent;

typedef struct _perfetto_protos_F2fsBackgroundGcFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_wait_ms;
    uint32_t wait_ms;
    bool has_prefree;
    uint32_t prefree;
    bool has_free;
    uint32_t free;
} perfetto_protos_F2fsBackgroundGcFtraceEvent;

typedef struct _perfetto_protos_F2fsGcBeginFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_sync;
    uint32_t sync;
    bool has_background;
    uint32_t background;
    bool has_dirty_nodes;
    int64_t dirty_nodes;
    bool has_dirty_dents;
    int64_t dirty_dents;
    bool has_dirty_imeta;
    int64_t dirty_imeta;
    bool has_free_sec;
    uint32_t free_sec;
    bool has_free_seg;
    uint32_t free_seg;
    bool has_reserved_seg;
    int32_t reserved_seg;
    bool has_prefree_seg;
    uint32_t prefree_seg;
    bool has_gc_type;
    int32_t gc_type;
    bool has_no_bg_gc;
    uint32_t no_bg_gc;
    bool has_nr_free_secs;
    uint32_t nr_free_secs;
} perfetto_protos_F2fsGcBeginFtraceEvent;

typedef struct _perfetto_protos_F2fsGcEndFtraceEvent {
    bool has_dev;
    uint64_t dev;
    bool has_ret;
    int32_t ret;
    bool has_seg_freed;
    int32_t seg_freed;
    bool has_sec_freed;
    int32_t sec_freed;
    bool has_dirty_nodes;
    int64_t dirty_nodes;
    bool has_dirty_dents;
    int64_t dirty_dents;
    bool has_dirty_imeta;
    int64_t dirty_imeta;
    bool has_free_sec;
    uint32_t free_sec;
    bool has_free_seg;
    uint32_t free_seg;
    bool has_reserved_seg;
    int32_t reserved_seg;
    bool has_prefree_seg;
    uint32_t prefree_seg;
} perfetto_protos_F2fsGcEndFtraceEvent;

typedef struct _perfetto_protos_FastrpcDmaStatFtraceEvent {
    bool has_cid;
    int32_t cid;
    bool has_len;
    int64_t len;
    bool has_total_allocated;
    uint64_t total_allocated;
} perfetto_protos_FastrpcDmaStatFtraceEvent;

typedef struct _perfetto_protos_FastrpcDmaFreeFtraceEvent {
    bool has_cid;
    int32_t cid;
    bool has_phys;
    uint64_t phys;
    bool has_size;
    uint64_t size;
} perfetto_protos_FastrpcDmaFreeFtraceEvent;

typedef struct _perfetto_protos_FastrpcDmaAllocFtraceEvent {
    bool has_cid;
    int32_t cid;
    bool has_phys;
    uint64_t phys;
    bool has_size;
    uint64_t size;
    bool has_attr;
    uint64_t attr;
    bool has_mflags;
    int32_t mflags;
} perfetto_protos_FastrpcDmaAllocFtraceEvent;

typedef struct _perfetto_protos_FastrpcDmaUnmapFtraceEvent {
    bool has_cid;
    int32_t cid;
    bool has_phys;
    uint64_t phys;
    bool has_size;
    uint64_t size;
} perfetto_protos_FastrpcDmaUnmapFtraceEvent;

typedef struct _perfetto_protos_FastrpcDmaMapFtraceEvent {
    bool has_cid;
    int32_t cid;
    bool has_fd;
    int32_t fd;
    bool has_phys;
    uint64_t phys;
    bool has_size;
    uint64_t size;
    bool has_len;
    uint64_t len;
    bool has_attr;
    uint32_t attr;
    bool has_mflags;
    int32_t mflags;
} perfetto_protos_FastrpcDmaMapFtraceEvent;

typedef struct _perfetto_protos_FenceInitFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_FenceInitFtraceEvent;

typedef struct _perfetto_protos_FenceDestroyFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_FenceDestroyFtraceEvent;

typedef struct _perfetto_protos_FenceEnableSignalFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_FenceEnableSignalFtraceEvent;

typedef struct _perfetto_protos_FenceSignaledFtraceEvent {
    bool has_context;
    uint32_t context;
    pb_callback_t driver;
    bool has_seqno;
    uint32_t seqno;
    pb_callback_t timeline;
} perfetto_protos_FenceSignaledFtraceEvent;

typedef struct _perfetto_protos_MmFilemapAddToPageCacheFtraceEvent {
    bool has_pfn;
    uint64_t pfn;
    bool has_i_ino;
    uint64_t i_ino;
    bool has_index;
    uint64_t index;
    bool has_s_dev;
    uint64_t s_dev;
    bool has_page;
    uint64_t page;
} perfetto_protos_MmFilemapAddToPageCacheFtraceEvent;

typedef struct _perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent {
    bool has_pfn;
    uint64_t pfn;
    bool has_i_ino;
    uint64_t i_ino;
    bool has_index;
    uint64_t index;
    bool has_s_dev;
    uint64_t s_dev;
    bool has_page;
    uint64_t page;
} perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent;

typedef struct _perfetto_protos_DoSysOpenFtraceEvent {
    pb_callback_t filename;
    bool has_flags;
    int32_t flags;
    bool has_mode;
    int32_t mode;
} perfetto_protos_DoSysOpenFtraceEvent;

typedef struct _perfetto_protos_OpenExecFtraceEvent {
    pb_callback_t filename;
} perfetto_protos_OpenExecFtraceEvent;

typedef struct _perfetto_protos_PrintFtraceEvent {
    bool has_ip;
    uint64_t ip;
    pb_callback_t buf;
} perfetto_protos_PrintFtraceEvent;

typedef struct _perfetto_protos_FuncgraphEntryFtraceEvent {
    bool has_depth;
    int32_t depth;
    bool has_func;
    uint64_t func;
} perfetto_protos_FuncgraphEntryFtraceEvent;

typedef struct _perfetto_protos_FuncgraphExitFtraceEvent {
    bool has_calltime;
    uint64_t calltime;
    bool has_depth;
    int32_t depth;
    bool has_func;
    uint64_t func;
    bool has_overrun;
    uint64_t overrun;
    bool has_rettime;
    uint64_t rettime;
} perfetto_protos_FuncgraphExitFtraceEvent;

typedef struct _perfetto_protos_G2dTracingMarkWriteFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t name;
    bool has_type;
    uint32_t type;
    bool has_value;
    int32_t value;
} perfetto_protos_G2dTracingMarkWriteFtraceEvent;

/* This generic proto is used to output events in the trace
 when a specific proto for that event does not exist. */
typedef struct _perfetto_protos_GenericFtraceEvent {
    pb_callback_t event_name;
    pb_callback_t field;
} perfetto_protos_GenericFtraceEvent;

typedef struct _perfetto_protos_GenericFtraceEvent_Field {
    pb_callback_t name;
    pb_size_t which_value;
    union _perfetto_protos_GenericFtraceEvent_Field_value {
        pb_callback_t str_value;
        int64_t int_value;
        uint64_t uint_value;
    } value;
} perfetto_protos_GenericFtraceEvent_Field;

typedef struct _perfetto_protos_KprobeEvent {
    pb_callback_t name;
    bool has_type;
    perfetto_protos_KprobeEvent_KprobeType type;
} perfetto_protos_KprobeEvent;

typedef struct _perfetto_protos_GoogleIccEventFtraceEvent {
    pb_callback_t event;
    bool has_timestamp;
    uint64_t timestamp;
} perfetto_protos_GoogleIccEventFtraceEvent;

typedef struct _perfetto_protos_GoogleIrmEventFtraceEvent {
    pb_callback_t event;
    bool has_timestamp;
    uint64_t timestamp;
} perfetto_protos_GoogleIrmEventFtraceEvent;

typedef struct _perfetto_protos_GpuMemTotalFtraceEvent {
    bool has_gpu_id;
    uint32_t gpu_id;
    bool has_pid;
    uint32_t pid;
    bool has_size;
    uint64_t size;
} perfetto_protos_GpuMemTotalFtraceEvent;

typedef struct _perfetto_protos_DrmSchedJobFtraceEvent {
    bool has_entity;
    uint64_t entity;
    bool has_fence;
    uint64_t fence;
    bool has_hw_job_count;
    int32_t hw_job_count;
    bool has_id;
    uint64_t id;
    bool has_job_count;
    uint32_t job_count;
    pb_callback_t name;
} perfetto_protos_DrmSchedJobFtraceEvent;

typedef struct _perfetto_protos_DrmRunJobFtraceEvent {
    bool has_entity;
    uint64_t entity;
    bool has_fence;
    uint64_t fence;
    bool has_hw_job_count;
    int32_t hw_job_count;
    bool has_id;
    uint64_t id;
    bool has_job_count;
    uint32_t job_count;
    pb_callback_t name;
} perfetto_protos_DrmRunJobFtraceEvent;

typedef struct _perfetto_protos_DrmSchedProcessJobFtraceEvent {
    bool has_fence;
    uint64_t fence;
} perfetto_protos_DrmSchedProcessJobFtraceEvent;

typedef struct _perfetto_protos_HypEnterFtraceEvent {
    char dummy_field;
} perfetto_protos_HypEnterFtraceEvent;

typedef struct _perfetto_protos_HypExitFtraceEvent {
    char dummy_field;
} perfetto_protos_HypExitFtraceEvent;

typedef struct _perfetto_protos_HostHcallFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_invalid;
    uint32_t invalid;
} perfetto_protos_HostHcallFtraceEvent;

typedef struct _perfetto_protos_HostSmcFtraceEvent {
    bool has_id;
    uint64_t id;
    bool has_forwarded;
    uint32_t forwarded;
} perfetto_protos_HostSmcFtraceEvent;

typedef struct _perfetto_protos_HostMemAbortFtraceEvent {
    bool has_esr;
    uint64_t esr;
    bool has_addr;
    uint64_t addr;
} perfetto_protos_HostMemAbortFtraceEvent;

typedef struct _perfetto_protos_I2cReadFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_msg_nr;
    uint32_t msg_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_len;
    uint32_t len;
} perfetto_protos_I2cReadFtraceEvent;

typedef struct _perfetto_protos_I2cWriteFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_msg_nr;
    uint32_t msg_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_len;
    uint32_t len;
    bool has_buf;
    uint32_t buf;
} perfetto_protos_I2cWriteFtraceEvent;

typedef struct _perfetto_protos_I2cResultFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_nr_msgs;
    uint32_t nr_msgs;
    bool has_ret;
    int32_t ret;
} perfetto_protos_I2cResultFtraceEvent;

typedef struct _perfetto_protos_I2cReplyFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_msg_nr;
    uint32_t msg_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_len;
    uint32_t len;
    bool has_buf;
    uint32_t buf;
} perfetto_protos_I2cReplyFtraceEvent;

typedef struct _perfetto_protos_SmbusReadFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_flags;
    uint32_t flags;
    bool has_addr;
    uint32_t addr;
    bool has_command;
    uint32_t command;
    bool has_protocol;
    uint32_t protocol;
} perfetto_protos_SmbusReadFtraceEvent;

typedef struct _perfetto_protos_SmbusWriteFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_command;
    uint32_t command;
    bool has_len;
    uint32_t len;
    bool has_protocol;
    uint32_t protocol;
} perfetto_protos_SmbusWriteFtraceEvent;

typedef struct _perfetto_protos_SmbusResultFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_read_write;
    uint32_t read_write;
    bool has_command;
    uint32_t command;
    bool has_res;
    int32_t res;
    bool has_protocol;
    uint32_t protocol;
} perfetto_protos_SmbusResultFtraceEvent;

typedef struct _perfetto_protos_SmbusReplyFtraceEvent {
    bool has_adapter_nr;
    int32_t adapter_nr;
    bool has_addr;
    uint32_t addr;
    bool has_flags;
    uint32_t flags;
    bool has_command;
    uint32_t command;
    bool has_len;
    uint32_t len;
    bool has_protocol;
    uint32_t protocol;
} perfetto_protos_SmbusReplyFtraceEvent;

typedef struct _perfetto_protos_IonStatFtraceEvent {
    bool has_buffer_id;
    uint32_t buffer_id;
    bool has_len;
    int64_t len;
    bool has_total_allocated;
    uint64_t total_allocated;
} perfetto_protos_IonStatFtraceEvent;

typedef struct _perfetto_protos_IpiEntryFtraceEvent {
    pb_callback_t reason;
} perfetto_protos_IpiEntryFtraceEvent;

typedef struct _perfetto_protos_IpiExitFtraceEvent {
    pb_callback_t reason;
} perfetto_protos_IpiExitFtraceEvent;

typedef struct _perfetto_protos_IpiRaiseFtraceEvent {
    bool has_target_cpus;
    uint32_t target_cpus;
    pb_callback_t reason;
} perfetto_protos_IpiRaiseFtraceEvent;

typedef struct _perfetto_protos_SoftirqEntryFtraceEvent {
    bool has_vec;
    uint32_t vec;
} perfetto_protos_SoftirqEntryFtraceEvent;

typedef struct _perfetto_protos_SoftirqExitFtraceEvent {
    bool has_vec;
    uint32_t vec;
} perfetto_protos_SoftirqExitFtraceEvent;

typedef struct _perfetto_protos_SoftirqRaiseFtraceEvent {
    bool has_vec;
    uint32_t vec;
} perfetto_protos_SoftirqRaiseFtraceEvent;

typedef struct _perfetto_protos_IrqHandlerEntryFtraceEvent {
    bool has_irq;
    int32_t irq;
    pb_callback_t name;
    bool has_handler;
    uint32_t handler;
} perfetto_protos_IrqHandlerEntryFtraceEvent;

typedef struct _perfetto_protos_IrqHandlerExitFtraceEvent {
    bool has_irq;
    int32_t irq;
    bool has_ret;
    int32_t ret;
} perfetto_protos_IrqHandlerExitFtraceEvent;

typedef struct _perfetto_protos_KgslGpuFrequencyFtraceEvent {
    bool has_gpu_freq;
    uint32_t gpu_freq;
    bool has_gpu_id;
    uint32_t gpu_id;
} perfetto_protos_KgslGpuFrequencyFtraceEvent;

typedef struct _perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_queued;
    uint32_t queued;
    bool has_flags;
    uint32_t flags;
    bool has_prio;
    uint32_t prio;
} perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent;

typedef struct _perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_inflight;
    int64_t inflight;
    bool has_flags;
    uint32_t flags;
    bool has_ticks;
    uint64_t ticks;
    bool has_secs;
    uint64_t secs;
    bool has_usecs;
    uint64_t usecs;
    bool has_prio;
    int32_t prio;
    bool has_rb_id;
    int32_t rb_id;
    bool has_rptr;
    uint32_t rptr;
    bool has_wptr;
    uint32_t wptr;
    bool has_q_inflight;
    int32_t q_inflight;
    bool has_dispatch_queue;
    int32_t dispatch_queue;
} perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent;

typedef struct _perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_ticks;
    uint64_t ticks;
    bool has_prio;
    int32_t prio;
} perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent;

typedef struct _perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_inflight;
    int64_t inflight;
    bool has_recovery;
    uint32_t recovery;
    bool has_flags;
    uint32_t flags;
    bool has_start;
    uint64_t start;
    bool has_retire;
    uint64_t retire;
    bool has_prio;
    int32_t prio;
    bool has_rb_id;
    int32_t rb_id;
    bool has_rptr;
    uint32_t rptr;
    bool has_wptr;
    uint32_t wptr;
    bool has_q_inflight;
    int32_t q_inflight;
    bool has_fault_recovery;
    uint64_t fault_recovery;
    bool has_dispatch_queue;
    uint32_t dispatch_queue;
    bool has_submitted_to_rb;
    uint64_t submitted_to_rb;
    bool has_retired_on_gmu;
    uint64_t retired_on_gmu;
    bool has_active;
    uint64_t active;
} perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent;

typedef struct _perfetto_protos_AllocPagesIommuEndFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesIommuEndFtraceEvent;

typedef struct _perfetto_protos_AllocPagesIommuFailFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesIommuFailFtraceEvent;

typedef struct _perfetto_protos_AllocPagesIommuStartFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesIommuStartFtraceEvent;

typedef struct _perfetto_protos_AllocPagesSysEndFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesSysEndFtraceEvent;

typedef struct _perfetto_protos_AllocPagesSysFailFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesSysFailFtraceEvent;

typedef struct _perfetto_protos_AllocPagesSysStartFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_order;
    uint32_t order;
} perfetto_protos_AllocPagesSysStartFtraceEvent;

typedef struct _perfetto_protos_DmaAllocContiguousRetryFtraceEvent {
    bool has_tries;
    int32_t tries;
} perfetto_protos_DmaAllocContiguousRetryFtraceEvent;

typedef struct _perfetto_protos_IommuMapRangeFtraceEvent {
    bool has_chunk_size;
    uint64_t chunk_size;
    bool has_len;
    uint64_t len;
    bool has_pa;
    uint64_t pa;
    bool has_va;
    uint64_t va;
} perfetto_protos_IommuMapRangeFtraceEvent;

typedef struct _perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent {
    bool has_len;
    uint64_t len;
    bool has_num;
    int32_t num;
    bool has_pa;
    uint32_t pa;
    bool has_sec_id;
    int32_t sec_id;
    bool has_va;
    uint64_t va;
} perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent;

typedef struct _perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent {
    bool has_len;
    uint64_t len;
    bool has_num;
    int32_t num;
    bool has_pa;
    uint32_t pa;
    bool has_sec_id;
    int32_t sec_id;
    bool has_va;
    uint64_t va;
} perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent;

typedef struct _perfetto_protos_IonAllocBufferEndFtraceEvent {
    pb_callback_t client_name;
    bool has_flags;
    uint32_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_mask;
    uint32_t mask;
} perfetto_protos_IonAllocBufferEndFtraceEvent;

typedef struct _perfetto_protos_IonAllocBufferFailFtraceEvent {
    pb_callback_t client_name;
    bool has_error;
    int64_t error;
    bool has_flags;
    uint32_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_mask;
    uint32_t mask;
} perfetto_protos_IonAllocBufferFailFtraceEvent;

typedef struct _perfetto_protos_IonAllocBufferFallbackFtraceEvent {
    pb_callback_t client_name;
    bool has_error;
    int64_t error;
    bool has_flags;
    uint32_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_mask;
    uint32_t mask;
} perfetto_protos_IonAllocBufferFallbackFtraceEvent;

typedef struct _perfetto_protos_IonAllocBufferStartFtraceEvent {
    pb_callback_t client_name;
    bool has_flags;
    uint32_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_mask;
    uint32_t mask;
} perfetto_protos_IonAllocBufferStartFtraceEvent;

typedef struct _perfetto_protos_IonCpAllocRetryFtraceEvent {
    bool has_tries;
    int32_t tries;
} perfetto_protos_IonCpAllocRetryFtraceEvent;

typedef struct _perfetto_protos_IonCpSecureBufferEndFtraceEvent {
    bool has_align;
    uint64_t align;
    bool has_flags;
    uint64_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonCpSecureBufferEndFtraceEvent;

typedef struct _perfetto_protos_IonCpSecureBufferStartFtraceEvent {
    bool has_align;
    uint64_t align;
    bool has_flags;
    uint64_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonCpSecureBufferStartFtraceEvent;

typedef struct _perfetto_protos_IonPrefetchingFtraceEvent {
    bool has_len;
    uint64_t len;
} perfetto_protos_IonPrefetchingFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent {
    bool has_is_prefetch;
    uint32_t is_prefetch;
    bool has_len;
    uint64_t len;
    bool has_pool_total;
    int32_t pool_total;
} perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent {
    bool has_is_prefetch;
    uint32_t is_prefetch;
    bool has_len;
    uint64_t len;
    bool has_pool_total;
    int32_t pool_total;
} perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaAllocateEndFtraceEvent {
    bool has_align;
    uint64_t align;
    bool has_flags;
    uint64_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonSecureCmaAllocateEndFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaAllocateStartFtraceEvent {
    bool has_align;
    uint64_t align;
    bool has_flags;
    uint64_t flags;
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonSecureCmaAllocateStartFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent {
    bool has_drained_size;
    uint64_t drained_size;
    bool has_skipped_size;
    uint64_t skipped_size;
} perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent;

typedef struct _perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent {
    bool has_drained_size;
    uint64_t drained_size;
    bool has_skipped_size;
    uint64_t skipped_size;
} perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent;

typedef struct _perfetto_protos_KfreeFtraceEvent {
    bool has_call_site;
    uint64_t call_site;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KfreeFtraceEvent;

typedef struct _perfetto_protos_KmallocFtraceEvent {
    bool has_bytes_alloc;
    uint64_t bytes_alloc;
    bool has_bytes_req;
    uint64_t bytes_req;
    bool has_call_site;
    uint64_t call_site;
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KmallocFtraceEvent;

typedef struct _perfetto_protos_KmallocNodeFtraceEvent {
    bool has_bytes_alloc;
    uint64_t bytes_alloc;
    bool has_bytes_req;
    uint64_t bytes_req;
    bool has_call_site;
    uint64_t call_site;
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_node;
    int32_t node;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KmallocNodeFtraceEvent;

typedef struct _perfetto_protos_KmemCacheAllocFtraceEvent {
    bool has_bytes_alloc;
    uint64_t bytes_alloc;
    bool has_bytes_req;
    uint64_t bytes_req;
    bool has_call_site;
    uint64_t call_site;
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KmemCacheAllocFtraceEvent;

typedef struct _perfetto_protos_KmemCacheAllocNodeFtraceEvent {
    bool has_bytes_alloc;
    uint64_t bytes_alloc;
    bool has_bytes_req;
    uint64_t bytes_req;
    bool has_call_site;
    uint64_t call_site;
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_node;
    int32_t node;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KmemCacheAllocNodeFtraceEvent;

typedef struct _perfetto_protos_KmemCacheFreeFtraceEvent {
    bool has_call_site;
    uint64_t call_site;
    bool has_ptr;
    uint64_t ptr;
} perfetto_protos_KmemCacheFreeFtraceEvent;

typedef struct _perfetto_protos_MigratePagesEndFtraceEvent {
    bool has_mode;
    int32_t mode;
} perfetto_protos_MigratePagesEndFtraceEvent;

typedef struct _perfetto_protos_MigratePagesStartFtraceEvent {
    bool has_mode;
    int32_t mode;
} perfetto_protos_MigratePagesStartFtraceEvent;

typedef struct _perfetto_protos_MigrateRetryFtraceEvent {
    bool has_tries;
    int32_t tries;
} perfetto_protos_MigrateRetryFtraceEvent;

typedef struct _perfetto_protos_MmPageAllocFtraceEvent {
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_migratetype;
    int32_t migratetype;
    bool has_order;
    uint32_t order;
    bool has_page;
    uint64_t page;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPageAllocFtraceEvent;

typedef struct _perfetto_protos_MmPageAllocExtfragFtraceEvent {
    bool has_alloc_migratetype;
    int32_t alloc_migratetype;
    bool has_alloc_order;
    int32_t alloc_order;
    bool has_fallback_migratetype;
    int32_t fallback_migratetype;
    bool has_fallback_order;
    int32_t fallback_order;
    bool has_page;
    uint64_t page;
    bool has_change_ownership;
    int32_t change_ownership;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPageAllocExtfragFtraceEvent;

typedef struct _perfetto_protos_MmPageAllocZoneLockedFtraceEvent {
    bool has_migratetype;
    int32_t migratetype;
    bool has_order;
    uint32_t order;
    bool has_page;
    uint64_t page;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPageAllocZoneLockedFtraceEvent;

typedef struct _perfetto_protos_MmPageFreeFtraceEvent {
    bool has_order;
    uint32_t order;
    bool has_page;
    uint64_t page;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPageFreeFtraceEvent;

typedef struct _perfetto_protos_MmPageFreeBatchedFtraceEvent {
    bool has_cold;
    int32_t cold;
    bool has_page;
    uint64_t page;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPageFreeBatchedFtraceEvent;

typedef struct _perfetto_protos_MmPagePcpuDrainFtraceEvent {
    bool has_migratetype;
    int32_t migratetype;
    bool has_order;
    uint32_t order;
    bool has_page;
    uint64_t page;
    bool has_pfn;
    uint64_t pfn;
} perfetto_protos_MmPagePcpuDrainFtraceEvent;

typedef struct _perfetto_protos_RssStatFtraceEvent {
    bool has_member;
    int32_t member;
    bool has_size;
    int64_t size;
    bool has_curr;
    uint32_t curr;
    bool has_mm_id;
    uint32_t mm_id;
} perfetto_protos_RssStatFtraceEvent;

typedef struct _perfetto_protos_IonHeapShrinkFtraceEvent {
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_total_allocated;
    int64_t total_allocated;
} perfetto_protos_IonHeapShrinkFtraceEvent;

typedef struct _perfetto_protos_IonHeapGrowFtraceEvent {
    pb_callback_t heap_name;
    bool has_len;
    uint64_t len;
    bool has_total_allocated;
    int64_t total_allocated;
} perfetto_protos_IonHeapGrowFtraceEvent;

typedef struct _perfetto_protos_IonBufferCreateFtraceEvent {
    bool has_addr;
    uint64_t addr;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonBufferCreateFtraceEvent;

typedef struct _perfetto_protos_IonBufferDestroyFtraceEvent {
    bool has_addr;
    uint64_t addr;
    bool has_len;
    uint64_t len;
} perfetto_protos_IonBufferDestroyFtraceEvent;

typedef struct _perfetto_protos_KvmAccessFaultFtraceEvent {
    bool has_ipa;
    uint64_t ipa;
} perfetto_protos_KvmAccessFaultFtraceEvent;

typedef struct _perfetto_protos_KvmAckIrqFtraceEvent {
    bool has_irqchip;
    uint32_t irqchip;
    bool has_pin;
    uint32_t pin;
} perfetto_protos_KvmAckIrqFtraceEvent;

typedef struct _perfetto_protos_KvmAgeHvaFtraceEvent {
    bool has_end;
    uint64_t end;
    bool has_start;
    uint64_t start;
} perfetto_protos_KvmAgeHvaFtraceEvent;

typedef struct _perfetto_protos_KvmAgePageFtraceEvent {
    bool has_gfn;
    uint64_t gfn;
    bool has_hva;
    uint64_t hva;
    bool has_level;
    uint32_t level;
    bool has_referenced;
    uint32_t referenced;
} perfetto_protos_KvmAgePageFtraceEvent;

typedef struct _perfetto_protos_KvmArmClearDebugFtraceEvent {
    bool has_guest_debug;
    uint32_t guest_debug;
} perfetto_protos_KvmArmClearDebugFtraceEvent;

typedef struct _perfetto_protos_KvmArmSetDreg32FtraceEvent {
    pb_callback_t name;
    bool has_value;
    uint32_t value;
} perfetto_protos_KvmArmSetDreg32FtraceEvent;

typedef struct _perfetto_protos_KvmArmSetRegsetFtraceEvent {
    bool has_len;
    int32_t len;
    pb_callback_t name;
} perfetto_protos_KvmArmSetRegsetFtraceEvent;

typedef struct _perfetto_protos_KvmArmSetupDebugFtraceEvent {
    bool has_guest_debug;
    uint32_t guest_debug;
    bool has_vcpu;
    uint64_t vcpu;
} perfetto_protos_KvmArmSetupDebugFtraceEvent;

typedef struct _perfetto_protos_KvmEntryFtraceEvent {
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmEntryFtraceEvent;

typedef struct _perfetto_protos_KvmExitFtraceEvent {
    bool has_esr_ec;
    uint32_t esr_ec;
    bool has_ret;
    int32_t ret;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmExitFtraceEvent;

typedef struct _perfetto_protos_KvmFpuFtraceEvent {
    bool has_load;
    uint32_t load;
} perfetto_protos_KvmFpuFtraceEvent;

typedef struct _perfetto_protos_KvmGetTimerMapFtraceEvent {
    bool has_direct_ptimer;
    int32_t direct_ptimer;
    bool has_direct_vtimer;
    int32_t direct_vtimer;
    bool has_emul_ptimer;
    int32_t emul_ptimer;
    bool has_vcpu_id;
    uint64_t vcpu_id;
} perfetto_protos_KvmGetTimerMapFtraceEvent;

typedef struct _perfetto_protos_KvmGuestFaultFtraceEvent {
    bool has_hsr;
    uint64_t hsr;
    bool has_hxfar;
    uint64_t hxfar;
    bool has_ipa;
    uint64_t ipa;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmGuestFaultFtraceEvent;

typedef struct _perfetto_protos_KvmHandleSysRegFtraceEvent {
    bool has_hsr;
    uint64_t hsr;
} perfetto_protos_KvmHandleSysRegFtraceEvent;

typedef struct _perfetto_protos_KvmHvcArm64FtraceEvent {
    bool has_imm;
    uint64_t imm;
    bool has_r0;
    uint64_t r0;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmHvcArm64FtraceEvent;

typedef struct _perfetto_protos_KvmIrqLineFtraceEvent {
    bool has_irq_num;
    int32_t irq_num;
    bool has_level;
    int32_t level;
    bool has_type;
    uint32_t type;
    bool has_vcpu_idx;
    int32_t vcpu_idx;
} perfetto_protos_KvmIrqLineFtraceEvent;

typedef struct _perfetto_protos_KvmMmioFtraceEvent {
    bool has_gpa;
    uint64_t gpa;
    bool has_len;
    uint32_t len;
    bool has_type;
    uint32_t type;
    bool has_val;
    uint64_t val;
} perfetto_protos_KvmMmioFtraceEvent;

typedef struct _perfetto_protos_KvmMmioEmulateFtraceEvent {
    bool has_cpsr;
    uint64_t cpsr;
    bool has_instr;
    uint64_t instr;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmMmioEmulateFtraceEvent;

typedef struct _perfetto_protos_KvmSetGuestDebugFtraceEvent {
    bool has_guest_debug;
    uint32_t guest_debug;
    bool has_vcpu;
    uint64_t vcpu;
} perfetto_protos_KvmSetGuestDebugFtraceEvent;

typedef struct _perfetto_protos_KvmSetIrqFtraceEvent {
    bool has_gsi;
    uint32_t gsi;
    bool has_irq_source_id;
    int32_t irq_source_id;
    bool has_level;
    int32_t level;
} perfetto_protos_KvmSetIrqFtraceEvent;

typedef struct _perfetto_protos_KvmSetSpteHvaFtraceEvent {
    bool has_hva;
    uint64_t hva;
} perfetto_protos_KvmSetSpteHvaFtraceEvent;

typedef struct _perfetto_protos_KvmSetWayFlushFtraceEvent {
    bool has_cache;
    uint32_t cache;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmSetWayFlushFtraceEvent;

typedef struct _perfetto_protos_KvmSysAccessFtraceEvent {
    bool has_CRm;
    uint32_t CRm;
    bool has_CRn;
    uint32_t CRn;
    bool has_Op0;
    uint32_t Op0;
    bool has_Op1;
    uint32_t Op1;
    bool has_Op2;
    uint32_t Op2;
    bool has_is_write;
    uint32_t is_write;
    pb_callback_t name;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmSysAccessFtraceEvent;

typedef struct _perfetto_protos_KvmTestAgeHvaFtraceEvent {
    bool has_hva;
    uint64_t hva;
} perfetto_protos_KvmTestAgeHvaFtraceEvent;

typedef struct _perfetto_protos_KvmTimerEmulateFtraceEvent {
    bool has_should_fire;
    uint32_t should_fire;
    bool has_timer_idx;
    int32_t timer_idx;
} perfetto_protos_KvmTimerEmulateFtraceEvent;

typedef struct _perfetto_protos_KvmTimerHrtimerExpireFtraceEvent {
    bool has_timer_idx;
    int32_t timer_idx;
} perfetto_protos_KvmTimerHrtimerExpireFtraceEvent;

typedef struct _perfetto_protos_KvmTimerRestoreStateFtraceEvent {
    bool has_ctl;
    uint64_t ctl;
    bool has_cval;
    uint64_t cval;
    bool has_timer_idx;
    int32_t timer_idx;
} perfetto_protos_KvmTimerRestoreStateFtraceEvent;

typedef struct _perfetto_protos_KvmTimerSaveStateFtraceEvent {
    bool has_ctl;
    uint64_t ctl;
    bool has_cval;
    uint64_t cval;
    bool has_timer_idx;
    int32_t timer_idx;
} perfetto_protos_KvmTimerSaveStateFtraceEvent;

typedef struct _perfetto_protos_KvmTimerUpdateIrqFtraceEvent {
    bool has_irq;
    uint32_t irq;
    bool has_level;
    int32_t level;
    bool has_vcpu_id;
    uint64_t vcpu_id;
} perfetto_protos_KvmTimerUpdateIrqFtraceEvent;

typedef struct _perfetto_protos_KvmToggleCacheFtraceEvent {
    bool has_now;
    uint32_t now;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
    bool has_was;
    uint32_t was;
} perfetto_protos_KvmToggleCacheFtraceEvent;

typedef struct _perfetto_protos_KvmUnmapHvaRangeFtraceEvent {
    bool has_end;
    uint64_t end;
    bool has_start;
    uint64_t start;
} perfetto_protos_KvmUnmapHvaRangeFtraceEvent;

typedef struct _perfetto_protos_KvmUserspaceExitFtraceEvent {
    bool has_reason;
    uint32_t reason;
} perfetto_protos_KvmUserspaceExitFtraceEvent;

typedef struct _perfetto_protos_KvmVcpuWakeupFtraceEvent {
    bool has_ns;
    uint64_t ns;
    bool has_valid;
    uint32_t valid;
    bool has_waited;
    uint32_t waited;
} perfetto_protos_KvmVcpuWakeupFtraceEvent;

typedef struct _perfetto_protos_KvmWfxArm64FtraceEvent {
    bool has_is_wfe;
    uint32_t is_wfe;
    bool has_vcpu_pc;
    uint64_t vcpu_pc;
} perfetto_protos_KvmWfxArm64FtraceEvent;

typedef struct _perfetto_protos_TrapRegFtraceEvent {
    pb_callback_t fn;
    bool has_is_write;
    uint32_t is_write;
    bool has_reg;
    int32_t reg;
    bool has_write_value;
    uint64_t write_value;
} perfetto_protos_TrapRegFtraceEvent;

typedef struct _perfetto_protos_VgicUpdateIrqPendingFtraceEvent {
    bool has_irq;
    uint32_t irq;
    bool has_level;
    uint32_t level;
    bool has_vcpu_id;
    uint64_t vcpu_id;
} perfetto_protos_VgicUpdateIrqPendingFtraceEvent;

typedef struct _perfetto_protos_LowmemoryKillFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_pagecache_size;
    int64_t pagecache_size;
    bool has_pagecache_limit;
    int64_t pagecache_limit;
    bool has_free;
    int64_t free;
} perfetto_protos_LowmemoryKillFtraceEvent;

typedef struct _perfetto_protos_LwisTracingMarkWriteFtraceEvent {
    pb_callback_t lwis_name;
    bool has_type;
    uint32_t type;
    bool has_pid;
    int32_t pid;
    pb_callback_t func_name;
    bool has_value;
    int64_t value;
} perfetto_protos_LwisTracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_MaliTracingMarkWriteFtraceEvent {
    pb_callback_t name;
    bool has_pid;
    int32_t pid;
    bool has_type;
    uint32_t type;
    bool has_value;
    int32_t value;
} perfetto_protos_MaliTracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
} perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
} perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent {
    bool has_id;
    uint32_t id;
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
} perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent {
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_id;
    uint32_t id;
} perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent {
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_id;
    uint32_t id;
} perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent;

typedef struct _perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent {
    bool has_info_val1;
    uint64_t info_val1;
    bool has_info_val2;
    uint64_t info_val2;
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_id;
    uint32_t id;
} perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent;

typedef struct _perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUOFFFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUOFFFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent;

typedef struct _perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent {
    bool has_kctx_tgid;
    int32_t kctx_tgid;
    bool has_kctx_id;
    uint32_t kctx_id;
    bool has_info_val;
    uint64_t info_val;
} perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent;

typedef struct _perfetto_protos_MaliGpuPowerStateFtraceEvent {
    bool has_change_ns;
    uint64_t change_ns;
    bool has_from_state;
    int32_t from_state;
    bool has_to_state;
    int32_t to_state;
} perfetto_protos_MaliGpuPowerStateFtraceEvent;

typedef struct _perfetto_protos_MdpCmdKickoffFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
    bool has_kickoff_cnt;
    int32_t kickoff_cnt;
} perfetto_protos_MdpCmdKickoffFtraceEvent;

typedef struct _perfetto_protos_MdpCommitFtraceEvent {
    bool has_num;
    uint32_t num;
    bool has_play_cnt;
    uint32_t play_cnt;
    bool has_clk_rate;
    uint32_t clk_rate;
    bool has_bandwidth;
    uint64_t bandwidth;
} perfetto_protos_MdpCommitFtraceEvent;

typedef struct _perfetto_protos_MdpPerfSetOtFtraceEvent {
    bool has_pnum;
    uint32_t pnum;
    bool has_xin_id;
    uint32_t xin_id;
    bool has_rd_lim;
    uint32_t rd_lim;
    bool has_is_vbif_rt;
    uint32_t is_vbif_rt;
} perfetto_protos_MdpPerfSetOtFtraceEvent;

typedef struct _perfetto_protos_MdpSsppChangeFtraceEvent {
    bool has_num;
    uint32_t num;
    bool has_play_cnt;
    uint32_t play_cnt;
    bool has_mixer;
    uint32_t mixer;
    bool has_stage;
    uint32_t stage;
    bool has_flags;
    uint32_t flags;
    bool has_format;
    uint32_t format;
    bool has_img_w;
    uint32_t img_w;
    bool has_img_h;
    uint32_t img_h;
    bool has_src_x;
    uint32_t src_x;
    bool has_src_y;
    uint32_t src_y;
    bool has_src_w;
    uint32_t src_w;
    bool has_src_h;
    uint32_t src_h;
    bool has_dst_x;
    uint32_t dst_x;
    bool has_dst_y;
    uint32_t dst_y;
    bool has_dst_w;
    uint32_t dst_w;
    bool has_dst_h;
    uint32_t dst_h;
} perfetto_protos_MdpSsppChangeFtraceEvent;

typedef struct _perfetto_protos_TracingMarkWriteFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t trace_name;
    bool has_trace_begin;
    uint32_t trace_begin;
} perfetto_protos_TracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_MdpCmdPingpongDoneFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
    bool has_intf_num;
    uint32_t intf_num;
    bool has_pp_num;
    uint32_t pp_num;
    bool has_koff_cnt;
    int32_t koff_cnt;
} perfetto_protos_MdpCmdPingpongDoneFtraceEvent;

typedef struct _perfetto_protos_MdpCompareBwFtraceEvent {
    bool has_new_ab;
    uint64_t new_ab;
    bool has_new_ib;
    uint64_t new_ib;
    bool has_new_wb;
    uint64_t new_wb;
    bool has_old_ab;
    uint64_t old_ab;
    bool has_old_ib;
    uint64_t old_ib;
    bool has_old_wb;
    uint64_t old_wb;
    bool has_params_changed;
    uint32_t params_changed;
    bool has_update_bw;
    uint32_t update_bw;
} perfetto_protos_MdpCompareBwFtraceEvent;

typedef struct _perfetto_protos_MdpPerfSetPanicLutsFtraceEvent {
    bool has_pnum;
    uint32_t pnum;
    bool has_fmt;
    uint32_t fmt;
    bool has_mode;
    uint32_t mode;
    bool has_panic_lut;
    uint32_t panic_lut;
    bool has_robust_lut;
    uint32_t robust_lut;
} perfetto_protos_MdpPerfSetPanicLutsFtraceEvent;

typedef struct _perfetto_protos_MdpSsppSetFtraceEvent {
    bool has_num;
    uint32_t num;
    bool has_play_cnt;
    uint32_t play_cnt;
    bool has_mixer;
    uint32_t mixer;
    bool has_stage;
    uint32_t stage;
    bool has_flags;
    uint32_t flags;
    bool has_format;
    uint32_t format;
    bool has_img_w;
    uint32_t img_w;
    bool has_img_h;
    uint32_t img_h;
    bool has_src_x;
    uint32_t src_x;
    bool has_src_y;
    uint32_t src_y;
    bool has_src_w;
    uint32_t src_w;
    bool has_src_h;
    uint32_t src_h;
    bool has_dst_x;
    uint32_t dst_x;
    bool has_dst_y;
    uint32_t dst_y;
    bool has_dst_w;
    uint32_t dst_w;
    bool has_dst_h;
    uint32_t dst_h;
} perfetto_protos_MdpSsppSetFtraceEvent;

typedef struct _perfetto_protos_MdpCmdReadptrDoneFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
    bool has_koff_cnt;
    int32_t koff_cnt;
} perfetto_protos_MdpCmdReadptrDoneFtraceEvent;

typedef struct _perfetto_protos_MdpMisrCrcFtraceEvent {
    bool has_block_id;
    uint32_t block_id;
    bool has_vsync_cnt;
    uint32_t vsync_cnt;
    bool has_crc;
    uint32_t crc;
} perfetto_protos_MdpMisrCrcFtraceEvent;

typedef struct _perfetto_protos_MdpPerfSetQosLutsFtraceEvent {
    bool has_pnum;
    uint32_t pnum;
    bool has_fmt;
    uint32_t fmt;
    bool has_intf;
    uint32_t intf;
    bool has_rot;
    uint32_t rot;
    bool has_fl;
    uint32_t fl;
    bool has_lut;
    uint32_t lut;
    bool has_linear;
    uint32_t linear;
} perfetto_protos_MdpPerfSetQosLutsFtraceEvent;

typedef struct _perfetto_protos_MdpTraceCounterFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t counter_name;
    bool has_value;
    int32_t value;
} perfetto_protos_MdpTraceCounterFtraceEvent;

typedef struct _perfetto_protos_MdpCmdReleaseBwFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
} perfetto_protos_MdpCmdReleaseBwFtraceEvent;

typedef struct _perfetto_protos_MdpMixerUpdateFtraceEvent {
    bool has_mixer_num;
    uint32_t mixer_num;
} perfetto_protos_MdpMixerUpdateFtraceEvent;

typedef struct _perfetto_protos_MdpPerfSetWmLevelsFtraceEvent {
    bool has_pnum;
    uint32_t pnum;
    bool has_use_space;
    uint32_t use_space;
    bool has_priority_bytes;
    uint32_t priority_bytes;
    bool has_wm0;
    uint32_t wm0;
    bool has_wm1;
    uint32_t wm1;
    bool has_wm2;
    uint32_t wm2;
    bool has_mb_cnt;
    uint32_t mb_cnt;
    bool has_mb_size;
    uint32_t mb_size;
} perfetto_protos_MdpPerfSetWmLevelsFtraceEvent;

typedef struct _perfetto_protos_MdpVideoUnderrunDoneFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
    bool has_underrun_cnt;
    uint32_t underrun_cnt;
} perfetto_protos_MdpVideoUnderrunDoneFtraceEvent;

typedef struct _perfetto_protos_MdpCmdWaitPingpongFtraceEvent {
    bool has_ctl_num;
    uint32_t ctl_num;
    bool has_kickoff_cnt;
    int32_t kickoff_cnt;
} perfetto_protos_MdpCmdWaitPingpongFtraceEvent;

typedef struct _perfetto_protos_MdpPerfPrefillCalcFtraceEvent {
    bool has_pnum;
    uint32_t pnum;
    bool has_latency_buf;
    uint32_t latency_buf;
    bool has_ot;
    uint32_t ot;
    bool has_y_buf;
    uint32_t y_buf;
    bool has_y_scaler;
    uint32_t y_scaler;
    bool has_pp_lines;
    uint32_t pp_lines;
    bool has_pp_bytes;
    uint32_t pp_bytes;
    bool has_post_sc;
    uint32_t post_sc;
    bool has_fbc_bytes;
    uint32_t fbc_bytes;
    bool has_prefill_bytes;
    uint32_t prefill_bytes;
} perfetto_protos_MdpPerfPrefillCalcFtraceEvent;

typedef struct _perfetto_protos_MdpPerfUpdateBusFtraceEvent {
    bool has_client;
    int32_t client;
    bool has_ab_quota;
    uint64_t ab_quota;
    bool has_ib_quota;
    uint64_t ib_quota;
} perfetto_protos_MdpPerfUpdateBusFtraceEvent;

typedef struct _perfetto_protos_RotatorBwAoAsContextFtraceEvent {
    bool has_state;
    uint32_t state;
} perfetto_protos_RotatorBwAoAsContextFtraceEvent;

typedef struct _perfetto_protos_MmEventRecordFtraceEvent {
    bool has_avg_lat;
    uint32_t avg_lat;
    bool has_count;
    uint32_t count;
    bool has_max_lat;
    uint32_t max_lat;
    bool has_type;
    uint32_t type;
} perfetto_protos_MmEventRecordFtraceEvent;

typedef struct _perfetto_protos_NetifReceiveSkbFtraceEvent {
    bool has_len;
    uint32_t len;
    pb_callback_t name;
    bool has_skbaddr;
    uint64_t skbaddr;
} perfetto_protos_NetifReceiveSkbFtraceEvent;

typedef struct _perfetto_protos_NetDevXmitFtraceEvent {
    bool has_len;
    uint32_t len;
    pb_callback_t name;
    bool has_rc;
    int32_t rc;
    bool has_skbaddr;
    uint64_t skbaddr;
} perfetto_protos_NetDevXmitFtraceEvent;

typedef struct _perfetto_protos_NapiGroReceiveEntryFtraceEvent {
    bool has_data_len;
    uint32_t data_len;
    bool has_gso_size;
    uint32_t gso_size;
    bool has_gso_type;
    uint32_t gso_type;
    bool has_hash;
    uint32_t hash;
    bool has_ip_summed;
    uint32_t ip_summed;
    bool has_l4_hash;
    uint32_t l4_hash;
    bool has_len;
    uint32_t len;
    bool has_mac_header;
    int32_t mac_header;
    bool has_mac_header_valid;
    uint32_t mac_header_valid;
    pb_callback_t name;
    bool has_napi_id;
    uint32_t napi_id;
    bool has_nr_frags;
    uint32_t nr_frags;
    bool has_protocol;
    uint32_t protocol;
    bool has_queue_mapping;
    uint32_t queue_mapping;
    bool has_skbaddr;
    uint64_t skbaddr;
    bool has_truesize;
    uint32_t truesize;
    bool has_vlan_proto;
    uint32_t vlan_proto;
    bool has_vlan_tagged;
    uint32_t vlan_tagged;
    bool has_vlan_tci;
    uint32_t vlan_tci;
} perfetto_protos_NapiGroReceiveEntryFtraceEvent;

typedef struct _perfetto_protos_NapiGroReceiveExitFtraceEvent {
    bool has_ret;
    int32_t ret;
} perfetto_protos_NapiGroReceiveExitFtraceEvent;

typedef struct _perfetto_protos_OomScoreAdjUpdateFtraceEvent {
    pb_callback_t comm;
    bool has_oom_score_adj;
    int32_t oom_score_adj;
    bool has_pid;
    int32_t pid;
} perfetto_protos_OomScoreAdjUpdateFtraceEvent;

typedef struct _perfetto_protos_MarkVictimFtraceEvent {
    bool has_pid;
    int32_t pid;
} perfetto_protos_MarkVictimFtraceEvent;

typedef struct _perfetto_protos_DsiCmdFifoStatusFtraceEvent {
    bool has_header;
    uint32_t header;
    bool has_payload;
    uint32_t payload;
} perfetto_protos_DsiCmdFifoStatusFtraceEvent;

typedef struct _perfetto_protos_DsiRxFtraceEvent {
    bool has_cmd;
    uint32_t cmd;
    bool has_rx_buf;
    uint32_t rx_buf;
} perfetto_protos_DsiRxFtraceEvent;

typedef struct _perfetto_protos_DsiTxFtraceEvent {
    bool has_last;
    uint32_t last;
    bool has_tx_buf;
    uint32_t tx_buf;
    bool has_type;
    uint32_t type;
} perfetto_protos_DsiTxFtraceEvent;

typedef struct _perfetto_protos_PanelWriteGenericFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t trace_name;
    bool has_trace_begin;
    uint32_t trace_begin;
    pb_callback_t name;
    bool has_type;
    uint32_t type;
    bool has_value;
    int32_t value;
} perfetto_protos_PanelWriteGenericFtraceEvent;

typedef struct _perfetto_protos_SchedSwitchWithCtrsFtraceEvent {
    bool has_old_pid;
    int32_t old_pid;
    bool has_new_pid;
    int32_t new_pid;
    bool has_cctr;
    uint64_t cctr;
    bool has_ctr0;
    uint64_t ctr0;
    bool has_ctr1;
    uint64_t ctr1;
    bool has_ctr2;
    uint64_t ctr2;
    bool has_ctr3;
    uint64_t ctr3;
    bool has_lctr0;
    uint32_t lctr0;
    bool has_lctr1;
    uint32_t lctr1;
    bool has_ctr4;
    uint64_t ctr4;
    bool has_ctr5;
    uint64_t ctr5;
    pb_callback_t prev_comm;
    bool has_prev_pid;
    int32_t prev_pid;
    bool has_cyc;
    uint32_t cyc;
    bool has_inst;
    uint32_t inst;
    bool has_stallbm;
    uint32_t stallbm;
    bool has_l3dm;
    uint32_t l3dm;
    bool has_next_pid;
    int32_t next_pid;
    pb_callback_t next_comm;
    bool has_prev_state;
    int64_t prev_state;
    bool has_amu0;
    uint64_t amu0;
    bool has_amu1;
    uint64_t amu1;
    bool has_amu2;
    uint64_t amu2;
} perfetto_protos_SchedSwitchWithCtrsFtraceEvent;

typedef struct _perfetto_protos_PixelMmKswapdWakeFtraceEvent {
    bool has_whatever;
    int32_t whatever;
} perfetto_protos_PixelMmKswapdWakeFtraceEvent;

typedef struct _perfetto_protos_PixelMmKswapdDoneFtraceEvent {
    bool has_delta_nr_scanned;
    uint64_t delta_nr_scanned;
    bool has_delta_nr_reclaimed;
    uint64_t delta_nr_reclaimed;
} perfetto_protos_PixelMmKswapdDoneFtraceEvent;

typedef struct _perfetto_protos_CpuFrequencyFtraceEvent {
    bool has_state;
    uint32_t state;
    bool has_cpu_id;
    uint32_t cpu_id;
} perfetto_protos_CpuFrequencyFtraceEvent;

typedef struct _perfetto_protos_CpuFrequencyLimitsFtraceEvent {
    bool has_min_freq;
    uint32_t min_freq;
    bool has_max_freq;
    uint32_t max_freq;
    bool has_cpu_id;
    uint32_t cpu_id;
} perfetto_protos_CpuFrequencyLimitsFtraceEvent;

typedef struct _perfetto_protos_CpuIdleFtraceEvent {
    bool has_state;
    uint32_t state;
    bool has_cpu_id;
    uint32_t cpu_id;
} perfetto_protos_CpuIdleFtraceEvent;

typedef struct _perfetto_protos_ClockEnableFtraceEvent {
    pb_callback_t name;
    bool has_state;
    uint64_t state;
    bool has_cpu_id;
    uint64_t cpu_id;
} perfetto_protos_ClockEnableFtraceEvent;

typedef struct _perfetto_protos_ClockDisableFtraceEvent {
    pb_callback_t name;
    bool has_state;
    uint64_t state;
    bool has_cpu_id;
    uint64_t cpu_id;
} perfetto_protos_ClockDisableFtraceEvent;

typedef struct _perfetto_protos_ClockSetRateFtraceEvent {
    pb_callback_t name;
    bool has_state;
    uint64_t state;
    bool has_cpu_id;
    uint64_t cpu_id;
} perfetto_protos_ClockSetRateFtraceEvent;

typedef struct _perfetto_protos_SuspendResumeFtraceEvent {
    pb_callback_t action;
    bool has_val;
    int32_t val;
    bool has_start;
    uint32_t start;
} perfetto_protos_SuspendResumeFtraceEvent;

typedef struct _perfetto_protos_GpuFrequencyFtraceEvent {
    bool has_gpu_id;
    uint32_t gpu_id;
    bool has_state;
    uint32_t state;
} perfetto_protos_GpuFrequencyFtraceEvent;

typedef struct _perfetto_protos_WakeupSourceActivateFtraceEvent {
    pb_callback_t name;
    bool has_state;
    uint64_t state;
} perfetto_protos_WakeupSourceActivateFtraceEvent;

typedef struct _perfetto_protos_WakeupSourceDeactivateFtraceEvent {
    pb_callback_t name;
    bool has_state;
    uint64_t state;
} perfetto_protos_WakeupSourceDeactivateFtraceEvent;

typedef struct _perfetto_protos_GpuWorkPeriodFtraceEvent {
    bool has_gpu_id;
    uint32_t gpu_id;
    bool has_uid;
    uint32_t uid;
    bool has_start_time_ns;
    uint64_t start_time_ns;
    bool has_end_time_ns;
    uint64_t end_time_ns;
    bool has_total_active_duration_ns;
    uint64_t total_active_duration_ns;
} perfetto_protos_GpuWorkPeriodFtraceEvent;

typedef struct _perfetto_protos_DevicePmCallbackStartFtraceEvent {
    pb_callback_t device;
    pb_callback_t driver;
    pb_callback_t parent;
    pb_callback_t pm_ops;
    bool has_event;
    int32_t event;
} perfetto_protos_DevicePmCallbackStartFtraceEvent;

typedef struct _perfetto_protos_DevicePmCallbackEndFtraceEvent {
    pb_callback_t device;
    pb_callback_t driver;
    bool has_error;
    int32_t error;
} perfetto_protos_DevicePmCallbackEndFtraceEvent;

typedef struct _perfetto_protos_ConsoleFtraceEvent {
    pb_callback_t msg;
} perfetto_protos_ConsoleFtraceEvent;

typedef struct _perfetto_protos_SysEnterFtraceEvent {
    bool has_id;
    int64_t id;
    pb_callback_t args;
} perfetto_protos_SysEnterFtraceEvent;

typedef struct _perfetto_protos_SysExitFtraceEvent {
    bool has_id;
    int64_t id;
    bool has_ret;
    int64_t ret;
} perfetto_protos_SysExitFtraceEvent;

typedef struct _perfetto_protos_RegulatorDisableFtraceEvent {
    pb_callback_t name;
} perfetto_protos_RegulatorDisableFtraceEvent;

typedef struct _perfetto_protos_RegulatorDisableCompleteFtraceEvent {
    pb_callback_t name;
} perfetto_protos_RegulatorDisableCompleteFtraceEvent;

typedef struct _perfetto_protos_RegulatorEnableFtraceEvent {
    pb_callback_t name;
} perfetto_protos_RegulatorEnableFtraceEvent;

typedef struct _perfetto_protos_RegulatorEnableCompleteFtraceEvent {
    pb_callback_t name;
} perfetto_protos_RegulatorEnableCompleteFtraceEvent;

typedef struct _perfetto_protos_RegulatorEnableDelayFtraceEvent {
    pb_callback_t name;
} perfetto_protos_RegulatorEnableDelayFtraceEvent;

typedef struct _perfetto_protos_RegulatorSetVoltageFtraceEvent {
    pb_callback_t name;
    bool has_min;
    int32_t min;
    bool has_max;
    int32_t max;
} perfetto_protos_RegulatorSetVoltageFtraceEvent;

typedef struct _perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent {
    pb_callback_t name;
    bool has_val;
    uint32_t val;
} perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent;

typedef struct _perfetto_protos_RpmStatusFtraceEvent {
    pb_callback_t name;
    bool has_status;
    int32_t status;
} perfetto_protos_RpmStatusFtraceEvent;

typedef struct _perfetto_protos_SamsungTracingMarkWriteFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t trace_name;
    bool has_trace_begin;
    uint32_t trace_begin;
    bool has_trace_type;
    uint32_t trace_type;
    bool has_value;
    int32_t value;
} perfetto_protos_SamsungTracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_SchedSwitchFtraceEvent {
    pb_callback_t prev_comm;
    bool has_prev_pid;
    int32_t prev_pid;
    bool has_prev_prio;
    int32_t prev_prio;
    bool has_prev_state;
    int64_t prev_state;
    pb_callback_t next_comm;
    bool has_next_pid;
    int32_t next_pid;
    bool has_next_prio;
    int32_t next_prio;
} perfetto_protos_SchedSwitchFtraceEvent;

typedef struct _perfetto_protos_SchedWakeupFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
    bool has_success;
    int32_t success;
    bool has_target_cpu;
    int32_t target_cpu;
} perfetto_protos_SchedWakeupFtraceEvent;

typedef struct _perfetto_protos_SchedBlockedReasonFtraceEvent {
    bool has_pid;
    int32_t pid;
    bool has_caller;
    uint64_t caller;
    bool has_io_wait;
    uint32_t io_wait;
} perfetto_protos_SchedBlockedReasonFtraceEvent;

typedef struct _perfetto_protos_SchedCpuHotplugFtraceEvent {
    bool has_affected_cpu;
    int32_t affected_cpu;
    bool has_error;
    int32_t error;
    bool has_status;
    int32_t status;
} perfetto_protos_SchedCpuHotplugFtraceEvent;

typedef struct _perfetto_protos_SchedWakingFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
    bool has_success;
    int32_t success;
    bool has_target_cpu;
    int32_t target_cpu;
} perfetto_protos_SchedWakingFtraceEvent;

typedef struct _perfetto_protos_SchedWakeupNewFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
    bool has_success;
    int32_t success;
    bool has_target_cpu;
    int32_t target_cpu;
} perfetto_protos_SchedWakeupNewFtraceEvent;

typedef struct _perfetto_protos_SchedProcessExecFtraceEvent {
    pb_callback_t filename;
    bool has_pid;
    int32_t pid;
    bool has_old_pid;
    int32_t old_pid;
} perfetto_protos_SchedProcessExecFtraceEvent;

typedef struct _perfetto_protos_SchedProcessExitFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_tgid;
    int32_t tgid;
    bool has_prio;
    int32_t prio;
} perfetto_protos_SchedProcessExitFtraceEvent;

typedef struct _perfetto_protos_SchedProcessForkFtraceEvent {
    pb_callback_t parent_comm;
    bool has_parent_pid;
    int32_t parent_pid;
    pb_callback_t child_comm;
    bool has_child_pid;
    int32_t child_pid;
} perfetto_protos_SchedProcessForkFtraceEvent;

typedef struct _perfetto_protos_SchedProcessFreeFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
} perfetto_protos_SchedProcessFreeFtraceEvent;

typedef struct _perfetto_protos_SchedProcessHangFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
} perfetto_protos_SchedProcessHangFtraceEvent;

typedef struct _perfetto_protos_SchedProcessWaitFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
} perfetto_protos_SchedProcessWaitFtraceEvent;

typedef struct _perfetto_protos_SchedPiSetprioFtraceEvent {
    pb_callback_t comm;
    bool has_newprio;
    int32_t newprio;
    bool has_oldprio;
    int32_t oldprio;
    bool has_pid;
    int32_t pid;
} perfetto_protos_SchedPiSetprioFtraceEvent;

typedef struct _perfetto_protos_SchedCpuUtilCfsFtraceEvent {
    bool has_active;
    int32_t active;
    bool has_capacity;
    uint64_t capacity;
    bool has_capacity_orig;
    uint64_t capacity_orig;
    bool has_cpu;
    uint32_t cpu;
    bool has_cpu_importance;
    uint64_t cpu_importance;
    bool has_cpu_util;
    uint64_t cpu_util;
    bool has_exit_lat;
    uint32_t exit_lat;
    bool has_group_capacity;
    uint64_t group_capacity;
    bool has_grp_overutilized;
    uint32_t grp_overutilized;
    bool has_idle_cpu;
    uint32_t idle_cpu;
    bool has_nr_running;
    uint32_t nr_running;
    bool has_spare_cap;
    int64_t spare_cap;
    bool has_task_fits;
    uint32_t task_fits;
    bool has_wake_group_util;
    uint64_t wake_group_util;
    bool has_wake_util;
    uint64_t wake_util;
} perfetto_protos_SchedCpuUtilCfsFtraceEvent;

typedef struct _perfetto_protos_SchedMigrateTaskFtraceEvent {
    pb_callback_t comm;
    bool has_pid;
    int32_t pid;
    bool has_prio;
    int32_t prio;
    bool has_orig_cpu;
    int32_t orig_cpu;
    bool has_dest_cpu;
    int32_t dest_cpu;
    bool has_running;
    int32_t running;
    bool has_load;
    uint32_t load;
} perfetto_protos_SchedMigrateTaskFtraceEvent;

typedef struct _perfetto_protos_SchedWakeupTaskAttrFtraceEvent {
    bool has_pid;
    int32_t pid;
    bool has_cpu_affinity;
    uint64_t cpu_affinity;
    bool has_task_util;
    uint64_t task_util;
    bool has_uclamp_min;
    uint64_t uclamp_min;
    bool has_vruntime;
    uint64_t vruntime;
} perfetto_protos_SchedWakeupTaskAttrFtraceEvent;

typedef struct _perfetto_protos_ScmCallStartFtraceEvent {
    bool has_arginfo;
    uint32_t arginfo;
    bool has_x0;
    uint64_t x0;
    bool has_x5;
    uint64_t x5;
} perfetto_protos_ScmCallStartFtraceEvent;

typedef struct _perfetto_protos_ScmCallEndFtraceEvent {
    char dummy_field;
} perfetto_protos_ScmCallEndFtraceEvent;

typedef struct _perfetto_protos_SdeTracingMarkWriteFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t trace_name;
    bool has_trace_type;
    uint32_t trace_type;
    bool has_value;
    int32_t value;
    bool has_trace_begin;
    uint32_t trace_begin;
} perfetto_protos_SdeTracingMarkWriteFtraceEvent;

typedef struct _perfetto_protos_SdeSdeEvtlogFtraceEvent {
    pb_callback_t evtlog_tag;
    bool has_pid;
    int32_t pid;
    bool has_tag_id;
    uint32_t tag_id;
} perfetto_protos_SdeSdeEvtlogFtraceEvent;

typedef struct _perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent {
    bool has_bw_ctl_ebi;
    uint64_t bw_ctl_ebi;
    bool has_bw_ctl_llcc;
    uint64_t bw_ctl_llcc;
    bool has_bw_ctl_mnoc;
    uint64_t bw_ctl_mnoc;
    bool has_core_clk_rate;
    uint32_t core_clk_rate;
    bool has_crtc;
    uint32_t crtc;
    bool has_ib_ebi;
    uint64_t ib_ebi;
    bool has_ib_llcc;
    uint64_t ib_llcc;
    bool has_ib_mnoc;
    uint64_t ib_mnoc;
} perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent;

typedef struct _perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent {
    bool has_bw_ctl_ebi;
    uint64_t bw_ctl_ebi;
    bool has_bw_ctl_llcc;
    uint64_t bw_ctl_llcc;
    bool has_bw_ctl_mnoc;
    uint64_t bw_ctl_mnoc;
    bool has_core_clk_rate;
    uint32_t core_clk_rate;
    bool has_crtc;
    uint32_t crtc;
    bool has_params;
    int32_t params;
    bool has_per_pipe_ib_ebi;
    uint64_t per_pipe_ib_ebi;
    bool has_per_pipe_ib_llcc;
    uint64_t per_pipe_ib_llcc;
    bool has_per_pipe_ib_mnoc;
    uint64_t per_pipe_ib_mnoc;
    bool has_stop_req;
    uint32_t stop_req;
    bool has_update_bus;
    uint32_t update_bus;
    bool has_update_clk;
    uint32_t update_clk;
} perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent;

typedef struct _perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent {
    bool has_fl;
    uint32_t fl;
    bool has_fmt;
    uint32_t fmt;
    bool has_lut;
    uint64_t lut;
    bool has_lut_usage;
    uint32_t lut_usage;
    bool has_pnum;
    uint32_t pnum;
    bool has_rt;
    uint32_t rt;
} perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent;

typedef struct _perfetto_protos_SdeSdePerfUpdateBusFtraceEvent {
    bool has_ab_quota;
    uint64_t ab_quota;
    bool has_bus_id;
    uint32_t bus_id;
    bool has_client;
    int32_t client;
    bool has_ib_quota;
    uint64_t ib_quota;
} perfetto_protos_SdeSdePerfUpdateBusFtraceEvent;

typedef struct _perfetto_protos_SignalDeliverFtraceEvent {
    bool has_code;
    int32_t code;
    bool has_sa_flags;
    uint64_t sa_flags;
    bool has_sig;
    int32_t sig;
} perfetto_protos_SignalDeliverFtraceEvent;

typedef struct _perfetto_protos_SignalGenerateFtraceEvent {
    bool has_code;
    int32_t code;
    pb_callback_t comm;
    bool has_group;
    int32_t group;
    bool has_pid;
    int32_t pid;
    bool has_result;
    int32_t result;
    bool has_sig;
    int32_t sig;
} perfetto_protos_SignalGenerateFtraceEvent;

typedef struct _perfetto_protos_KfreeSkbFtraceEvent {
    bool has_location;
    uint64_t location;
    bool has_protocol;
    uint32_t protocol;
    bool has_skbaddr;
    uint64_t skbaddr;
} perfetto_protos_KfreeSkbFtraceEvent;

typedef struct _perfetto_protos_InetSockSetStateFtraceEvent {
    bool has_daddr;
    uint32_t daddr;
    bool has_dport;
    uint32_t dport;
    bool has_family;
    uint32_t family;
    bool has_newstate;
    int32_t newstate;
    bool has_oldstate;
    int32_t oldstate;
    bool has_protocol;
    uint32_t protocol;
    bool has_saddr;
    uint32_t saddr;
    bool has_skaddr;
    uint64_t skaddr;
    bool has_sport;
    uint32_t sport;
} perfetto_protos_InetSockSetStateFtraceEvent;

typedef struct _perfetto_protos_SyncPtFtraceEvent {
    pb_callback_t timeline;
    pb_callback_t value;
} perfetto_protos_SyncPtFtraceEvent;

typedef struct _perfetto_protos_SyncTimelineFtraceEvent {
    pb_callback_t name;
    pb_callback_t value;
} perfetto_protos_SyncTimelineFtraceEvent;

typedef struct _perfetto_protos_SyncWaitFtraceEvent {
    pb_callback_t name;
    bool has_status;
    int32_t status;
    bool has_begin;
    uint32_t begin;
} perfetto_protos_SyncWaitFtraceEvent;

typedef struct _perfetto_protos_RssStatThrottledFtraceEvent {
    bool has_curr;
    uint32_t curr;
    bool has_member;
    int32_t member;
    bool has_mm_id;
    uint32_t mm_id;
    bool has_size;
    int64_t size;
} perfetto_protos_RssStatThrottledFtraceEvent;

typedef struct _perfetto_protos_SuspendResumeMinimalFtraceEvent {
    bool has_start;
    uint32_t start;
} perfetto_protos_SuspendResumeMinimalFtraceEvent;

typedef struct _perfetto_protos_ZeroFtraceEvent {
    bool has_flag;
    int32_t flag;
    pb_callback_t name;
    bool has_pid;
    int32_t pid;
    bool has_value;
    int64_t value;
} perfetto_protos_ZeroFtraceEvent;

typedef struct _perfetto_protos_TaskNewtaskFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t comm;
    bool has_clone_flags;
    uint64_t clone_flags;
    bool has_oom_score_adj;
    int32_t oom_score_adj;
} perfetto_protos_TaskNewtaskFtraceEvent;

typedef struct _perfetto_protos_TaskRenameFtraceEvent {
    bool has_pid;
    int32_t pid;
    pb_callback_t oldcomm;
    pb_callback_t newcomm;
    bool has_oom_score_adj;
    int32_t oom_score_adj;
} perfetto_protos_TaskRenameFtraceEvent;

typedef struct _perfetto_protos_TcpRetransmitSkbFtraceEvent {
    bool has_daddr;
    uint32_t daddr;
    bool has_dport;
    uint32_t dport;
    bool has_saddr;
    uint32_t saddr;
    bool has_skaddr;
    uint64_t skaddr;
    bool has_skbaddr;
    uint64_t skbaddr;
    bool has_sport;
    uint32_t sport;
    bool has_state;
    int32_t state;
} perfetto_protos_TcpRetransmitSkbFtraceEvent;

typedef struct _perfetto_protos_ThermalTemperatureFtraceEvent {
    bool has_id;
    int32_t id;
    bool has_temp;
    int32_t temp;
    bool has_temp_prev;
    int32_t temp_prev;
    pb_callback_t thermal_zone;
} perfetto_protos_ThermalTemperatureFtraceEvent;

typedef struct _perfetto_protos_CdevUpdateFtraceEvent {
    bool has_target;
    uint64_t target;
    pb_callback_t type;
} perfetto_protos_CdevUpdateFtraceEvent;

typedef struct _perfetto_protos_ThermalExynosAcpmBulkFtraceEvent {
    bool has_tz_id;
    uint32_t tz_id;
    bool has_current_temp;
    uint32_t current_temp;
    bool has_ctrl_temp;
    uint32_t ctrl_temp;
    bool has_cdev_state;
    uint32_t cdev_state;
    bool has_pid_et_p;
    int32_t pid_et_p;
    bool has_pid_power_range;
    int32_t pid_power_range;
    bool has_pid_p;
    int32_t pid_p;
    bool has_pid_i;
    int32_t pid_i;
    bool has_k_p;
    int32_t k_p;
    bool has_k_i;
    int32_t k_i;
    bool has_timestamp;
    uint64_t timestamp;
} perfetto_protos_ThermalExynosAcpmBulkFtraceEvent;

typedef struct _perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent {
    bool has_tz_id;
    int32_t tz_id;
    bool has_current_temp;
    uint32_t current_temp;
    bool has_ctrl_temp;
    uint32_t ctrl_temp;
    bool has_cdev_state;
    uint32_t cdev_state;
    bool has_pid_et_p;
    int32_t pid_et_p;
    bool has_k_p;
    int32_t k_p;
    bool has_k_i;
    int32_t k_i;
} perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent;

typedef struct _perfetto_protos_TrustySmcFtraceEvent {
    bool has_r0;
    uint64_t r0;
    bool has_r1;
    uint64_t r1;
    bool has_r2;
    uint64_t r2;
    bool has_r3;
    uint64_t r3;
} perfetto_protos_TrustySmcFtraceEvent;

typedef struct _perfetto_protos_TrustySmcDoneFtraceEvent {
    bool has_ret;
    uint64_t ret;
} perfetto_protos_TrustySmcDoneFtraceEvent;

typedef struct _perfetto_protos_TrustyStdCall32FtraceEvent {
    bool has_r0;
    uint64_t r0;
    bool has_r1;
    uint64_t r1;
    bool has_r2;
    uint64_t r2;
    bool has_r3;
    uint64_t r3;
} perfetto_protos_TrustyStdCall32FtraceEvent;

typedef struct _perfetto_protos_TrustyStdCall32DoneFtraceEvent {
    bool has_ret;
    int64_t ret;
} perfetto_protos_TrustyStdCall32DoneFtraceEvent;

typedef struct _perfetto_protos_TrustyShareMemoryFtraceEvent {
    bool has_len;
    uint64_t len;
    bool has_lend;
    uint32_t lend;
    bool has_nents;
    uint32_t nents;
} perfetto_protos_TrustyShareMemoryFtraceEvent;

typedef struct _perfetto_protos_TrustyShareMemoryDoneFtraceEvent {
    bool has_handle;
    uint64_t handle;
    bool has_len;
    uint64_t len;
    bool has_lend;
    uint32_t lend;
    bool has_nents;
    uint32_t nents;
    bool has_ret;
    int32_t ret;
} perfetto_protos_TrustyShareMemoryDoneFtraceEvent;

typedef struct _perfetto_protos_TrustyReclaimMemoryFtraceEvent {
    bool has_id;
    uint64_t id;
} perfetto_protos_TrustyReclaimMemoryFtraceEvent;

typedef struct _perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent {
    bool has_id;
    uint64_t id;
    bool has_ret;
    int32_t ret;
} perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent;

typedef struct _perfetto_protos_TrustyIrqFtraceEvent {
    bool has_irq;
    int32_t irq;
} perfetto_protos_TrustyIrqFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcHandleEventFtraceEvent {
    bool has_chan;
    uint32_t chan;
    bool has_event_id;
    uint32_t event_id;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcHandleEventFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcConnectFtraceEvent {
    bool has_chan;
    uint32_t chan;
    pb_callback_t port;
    bool has_state;
    int32_t state;
} perfetto_protos_TrustyIpcConnectFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcConnectEndFtraceEvent {
    bool has_chan;
    uint32_t chan;
    bool has_err;
    int32_t err;
    bool has_state;
    int32_t state;
} perfetto_protos_TrustyIpcConnectEndFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcWriteFtraceEvent {
    bool has_buf_id;
    uint64_t buf_id;
    bool has_chan;
    uint32_t chan;
    bool has_kind_shm;
    int32_t kind_shm;
    bool has_len_or_err;
    int32_t len_or_err;
    bool has_shm_cnt;
    uint64_t shm_cnt;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcWriteFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcPollFtraceEvent {
    bool has_chan;
    uint32_t chan;
    bool has_poll_mask;
    uint32_t poll_mask;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcPollFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcReadFtraceEvent {
    bool has_chan;
    uint32_t chan;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcReadFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcReadEndFtraceEvent {
    bool has_buf_id;
    uint64_t buf_id;
    bool has_chan;
    uint32_t chan;
    bool has_len_or_err;
    int32_t len_or_err;
    bool has_shm_cnt;
    uint64_t shm_cnt;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcReadEndFtraceEvent;

typedef struct _perfetto_protos_TrustyIpcRxFtraceEvent {
    bool has_buf_id;
    uint64_t buf_id;
    bool has_chan;
    uint32_t chan;
    pb_callback_t srv_name;
} perfetto_protos_TrustyIpcRxFtraceEvent;

typedef struct _perfetto_protos_TrustyEnqueueNopFtraceEvent {
    bool has_arg1;
    uint32_t arg1;
    bool has_arg2;
    uint32_t arg2;
    bool has_arg3;
    uint32_t arg3;
} perfetto_protos_TrustyEnqueueNopFtraceEvent;

typedef struct _perfetto_protos_UfshcdCommandFtraceEvent {
    pb_callback_t dev_name;
    bool has_doorbell;
    uint32_t doorbell;
    bool has_intr;
    uint32_t intr;
    bool has_lba;
    uint64_t lba;
    bool has_opcode;
    uint32_t opcode;
    pb_callback_t str;
    bool has_tag;
    uint32_t tag;
    bool has_transfer_len;
    int32_t transfer_len;
    bool has_group_id;
    uint32_t group_id;
    bool has_str_t;
    uint32_t str_t;
} perfetto_protos_UfshcdCommandFtraceEvent;

typedef struct _perfetto_protos_UfshcdClkGatingFtraceEvent {
    pb_callback_t dev_name;
    bool has_state;
    int32_t state;
} perfetto_protos_UfshcdClkGatingFtraceEvent;

typedef struct _perfetto_protos_V4l2QbufFtraceEvent {
    bool has_bytesused;
    uint32_t bytesused;
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_index;
    uint32_t index;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
    bool has_type;
    uint32_t type;
} perfetto_protos_V4l2QbufFtraceEvent;

typedef struct _perfetto_protos_V4l2DqbufFtraceEvent {
    bool has_bytesused;
    uint32_t bytesused;
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_index;
    uint32_t index;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
    bool has_type;
    uint32_t type;
} perfetto_protos_V4l2DqbufFtraceEvent;

typedef struct _perfetto_protos_Vb2V4l2BufQueueFtraceEvent {
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
} perfetto_protos_Vb2V4l2BufQueueFtraceEvent;

typedef struct _perfetto_protos_Vb2V4l2BufDoneFtraceEvent {
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
} perfetto_protos_Vb2V4l2BufDoneFtraceEvent;

typedef struct _perfetto_protos_Vb2V4l2QbufFtraceEvent {
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
} perfetto_protos_Vb2V4l2QbufFtraceEvent;

typedef struct _perfetto_protos_Vb2V4l2DqbufFtraceEvent {
    bool has_field;
    uint32_t field;
    bool has_flags;
    uint32_t flags;
    bool has_minor;
    int32_t minor;
    bool has_sequence;
    uint32_t sequence;
    bool has_timecode_flags;
    uint32_t timecode_flags;
    bool has_timecode_frames;
    uint32_t timecode_frames;
    bool has_timecode_hours;
    uint32_t timecode_hours;
    bool has_timecode_minutes;
    uint32_t timecode_minutes;
    bool has_timecode_seconds;
    uint32_t timecode_seconds;
    bool has_timecode_type;
    uint32_t timecode_type;
    bool has_timecode_userbits0;
    uint32_t timecode_userbits0;
    bool has_timecode_userbits1;
    uint32_t timecode_userbits1;
    bool has_timecode_userbits2;
    uint32_t timecode_userbits2;
    bool has_timecode_userbits3;
    uint32_t timecode_userbits3;
    bool has_timestamp;
    int64_t timestamp;
} perfetto_protos_Vb2V4l2DqbufFtraceEvent;

typedef struct _perfetto_protos_VirtioGpuCmdQueueFtraceEvent {
    bool has_ctx_id;
    uint32_t ctx_id;
    bool has_dev;
    int32_t dev;
    bool has_fence_id;
    uint64_t fence_id;
    bool has_flags;
    uint32_t flags;
    pb_callback_t name;
    bool has_num_free;
    uint32_t num_free;
    bool has_seqno;
    uint32_t seqno;
    bool has_type;
    uint32_t type;
    bool has_vq;
    uint32_t vq;
} perfetto_protos_VirtioGpuCmdQueueFtraceEvent;

typedef struct _perfetto_protos_VirtioGpuCmdResponseFtraceEvent {
    bool has_ctx_id;
    uint32_t ctx_id;
    bool has_dev;
    int32_t dev;
    bool has_fence_id;
    uint64_t fence_id;
    bool has_flags;
    uint32_t flags;
    pb_callback_t name;
    bool has_num_free;
    uint32_t num_free;
    bool has_seqno;
    uint32_t seqno;
    bool has_type;
    uint32_t type;
    bool has_vq;
    uint32_t vq;
} perfetto_protos_VirtioGpuCmdResponseFtraceEvent;

typedef struct _perfetto_protos_VirtioVideoCmdFtraceEvent {
    bool has_stream_id;
    uint32_t stream_id;
    bool has_type;
    uint32_t type;
} perfetto_protos_VirtioVideoCmdFtraceEvent;

typedef struct _perfetto_protos_VirtioVideoCmdDoneFtraceEvent {
    bool has_stream_id;
    uint32_t stream_id;
    bool has_type;
    uint32_t type;
} perfetto_protos_VirtioVideoCmdDoneFtraceEvent;

typedef struct _perfetto_protos_VirtioVideoResourceQueueFtraceEvent {
    bool has_data_size0;
    uint32_t data_size0;
    bool has_data_size1;
    uint32_t data_size1;
    bool has_data_size2;
    uint32_t data_size2;
    bool has_data_size3;
    uint32_t data_size3;
    bool has_queue_type;
    uint32_t queue_type;
    bool has_resource_id;
    int32_t resource_id;
    bool has_stream_id;
    int32_t stream_id;
    bool has_timestamp;
    uint64_t timestamp;
} perfetto_protos_VirtioVideoResourceQueueFtraceEvent;

typedef struct _perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent {
    bool has_data_size0;
    uint32_t data_size0;
    bool has_data_size1;
    uint32_t data_size1;
    bool has_data_size2;
    uint32_t data_size2;
    bool has_data_size3;
    uint32_t data_size3;
    bool has_queue_type;
    uint32_t queue_type;
    bool has_resource_id;
    int32_t resource_id;
    bool has_stream_id;
    int32_t stream_id;
    bool has_timestamp;
    uint64_t timestamp;
} perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent;

typedef struct _perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent {
    bool has_order;
    int32_t order;
    bool has_may_writepage;
    int32_t may_writepage;
    bool has_gfp_flags;
    uint32_t gfp_flags;
} perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent;

typedef struct _perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent {
    bool has_nr_reclaimed;
    uint64_t nr_reclaimed;
} perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent;

typedef struct _perfetto_protos_MmVmscanKswapdWakeFtraceEvent {
    bool has_nid;
    int32_t nid;
    bool has_order;
    int32_t order;
    bool has_zid;
    int32_t zid;
} perfetto_protos_MmVmscanKswapdWakeFtraceEvent;

typedef struct _perfetto_protos_MmVmscanKswapdSleepFtraceEvent {
    bool has_nid;
    int32_t nid;
} perfetto_protos_MmVmscanKswapdSleepFtraceEvent;

typedef struct _perfetto_protos_MmShrinkSlabStartFtraceEvent {
    bool has_cache_items;
    uint64_t cache_items;
    bool has_delta;
    uint64_t delta;
    bool has_gfp_flags;
    uint32_t gfp_flags;
    bool has_lru_pgs;
    uint64_t lru_pgs;
    bool has_nr_objects_to_shrink;
    int64_t nr_objects_to_shrink;
    bool has_pgs_scanned;
    uint64_t pgs_scanned;
    bool has_shr;
    uint64_t shr;
    bool has_shrink;
    uint64_t shrink;
    bool has_total_scan;
    uint64_t total_scan;
    bool has_nid;
    int32_t nid;
    bool has_priority;
    int32_t priority;
} perfetto_protos_MmShrinkSlabStartFtraceEvent;

typedef struct _perfetto_protos_MmShrinkSlabEndFtraceEvent {
    bool has_new_scan;
    int64_t new_scan;
    bool has_retval;
    int32_t retval;
    bool has_shr;
    uint64_t shr;
    bool has_shrink;
    uint64_t shrink;
    bool has_total_scan;
    int64_t total_scan;
    bool has_unused_scan;
    int64_t unused_scan;
    bool has_nid;
    int32_t nid;
} perfetto_protos_MmShrinkSlabEndFtraceEvent;

typedef struct _perfetto_protos_WorkqueueActivateWorkFtraceEvent {
    bool has_work;
    uint64_t work;
} perfetto_protos_WorkqueueActivateWorkFtraceEvent;

typedef struct _perfetto_protos_WorkqueueExecuteEndFtraceEvent {
    bool has_work;
    uint64_t work;
    bool has_function;
    uint64_t function;
} perfetto_protos_WorkqueueExecuteEndFtraceEvent;

typedef struct _perfetto_protos_WorkqueueExecuteStartFtraceEvent {
    bool has_work;
    uint64_t work;
    bool has_function;
    uint64_t function;
} perfetto_protos_WorkqueueExecuteStartFtraceEvent;

typedef struct _perfetto_protos_WorkqueueQueueWorkFtraceEvent {
    bool has_work;
    uint64_t work;
    bool has_function;
    uint64_t function;
    bool has_workqueue;
    uint64_t workqueue;
    bool has_req_cpu;
    uint32_t req_cpu;
    bool has_cpu;
    uint32_t cpu;
} perfetto_protos_WorkqueueQueueWorkFtraceEvent;

typedef struct _perfetto_protos_FtraceEvent {
    /* Timestamp in nanoseconds using .../tracing/trace_clock. */
    bool has_timestamp;
    uint64_t timestamp;
    /* Kernel pid (do not confuse with userspace pid aka tgid). */
    bool has_pid;
    uint32_t pid;
    pb_size_t which_event;
    union _perfetto_protos_FtraceEvent_event {
        perfetto_protos_PrintFtraceEvent print;
        perfetto_protos_SchedSwitchFtraceEvent sched_switch;
        /* removed field with id 5;
     removed field with id 6;
     removed field with id 7;
     removed field with id 8;
     removed field with id 9;
     removed field with id 10; */
        perfetto_protos_CpuFrequencyFtraceEvent cpu_frequency;
        perfetto_protos_CpuFrequencyLimitsFtraceEvent cpu_frequency_limits;
        perfetto_protos_CpuIdleFtraceEvent cpu_idle;
        perfetto_protos_ClockEnableFtraceEvent clock_enable;
        perfetto_protos_ClockDisableFtraceEvent clock_disable;
        perfetto_protos_ClockSetRateFtraceEvent clock_set_rate;
        perfetto_protos_SchedWakeupFtraceEvent sched_wakeup;
        perfetto_protos_SchedBlockedReasonFtraceEvent sched_blocked_reason;
        perfetto_protos_SchedCpuHotplugFtraceEvent sched_cpu_hotplug;
        perfetto_protos_SchedWakingFtraceEvent sched_waking;
        perfetto_protos_IpiEntryFtraceEvent ipi_entry;
        perfetto_protos_IpiExitFtraceEvent ipi_exit;
        perfetto_protos_IpiRaiseFtraceEvent ipi_raise;
        perfetto_protos_SoftirqEntryFtraceEvent softirq_entry;
        perfetto_protos_SoftirqExitFtraceEvent softirq_exit;
        perfetto_protos_SoftirqRaiseFtraceEvent softirq_raise;
        perfetto_protos_I2cReadFtraceEvent i2c_read;
        perfetto_protos_I2cWriteFtraceEvent i2c_write;
        perfetto_protos_I2cResultFtraceEvent i2c_result;
        perfetto_protos_I2cReplyFtraceEvent i2c_reply;
        perfetto_protos_SmbusReadFtraceEvent smbus_read;
        perfetto_protos_SmbusWriteFtraceEvent smbus_write;
        perfetto_protos_SmbusResultFtraceEvent smbus_result;
        perfetto_protos_SmbusReplyFtraceEvent smbus_reply;
        perfetto_protos_LowmemoryKillFtraceEvent lowmemory_kill;
        perfetto_protos_IrqHandlerEntryFtraceEvent irq_handler_entry;
        perfetto_protos_IrqHandlerExitFtraceEvent irq_handler_exit;
        perfetto_protos_SyncPtFtraceEvent sync_pt;
        perfetto_protos_SyncTimelineFtraceEvent sync_timeline;
        perfetto_protos_SyncWaitFtraceEvent sync_wait;
        perfetto_protos_Ext4DaWriteBeginFtraceEvent ext4_da_write_begin;
        perfetto_protos_Ext4DaWriteEndFtraceEvent ext4_da_write_end;
        perfetto_protos_Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter;
        perfetto_protos_Ext4SyncFileExitFtraceEvent ext4_sync_file_exit;
        perfetto_protos_BlockRqIssueFtraceEvent block_rq_issue;
        perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin;
        perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end;
        perfetto_protos_MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake;
        perfetto_protos_MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep;
        perfetto_protos_BinderTransactionFtraceEvent binder_transaction;
        perfetto_protos_BinderTransactionReceivedFtraceEvent binder_transaction_received;
        perfetto_protos_BinderSetPriorityFtraceEvent binder_set_priority;
        perfetto_protos_BinderLockFtraceEvent binder_lock;
        perfetto_protos_BinderLockedFtraceEvent binder_locked;
        perfetto_protos_BinderUnlockFtraceEvent binder_unlock;
        perfetto_protos_WorkqueueActivateWorkFtraceEvent workqueue_activate_work;
        perfetto_protos_WorkqueueExecuteEndFtraceEvent workqueue_execute_end;
        perfetto_protos_WorkqueueExecuteStartFtraceEvent workqueue_execute_start;
        perfetto_protos_WorkqueueQueueWorkFtraceEvent workqueue_queue_work;
        perfetto_protos_RegulatorDisableFtraceEvent regulator_disable;
        perfetto_protos_RegulatorDisableCompleteFtraceEvent regulator_disable_complete;
        perfetto_protos_RegulatorEnableFtraceEvent regulator_enable;
        perfetto_protos_RegulatorEnableCompleteFtraceEvent regulator_enable_complete;
        perfetto_protos_RegulatorEnableDelayFtraceEvent regulator_enable_delay;
        perfetto_protos_RegulatorSetVoltageFtraceEvent regulator_set_voltage;
        perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete;
        perfetto_protos_CgroupAttachTaskFtraceEvent cgroup_attach_task;
        perfetto_protos_CgroupMkdirFtraceEvent cgroup_mkdir;
        perfetto_protos_CgroupRemountFtraceEvent cgroup_remount;
        perfetto_protos_CgroupRmdirFtraceEvent cgroup_rmdir;
        perfetto_protos_CgroupTransferTasksFtraceEvent cgroup_transfer_tasks;
        perfetto_protos_CgroupDestroyRootFtraceEvent cgroup_destroy_root;
        perfetto_protos_CgroupReleaseFtraceEvent cgroup_release;
        perfetto_protos_CgroupRenameFtraceEvent cgroup_rename;
        perfetto_protos_CgroupSetupRootFtraceEvent cgroup_setup_root;
        perfetto_protos_MdpCmdKickoffFtraceEvent mdp_cmd_kickoff;
        perfetto_protos_MdpCommitFtraceEvent mdp_commit;
        perfetto_protos_MdpPerfSetOtFtraceEvent mdp_perf_set_ot;
        perfetto_protos_MdpSsppChangeFtraceEvent mdp_sspp_change;
        perfetto_protos_TracingMarkWriteFtraceEvent tracing_mark_write;
        perfetto_protos_MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done;
        perfetto_protos_MdpCompareBwFtraceEvent mdp_compare_bw;
        perfetto_protos_MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts;
        perfetto_protos_MdpSsppSetFtraceEvent mdp_sspp_set;
        perfetto_protos_MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done;
        perfetto_protos_MdpMisrCrcFtraceEvent mdp_misr_crc;
        perfetto_protos_MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts;
        perfetto_protos_MdpTraceCounterFtraceEvent mdp_trace_counter;
        perfetto_protos_MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw;
        perfetto_protos_MdpMixerUpdateFtraceEvent mdp_mixer_update;
        perfetto_protos_MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels;
        perfetto_protos_MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done;
        perfetto_protos_MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong;
        perfetto_protos_MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc;
        perfetto_protos_MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus;
        perfetto_protos_RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context;
        perfetto_protos_MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache;
        perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache;
        perfetto_protos_MmCompactionBeginFtraceEvent mm_compaction_begin;
        perfetto_protos_MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction;
        perfetto_protos_MmCompactionDeferredFtraceEvent mm_compaction_deferred;
        perfetto_protos_MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset;
        perfetto_protos_MmCompactionEndFtraceEvent mm_compaction_end;
        perfetto_protos_MmCompactionFinishedFtraceEvent mm_compaction_finished;
        perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages;
        perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages;
        perfetto_protos_MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep;
        perfetto_protos_MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake;
        perfetto_protos_MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages;
        perfetto_protos_MmCompactionSuitableFtraceEvent mm_compaction_suitable;
        perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages;
        perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd;
        perfetto_protos_SuspendResumeFtraceEvent suspend_resume;
        perfetto_protos_SchedWakeupNewFtraceEvent sched_wakeup_new;
        perfetto_protos_BlockBioBackmergeFtraceEvent block_bio_backmerge;
        perfetto_protos_BlockBioBounceFtraceEvent block_bio_bounce;
        perfetto_protos_BlockBioCompleteFtraceEvent block_bio_complete;
        perfetto_protos_BlockBioFrontmergeFtraceEvent block_bio_frontmerge;
        perfetto_protos_BlockBioQueueFtraceEvent block_bio_queue;
        perfetto_protos_BlockBioRemapFtraceEvent block_bio_remap;
        perfetto_protos_BlockDirtyBufferFtraceEvent block_dirty_buffer;
        perfetto_protos_BlockGetrqFtraceEvent block_getrq;
        perfetto_protos_BlockPlugFtraceEvent block_plug;
        perfetto_protos_BlockRqAbortFtraceEvent block_rq_abort;
        perfetto_protos_BlockRqCompleteFtraceEvent block_rq_complete;
        perfetto_protos_BlockRqInsertFtraceEvent block_rq_insert;
        /* removed field with id 127; */
        perfetto_protos_BlockRqRemapFtraceEvent block_rq_remap;
        perfetto_protos_BlockRqRequeueFtraceEvent block_rq_requeue;
        perfetto_protos_BlockSleeprqFtraceEvent block_sleeprq;
        perfetto_protos_BlockSplitFtraceEvent block_split;
        perfetto_protos_BlockTouchBufferFtraceEvent block_touch_buffer;
        perfetto_protos_BlockUnplugFtraceEvent block_unplug;
        perfetto_protos_Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks;
        perfetto_protos_Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks;
        perfetto_protos_Ext4AllocateInodeFtraceEvent ext4_allocate_inode;
        perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate;
        perfetto_protos_Ext4CollapseRangeFtraceEvent ext4_collapse_range;
        perfetto_protos_Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space;
        perfetto_protos_Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space;
        perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space;
        perfetto_protos_Ext4DaWritePagesFtraceEvent ext4_da_write_pages;
        perfetto_protos_Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent;
        perfetto_protos_Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter;
        perfetto_protos_Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit;
        perfetto_protos_Ext4DiscardBlocksFtraceEvent ext4_discard_blocks;
        perfetto_protos_Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations;
        perfetto_protos_Ext4DropInodeFtraceEvent ext4_drop_inode;
        perfetto_protos_Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent;
        perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter;
        perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit;
        perfetto_protos_Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent;
        perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter;
        perfetto_protos_Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit;
        perfetto_protos_Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent;
        perfetto_protos_Ext4EsShrinkFtraceEvent ext4_es_shrink;
        perfetto_protos_Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count;
        perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter;
        perfetto_protos_Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit;
        perfetto_protos_Ext4EvictInodeFtraceEvent ext4_evict_inode;
        perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter;
        perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath;
        perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents;
        perfetto_protos_Ext4ExtInCacheFtraceEvent ext4_ext_in_cache;
        perfetto_protos_Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent;
        perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter;
        perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit;
        perfetto_protos_Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache;
        perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space;
        perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done;
        perfetto_protos_Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx;
        perfetto_protos_Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf;
        perfetto_protos_Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent;
        perfetto_protos_Ext4FallocateEnterFtraceEvent ext4_fallocate_enter;
        perfetto_protos_Ext4FallocateExitFtraceEvent ext4_fallocate_exit;
        perfetto_protos_Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range;
        perfetto_protos_Ext4ForgetFtraceEvent ext4_forget;
        perfetto_protos_Ext4FreeBlocksFtraceEvent ext4_free_blocks;
        perfetto_protos_Ext4FreeInodeFtraceEvent ext4_free_inode;
        perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit;
        perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc;
        perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter;
        perfetto_protos_Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit;
        perfetto_protos_Ext4InsertRangeFtraceEvent ext4_insert_range;
        perfetto_protos_Ext4InvalidatepageFtraceEvent ext4_invalidatepage;
        perfetto_protos_Ext4JournalStartFtraceEvent ext4_journal_start;
        perfetto_protos_Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved;
        perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage;
        perfetto_protos_Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end;
        perfetto_protos_Ext4LoadInodeFtraceEvent ext4_load_inode;
        perfetto_protos_Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap;
        perfetto_protos_Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty;
        perfetto_protos_Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load;
        perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load;
        perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations;
        perfetto_protos_Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa;
        perfetto_protos_Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa;
        perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa;
        perfetto_protos_Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa;
        perfetto_protos_Ext4MballocAllocFtraceEvent ext4_mballoc_alloc;
        perfetto_protos_Ext4MballocDiscardFtraceEvent ext4_mballoc_discard;
        perfetto_protos_Ext4MballocFreeFtraceEvent ext4_mballoc_free;
        perfetto_protos_Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc;
        perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time;
        perfetto_protos_Ext4PunchHoleFtraceEvent ext4_punch_hole;
        perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load;
        perfetto_protos_Ext4ReadpageFtraceEvent ext4_readpage;
        perfetto_protos_Ext4ReleasepageFtraceEvent ext4_releasepage;
        perfetto_protos_Ext4RemoveBlocksFtraceEvent ext4_remove_blocks;
        perfetto_protos_Ext4RequestBlocksFtraceEvent ext4_request_blocks;
        perfetto_protos_Ext4RequestInodeFtraceEvent ext4_request_inode;
        perfetto_protos_Ext4SyncFsFtraceEvent ext4_sync_fs;
        perfetto_protos_Ext4TrimAllFreeFtraceEvent ext4_trim_all_free;
        perfetto_protos_Ext4TrimExtentFtraceEvent ext4_trim_extent;
        perfetto_protos_Ext4TruncateEnterFtraceEvent ext4_truncate_enter;
        perfetto_protos_Ext4TruncateExitFtraceEvent ext4_truncate_exit;
        perfetto_protos_Ext4UnlinkEnterFtraceEvent ext4_unlink_enter;
        perfetto_protos_Ext4UnlinkExitFtraceEvent ext4_unlink_exit;
        perfetto_protos_Ext4WriteBeginFtraceEvent ext4_write_begin;
        /* removed field with id 220;
     removed field with id 221;
     removed field with id 222;
     removed field with id 223;
     removed field with id 224;
     removed field with id 225;
     removed field with id 226;
     removed field with id 227;
     removed field with id 228;
     removed field with id 229; */
        perfetto_protos_Ext4WriteEndFtraceEvent ext4_write_end;
        perfetto_protos_Ext4WritepageFtraceEvent ext4_writepage;
        perfetto_protos_Ext4WritepagesFtraceEvent ext4_writepages;
        perfetto_protos_Ext4WritepagesResultFtraceEvent ext4_writepages_result;
        perfetto_protos_Ext4ZeroRangeFtraceEvent ext4_zero_range;
        perfetto_protos_TaskNewtaskFtraceEvent task_newtask;
        perfetto_protos_TaskRenameFtraceEvent task_rename;
        perfetto_protos_SchedProcessExecFtraceEvent sched_process_exec;
        perfetto_protos_SchedProcessExitFtraceEvent sched_process_exit;
        perfetto_protos_SchedProcessForkFtraceEvent sched_process_fork;
        perfetto_protos_SchedProcessFreeFtraceEvent sched_process_free;
        perfetto_protos_SchedProcessHangFtraceEvent sched_process_hang;
        perfetto_protos_SchedProcessWaitFtraceEvent sched_process_wait;
        perfetto_protos_F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio;
        perfetto_protos_F2fsEvictInodeFtraceEvent f2fs_evict_inode;
        perfetto_protos_F2fsFallocateFtraceEvent f2fs_fallocate;
        perfetto_protos_F2fsGetDataBlockFtraceEvent f2fs_get_data_block;
        perfetto_protos_F2fsGetVictimFtraceEvent f2fs_get_victim;
        perfetto_protos_F2fsIgetFtraceEvent f2fs_iget;
        perfetto_protos_F2fsIgetExitFtraceEvent f2fs_iget_exit;
        perfetto_protos_F2fsNewInodeFtraceEvent f2fs_new_inode;
        perfetto_protos_F2fsReadpageFtraceEvent f2fs_readpage;
        perfetto_protos_F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block;
        perfetto_protos_F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty;
        perfetto_protos_F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page;
        perfetto_protos_F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter;
        perfetto_protos_F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit;
        perfetto_protos_F2fsSyncFsFtraceEvent f2fs_sync_fs;
        perfetto_protos_F2fsTruncateFtraceEvent f2fs_truncate;
        perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter;
        perfetto_protos_F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit;
        perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range;
        perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter;
        perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit;
        perfetto_protos_F2fsTruncateNodeFtraceEvent f2fs_truncate_node;
        perfetto_protos_F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter;
        perfetto_protos_F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit;
        perfetto_protos_F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes;
        perfetto_protos_F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter;
        perfetto_protos_F2fsUnlinkExitFtraceEvent f2fs_unlink_exit;
        perfetto_protos_F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite;
        perfetto_protos_F2fsWriteBeginFtraceEvent f2fs_write_begin;
        perfetto_protos_F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint;
        perfetto_protos_F2fsWriteEndFtraceEvent f2fs_write_end;
        perfetto_protos_AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end;
        perfetto_protos_AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail;
        perfetto_protos_AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start;
        perfetto_protos_AllocPagesSysEndFtraceEvent alloc_pages_sys_end;
        perfetto_protos_AllocPagesSysFailFtraceEvent alloc_pages_sys_fail;
        perfetto_protos_AllocPagesSysStartFtraceEvent alloc_pages_sys_start;
        perfetto_protos_DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry;
        perfetto_protos_IommuMapRangeFtraceEvent iommu_map_range;
        perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end;
        perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start;
        perfetto_protos_IonAllocBufferEndFtraceEvent ion_alloc_buffer_end;
        perfetto_protos_IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail;
        perfetto_protos_IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback;
        perfetto_protos_IonAllocBufferStartFtraceEvent ion_alloc_buffer_start;
        perfetto_protos_IonCpAllocRetryFtraceEvent ion_cp_alloc_retry;
        perfetto_protos_IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end;
        perfetto_protos_IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start;
        perfetto_protos_IonPrefetchingFtraceEvent ion_prefetching;
        perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end;
        perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start;
        perfetto_protos_IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end;
        perfetto_protos_IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start;
        perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end;
        perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start;
        perfetto_protos_KfreeFtraceEvent kfree;
        perfetto_protos_KmallocFtraceEvent kmalloc;
        perfetto_protos_KmallocNodeFtraceEvent kmalloc_node;
        perfetto_protos_KmemCacheAllocFtraceEvent kmem_cache_alloc;
        perfetto_protos_KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node;
        perfetto_protos_KmemCacheFreeFtraceEvent kmem_cache_free;
        perfetto_protos_MigratePagesEndFtraceEvent migrate_pages_end;
        perfetto_protos_MigratePagesStartFtraceEvent migrate_pages_start;
        perfetto_protos_MigrateRetryFtraceEvent migrate_retry;
        perfetto_protos_MmPageAllocFtraceEvent mm_page_alloc;
        perfetto_protos_MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag;
        perfetto_protos_MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked;
        perfetto_protos_MmPageFreeFtraceEvent mm_page_free;
        perfetto_protos_MmPageFreeBatchedFtraceEvent mm_page_free_batched;
        perfetto_protos_MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain;
        perfetto_protos_RssStatFtraceEvent rss_stat;
        perfetto_protos_IonHeapShrinkFtraceEvent ion_heap_shrink;
        perfetto_protos_IonHeapGrowFtraceEvent ion_heap_grow;
        perfetto_protos_FenceInitFtraceEvent fence_init;
        perfetto_protos_FenceDestroyFtraceEvent fence_destroy;
        perfetto_protos_FenceEnableSignalFtraceEvent fence_enable_signal;
        perfetto_protos_FenceSignaledFtraceEvent fence_signaled;
        perfetto_protos_ClkEnableFtraceEvent clk_enable;
        perfetto_protos_ClkDisableFtraceEvent clk_disable;
        perfetto_protos_ClkSetRateFtraceEvent clk_set_rate;
        perfetto_protos_BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf;
        perfetto_protos_SignalDeliverFtraceEvent signal_deliver;
        perfetto_protos_SignalGenerateFtraceEvent signal_generate;
        perfetto_protos_OomScoreAdjUpdateFtraceEvent oom_score_adj_update;
        perfetto_protos_GenericFtraceEvent generic;
        perfetto_protos_MmEventRecordFtraceEvent mm_event_record;
        perfetto_protos_SysEnterFtraceEvent sys_enter;
        perfetto_protos_SysExitFtraceEvent sys_exit;
        perfetto_protos_ZeroFtraceEvent zero;
        perfetto_protos_GpuFrequencyFtraceEvent gpu_frequency;
        perfetto_protos_SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write;
        perfetto_protos_MarkVictimFtraceEvent mark_victim;
        perfetto_protos_IonStatFtraceEvent ion_stat;
        perfetto_protos_IonBufferCreateFtraceEvent ion_buffer_create;
        perfetto_protos_IonBufferDestroyFtraceEvent ion_buffer_destroy;
        perfetto_protos_ScmCallStartFtraceEvent scm_call_start;
        perfetto_protos_ScmCallEndFtraceEvent scm_call_end;
        perfetto_protos_GpuMemTotalFtraceEvent gpu_mem_total;
        perfetto_protos_ThermalTemperatureFtraceEvent thermal_temperature;
        perfetto_protos_CdevUpdateFtraceEvent cdev_update;
        perfetto_protos_CpuhpExitFtraceEvent cpuhp_exit;
        perfetto_protos_CpuhpMultiEnterFtraceEvent cpuhp_multi_enter;
        perfetto_protos_CpuhpEnterFtraceEvent cpuhp_enter;
        perfetto_protos_CpuhpLatencyFtraceEvent cpuhp_latency;
        perfetto_protos_FastrpcDmaStatFtraceEvent fastrpc_dma_stat;
        perfetto_protos_DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write;
        perfetto_protos_G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write;
        perfetto_protos_MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write;
        perfetto_protos_DmaHeapStatFtraceEvent dma_heap_stat;
        perfetto_protos_CpuhpPauseFtraceEvent cpuhp_pause;
        perfetto_protos_SchedPiSetprioFtraceEvent sched_pi_setprio;
        perfetto_protos_SdeSdeEvtlogFtraceEvent sde_sde_evtlog;
        perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent sde_sde_perf_calc_crtc;
        perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent sde_sde_perf_crtc_update;
        perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent sde_sde_perf_set_qos_luts;
        perfetto_protos_SdeSdePerfUpdateBusFtraceEvent sde_sde_perf_update_bus;
        perfetto_protos_RssStatThrottledFtraceEvent rss_stat_throttled;
        perfetto_protos_NetifReceiveSkbFtraceEvent netif_receive_skb;
        perfetto_protos_NetDevXmitFtraceEvent net_dev_xmit;
        perfetto_protos_InetSockSetStateFtraceEvent inet_sock_set_state;
        perfetto_protos_TcpRetransmitSkbFtraceEvent tcp_retransmit_skb;
        perfetto_protos_CrosEcSensorhubDataFtraceEvent cros_ec_sensorhub_data;
        perfetto_protos_NapiGroReceiveEntryFtraceEvent napi_gro_receive_entry;
        perfetto_protos_NapiGroReceiveExitFtraceEvent napi_gro_receive_exit;
        perfetto_protos_KfreeSkbFtraceEvent kfree_skb;
        perfetto_protos_KvmAccessFaultFtraceEvent kvm_access_fault;
        perfetto_protos_KvmAckIrqFtraceEvent kvm_ack_irq;
        perfetto_protos_KvmAgeHvaFtraceEvent kvm_age_hva;
        perfetto_protos_KvmAgePageFtraceEvent kvm_age_page;
        perfetto_protos_KvmArmClearDebugFtraceEvent kvm_arm_clear_debug;
        perfetto_protos_KvmArmSetDreg32FtraceEvent kvm_arm_set_dreg32;
        perfetto_protos_KvmArmSetRegsetFtraceEvent kvm_arm_set_regset;
        perfetto_protos_KvmArmSetupDebugFtraceEvent kvm_arm_setup_debug;
        perfetto_protos_KvmEntryFtraceEvent kvm_entry;
        perfetto_protos_KvmExitFtraceEvent kvm_exit;
        perfetto_protos_KvmFpuFtraceEvent kvm_fpu;
        perfetto_protos_KvmGetTimerMapFtraceEvent kvm_get_timer_map;
        perfetto_protos_KvmGuestFaultFtraceEvent kvm_guest_fault;
        perfetto_protos_KvmHandleSysRegFtraceEvent kvm_handle_sys_reg;
        perfetto_protos_KvmHvcArm64FtraceEvent kvm_hvc_arm64;
        perfetto_protos_KvmIrqLineFtraceEvent kvm_irq_line;
        perfetto_protos_KvmMmioFtraceEvent kvm_mmio;
        perfetto_protos_KvmMmioEmulateFtraceEvent kvm_mmio_emulate;
        perfetto_protos_KvmSetGuestDebugFtraceEvent kvm_set_guest_debug;
        perfetto_protos_KvmSetIrqFtraceEvent kvm_set_irq;
        perfetto_protos_KvmSetSpteHvaFtraceEvent kvm_set_spte_hva;
        perfetto_protos_KvmSetWayFlushFtraceEvent kvm_set_way_flush;
        perfetto_protos_KvmSysAccessFtraceEvent kvm_sys_access;
        perfetto_protos_KvmTestAgeHvaFtraceEvent kvm_test_age_hva;
        perfetto_protos_KvmTimerEmulateFtraceEvent kvm_timer_emulate;
        perfetto_protos_KvmTimerHrtimerExpireFtraceEvent kvm_timer_hrtimer_expire;
        perfetto_protos_KvmTimerRestoreStateFtraceEvent kvm_timer_restore_state;
        perfetto_protos_KvmTimerSaveStateFtraceEvent kvm_timer_save_state;
        perfetto_protos_KvmTimerUpdateIrqFtraceEvent kvm_timer_update_irq;
        perfetto_protos_KvmToggleCacheFtraceEvent kvm_toggle_cache;
        perfetto_protos_KvmUnmapHvaRangeFtraceEvent kvm_unmap_hva_range;
        perfetto_protos_KvmUserspaceExitFtraceEvent kvm_userspace_exit;
        perfetto_protos_KvmVcpuWakeupFtraceEvent kvm_vcpu_wakeup;
        perfetto_protos_KvmWfxArm64FtraceEvent kvm_wfx_arm64;
        perfetto_protos_TrapRegFtraceEvent trap_reg;
        perfetto_protos_VgicUpdateIrqPendingFtraceEvent vgic_update_irq_pending;
        perfetto_protos_WakeupSourceActivateFtraceEvent wakeup_source_activate;
        perfetto_protos_WakeupSourceDeactivateFtraceEvent wakeup_source_deactivate;
        perfetto_protos_UfshcdCommandFtraceEvent ufshcd_command;
        perfetto_protos_UfshcdClkGatingFtraceEvent ufshcd_clk_gating;
        perfetto_protos_ConsoleFtraceEvent console;
        perfetto_protos_DrmVblankEventFtraceEvent drm_vblank_event;
        perfetto_protos_DrmVblankEventDeliveredFtraceEvent drm_vblank_event_delivered;
        perfetto_protos_DrmSchedJobFtraceEvent drm_sched_job;
        perfetto_protos_DrmRunJobFtraceEvent drm_run_job;
        perfetto_protos_DrmSchedProcessJobFtraceEvent drm_sched_process_job;
        perfetto_protos_DmaFenceInitFtraceEvent dma_fence_init;
        perfetto_protos_DmaFenceEmitFtraceEvent dma_fence_emit;
        perfetto_protos_DmaFenceSignaledFtraceEvent dma_fence_signaled;
        perfetto_protos_DmaFenceWaitStartFtraceEvent dma_fence_wait_start;
        perfetto_protos_DmaFenceWaitEndFtraceEvent dma_fence_wait_end;
        perfetto_protos_F2fsIostatFtraceEvent f2fs_iostat;
        perfetto_protos_F2fsIostatLatencyFtraceEvent f2fs_iostat_latency;
        perfetto_protos_SchedCpuUtilCfsFtraceEvent sched_cpu_util_cfs;
        perfetto_protos_V4l2QbufFtraceEvent v4l2_qbuf;
        perfetto_protos_V4l2DqbufFtraceEvent v4l2_dqbuf;
        perfetto_protos_Vb2V4l2BufQueueFtraceEvent vb2_v4l2_buf_queue;
        perfetto_protos_Vb2V4l2BufDoneFtraceEvent vb2_v4l2_buf_done;
        perfetto_protos_Vb2V4l2QbufFtraceEvent vb2_v4l2_qbuf;
        perfetto_protos_Vb2V4l2DqbufFtraceEvent vb2_v4l2_dqbuf;
        perfetto_protos_DsiCmdFifoStatusFtraceEvent dsi_cmd_fifo_status;
        perfetto_protos_DsiRxFtraceEvent dsi_rx;
        perfetto_protos_DsiTxFtraceEvent dsi_tx;
        perfetto_protos_AndroidFsDatareadEndFtraceEvent android_fs_dataread_end;
        perfetto_protos_AndroidFsDatareadStartFtraceEvent android_fs_dataread_start;
        perfetto_protos_AndroidFsDatawriteEndFtraceEvent android_fs_datawrite_end;
        perfetto_protos_AndroidFsDatawriteStartFtraceEvent android_fs_datawrite_start;
        perfetto_protos_AndroidFsFsyncEndFtraceEvent android_fs_fsync_end;
        perfetto_protos_AndroidFsFsyncStartFtraceEvent android_fs_fsync_start;
        perfetto_protos_FuncgraphEntryFtraceEvent funcgraph_entry;
        perfetto_protos_FuncgraphExitFtraceEvent funcgraph_exit;
        perfetto_protos_VirtioVideoCmdFtraceEvent virtio_video_cmd;
        perfetto_protos_VirtioVideoCmdDoneFtraceEvent virtio_video_cmd_done;
        perfetto_protos_VirtioVideoResourceQueueFtraceEvent virtio_video_resource_queue;
        perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent virtio_video_resource_queue_done;
        perfetto_protos_MmShrinkSlabStartFtraceEvent mm_shrink_slab_start;
        perfetto_protos_MmShrinkSlabEndFtraceEvent mm_shrink_slab_end;
        perfetto_protos_TrustySmcFtraceEvent trusty_smc;
        perfetto_protos_TrustySmcDoneFtraceEvent trusty_smc_done;
        perfetto_protos_TrustyStdCall32FtraceEvent trusty_std_call32;
        perfetto_protos_TrustyStdCall32DoneFtraceEvent trusty_std_call32_done;
        perfetto_protos_TrustyShareMemoryFtraceEvent trusty_share_memory;
        perfetto_protos_TrustyShareMemoryDoneFtraceEvent trusty_share_memory_done;
        perfetto_protos_TrustyReclaimMemoryFtraceEvent trusty_reclaim_memory;
        perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent trusty_reclaim_memory_done;
        perfetto_protos_TrustyIrqFtraceEvent trusty_irq;
        perfetto_protos_TrustyIpcHandleEventFtraceEvent trusty_ipc_handle_event;
        perfetto_protos_TrustyIpcConnectFtraceEvent trusty_ipc_connect;
        perfetto_protos_TrustyIpcConnectEndFtraceEvent trusty_ipc_connect_end;
        perfetto_protos_TrustyIpcWriteFtraceEvent trusty_ipc_write;
        perfetto_protos_TrustyIpcPollFtraceEvent trusty_ipc_poll;
        /* removed field with id 459; */
        perfetto_protos_TrustyIpcReadFtraceEvent trusty_ipc_read;
        perfetto_protos_TrustyIpcReadEndFtraceEvent trusty_ipc_read_end;
        perfetto_protos_TrustyIpcRxFtraceEvent trusty_ipc_rx;
        /* removed field with id 463; */
        perfetto_protos_TrustyEnqueueNopFtraceEvent trusty_enqueue_nop;
        perfetto_protos_CmaAllocStartFtraceEvent cma_alloc_start;
        perfetto_protos_CmaAllocInfoFtraceEvent cma_alloc_info;
        perfetto_protos_LwisTracingMarkWriteFtraceEvent lwis_tracing_mark_write;
        perfetto_protos_VirtioGpuCmdQueueFtraceEvent virtio_gpu_cmd_queue;
        perfetto_protos_VirtioGpuCmdResponseFtraceEvent virtio_gpu_cmd_response;
        perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent mali_mali_KCPU_CQS_SET;
        perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent mali_mali_KCPU_CQS_WAIT_START;
        perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent mali_mali_KCPU_CQS_WAIT_END;
        perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent mali_mali_KCPU_FENCE_SIGNAL;
        perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent mali_mali_KCPU_FENCE_WAIT_START;
        perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent mali_mali_KCPU_FENCE_WAIT_END;
        perfetto_protos_HypEnterFtraceEvent hyp_enter;
        perfetto_protos_HypExitFtraceEvent hyp_exit;
        perfetto_protos_HostHcallFtraceEvent host_hcall;
        perfetto_protos_HostSmcFtraceEvent host_smc;
        perfetto_protos_HostMemAbortFtraceEvent host_mem_abort;
        perfetto_protos_SuspendResumeMinimalFtraceEvent suspend_resume_minimal;
        perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent mali_mali_CSF_INTERRUPT_START;
        perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent mali_mali_CSF_INTERRUPT_END;
        perfetto_protos_SamsungTracingMarkWriteFtraceEvent samsung_tracing_mark_write;
        perfetto_protos_BinderCommandFtraceEvent binder_command;
        perfetto_protos_BinderReturnFtraceEvent binder_return;
        perfetto_protos_SchedSwitchWithCtrsFtraceEvent sched_switch_with_ctrs;
        perfetto_protos_GpuWorkPeriodFtraceEvent gpu_work_period;
        perfetto_protos_RpmStatusFtraceEvent rpm_status;
        perfetto_protos_PanelWriteGenericFtraceEvent panel_write_generic;
        perfetto_protos_SchedMigrateTaskFtraceEvent sched_migrate_task;
        perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent dpu_dsi_cmd_fifo_status;
        perfetto_protos_DpuDsiRxFtraceEvent dpu_dsi_rx;
        perfetto_protos_DpuDsiTxFtraceEvent dpu_dsi_tx;
        perfetto_protos_F2fsBackgroundGcFtraceEvent f2fs_background_gc;
        perfetto_protos_F2fsGcBeginFtraceEvent f2fs_gc_begin;
        perfetto_protos_F2fsGcEndFtraceEvent f2fs_gc_end;
        perfetto_protos_FastrpcDmaFreeFtraceEvent fastrpc_dma_free;
        perfetto_protos_FastrpcDmaAllocFtraceEvent fastrpc_dma_alloc;
        perfetto_protos_FastrpcDmaUnmapFtraceEvent fastrpc_dma_unmap;
        perfetto_protos_FastrpcDmaMapFtraceEvent fastrpc_dma_map;
        perfetto_protos_GoogleIccEventFtraceEvent google_icc_event;
        perfetto_protos_GoogleIrmEventFtraceEvent google_irm_event;
        perfetto_protos_DevicePmCallbackStartFtraceEvent device_pm_callback_start;
        perfetto_protos_DevicePmCallbackEndFtraceEvent device_pm_callback_end;
        perfetto_protos_ThermalExynosAcpmBulkFtraceEvent thermal_exynos_acpm_bulk;
        perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent thermal_exynos_acpm_high_overhead;
        perfetto_protos_DcvshFreqFtraceEvent dcvsh_freq;
        perfetto_protos_KgslGpuFrequencyFtraceEvent kgsl_gpu_frequency;
        perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent mali_mali_PM_MCU_HCTL_CORES_DOWN_SCALE_NOTIFY_PEND;
        perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent mali_mali_PM_MCU_HCTL_CORES_NOTIFY_PEND;
        perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent mali_mali_PM_MCU_HCTL_CORE_INACTIVE_PEND;
        perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent mali_mali_PM_MCU_HCTL_MCU_ON_RECHECK;
        perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent mali_mali_PM_MCU_HCTL_SHADERS_CORE_OFF_PEND;
        perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent mali_mali_PM_MCU_HCTL_SHADERS_PEND_OFF;
        perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent mali_mali_PM_MCU_HCTL_SHADERS_PEND_ON;
        perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent mali_mali_PM_MCU_HCTL_SHADERS_READY_OFF;
        perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent mali_mali_PM_MCU_IN_SLEEP;
        perfetto_protos_MaliMaliPMMCUOFFFtraceEvent mali_mali_PM_MCU_OFF;
        perfetto_protos_MaliMaliPMMCUONFtraceEvent mali_mali_PM_MCU_ON;
        perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent mali_mali_PM_MCU_ON_CORE_ATTR_UPDATE_PEND;
        perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent mali_mali_PM_MCU_ON_GLB_REINIT_PEND;
        perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent mali_mali_PM_MCU_ON_HALT;
        perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent mali_mali_PM_MCU_ON_HWCNT_DISABLE;
        perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent mali_mali_PM_MCU_ON_HWCNT_ENABLE;
        perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent mali_mali_PM_MCU_ON_PEND_HALT;
        perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent mali_mali_PM_MCU_ON_PEND_SLEEP;
        perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent mali_mali_PM_MCU_ON_SLEEP_INITIATE;
        perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent mali_mali_PM_MCU_PEND_OFF;
        perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent mali_mali_PM_MCU_PEND_ON_RELOAD;
        perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent mali_mali_PM_MCU_POWER_DOWN;
        perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent mali_mali_PM_MCU_RESET_WAIT;
        perfetto_protos_BclIrqTriggerFtraceEvent bcl_irq_trigger;
        perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent kgsl_adreno_cmdbatch_queued;
        perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent kgsl_adreno_cmdbatch_submitted;
        perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent kgsl_adreno_cmdbatch_sync;
        perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent kgsl_adreno_cmdbatch_retired;
        perfetto_protos_PixelMmKswapdWakeFtraceEvent pixel_mm_kswapd_wake;
        perfetto_protos_PixelMmKswapdDoneFtraceEvent pixel_mm_kswapd_done;
        perfetto_protos_SchedWakeupTaskAttrFtraceEvent sched_wakeup_task_attr;
        perfetto_protos_DevfreqFrequencyFtraceEvent devfreq_frequency;
        perfetto_protos_KprobeEvent kprobe_event;
        perfetto_protos_ParamSetValueCpmFtraceEvent param_set_value_cpm;
        perfetto_protos_DoSysOpenFtraceEvent do_sys_open;
        perfetto_protos_OpenExecFtraceEvent open_exec;
        perfetto_protos_BlockIoStartFtraceEvent block_io_start;
        perfetto_protos_BlockIoDoneFtraceEvent block_io_done;
        perfetto_protos_MaliGpuPowerStateFtraceEvent mali_gpu_power_state;
        perfetto_protos_DpuDispDpuUnderrunFtraceEvent dpu_disp_dpu_underrun;
        perfetto_protos_DpuDispVblankIrqEnableFtraceEvent dpu_disp_vblank_irq_enable;
    } event;
    /* Not populated in actual traces. Wire format might change.
 Placeholder declaration so that the ftrace parsing code accepts the
 existence of this common field. If this becomes needed for all events:
 consider merging with common_preempt_count to avoid extra proto tags. */
    bool has_common_flags;
    uint32_t common_flags;
} perfetto_protos_FtraceEvent;

/* Per-CPU kernel buffer stats for the ftrace data source gathered from
 /sys/kernel/tracing/per_cpu/cpuX/stats. */
typedef struct _perfetto_protos_FtraceCpuStats {
    /* CPU index. */
    bool has_cpu;
    uint64_t cpu;
    /* Number of entries currently in the kernel buffer. */
    bool has_entries;
    uint64_t entries;
    /* Number of events lost in kernel buffers due to overwriting of old events
 before userspace had a chance to drain them. Valid if the buffer is in
 "overwrite" mode, otherwise see |dropped_events|. */
    bool has_overrun;
    uint64_t overrun;
    /* This should always be zero. If not the buffer size is way too small or
 something went wrong with the tracer. Quoting the kernel: "number of
 commits failing due to the buffer wrapping around while there are
 uncommitted events, such as during an interrupt storm". */
    bool has_commit_overrun;
    uint64_t commit_overrun;
    /* Size of entries currently in the kernel buffer (see |entries|) in bytes.
 The field should be named "bytes", but is misnamed for historical reasons.
 This value has known inaccuracies before Linux v6.6:
 https://github.com/torvalds/linux/commit/45d99ea */
    bool has_bytes_read;
    uint64_t bytes_read;
    /* The timestamp for the oldest event still in the ring buffer.
 Unit: seconds for typical trace clocks (i.e. not tsc/counter). */
    bool has_oldest_event_ts;
    double oldest_event_ts;
    /* The current timestamp.
 Unit: seconds for typical trace clocks (i.e. not tsc/counter). */
    bool has_now_ts;
    double now_ts;
    /* If the kernel buffer has overwrite mode disabled, this will show the number
 of new events that were lost because the buffer was full. This is similar
 to |overrun| but only for the overwrite=false case. */
    bool has_dropped_events;
    uint64_t dropped_events;
    /* The number of events read (consumed) from the buffer by userspace. */
    bool has_read_events;
    uint64_t read_events;
} perfetto_protos_FtraceCpuStats;

/* Kprobe statistical data, gathered from /sys/kernel/tracing/kprobe_profile. */
typedef struct _perfetto_protos_FtraceKprobeStats {
    /* Cumulative number of kprobe events generated for this function */
    bool has_hits;
    int64_t hits;
    /* Cumulative number of kprobe events that could not be generated for this
 function and were missed.  This happens when too much nesting
 happens between a kprobe and its kretprobe, overflowing the
 maxactives buffer. */
    bool has_misses;
    int64_t misses;
} perfetto_protos_FtraceKprobeStats;

/* Errors and kernel buffer stats for the ftrace data source. */
typedef struct _perfetto_protos_FtraceStats {
    /* A pair of FtraceStats is written on every trace flush:
 * START_OF_TRACE - stats recorded at the beginning of the trace.
 * END_OF_TRACE - stats recorded during the flush. In other words shortly
                  before this packet was written. For simple traces this
                  will be once at the end of the trace. */
    bool has_phase;
    perfetto_protos_FtraceStats_Phase phase;
    /* Per-CPU stats (one entry for each CPU). */
    pb_callback_t cpu_stats;
    /* When FtraceConfig.symbolize_ksyms = true, this records the number of
 symbols parsed from /proc/kallsyms, whether they have been seen in the
 trace or not. It can be used to debug kptr_restrict or security-related
 errors.
 Note: this will be valid only when phase = END_OF_TRACE. The symbolizer is
 initialized. When START_OF_TRACE is emitted it is not ready yet. */
    bool has_kernel_symbols_parsed;
    uint32_t kernel_symbols_parsed;
    /* The memory used by the kernel symbolizer (KernelSymbolMap.size_bytes()). */
    bool has_kernel_symbols_mem_kb;
    uint32_t kernel_symbols_mem_kb;
    /* Atrace errors (even non-fatal ones) are reported here. A typical example is
 one or more atrace categories not available on the device. */
    pb_callback_t atrace_errors;
    /* Ftrace events requested by the config but not present on device. */
    pb_callback_t unknown_ftrace_events;
    /* Ftrace events requested by the config and present on device, but which we
 failed to enable due to permissions, or due to a conflicting option
 (currently FtraceConfig.disable_generic_events). */
    pb_callback_t failed_ftrace_events;
    /* The data source was configured to preserve existing events in the ftrace
 buffer before the start of the trace. */
    bool has_preserve_ftrace_buffer;
    bool preserve_ftrace_buffer;
    /* Unique errors encountered during reading and parsing of the raw ftrace
 data. Ring buffer ABI related errors will also be recorded in the
 affected FtraceEventBundles with a timestamp.
 Any traces with entries in this field should be investigated, as they
 indicate a bug in perfetto or the kernel. */
    pb_callback_t ftrace_parse_errors;
    /* Kprobe profile stats for functions hits and misses */
    bool has_kprobe_stats;
    perfetto_protos_FtraceKprobeStats kprobe_stats;
} perfetto_protos_FtraceStats;

/* Optionally-enabled compact encoding of a batch of scheduling events. Only
 a subset of events & their fields is recorded.
 All fields (except comms) are stored in a structure-of-arrays form, one
 entry in each repeated field per event. */
typedef struct _perfetto_protos_FtraceEventBundle_CompactSched {
    /* Delta-encoded timestamps across all sched_switch events within this
 bundle. The first is absolute, each next one is relative to its
 predecessor. */
    pb_callback_t switch_timestamp;
    pb_callback_t switch_prev_state;
    pb_callback_t switch_next_pid;
    pb_callback_t switch_next_prio;
    /* Interned table of unique strings for this bundle. */
    pb_callback_t intern_table;
    /* One per event, index into |intern_table| corresponding to the
 next_comm field of the event. */
    pb_callback_t switch_next_comm_index;
    /* Delta-encoded timestamps across all sched_waking events within this
 bundle. The first is absolute, each next one is relative to its
 predecessor. */
    pb_callback_t waking_timestamp;
    pb_callback_t waking_pid;
    pb_callback_t waking_target_cpu;
    pb_callback_t waking_prio;
    /* One per event, index into |intern_table| corresponding to the
 comm field of the event. */
    pb_callback_t waking_comm_index;
    pb_callback_t waking_common_flags;
} perfetto_protos_FtraceEventBundle_CompactSched;

/* The result of tracing one or more ftrace data pages from a single per-cpu
 kernel ring buffer. If collating multiple pages' worth of events, all of
 them come from contiguous pages, with no kernel data loss in between. */
typedef struct _perfetto_protos_FtraceEventBundle {
    bool has_cpu;
    uint32_t cpu;
    pb_callback_t event;
    /* Set to true if there was data loss between the last time we've read from
 the corresponding per-cpu kernel buffer, and the earliest event recorded
 in this bundle. */
    bool has_lost_events;
    bool lost_events;
    bool has_compact_sched;
    perfetto_protos_FtraceEventBundle_CompactSched compact_sched;
    /* traced_probes always sets the ftrace_clock to "boot". That is not available
 in older kernels (v3.x). In that case we fallback on "global" or "local".
 When we do that, we report the fallback clock in each bundle so we can do
 proper clock syncing at parsing time in TraceProcessor. We cannot use the
 TracePacket timestamp_clock_id because: (1) there is no per-packet
 timestamp for ftrace bundles; (2) "global" does not match CLOCK_MONOTONIC.
 Having a dedicated and explicit flag allows us to correct further misakes
 in future by looking at the kernel version.
 This field has been introduced in perfetto v19 / Android T (13).
 This field is omitted when the ftrace clock is just "boot", as that is the
 default assumption (and for consistency with the past). */
    bool has_ftrace_clock;
    perfetto_protos_FtraceClock ftrace_clock;
    /* The timestamp according to the ftrace clock, taken at the same instant
 as |boot_timestamp|. This is used to sync ftrace events when a non-boot
 clock is used as the ftrace clock. We don't use the ClockSnapshot packet
 because the ftrace global/local clocks don't match any of the clock_gettime
 domains and can be only read by traced_probes.

 Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED.

 Implementation note: Populated by reading the 'now ts:' field in
 tracefs/per_cpu/cpuX/stat. */
    bool has_ftrace_timestamp;
    int64_t ftrace_timestamp;
    /* The timestamp according to CLOCK_BOOTTIME, taken at the same instant as
 |ftrace_timestamp|. See documentation of |ftrace_timestamp| for
 more info.

 Only set when |ftrace_clock| != FTRACE_CLOCK_UNSPECIFIED. */
    bool has_boot_timestamp;
    int64_t boot_timestamp;
    pb_callback_t error;
    /* Superseded by |previous_bundle_end_timestamp| in perfetto v47+. The
 primary difference is that this field tracked the last timestamp read from
 the per-cpu buffer, while the newer field tracks events that get
 serialised into the trace.
 Added in: perfetto v44. */
    bool has_last_read_event_timestamp;
    uint64_t last_read_event_timestamp;
    /* The timestamp (using ftrace clock) of the last event written into this
 data source on this cpu. In other words: the last event in the previous
 bundle.
 Lets the trace processing find an initial timestamp after which ftrace
 data is known to be valid across all cpus. Of particular importance when
 the perfetto trace buffer is a ring buffer as well, as the overwriting of
 oldest bundles can skew the first valid timestamp per cpu significantly.
 Added in: perfetto v47. */
    bool has_previous_bundle_end_timestamp;
    uint64_t previous_bundle_end_timestamp;
    /* Written only on debuggable android builds if the config sets
 |debug_ftrace_abi|. Contains the raw ring buffer tracing page that the
 implementation could not parse. */
    pb_callback_t broken_abi_trace_page;
} perfetto_protos_FtraceEventBundle;

/* Errors encountered during parsing of the raw ftrace data. In case of ring
 buffer layout errors, the parser skips the rest of the offending kernel
 buffer page and continues from the next page.
 See also FtraceStats.ftrace_parse_errors, which collates all unique errors
 seen within the duration of the trace (even if the affected bundles get
 overwritten in ring buffer mode). */
typedef struct _perfetto_protos_FtraceEventBundle_FtraceError {
    /* Timestamp of the data that we're unable to parse, in the ftrace clock
 domain. Currently, we use the base timestamp of the tracing page
 containing the bad record rather than the time of the record itself. */
    bool has_timestamp;
    uint64_t timestamp;
    bool has_status;
    perfetto_protos_FtraceParseStatus status;
} perfetto_protos_FtraceEventBundle_FtraceError;

typedef struct _perfetto_protos_GpuCounterEvent {
    /* The first trace packet of each session should include counter_spec. */
    bool has_counter_descriptor;
    perfetto_protos_GpuCounterDescriptor counter_descriptor;
    pb_callback_t counters;
    /* optional. Identifier for GPU in a multi-gpu device. */
    bool has_gpu_id;
    int32_t gpu_id;
} perfetto_protos_GpuCounterEvent;

typedef struct _perfetto_protos_GpuCounterEvent_GpuCounter {
    /* required. Identifier for counter. */
    bool has_counter_id;
    uint32_t counter_id;
    pb_size_t which_value;
    union _perfetto_protos_GpuCounterEvent_GpuCounter_value {
        int64_t int_value;
        double double_value;
    } value;
} perfetto_protos_GpuCounterEvent_GpuCounter;

/* Message for logging events GPU data producer. */
typedef struct _perfetto_protos_GpuLog {
    bool has_severity;
    perfetto_protos_GpuLog_Severity severity;
    pb_callback_t tag;
    pb_callback_t log_message;
} perfetto_protos_GpuLog;

/* optional. Additional data for the user. This may include attributes for
 the event like resource ids, shaders, etc. */
typedef struct _perfetto_protos_GpuRenderStageEvent_ExtraData {
    pb_callback_t name;
    pb_callback_t value;
} perfetto_protos_GpuRenderStageEvent_ExtraData;

typedef struct _perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec {
    bool has_context;
    uint64_t context;
    bool has_pid;
    int32_t pid;
} perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec;

/* Deprecated.  Use InternedGpuRenderStageSpecification instead.
 The first trace packet of each session should include a Specifications
 to enumerate *all* IDs that will be used. The timestamp of this packet
 must be earlier than all other packets. Only one packet with Specifications
 is expected. */
typedef struct _perfetto_protos_GpuRenderStageEvent_Specifications {
    bool has_context_spec;
    perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec context_spec;
    /* Labels to categorize the hw Queue this event goes on. */
    pb_callback_t hw_queue;
    /* Labels to categorize render stage(binning, render, compute etc). */
    pb_callback_t stage;
} perfetto_protos_GpuRenderStageEvent_Specifications;

/* next id: 15 */
typedef struct _perfetto_protos_GpuRenderStageEvent {
    /* required. Unique ID for the event. */
    bool has_event_id;
    uint64_t event_id;
    /* optional. Duration of the event in nanoseconds. If unset, this is a
 single time point event. */
    bool has_duration;
    uint64_t duration;
    /* Deprecated. Use hw_queue_iid instead; */
    bool has_hw_queue_id;
    int32_t hw_queue_id;
    /* Deprecated. Use stage_iid instead; */
    bool has_stage_id;
    int32_t stage_id;
    /* required. Graphics context for the event.
 For OpenGL, this is the GL context.
 For Vulkan, this is the VkDevice. */
    bool has_context;
    uint64_t context;
    pb_callback_t extra_data;
    /* Deprecated.  Use hw_queue_iid and stage_iid to refer to
 InternedGpuRenderStageSpecification instead. */
    bool has_specifications;
    perfetto_protos_GpuRenderStageEvent_Specifications specifications;
    /* optional. The render target for this event.
 For OpenGL, this is the GL frame buffer handle.
 For Vulkan, this is the VkFrameBuffer handle. */
    bool has_render_target_handle;
    uint64_t render_target_handle;
    /* optional. The Vulkan render pass handle. */
    bool has_render_pass_handle;
    uint64_t render_pass_handle;
    /* optional. Submission ID generated by the UMD.
 For OpenGL, the ID should map to an API submission (e.g., glFlush,
 glFinish, eglSwapBufffers) event.  The set of submissions to the HW due
 to a single API submission should share the same ID.
 For Vulkan, it should map 1:1 with a vkQueueSubmit. */
    bool has_submission_id;
    uint32_t submission_id;
    /* optional. Identifier for GPU in a multi-gpu device. */
    bool has_gpu_id;
    int32_t gpu_id;
    /* optional. The Vulkan command buffer handle. */
    bool has_command_buffer_handle;
    uint64_t command_buffer_handle;
    /* required. ID to a hardware queue description in the specifications.
 InternedGpuRenderStageSpecification */
    bool has_hw_queue_iid;
    uint64_t hw_queue_iid;
    /* required. ID to a render stage description in the specifications.
 InternedGpuRenderStageSpecification */
    bool has_stage_iid;
    uint64_t stage_iid;
    /* optional. A bit mask representing which render subpasses contributed to
 this render stage event.  Subpass index 0 is represented by setting the
 LSB of the mask.  Additional mask can be added for subpass index greater
 than 63. */
    pb_callback_t render_subpass_index_mask;
    pb_extension_t *extensions;
} perfetto_protos_GpuRenderStageEvent;

typedef struct _perfetto_protos_GpuRenderStageEvent_Specifications_Description {
    pb_callback_t name;
    pb_callback_t description;
} perfetto_protos_GpuRenderStageEvent_Specifications_Description;

/* The iid is the numeric value of either the GL Context or the VkDevice
 handle. */
typedef struct _perfetto_protos_InternedGraphicsContext {
    bool has_iid;
    uint64_t iid;
    bool has_pid;
    int32_t pid;
    bool has_api;
    perfetto_protos_InternedGraphicsContext_Api api;
} perfetto_protos_InternedGraphicsContext;

typedef struct _perfetto_protos_InternedGpuRenderStageSpecification {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
    pb_callback_t description;
    bool has_category;
    perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory category;
} perfetto_protos_InternedGpuRenderStageSpecification;

/* For recording vkSetDebugUtilsObjectNameEXT and
 vkDebugMarkerSetObjectNameEXT */
typedef struct _perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName {
    bool has_pid;
    uint32_t pid;
    bool has_vk_device;
    uint64_t vk_device;
    /* VkObjectType.  Value must match
 https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkObjectType.html. */
    bool has_object_type;
    int32_t object_type;
    bool has_object;
    uint64_t object;
    pb_callback_t object_name;
} perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName;

/* For recording vkQueueSubmit call. */
typedef struct _perfetto_protos_VulkanApiEvent_VkQueueSubmit {
    bool has_duration_ns;
    uint64_t duration_ns;
    bool has_pid;
    uint32_t pid;
    bool has_tid;
    uint32_t tid;
    bool has_vk_queue;
    uint64_t vk_queue;
    pb_callback_t vk_command_buffers;
    /* Submission ID.  An identifier unique to each vkQueueSubmit call.  This
 submission_id must match GpuRenderStageEvent.submission_id if the
 GpuRenderStageEvent is created due to this vkQueueSubmit. */
    bool has_submission_id;
    uint32_t submission_id;
} perfetto_protos_VulkanApiEvent_VkQueueSubmit;

/* Message for recording the Vulkan call. */
typedef struct _perfetto_protos_VulkanApiEvent {
    pb_size_t which_event;
    union _perfetto_protos_VulkanApiEvent_event {
        perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName vk_debug_utils_object_name;
        perfetto_protos_VulkanApiEvent_VkQueueSubmit vk_queue_submit;
    } event;
} perfetto_protos_VulkanApiEvent;

/* All the information that cannot be sent within a VulkanMemoryEvent message,
 are sent as annotations to the main memory event. One example is the
 properties of the object that consumes the allocated memory, for example, a
 buffer or an image.
 key_iid and string_iid are both interned strings. Original string value is
 stored in vulkan_memory_keys from
 protos/perfetto/trace/interned_data/interned_data.proto. */
typedef struct _perfetto_protos_VulkanMemoryEventAnnotation {
    bool has_key_iid;
    uint64_t key_iid;
    pb_size_t which_value;
    union _perfetto_protos_VulkanMemoryEventAnnotation_value {
        int64_t int_value;
        double double_value;
        uint64_t string_iid;
    } value;
} perfetto_protos_VulkanMemoryEventAnnotation;

/* Each VulkanMemoryEvent encompasses information regarding one single function
 call that results in reserving, binding or freeing host or GPU memory. There
 is a special message type, ANNOTATIONS, which is used to communicate
 information that are not directly related to a memory event, nonetheless are
 essential to understand the memory usage. An example is the size and memory
 types of the memory heaps.

 Next reserved id: 10 (up to 15).
 Next id: 21. */
typedef struct _perfetto_protos_VulkanMemoryEvent {
    bool has_source;
    perfetto_protos_VulkanMemoryEvent_Source source;
    bool has_operation;
    perfetto_protos_VulkanMemoryEvent_Operation operation;
    bool has_timestamp;
    int64_t timestamp;
    bool has_pid;
    uint32_t pid;
    bool has_memory_address;
    uint64_t memory_address;
    bool has_memory_size;
    uint64_t memory_size;
    /* Interned string. Original string value is stored in function_names from
 protos/perfetto/trace/interned_data/interned_data.proto. */
    bool has_caller_iid;
    uint64_t caller_iid;
    bool has_allocation_scope;
    perfetto_protos_VulkanMemoryEvent_AllocationScope allocation_scope;
    /* Extra related information, e.g., create configs, etc. */
    pb_callback_t annotations;
    /* Field IDs used for device memory (low sampling rate) */
    bool has_device;
    uint64_t device;
    bool has_device_memory;
    uint64_t device_memory;
    bool has_memory_type;
    uint32_t memory_type;
    bool has_heap;
    uint32_t heap;
    bool has_object_handle;
    uint64_t object_handle;
} perfetto_protos_VulkanMemoryEvent;

/* The interning fields in this file can refer to 2 different intern tables,
 depending on the message they are used in. If the interned fields are present
 in ProfilePacket proto, then the intern tables included in the ProfilePacket
 should be used. If the intered fields are present in the
 StreamingProfilePacket proto, then the intern tables included in all of the
 previous InternedData message with same sequence ID should be used.
 TODO(fmayer): Move to the intern tables to a common location. */
typedef struct _perfetto_protos_InternedString {
    bool has_iid;
    uint64_t iid;
    pb_callback_t str;
} perfetto_protos_InternedString;

/* Source line info. */
typedef struct _perfetto_protos_Line {
    pb_callback_t function_name;
    pb_callback_t source_file_name;
    bool has_line_number;
    uint32_t line_number;
} perfetto_protos_Line;

/* Symbols for a given address in a module. */
typedef struct _perfetto_protos_AddressSymbols {
    bool has_address;
    uint64_t address;
    /* Source lines that correspond to this address.

 These are repeated because when inlining happens, multiple functions'
 frames can be at a single address. Imagine function Foo calling the
 std::vector<int> constructor, which gets inlined at 0xf00. We then get
 both Foo and the std::vector<int> constructor when we symbolize the
 address. */
    pb_callback_t lines;
} perfetto_protos_AddressSymbols;

/* Symbols for addresses seen in a module.
 Used in re-symbolisation of complete traces. */
typedef struct _perfetto_protos_ModuleSymbols {
    /* Fully qualified path to the mapping.
 E.g. /system/lib64/libc.so. */
    pb_callback_t path;
    /* .note.gnu.build-id on Linux (not hex encoded).
 uuid on MacOS.
 Module GUID on Windows. */
    pb_callback_t build_id;
    pb_callback_t address_symbols;
} perfetto_protos_ModuleSymbols;

typedef struct _perfetto_protos_Mapping {
    /* Interning key. */
    bool has_iid;
    uint64_t iid;
    /* Interning key. */
    bool has_build_id;
    uint64_t build_id;
    bool has_start_offset;
    uint64_t start_offset;
    bool has_start;
    uint64_t start;
    bool has_end;
    uint64_t end;
    bool has_load_bias;
    uint64_t load_bias;
    /* E.g. ["system", "lib64", "libc.so"]
 id of string. */
    pb_callback_t path_string_ids;
    /* This is not set on Android 10. */
    bool has_exact_offset;
    uint64_t exact_offset;
} perfetto_protos_Mapping;

typedef struct _perfetto_protos_Frame {
    /* Interning key */
    bool has_iid;
    uint64_t iid;
    /* E.g. "fopen"
 id of string. */
    bool has_function_name_id;
    uint64_t function_name_id;
    bool has_mapping_id;
    uint64_t mapping_id;
    bool has_rel_pc;
    uint64_t rel_pc;
} perfetto_protos_Frame;

typedef struct _perfetto_protos_Callstack {
    bool has_iid;
    uint64_t iid;
    /* Frames of this callstack. Bottom frame first. */
    pb_callback_t frame_ids;
} perfetto_protos_Callstack;

typedef struct _perfetto_protos_HistogramName {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
} perfetto_protos_HistogramName;

/* An individual histogram sample logged via Chrome's UMA metrics system. */
typedef struct _perfetto_protos_ChromeHistogramSample {
    /* MD5 hash of the metric name. Either |name_hash| or |name|/|name_iid| or
 both must be present. */
    bool has_name_hash;
    uint64_t name_hash;
    pb_callback_t name;
    bool has_sample;
    int64_t sample;
    /* Interned HistogramName. Only one of |name|, |name_iid| can be set. */
    bool has_name_iid;
    uint64_t name_iid;
} perfetto_protos_ChromeHistogramSample;

/* Deprecated legacy way to use nested values. Only kept for
 backwards-compatibility in TraceProcessor. May be removed in the future -
 code filling protos should use |dict_entries| and |array_values| instead. */
typedef struct _perfetto_protos_DebugAnnotation_NestedValue {
    bool has_nested_type;
    perfetto_protos_DebugAnnotation_NestedValue_NestedType nested_type;
    pb_callback_t dict_keys;
    pb_callback_t dict_values;
    pb_callback_t array_values;
    bool has_int_value;
    int64_t int_value;
    bool has_double_value;
    double double_value;
    bool has_bool_value;
    bool bool_value;
    pb_callback_t string_value;
} perfetto_protos_DebugAnnotation_NestedValue;

/* Proto representation of untyped key/value annotations provided in TRACE_EVENT
 macros. Users of the Perfetto SDK should prefer to use the
 perfetto::TracedValue API to fill these protos, rather than filling them
 manually.

 Debug annotations are intended for debug use and are not considered a stable
 API of the trace contents. Trace-based metrics that use debug annotation
 values are prone to breakage, so please rely on typed TrackEvent fields for
 these instead.

 DebugAnnotations support nested arrays and dictionaries. Each entry is
 encoded as a single DebugAnnotation message. Only dictionary entries
 set the "name" field. The TrackEvent message forms an implicit root
 dictionary.

 Example TrackEvent with nested annotations:
   track_event {
     debug_annotations {
       name: "foo"
       dict_entries {
         name: "a"
         bool_value: true
       }
       dict_entries {
         name: "b"
         int_value: 123
       }
     }
     debug_annotations {
       name: "bar"
       array_values {
         string_value: "hello"
       }
       array_values {
         string_value: "world"
       }
     }
   }

 Next ID: 18.
 Reserved ID: 15 */
typedef struct _perfetto_protos_DebugAnnotation {
    pb_size_t which_name_field;
    union _perfetto_protos_DebugAnnotation_name_field {
        /* interned DebugAnnotationName. */
        uint64_t name_iid;
        /* non-interned variant. */
        pb_callback_t name;
    } name_field;
    pb_size_t which_value;
    union _perfetto_protos_DebugAnnotation_value {
        bool bool_value;
        uint64_t uint_value;
        int64_t int_value;
        double double_value;
        /* interned and non-interned variants of strings. */
        pb_callback_t string_value;
        /* Pointers are stored in a separate type as the JSON output treats them
     differently from other uint64 values. */
        uint64_t pointer_value;
        /* Deprecated. Use dict_entries / array_values instead. */
        perfetto_protos_DebugAnnotation_NestedValue nested_value;
        /* Legacy instrumentation may not support conversion of nested data to
     NestedValue yet. */
        pb_callback_t legacy_json_value;
        /* Corresponds to |debug_annotation_string_values| field in InternedData. */
        uint64_t string_value_iid;
    } value;
    pb_callback_t dict_entries;
    pb_callback_t array_values;
    pb_size_t which_proto_type_descriptor;
    union _perfetto_protos_DebugAnnotation_proto_type_descriptor {
        /* interned DebugAnnotationValueTypeName. */
        uint64_t proto_type_name_iid;
        pb_callback_t proto_type_name;
    } proto_type_descriptor;
    pb_callback_t proto_value;
} perfetto_protos_DebugAnnotation;

typedef struct _perfetto_protos_DebugAnnotationName {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
} perfetto_protos_DebugAnnotationName;

/* See the |proto_type_descriptor| comment. */
typedef struct _perfetto_protos_DebugAnnotationValueTypeName {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
} perfetto_protos_DebugAnnotationValueTypeName;

typedef struct _perfetto_protos_LogMessage {
    /* interned SourceLocation. */
    bool has_source_location_iid;
    uint64_t source_location_iid;
    /* interned LogMessageBody. */
    bool has_body_iid;
    uint64_t body_iid;
    bool has_prio;
    perfetto_protos_LogMessage_Priority prio;
} perfetto_protos_LogMessage;

typedef struct _perfetto_protos_LogMessageBody {
    bool has_iid;
    uint64_t iid;
    pb_callback_t body;
} perfetto_protos_LogMessageBody;

/* A source location, represented as a native symbol.
 This is similar to `message Frame` from
 protos/perfetto/trace/profiling/profile_common.proto, but for abitrary
 source code locations (for example in track event args), not stack frames. */
typedef struct _perfetto_protos_UnsymbolizedSourceLocation {
    bool has_iid;
    uint64_t iid;
    bool has_mapping_id;
    uint64_t mapping_id;
    bool has_rel_pc;
    uint64_t rel_pc;
} perfetto_protos_UnsymbolizedSourceLocation;

typedef struct _perfetto_protos_SourceLocation {
    bool has_iid;
    uint64_t iid;
    pb_callback_t file_name;
    pb_callback_t function_name;
    bool has_line_number;
    uint32_t line_number;
} perfetto_protos_SourceLocation;

/* A list of processes connected to the tracing service. */
typedef struct _perfetto_protos_ChromeActiveProcesses {
    pb_callback_t pid;
} perfetto_protos_ChromeActiveProcesses;

/* Trace event arguments for application state changes. */
typedef struct _perfetto_protos_ChromeApplicationStateInfo {
    bool has_application_state;
    perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState application_state;
} perfetto_protos_ChromeApplicationStateInfo;

/* Next id: 6 */
typedef struct _perfetto_protos_ChromeCompositorStateMachine_MajorState {
    bool has_next_action;
    perfetto_protos_ChromeCompositorSchedulerAction next_action;
    bool has_begin_impl_frame_state;
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState begin_impl_frame_state;
    bool has_begin_main_frame_state;
    perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState begin_main_frame_state;
    bool has_layer_tree_frame_sink_state;
    perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState layer_tree_frame_sink_state;
    bool has_forced_redraw_state;
    perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState forced_redraw_state;
} perfetto_protos_ChromeCompositorStateMachine_MajorState;

/* Next id: 47 */
typedef struct _perfetto_protos_ChromeCompositorStateMachine_MinorState {
    bool has_commit_count;
    int32_t commit_count;
    bool has_current_frame_number;
    int32_t current_frame_number;
    bool has_last_frame_number_submit_performed;
    int32_t last_frame_number_submit_performed;
    bool has_last_frame_number_draw_performed;
    int32_t last_frame_number_draw_performed;
    bool has_last_frame_number_begin_main_frame_sent;
    int32_t last_frame_number_begin_main_frame_sent;
    bool has_did_draw;
    bool did_draw;
    bool has_did_send_begin_main_frame_for_current_frame;
    bool did_send_begin_main_frame_for_current_frame;
    bool has_did_notify_begin_main_frame_not_expected_until;
    bool did_notify_begin_main_frame_not_expected_until;
    bool has_did_notify_begin_main_frame_not_expected_soon;
    bool did_notify_begin_main_frame_not_expected_soon;
    bool has_wants_begin_main_frame_not_expected;
    bool wants_begin_main_frame_not_expected;
    bool has_did_commit_during_frame;
    bool did_commit_during_frame;
    bool has_did_invalidate_layer_tree_frame_sink;
    bool did_invalidate_layer_tree_frame_sink;
    bool has_did_perform_impl_side_invalidaion;
    bool did_perform_impl_side_invalidaion;
    bool has_did_prepare_tiles;
    bool did_prepare_tiles;
    bool has_consecutive_checkerboard_animations;
    int32_t consecutive_checkerboard_animations;
    bool has_pending_submit_frames;
    int32_t pending_submit_frames;
    bool has_submit_frames_with_current_layer_tree_frame_sink;
    int32_t submit_frames_with_current_layer_tree_frame_sink;
    bool has_needs_redraw;
    bool needs_redraw;
    bool has_needs_prepare_tiles;
    bool needs_prepare_tiles;
    bool has_needs_begin_main_frame;
    bool needs_begin_main_frame;
    bool has_needs_one_begin_impl_frame;
    bool needs_one_begin_impl_frame;
    bool has_visible;
    bool visible;
    bool has_begin_frame_source_paused;
    bool begin_frame_source_paused;
    bool has_can_draw;
    bool can_draw;
    bool has_resourceless_draw;
    bool resourceless_draw;
    bool has_has_pending_tree;
    bool has_pending_tree;
    bool has_pending_tree_is_ready_for_activation;
    bool pending_tree_is_ready_for_activation;
    bool has_active_tree_needs_first_draw;
    bool active_tree_needs_first_draw;
    bool has_active_tree_is_ready_to_draw;
    bool active_tree_is_ready_to_draw;
    bool has_did_create_and_initialize_first_layer_tree_frame_sink;
    bool did_create_and_initialize_first_layer_tree_frame_sink;
    bool has_tree_priority;
    perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority tree_priority;
    bool has_scroll_handler_state;
    perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState scroll_handler_state;
    bool has_critical_begin_main_frame_to_activate_is_fast;
    bool critical_begin_main_frame_to_activate_is_fast;
    bool has_main_thread_missed_last_deadline;
    bool main_thread_missed_last_deadline;
    bool has_video_needs_begin_frames;
    bool video_needs_begin_frames;
    bool has_defer_begin_main_frame;
    bool defer_begin_main_frame;
    bool has_last_commit_had_no_updates;
    bool last_commit_had_no_updates;
    bool has_did_draw_in_last_frame;
    bool did_draw_in_last_frame;
    bool has_did_submit_in_last_frame;
    bool did_submit_in_last_frame;
    bool has_needs_impl_side_invalidation;
    bool needs_impl_side_invalidation;
    bool has_current_pending_tree_is_impl_side;
    bool current_pending_tree_is_impl_side;
    bool has_previous_pending_tree_was_impl_side;
    bool previous_pending_tree_was_impl_side;
    bool has_processing_animation_worklets_for_active_tree;
    bool processing_animation_worklets_for_active_tree;
    bool has_processing_animation_worklets_for_pending_tree;
    bool processing_animation_worklets_for_pending_tree;
    bool has_processing_paint_worklets_for_pending_tree;
    bool processing_paint_worklets_for_pending_tree;
} perfetto_protos_ChromeCompositorStateMachine_MinorState;

/* Describes the current values stored in the Chrome Compositor state machine.
 Next id: 3 */
typedef struct _perfetto_protos_ChromeCompositorStateMachine {
    bool has_major_state;
    perfetto_protos_ChromeCompositorStateMachine_MajorState major_state;
    bool has_minor_state;
    perfetto_protos_ChromeCompositorStateMachine_MinorState minor_state;
} perfetto_protos_ChromeCompositorStateMachine;

/* Next id: 13 */
typedef struct _perfetto_protos_BeginFrameArgs {
    bool has_type;
    perfetto_protos_BeginFrameArgs_BeginFrameArgsType type;
    bool has_source_id;
    uint64_t source_id;
    bool has_sequence_number;
    uint64_t sequence_number;
    bool has_frame_time_us;
    int64_t frame_time_us;
    bool has_deadline_us;
    int64_t deadline_us;
    bool has_interval_delta_us;
    int64_t interval_delta_us;
    bool has_on_critical_path;
    bool on_critical_path;
    bool has_animate_only;
    bool animate_only;
    pb_size_t which_created_from;
    union _perfetto_protos_BeginFrameArgs_created_from {
        /* The interned SourceLocation. */
        uint64_t source_location_iid;
        /* The SourceLocation that this args was created from.
     TODO(nuskos): Eventually we will support interning inside of
     TypedArgument TraceEvents and then we shouldn't need this SourceLocation
     since we can emit it as part of the InternedData message. When we can
     remove this |source_location|. */
        perfetto_protos_SourceLocation source_location;
    } created_from;
    bool has_frames_throttled_since_last;
    int64_t frames_throttled_since_last;
} perfetto_protos_BeginFrameArgs;

typedef struct _perfetto_protos_BeginImplFrameArgs_TimestampsInUs {
    bool has_interval_delta;
    int64_t interval_delta;
    bool has_now_to_deadline_delta;
    int64_t now_to_deadline_delta;
    bool has_frame_time_to_now_delta;
    int64_t frame_time_to_now_delta;
    bool has_frame_time_to_deadline_delta;
    int64_t frame_time_to_deadline_delta;
    bool has_now;
    int64_t now;
    bool has_frame_time;
    int64_t frame_time;
    bool has_deadline;
    int64_t deadline;
} perfetto_protos_BeginImplFrameArgs_TimestampsInUs;

/* Next id: 7 */
typedef struct _perfetto_protos_BeginImplFrameArgs {
    bool has_updated_at_us;
    int64_t updated_at_us;
    bool has_finished_at_us;
    int64_t finished_at_us;
    bool has_state;
    perfetto_protos_BeginImplFrameArgs_State state;
    pb_size_t which_args;
    union _perfetto_protos_BeginImplFrameArgs_args {
        /* Only set if |state| is BEGIN_FRAME_FINISHED. */
        perfetto_protos_BeginFrameArgs current_args;
        /* Only set if |state| is BEGIN_FRAME_USING. */
        perfetto_protos_BeginFrameArgs last_args;
    } args;
    bool has_timestamps_in_us;
    perfetto_protos_BeginImplFrameArgs_TimestampsInUs timestamps_in_us;
} perfetto_protos_BeginImplFrameArgs;

typedef struct _perfetto_protos_BeginFrameObserverState {
    bool has_dropped_begin_frame_args;
    int64_t dropped_begin_frame_args;
    bool has_last_begin_frame_args;
    perfetto_protos_BeginFrameArgs last_begin_frame_args;
} perfetto_protos_BeginFrameObserverState;

typedef struct _perfetto_protos_BeginFrameSourceState {
    bool has_source_id;
    uint32_t source_id;
    bool has_paused;
    bool paused;
    bool has_num_observers;
    uint32_t num_observers;
    bool has_last_begin_frame_args;
    perfetto_protos_BeginFrameArgs last_begin_frame_args;
} perfetto_protos_BeginFrameSourceState;

typedef struct _perfetto_protos_CompositorTimingHistory {
    bool has_begin_main_frame_queue_critical_estimate_delta_us;
    int64_t begin_main_frame_queue_critical_estimate_delta_us;
    bool has_begin_main_frame_queue_not_critical_estimate_delta_us;
    int64_t begin_main_frame_queue_not_critical_estimate_delta_us;
    bool has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us;
    int64_t begin_main_frame_start_to_ready_to_commit_estimate_delta_us;
    bool has_commit_to_ready_to_activate_estimate_delta_us;
    int64_t commit_to_ready_to_activate_estimate_delta_us;
    bool has_prepare_tiles_estimate_delta_us;
    int64_t prepare_tiles_estimate_delta_us;
    bool has_activate_estimate_delta_us;
    int64_t activate_estimate_delta_us;
    bool has_draw_estimate_delta_us;
    int64_t draw_estimate_delta_us;
} perfetto_protos_CompositorTimingHistory;

/* Next id: 18 */
typedef struct _perfetto_protos_ChromeCompositorSchedulerState {
    bool has_state_machine;
    perfetto_protos_ChromeCompositorStateMachine state_machine;
    bool has_observing_begin_frame_source;
    bool observing_begin_frame_source;
    bool has_begin_impl_frame_deadline_task;
    bool begin_impl_frame_deadline_task;
    bool has_pending_begin_frame_task;
    bool pending_begin_frame_task;
    bool has_skipped_last_frame_missed_exceeded_deadline;
    bool skipped_last_frame_missed_exceeded_deadline;
    bool has_inside_action;
    perfetto_protos_ChromeCompositorSchedulerAction inside_action;
    bool has_deadline_mode;
    perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode deadline_mode;
    bool has_deadline_us;
    int64_t deadline_us;
    bool has_deadline_scheduled_at_us;
    int64_t deadline_scheduled_at_us;
    bool has_now_us;
    int64_t now_us;
    bool has_now_to_deadline_delta_us;
    int64_t now_to_deadline_delta_us;
    bool has_now_to_deadline_scheduled_at_delta_us;
    int64_t now_to_deadline_scheduled_at_delta_us;
    bool has_begin_impl_frame_args;
    perfetto_protos_BeginImplFrameArgs begin_impl_frame_args;
    bool has_begin_frame_observer_state;
    perfetto_protos_BeginFrameObserverState begin_frame_observer_state;
    bool has_begin_frame_source_state;
    perfetto_protos_BeginFrameSourceState begin_frame_source_state;
    bool has_compositor_timing_history;
    perfetto_protos_CompositorTimingHistory compositor_timing_history;
} perfetto_protos_ChromeCompositorSchedulerState;

/* Details about ContentSettings trace events. */
typedef struct _perfetto_protos_ChromeContentSettingsEventInfo {
    /* The number of user defined hostname patterns for content settings at
 browser start. Similar to UMA histogram
 'ContentSettings.NumberOfExceptions'. */
    bool has_number_of_exceptions;
    uint32_t number_of_exceptions;
} perfetto_protos_ChromeContentSettingsEventInfo;

typedef struct _perfetto_protos_ChromeFrameReporter {
    bool has_state;
    perfetto_protos_ChromeFrameReporter_State state;
    /* The reason is set only if |state| is not |STATE_UPDATED_ALL|. */
    bool has_reason;
    perfetto_protos_ChromeFrameReporter_FrameDropReason reason;
    bool has_frame_source;
    uint64_t frame_source;
    bool has_frame_sequence;
    uint64_t frame_sequence;
    /* If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
 |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
 smoothness. */
    bool has_affects_smoothness;
    bool affects_smoothness;
    /* The type of active scroll. */
    bool has_scroll_state;
    perfetto_protos_ChromeFrameReporter_ScrollState scroll_state;
    /* If any main thread animation is active during this frame. */
    bool has_has_main_animation;
    bool has_main_animation;
    /* If any compositor thread animation is active during this frame. */
    bool has_has_compositor_animation;
    bool has_compositor_animation;
    /* If any touch-driven UX (not scroll) is active during this frame. */
    bool has_has_smooth_input_main;
    bool has_smooth_input_main;
    /* Whether the frame contained any missing content (i.e. whether there was
 checkerboarding in the frame).  If has_missing_content,
 checkerboarded_needs_raster and checkerboarded_needs_record all have
 values, has_missing_content should equal checkerboarded_needs_raster ||
 checkerboarded_needs_record. */
    bool has_has_missing_content;
    bool has_missing_content;
    /* The id of layer_tree_host that the frame has been produced for. */
    bool has_layer_tree_host_id;
    uint64_t layer_tree_host_id;
    /* If total latency of PipelineReporter exceeds a certain limit. */
    bool has_has_high_latency;
    bool has_high_latency;
    /* Indicate if the frame is "FORKED" (i.e. a PipelineReporter event starts at
 the same frame sequence as another PipelineReporter) or "BACKFILL"
 (i.e. dropped frames when there are no partial compositor updates). */
    bool has_frame_type;
    perfetto_protos_ChromeFrameReporter_FrameType frame_type;
    /* The breakdown stage of PipelineReporter that is most likely accountable for
 high latency. */
    pb_callback_t high_latency_contribution_stage;
    /* Whether the frame contained any content that is not fully rastered. */
    bool has_checkerboarded_needs_raster;
    bool checkerboarded_needs_raster;
    /* Whether the frame contained any content that is not fully recorded. */
    bool has_checkerboarded_needs_record;
    bool checkerboarded_needs_record;
    /* viz::BeginFrameArgs.trace_id of the frame (before surface aggregation). See
 also ChromeTrackEvent.EventLatency.surface_frame_trace_id. */
    bool has_surface_frame_trace_id;
    int64_t surface_frame_trace_id;
    /* gfx::PresentationFeedback.display_trace_id of the frame (after surface
 aggregation). See also ChromeTrackEvent.EventLatency.display_trace_id. */
    bool has_display_trace_id;
    int64_t display_trace_id;
} perfetto_protos_ChromeFrameReporter;

/* Details about one of Chrome's keyed services associated with the event. */
typedef struct _perfetto_protos_ChromeKeyedService {
    /* Name of the service, e.g. "MediaRouter", "PreviewsService", etc. (in
 Chrome, these are static strings known at compile time). */
    pb_callback_t name;
} perfetto_protos_ChromeKeyedService;

typedef struct _perfetto_protos_ChromeLatencyInfo {
    bool has_trace_id;
    int64_t trace_id;
    bool has_step;
    perfetto_protos_ChromeLatencyInfo_Step step;
    bool has_frame_tree_node_id;
    int32_t frame_tree_node_id;
    pb_callback_t component_info;
    bool has_is_coalesced;
    bool is_coalesced;
    bool has_gesture_scroll_id;
    int64_t gesture_scroll_id;
    bool has_touch_id;
    int64_t touch_id;
    /* The type of input corresponding to this `ChromeLatencyInfo`. */
    bool has_input_type;
    perfetto_protos_ChromeLatencyInfo_InputType input_type;
} perfetto_protos_ChromeLatencyInfo;

typedef struct _perfetto_protos_ChromeLatencyInfo_ComponentInfo {
    bool has_component_type;
    perfetto_protos_ChromeLatencyInfo_LatencyComponentType component_type;
    /* Microsecond timestamp in CLOCK_MONOTONIC domain */
    bool has_time_us;
    uint64_t time_us;
} perfetto_protos_ChromeLatencyInfo_ComponentInfo;

/* Details about a legacy Chrome IPC message that is either sent by the event.
 TODO(eseckler): Also use this message on the receiving side? */
typedef struct _perfetto_protos_ChromeLegacyIpc {
    /* Corresponds to the message class type defined in Chrome's IPCMessageStart
 enum, e.g. FrameMsgStart, */
    bool has_message_class;
    perfetto_protos_ChromeLegacyIpc_MessageClass message_class;
    /* Line number of the message definition. See Chrome's IPC_MESSAGE_ID and
 IPC_MESSAGE_START macros. */
    bool has_message_line;
    uint32_t message_line;
} perfetto_protos_ChromeLegacyIpc;

/* Details about Chrome message pump events */
typedef struct _perfetto_protos_ChromeMessagePump {
    /* True if there are sent messages in the queue. */
    bool has_sent_messages_in_queue;
    bool sent_messages_in_queue;
    /* Interned SourceLocation of IO handler that MessagePumpForIO is about to
 invoke. */
    bool has_io_handler_location_iid;
    uint64_t io_handler_location_iid;
} perfetto_protos_ChromeMessagePump;

/* Contains information to identify mojo handling events. The trace events in
 mojo are common for all mojo interfaces and this information is used to
 identify who is the caller or callee. */
typedef struct _perfetto_protos_ChromeMojoEventInfo {
    /* Contains the interface name or the file name of the creator of a mojo
 handle watcher, recorded when an event if notified to the watcher. The code
 that runs within the track event belongs to the interface. */
    pb_callback_t watcher_notify_interface_tag;
    /* The hash of the IPC message that is being handled. */
    bool has_ipc_hash;
    uint32_t ipc_hash;
    /* A static string representing the mojo interface name of the message that is
 being handled. */
    pb_callback_t mojo_interface_tag;
    /* Refers to an interned UnsymbolizedSourceLocation.
 The UnsymbolizedSourceLocation contains the interface method that's being
 handled, represented as a native symbol.
 The native symbol can be symbolized after the trace is recorded.
 Not using a symbolized source location for official Chromium builds to
 reduce binary size - emitting file/function names as strings into the
 trace requires storing them in the binary, which causes a significant
 binary size bloat for Chromium. */
    bool has_mojo_interface_method_iid;
    uint64_t mojo_interface_method_iid;
    /* Indicate whether this is a message or reply. */
    bool has_is_reply;
    bool is_reply;
    /* The payload size of the message being sent through mojo messages. */
    bool has_payload_size;
    uint64_t payload_size;
    /* Represents the size of the message. Includes all headers and user payload. */
    bool has_data_num_bytes;
    uint64_t data_num_bytes;
} perfetto_protos_ChromeMojoEventInfo;

typedef struct _perfetto_protos_ChromeRendererSchedulerState {
    bool has_rail_mode;
    perfetto_protos_ChromeRAILMode rail_mode;
    bool has_is_backgrounded;
    bool is_backgrounded;
    bool has_is_hidden;
    bool is_hidden;
} perfetto_protos_ChromeRendererSchedulerState;

/* Details about a UI interaction initiated by the user, such as opening or
 closing a tab or a context menu. */
typedef struct _perfetto_protos_ChromeUserEvent {
    /* Name of the action, e.g. "NewTab", "ShowBookmarkManager", etc. (in
 Chrome, these are usually static strings known at compile time, or
 concatenations of multiple such static strings). */
    pb_callback_t action;
    /* MD5 hash of the action string. */
    bool has_action_hash;
    uint64_t action_hash;
} perfetto_protos_ChromeUserEvent;

/* Details about HWNDMessageHandler trace events. */
typedef struct _perfetto_protos_ChromeWindowHandleEventInfo {
    bool has_dpi;
    uint32_t dpi;
    bool has_message_id;
    uint32_t message_id;
    bool has_hwnd_ptr;
    uint64_t hwnd_ptr;
} perfetto_protos_ChromeWindowHandleEventInfo;

typedef struct _perfetto_protos_Screenshot {
    pb_callback_t jpg_image;
} perfetto_protos_Screenshot;

/* TrackEvent arguments describing the execution of a task. */
typedef struct _perfetto_protos_TaskExecution {
    /* Source location that the task was posted from.
 interned SourceLocation. */
    bool has_posted_from_iid;
    uint64_t posted_from_iid;
} perfetto_protos_TaskExecution;

/* Apart from {category, time, thread time, tid, pid}, other legacy trace
 event attributes are initially simply proxied for conversion to a JSON
 trace. We intend to gradually transition these attributes to similar native
 features in TrackEvent (e.g. async + flow events), or deprecate them
 without replacement where transition is unsuitable.

 Next reserved id: 16 (up to 16).
 Next id: 20. */
typedef struct _perfetto_protos_TrackEvent_LegacyEvent {
    /* Deprecated, use TrackEvent::name(_iid) instead.
 interned EventName. */
    bool has_name_iid;
    uint64_t name_iid;
    bool has_phase;
    int32_t phase;
    bool has_duration_us;
    int64_t duration_us;
    bool has_thread_duration_us;
    int64_t thread_duration_us;
    pb_size_t which_id;
    union _perfetto_protos_TrackEvent_LegacyEvent_id {
        uint64_t unscoped_id;
        uint64_t local_id;
        uint64_t global_id;
    } id;
    /* Additional optional scope for |id|. */
    pb_callback_t id_scope;
    /* Idenfifies a flow. Flow events with the same bind_id are connected. */
    bool has_bind_id;
    uint64_t bind_id;
    /* Consider the thread timestamps for async BEGIN/END event pairs as valid. */
    bool has_use_async_tts;
    bool use_async_tts;
    /* Use the enclosing slice as binding point for a flow end event instead of
 the next slice. Flow start/step events always bind to the enclosing
 slice. */
    bool has_bind_to_enclosing;
    bool bind_to_enclosing;
    bool has_flow_direction;
    perfetto_protos_TrackEvent_LegacyEvent_FlowDirection flow_direction;
    bool has_instant_event_scope;
    perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope instant_event_scope;
    /* Elapsed retired instruction count during the event. */
    bool has_thread_instruction_delta;
    int64_t thread_instruction_delta;
    /* Override the pid/tid if the writer needs to emit events on behalf of
 another process/thread. This should be the exception. Normally, the
 pid+tid from ThreadDescriptor is used. */
    bool has_pid_override;
    int32_t pid_override;
    bool has_tid_override;
    int32_t tid_override;
} perfetto_protos_TrackEvent_LegacyEvent;

/* Trace events emitted by client instrumentation library (TRACE_EVENT macros),
 which describe activity on a track, such as a thread or asynchronous event
 track. The track is specified using separate TrackDescriptor messages and
 referred to via the track's UUID.

 A simple TrackEvent packet specifies a timestamp, category, name and type:
 ```protobuf
   trace_packet {
     timestamp: 1000
     track_event {
       categories: ["my_cat"]
       name: "my_event"
       type: TYPE_INSTANT
      }
    }
 ```

 To associate an event with a custom track (e.g. a thread), the track is
 defined in a separate packet and referred to from the TrackEvent by its UUID:
 ```protobuf
   trace_packet {
     track_descriptor {
       track_uuid: 1234
       name: "my_track"

       // Optionally, associate the track with a thread.
       thread_descriptor {
         pid: 10
         tid: 10
         ..
       }
     }
   }
 ```

 A pair of TYPE_SLICE_BEGIN and _END events form a slice on the track:

 ```protobuf
   trace_packet {
     timestamp: 1200
     track_event {
       track_uuid: 1234
       categories: ["my_cat"]
       name: "my_slice"
       type: TYPE_SLICE_BEGIN
     }
   }
   trace_packet {
     timestamp: 1400
     track_event {
       track_uuid: 1234
       type: TYPE_SLICE_END
     }
   }
 ```
 TrackEvents also support optimizations to reduce data repetition and encoded
 data size, e.g. through data interning (names, categories, ...) and delta
 encoding of timestamps/counters. For details, see the InternedData message.
 Further, default values for attributes of events on the same sequence (e.g.
 their default track association) can be emitted as part of a
 TrackEventDefaults message.

 Next reserved id: 13 (up to 15). Next id: 52. */
typedef struct _perfetto_protos_TrackEvent {
    pb_size_t which_timestamp;
    union _perfetto_protos_TrackEvent_timestamp {
        /* Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     calculate the absolute timestamp value, sum up all delta values of the
     preceding TrackEvents since the last ThreadDescriptor and add the sum to
     the |reference_timestamp| in ThreadDescriptor. This value should always
     be positive. */
        int64_t timestamp_delta_us;
        /* Absolute value (e.g. a manually specified timestamp in the macro).
     This is a one-off value that does not affect delta timestamp computation
     in subsequent TrackEvents. */
        int64_t timestamp_absolute_us;
    } timestamp;
    pb_size_t which_thread_time;
    union _perfetto_protos_TrackEvent_thread_time {
        /* Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
     calculate the absolute timestamp value, sum up all delta values of the
     preceding TrackEvents since the last ThreadDescriptor and add the sum to
     the |reference_timestamp| in ThreadDescriptor. This value should always
     be positive. */
        int64_t thread_time_delta_us;
        /* This is a one-off absolute value that does not affect delta timestamp
     computation in subsequent TrackEvents. */
        int64_t thread_time_absolute_us;
    } thread_time;
    /* Names of categories of the event. In the client library, categories are a
 way to turn groups of individual events on or off.
 interned EventCategoryName. */
    pb_callback_t category_iids;
    /* Unstable key/value annotations shown in the trace viewer but not intended
 for metrics use. */
    pb_callback_t debug_annotations;
    /* Typed event arguments: */
    bool has_task_execution;
    perfetto_protos_TaskExecution task_execution;
    bool has_legacy_event;
    perfetto_protos_TrackEvent_LegacyEvent legacy_event;
    pb_size_t which_thread_instruction_count;
    union _perfetto_protos_TrackEvent_thread_instruction_count {
        /* Same encoding as |thread_time| field above. */
        int64_t thread_instruction_count_delta;
        int64_t thread_instruction_count_absolute;
    } thread_instruction_count;
    bool has_type;
    perfetto_protos_TrackEvent_Type type;
    pb_size_t which_name_field;
    union _perfetto_protos_TrackEvent_name_field {
        /* interned EventName. */
        uint64_t name_iid;
        /* non-interned variant. */
        pb_callback_t name;
    } name_field;
    /* Identifies the track of the event. The default value may be overridden
 using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
 sequence (in most cases sequence = one thread). If no value is specified
 here or in TrackEventDefaults, the TrackEvent will be associated with an
 implicit trace-global track (uuid 0). See TrackDescriptor::uuid. */
    bool has_track_uuid;
    uint64_t track_uuid;
    pb_callback_t extra_counter_values;
    bool has_log_message;
    perfetto_protos_LogMessage log_message;
    /* non-interned variant. */
    pb_callback_t categories;
    bool has_cc_scheduler_state;
    perfetto_protos_ChromeCompositorSchedulerState cc_scheduler_state;
    bool has_chrome_user_event;
    perfetto_protos_ChromeUserEvent chrome_user_event;
    bool has_chrome_keyed_service;
    perfetto_protos_ChromeKeyedService chrome_keyed_service;
    bool has_chrome_legacy_ipc;
    perfetto_protos_ChromeLegacyIpc chrome_legacy_ipc;
    bool has_chrome_histogram_sample;
    perfetto_protos_ChromeHistogramSample chrome_histogram_sample;
    bool has_chrome_latency_info;
    perfetto_protos_ChromeLatencyInfo chrome_latency_info;
    pb_size_t which_counter_value_field;
    union _perfetto_protos_TrackEvent_counter_value_field {
        int64_t counter_value;
        double double_counter_value;
    } counter_value_field;
    /* To encode counter values more efficiently, we support attaching additional
 counter values to a TrackEvent of any type. All values will share the same
 timestamp specified in the TracePacket. The value at
 extra_counter_values[N] is for the counter track referenced by
 extra_counter_track_uuids[N].

 |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
 should always be equal or more uuids than values. It is valid to set more
 uuids (e.g. via defaults) than values. If uuids are specified in
 TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
 default uuid list.

 For example, this allows snapshotting the thread time clock at each
 thread-track BEGIN and END event to capture the cpu time delta of a slice. */
    pb_callback_t extra_counter_track_uuids;
    bool has_chrome_frame_reporter;
    perfetto_protos_ChromeFrameReporter chrome_frame_reporter;
    pb_size_t which_source_location_field;
    union _perfetto_protos_TrackEvent_source_location_field {
        /* Non-interned field. */
        perfetto_protos_SourceLocation source_location;
        /* Interned field. */
        uint64_t source_location_iid;
    } source_location_field;
    bool has_chrome_message_pump;
    perfetto_protos_ChromeMessagePump chrome_message_pump;
    /* IDs of flows originating, passing through, or ending at this event.
 Flow IDs are global within a trace.

 A flow connects a sequence of TrackEvents within or across tracks, e.g.
 an input event may be handled on one thread but cause another event on
 a different thread - a flow between the two events can associate them.

 The direction of the flows between events is inferred from the events'
 timestamps. The earliest event with the same flow ID becomes the source
 of the flow. Any events thereafter are intermediate steps of the flow,
 until the flow terminates at the last event with the flow ID.

 Flows can also be explicitly terminated (see |terminating_flow_ids|), so
 that the same ID can later be reused for another flow.
 DEPRECATED. Only kept for backwards compatibility. Use |flow_ids|. */
    pb_callback_t flow_ids_old;
    bool has_chrome_mojo_event_info;
    perfetto_protos_ChromeMojoEventInfo chrome_mojo_event_info;
    bool has_chrome_application_state_info;
    perfetto_protos_ChromeApplicationStateInfo chrome_application_state_info;
    bool has_chrome_renderer_scheduler_state;
    perfetto_protos_ChromeRendererSchedulerState chrome_renderer_scheduler_state;
    bool has_chrome_window_handle_event_info;
    perfetto_protos_ChromeWindowHandleEventInfo chrome_window_handle_event_info;
    /* List of flow ids which should terminate on this event, otherwise same as
 |flow_ids|.
 Any one flow ID should be either listed as part of |flow_ids| OR
 |terminating_flow_ids|, not both.
 DEPRECATED. Only kept for backwards compatibility.  Use
 |terminating_flow_ids|. */
    pb_callback_t terminating_flow_ids_old;
    bool has_chrome_content_settings_event_info;
    perfetto_protos_ChromeContentSettingsEventInfo chrome_content_settings_event_info;
    /* Counter snapshots using floating point instead of integer values. */
    pb_callback_t extra_double_counter_track_uuids;
    pb_callback_t extra_double_counter_values;
    /* TODO(b/204341740): replace "flow_ids_old" with "flow_ids" to reduce memory
 consumption. */
    pb_callback_t flow_ids;
    /* TODO(b/204341740): replace "terminating_flow_ids_old" with
 "terminating_flow_ids" to reduce memory consumption. */
    pb_callback_t terminating_flow_ids;
    bool has_chrome_active_processes;
    perfetto_protos_ChromeActiveProcesses chrome_active_processes;
    bool has_screenshot;
    perfetto_protos_Screenshot screenshot;
    pb_extension_t *extensions;
} perfetto_protos_TrackEvent;

/* Default values for fields of all TrackEvents on the same packet sequence.
 Should be emitted as part of TracePacketDefaults whenever incremental state
 is cleared. It's defined here because field IDs should match those of the
 corresponding fields in TrackEvent. */
typedef struct _perfetto_protos_TrackEventDefaults {
    bool has_track_uuid;
    uint64_t track_uuid;
    pb_callback_t extra_counter_track_uuids;
    pb_callback_t extra_double_counter_track_uuids;
} perfetto_protos_TrackEventDefaults;

typedef struct _perfetto_protos_EventCategory {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
} perfetto_protos_EventCategory;

typedef struct _perfetto_protos_EventName {
    bool has_iid;
    uint64_t iid;
    pb_callback_t name;
} perfetto_protos_EventName;

/* Message that contains new entries for the interning indices of a packet
 sequence.

 The writer will usually emit new entries in the same TracePacket that first
 refers to them (since the last reset of interning state). They may also be
 emitted proactively in advance of referring to them in later packets.

 Next reserved id: 8 (up to 15).
 Next id: 43. */
typedef struct _perfetto_protos_InternedData { /* TODO(eseckler): Replace iid fields inside interned messages with
 map<iid, message> type fields in InternedData. */
    /* Each field's message type needs to specify an |iid| field, which is the ID
 of the entry in the field's interning index. Each field constructs its own
 index, thus interning IDs are scoped to the tracing session and field
 (usually as a counter for efficient var-int encoding), and optionally to
 the incremental state generation of the packet sequence. */
    pb_callback_t event_categories;
    pb_callback_t event_names;
    pb_callback_t debug_annotation_names;
    pb_callback_t source_locations;
    /* Names of functions used in frames below. */
    pb_callback_t function_names;
    /* Frames of callstacks of a program. */
    pb_callback_t frames;
    /* A callstack of a program. */
    pb_callback_t callstacks;
    /* Build IDs of exectuable files. */
    pb_callback_t build_ids;
    /* Paths to executable files. */
    pb_callback_t mapping_paths;
    /* Paths to source files. */
    pb_callback_t source_paths;
    /* Executable files mapped into processes. */
    pb_callback_t mappings;
    pb_callback_t log_message_body;
    /* Additional Vulkan information sent in a VulkanMemoryEvent message */
    pb_callback_t vulkan_memory_keys;
    /* Graphics context of a render stage event.  This represent the GL
 context for an OpenGl app or the VkDevice for a Vulkan app. */
    pb_callback_t graphics_contexts;
    /* Description of a GPU hardware queue or render stage. */
    pb_callback_t gpu_specifications;
    pb_callback_t histogram_names;
    /* This is set when FtraceConfig.symbolize_ksyms = true.
 The id of each symbol the number that will be reported in ftrace events
 like sched_block_reason.caller and is obtained from a monotonic counter.
 The same symbol can have different indexes in different bundles.
 This is is NOT the real address. This is to avoid disclosing KASLR through
 traces. */
    pb_callback_t kernel_symbols;
    pb_callback_t debug_annotation_value_type_names;
    pb_callback_t unsymbolized_source_locations;
    /* Interned string values in the DebugAnnotation proto. */
    pb_callback_t debug_annotation_string_values;
    /* Interned packet context for android.network_packets. */
    pb_callback_t packet_context;
    /* Interned name of a js function. We only intern js functions as there is a
 lot of duplication for them, but less so for other strings in the V8 data
 source. */
    pb_callback_t v8_js_function_name;
    /* Js functions can be emitted multiple times for various compilation tiers,
 so it makes sense to deduplicate all this. */
    pb_callback_t v8_js_function;
    /* Interned JS script (there is one associated with each JS function) */
    pb_callback_t v8_js_script;
    /* Interned Wasm script (there is one associated with each Wasm function) */
    pb_callback_t v8_wasm_script;
    /* Every V8 event is associated with an isolate, intern the isolate to remove
 duplication. */
    pb_callback_t v8_isolate;
    /* Interned protolog strings args. */
    pb_callback_t protolog_string_args;
    /* Interned protolog stacktraces. */
    pb_callback_t protolog_stacktrace;
    /* viewcapture */
    pb_callback_t viewcapture_package_name;
    pb_callback_t viewcapture_window_name;
    pb_callback_t viewcapture_view_id;
    pb_callback_t viewcapture_class_name;
    /* Interned context for android.app_wakelocks. */
    pb_callback_t app_wakelock_info;
} perfetto_protos_InternedData;

typedef struct _perfetto_protos_MemoryTrackerSnapshot {
    /* Unique ID that represents the global memory dump. */
    bool has_global_dump_id;
    uint64_t global_dump_id;
    bool has_level_of_detail;
    perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail level_of_detail;
    pb_callback_t process_memory_dumps;
} perfetto_protos_MemoryTrackerSnapshot;

/* Memory snapshot of a process. The snapshot contains memory data that is
 from 2 different sources, namely system stats and instrumentation stats.
 The system memory usage stats come from the OS based on standard API
 available in the platform to query memory usage. The instrumentation stats
 are added by instrumenting specific piece of code which tracks memory
 allocations and deallocations made by a small sub-system within the
 application.
 The system stats of the global memory snapshot are recorded as part of
 ProcessStats and SmapsPacket fields in trace packet with the same
 timestamp. */
typedef struct _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot {
    /* Process ID of the process */
    bool has_pid;
    int32_t pid;
    pb_callback_t allocator_dumps;
    pb_callback_t memory_edges;
} perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot;

/* A single node in the memory graph. */
typedef struct _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode {
    /* Unique ID of the node across all processes involved in the global
 memory dump. The ID is only unique within this particular global dump
 identified by GlobalMemoryDumpPacket.global_dump_id. */
    bool has_id;
    uint64_t id;
    /* Absolute name is a unique name for the memory node within the process
 with ProcessMemoryDump.pid. The name can contain multiple parts
 separated by '/', which traces the edges of the node from the root
 node.
 Eg: "partition_allocator/array_buffers/buffer1" refers to the child
 node "buffer1" in a graph structure of:
   root -> partition_allocator -> array_buffers -> buffer1. */
    pb_callback_t absolute_name;
    /* A weak node means that the instrumentation that added the current node
 is unsure about the existence of the actual memory. Unless a "strong"
 (non-weak is default) node that has an edge to the current node exists
 in the current global dump, the current node will be discarded. */
    bool has_weak;
    bool weak;
    /* Size of the node in bytes, used to compute the effective size of the
 nodes without double counting. */
    bool has_size_bytes;
    uint64_t size_bytes;
    pb_callback_t entries;
} perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode;

/* Entries in the memory node that contain statistics and additional
 debuggable information about the memory. The size of the node is
 tracked separately in the |size_bytes| field. */
typedef struct _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry {
    pb_callback_t name;
    bool has_units;
    perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units units;
    /* Contains either one of uint64 or string value. */
    bool has_value_uint64;
    uint64_t value_uint64;
    pb_callback_t value_string;
} perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry;

/* A directed edge that connects any 2 nodes in the graph above. These are
 in addition to the inherent edges added due to the tree structure of the
 node's absolute names.
 Node with id |source_id| owns the node with id |target_id|, and has the
 effect of attributing the memory usage of target to source. |importance|
 is optional and relevant only for the cases of co-ownership, where it
 acts as a z-index: the owner with the highest importance will be
 attributed target's memory. */
typedef struct _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge {
    bool has_source_id;
    uint64_t source_id;
    bool has_target_id;
    uint64_t target_id;
    bool has_importance;
    uint32_t importance;
    bool has_overridable;
    bool overridable;
} perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge;

/* Used to trace the execution of perfetto itself. */
typedef struct _perfetto_protos_PerfettoMetatrace {
    pb_size_t which_record_type;
    union _perfetto_protos_PerfettoMetatrace_record_type {
        uint32_t event_id;
        uint32_t counter_id;
        /* For trace processor metatracing. */
        pb_callback_t event_name;
        pb_callback_t counter_name;
        uint64_t event_name_iid;
    } record_type;
    /* Only when using |event_id|. */
    bool has_event_duration_ns;
    uint64_t event_duration_ns;
    /* Only when using |counter_id|. */
    bool has_counter_value;
    int32_t counter_value;
    /* ID of the thread that emitted the event. */
    bool has_thread_id;
    uint32_t thread_id;
    /* If true the meta-tracing ring buffer had overruns and hence some data is
 missing from this point. */
    bool has_has_overruns;
    bool has_overruns;
    /* Args for the event. */
    pb_callback_t args;
    pb_callback_t interned_strings;
} perfetto_protos_PerfettoMetatrace;

typedef struct _perfetto_protos_PerfettoMetatrace_Arg {
    pb_size_t which_key_or_interned_key;
    union _perfetto_protos_PerfettoMetatrace_Arg_key_or_interned_key {
        pb_callback_t key;
        uint64_t key_iid;
    } key_or_interned_key;
    pb_size_t which_value_or_interned_value;
    union _perfetto_protos_PerfettoMetatrace_Arg_value_or_interned_value {
        pb_callback_t value;
        uint64_t value_iid;
    } value_or_interned_value;
} perfetto_protos_PerfettoMetatrace_Arg;

/* Interned strings corresponding to the |event_name_iid|, |key_iid| and
 |value_iid| above. */
typedef struct _perfetto_protos_PerfettoMetatrace_InternedString {
    bool has_iid;
    uint64_t iid;
    pb_callback_t value;
} perfetto_protos_PerfettoMetatrace_InternedString;

typedef struct _perfetto_protos_TracingServiceEvent_DataSources {
    pb_callback_t data_source;
} perfetto_protos_TracingServiceEvent_DataSources;

/* Events emitted by the tracing service.
 Next id: 12. */
typedef struct _perfetto_protos_TracingServiceEvent {
    pb_size_t which_event_type;
    union _perfetto_protos_TracingServiceEvent_event_type {
        /* Emitted after all data sources saw the start event and ACKed it.
     This identifies the point in time when it's safe to assume that all data
     sources have been recording events. */
        bool all_data_sources_started;
        /* Emitted when we start tracing and specifically, this will be before any
     producer is notified about the existence of this trace. This is always
     emitted before the all_data_sources_started event. This event is also
     guaranteed to be seen (byte-offset wise) before any data packets from
     producers. */
        bool tracing_started;
        /* Emitted when all data sources have been flushed successfully or with an
     error (including timeouts). This can generally happen many times over the
     course of the trace. */
        bool all_data_sources_flushed;
        /* Emitted when reading back the central tracing buffers has been completed.
     If |write_into_file| is specified, this can happen many times over the
     course of the trace. */
        bool read_tracing_buffers_completed;
        /* Emitted after tracing has been disabled and specifically, this will be
     after all packets from producers have been included in the central
     tracing buffer. */
        bool tracing_disabled;
        /* Emitted if perfetto --save-for-bugreport was invoked while the current
     tracing session was running and it had the highest bugreport_score. In
     this case the original consumer will see a nearly empty trace, because
     the contents are routed onto the bugreport file. This event flags the
     situation explicitly. Traces that contain this marker should be discarded
     by test infrastructures / pipelines.
     Deprecated since Android U, where --save-for-bugreport uses
     non-destructive cloning. */
        bool seized_for_bugreport;
        /* Emitted when not all data sources in all producers reply to a start
     request after some time. */
        perfetto_protos_TracingServiceEvent_DataSources slow_starting_data_sources;
        /* Emitted when the last flush request has failed. Lists data sources that
     did not reply on time. */
        perfetto_protos_TracingServiceEvent_DataSources last_flush_slow_data_sources;
        /* Emitted when a flush is started. */
        bool flush_started;
        /* If this was a cloned tracing session, emitted when the tracing serice
     started the clone operation. */
        bool clone_started;
        /* If this was a cloned tracing session, emitted when the tracing service
     finished the clone operation (for a specific buffer). */
        uint32_t buffer_cloned;
    } event_type;
} perfetto_protos_TracingServiceEvent;

typedef struct _perfetto_protos_TracingServiceEvent_DataSources_DataSource {
    pb_callback_t producer_name;
    pb_callback_t data_source_name;
} perfetto_protos_TracingServiceEvent_DataSources_DataSource;

/* Energy consumer based on aidl class:
 android.hardware.power.stats.EnergyConsumer. */
typedef struct _perfetto_protos_AndroidEnergyConsumer {
    /* Unique ID of this energy consumer.  Matches the ID in a
 AndroidEnergyEstimationBreakdown. */
    bool has_energy_consumer_id;
    int32_t energy_consumer_id;
    /* For a group of energy consumers of the same logical type, sorting by
 ordinal gives their physical order. Ordinals must be consecutive integers
 starting from 0. */
    bool has_ordinal;
    int32_t ordinal;
    /* Type of this energy consumer. */
    pb_callback_t type;
    /* Unique name of this energy consumer. Vendor/device specific. Opaque to
 framework. */
    pb_callback_t name;
} perfetto_protos_AndroidEnergyConsumer;

typedef struct _perfetto_protos_AndroidEnergyConsumerDescriptor {
    pb_callback_t energy_consumers;
} perfetto_protos_AndroidEnergyConsumerDescriptor;

/* Energy data retrieve using the ODPM(On Device Power Monitor) API.
 This proto represents the aidl class:
 android.hardware.power.stats.EnergyConsumerResult. */
typedef struct _perfetto_protos_AndroidEnergyEstimationBreakdown {
    /* The first trace packet of each session should include a energy consumer
 descriptor. */
    bool has_energy_consumer_descriptor;
    perfetto_protos_AndroidEnergyConsumerDescriptor energy_consumer_descriptor;
    /* ID of the AndroidEnergyConsumer associated with this result.  Matches
 the energy_consumer_id in the AndroidEnergyConsumerDescriptor that
 should be sent at the beginning of a trace. */
    bool has_energy_consumer_id;
    int32_t energy_consumer_id;
    /* Total accumulated energy since boot in microwatt-seconds (uWs) */
    bool has_energy_uws;
    int64_t energy_uws;
    /* Optional attributed energy per Android ID / Linux UID for this
 EnergyConsumer. Sum total of attributed energy must be less than or equal
 to total accumulated energy. */
    pb_callback_t per_uid_breakdown;
} perfetto_protos_AndroidEnergyEstimationBreakdown;

typedef struct _perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown {
    /* Android ID/Linux UID, the accumulated energy is attributed to. */
    bool has_uid;
    int32_t uid;
    /* Accumulated energy since boot in microwatt-seconds (uWs). */
    bool has_energy_uws;
    int64_t energy_uws;
} perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown;

typedef struct _perfetto_protos_EntityStateResidency {
    /* This is only emitted at the beginning of the trace. */
    pb_callback_t power_entity_state;
    pb_callback_t residency;
} perfetto_protos_EntityStateResidency;

typedef struct _perfetto_protos_EntityStateResidency_PowerEntityState {
    /* Index corresponding to the entity */
    bool has_entity_index;
    int32_t entity_index;
    /* Index corresponding to the state */
    bool has_state_index;
    int32_t state_index;
    /* Name of the entity. This is device-specific, determined by the PowerStats
 HAL, and cannot be configured by the user. An example would be
 "Bluetooth". */
    pb_callback_t entity_name;
    /* Name of the state. This is device-specific, determined by the PowerStats
 HAL, and cannot be configured by the user. An example would be
 "Active". */
    pb_callback_t state_name;
} perfetto_protos_EntityStateResidency_PowerEntityState;

typedef struct _perfetto_protos_EntityStateResidency_StateResidency {
    /* Index corresponding to PowerEntityState.entity_index */
    bool has_entity_index;
    int32_t entity_index;
    /* Index corresponding to PowerEntityState.state_index */
    bool has_state_index;
    int32_t state_index;
    /* Time since boot that this entity has been in this state */
    bool has_total_time_in_state_ms;
    uint64_t total_time_in_state_ms;
    /* Total number of times since boot that the entity has entered this state */
    bool has_total_state_entry_count;
    uint64_t total_state_entry_count;
    /* Timestamp of the last time the entity entered this state */
    bool has_last_entry_timestamp_ms;
    uint64_t last_entry_timestamp_ms;
} perfetto_protos_EntityStateResidency_StateResidency;

typedef struct _perfetto_protos_BatteryCounters {
    /* Battery capacity in microampere-hours(µAh). Also known as Coulomb counter. */
    bool has_charge_counter_uah;
    int64_t charge_counter_uah;
    /* Remaining battery capacity percentage of total capacity */
    bool has_capacity_percent;
    float capacity_percent;
    /* Instantaneous battery current in microamperes(µA).
 Negative values indicate current being drained from the battery and
 positive values indicate current feeding the battery from a charge source
 (USB).

 See https://perfetto.dev/docs/data-sources/battery-counters for more info. */
    bool has_current_ua;
    int64_t current_ua;
    /* Instantaneous battery current in microamperes(µA). */
    bool has_current_avg_ua;
    int64_t current_avg_ua;
    /* Battery name, emitted only on multiple batteries. */
    pb_callback_t name;
    /* Battery capacity in microwatt-hours(µWh). */
    bool has_energy_counter_uwh;
    int64_t energy_counter_uwh;
    /* Battery voltage in microvolts(µV). */
    bool has_voltage_uv;
    int64_t voltage_uv;
} perfetto_protos_BatteryCounters;

typedef struct _perfetto_protos_PowerRails {
    /* This is only emitted at the beginning of the trace. */
    pb_callback_t rail_descriptor;
    pb_callback_t energy_data;
} perfetto_protos_PowerRails;

typedef struct _perfetto_protos_PowerRails_RailDescriptor {
    /* Index corresponding to the rail */
    bool has_index;
    uint32_t index;
    /* Name of the rail */
    pb_callback_t rail_name;
    /* Name of the subsystem to which this rail belongs */
    pb_callback_t subsys_name;
    /* Hardware sampling rate (Hz). */
    bool has_sampling_rate;
    uint32_t sampling_rate;
} perfetto_protos_PowerRails_RailDescriptor;

typedef struct _perfetto_protos_PowerRails_EnergyData {
    /* Index corresponding to RailDescriptor.index */
    bool has_index;
    uint32_t index;
    /* Time since device boot(CLOCK_BOOTTIME) in milli-seconds. */
    bool has_timestamp_ms;
    uint64_t timestamp_ms;
    /* Accumulated energy since device boot in microwatt-seconds (uWs). */
    bool has_energy;
    uint64_t energy;
} perfetto_protos_PowerRails_EnergyData;

typedef struct _perfetto_protos_ObfuscatedMember {
    /* This is the obfuscated field name relative to the class containing the
 ObfuscatedMember. */
    pb_callback_t obfuscated_name;
    /* If this is fully qualified (i.e. contains a '.') this is the deobfuscated
 field name including its class. Otherwise, this is this the unqualified
 deobfuscated field name relative to the class containing this
 ObfuscatedMember. */
    pb_callback_t deobfuscated_name;
} perfetto_protos_ObfuscatedMember;

typedef struct _perfetto_protos_ObfuscatedClass {
    pb_callback_t obfuscated_name;
    pb_callback_t deobfuscated_name;
    /* fields. */
    pb_callback_t obfuscated_members;
    pb_callback_t obfuscated_methods;
} perfetto_protos_ObfuscatedClass;

typedef struct _perfetto_protos_DeobfuscationMapping {
    pb_callback_t package_name;
    bool has_version_code;
    int64_t version_code;
    pb_callback_t obfuscated_classes;
} perfetto_protos_DeobfuscationMapping;

typedef struct _perfetto_protos_HeapGraphRoot {
    /* Objects retained by this root. */
    pb_callback_t object_ids;
    bool has_root_type;
    perfetto_protos_HeapGraphRoot_Type root_type;
} perfetto_protos_HeapGraphRoot;

typedef struct _perfetto_protos_HeapGraphType {
    /* TODO(fmayer): Consider removing this and using the index in the repeaed
 field to save space. */
    bool has_id;
    uint64_t id;
    bool has_location_id;
    uint64_t location_id;
    pb_callback_t class_name;
    /* Size of objects of this type. */
    bool has_object_size;
    uint64_t object_size;
    bool has_superclass_id;
    uint64_t superclass_id;
    /* Indices for InternedData.field_names for the names of the fields of
 instances of this class. This does NOT include the fields from
 superclasses. The consumer of this data needs to walk all super
 classes to get a full lists of fields. Objects always write the
 fields in order of most specific class to the furthest up superclass. */
    pb_callback_t reference_field_id;
    bool has_kind;
    perfetto_protos_HeapGraphType_Kind kind;
    bool has_classloader_id;
    uint64_t classloader_id;
} perfetto_protos_HeapGraphType;

typedef struct _perfetto_protos_HeapGraphObject {
    pb_size_t which_identifier;
    union _perfetto_protos_HeapGraphObject_identifier {
        uint64_t id;
        uint64_t id_delta;
    } identifier;
    /* Index for InternedData.types for the name of the type of this object. */
    bool has_type_id;
    uint64_t type_id;
    /* Bytes occupied by this objects. */
    bool has_self_size;
    uint64_t self_size;
    /* Indices for InternedData.field_names for the name of the field referring
 to the object. For Android S+ and for instances of normal classes (e.g.
 not instances of java.lang.Class or arrays), this is instead set in the
 corresponding HeapGraphType, and this is left empty. */
    pb_callback_t reference_field_id;
    /* Ids of the Object that is referred to. */
    pb_callback_t reference_object_id;
    /* Add this to all non-zero values in reference_object_id. This is used to
 get more compact varint encoding.

 The name is confusing, but this has always been used as a base for
 reference_object_id. The field should be named reference_object_id_base. */
    bool has_reference_field_id_base;
    uint64_t reference_field_id_base;
    /* If this object is an instance of `libcore.util.NativeAllocationRegistry`,
 the value of the `size` field.

 N.B. This is not the native size of this object. */
    bool has_native_allocation_registry_size_field;
    int64_t native_allocation_registry_size_field;
    /* To reduce the space required we only emit the heap type if it has changed
 from the previous object we recorded. */
    bool has_heap_type_delta;
    perfetto_protos_HeapGraphObject_HeapType heap_type_delta;
} perfetto_protos_HeapGraphObject;

typedef struct _perfetto_protos_HeapGraph {
    bool has_pid;
    int32_t pid;
    /* This contains all objects at the time this dump was taken. Some of these
 will be live, some of those unreachable (garbage). To find the live
 objects, the client needs to build the transitive closure of objects
 reachable from |roots|.
 All objects not contained within that transitive closure are garbage that
 has not yet been collected. */
    pb_callback_t objects;
    /* Field names for references in managed heap graph. */
    pb_callback_t field_names;
    bool has_continued;
    bool continued;
    bool has_index;
    uint64_t index;
    /* Roots at the time this dump was taken.
 All live objects are reachable from the roots. All other objects are
 garbage. */
    pb_callback_t roots;
    /* Paths of files used in managed heap graph. */
    pb_callback_t location_names;
    /* Types used in HeapGraphObjects. */
    pb_callback_t types;
} perfetto_protos_HeapGraph;

/* The packet emitted by heapprofd for each heap snapshot. A snapshot can
 involve more than one ProfilePacket if the snapshot is big (when |continued|
 is true). The cardinality and grouping is as follows:
 A ProfilePacket contains:
  - 1+ per-process heap snapshots (ProcessHeapSamples). Normally there is only
    one heap per process (the main malloc/free heap), but there can be more if
    the process is using the heapprofd API to profile custom allocators.
  - Globally interned strings, mappings and frames (to allow de-duplicating
    frames/mapping in common between different processes).
 A ProcessHeapSamples contains:
  - The process and heap identifier.
  - A number of HeapSample, one for each callsite that had some alloc/frees.
  - Statistics about heapprofd internals (e.g., sampling/unwinding timings).
 A HeapSample contains statistics about callsites:
  - Total number of bytes allocated and freed from that callsite.
  - Total number of alloc/free calls sampled.
  - Stats at the local maximum when dump_at_max = true.
 See https://perfetto.dev/docs/data-sources/native-heap-profiler for more. */
typedef struct _perfetto_protos_ProfilePacket {
    /* The following interning tables are only used in Android version Q.
 In newer versions, these tables are in InternedData
 (see protos/perfetto/trace/interned_data) and are shared across
 multiple ProfilePackets.
 For backwards compatibility, consumers need to first look up interned
 data in the tables within the ProfilePacket, and then, if they are empty,
 look up in the InternedData instead. */
    pb_callback_t strings;
    pb_callback_t frames;
    pb_callback_t callstacks;
    pb_callback_t mappings;
    pb_callback_t process_dumps;
    /* If this is true, the next ProfilePacket in this package_sequence_id is a
 continuation of this one.
 To get all samples for a process, accummulate its
 ProcessHeapSamples.samples until you see continued=false. */
    bool has_continued;
    bool continued;
    /* Index of this ProfilePacket on its package_sequence_id. Can be used
 to detect dropped data.
 Verify these are consecutive. */
    bool has_index;
    uint64_t index;
} perfetto_protos_ProfilePacket;

/* Next ID: 9 */
typedef struct _perfetto_protos_ProfilePacket_HeapSample {
    bool has_callstack_id;
    uint64_t callstack_id;
    /* bytes allocated at this callstack. */
    bool has_self_allocated;
    uint64_t self_allocated;
    /* bytes allocated at this callstack that have been freed. */
    bool has_self_freed;
    uint64_t self_freed;
    /* timestamp [opt] */
    bool has_timestamp;
    uint64_t timestamp;
    /* Number of allocations that were sampled at this callstack. */
    bool has_alloc_count;
    uint64_t alloc_count;
    /* Number of allocations that were sampled at this callstack that have been
 freed. */
    bool has_free_count;
    uint64_t free_count;
    /* Bytes allocated by this callstack but not freed at the time the malloc
 heap usage of this process was maximal. This is only set if dump_at_max
 is true in HeapprofdConfig. In that case, self_allocated, self_freed and
 self_idle will not be set. */
    bool has_self_max;
    uint64_t self_max;
    /* Number of allocations that were sampled at this callstack but not freed
 at the time the malloc heap usage of this process was maximal. This is
 only set if dump_at_max is true in HeapprofdConfig. In that case,
 self_allocated, self_freed and self_idle will not be set. */
    bool has_self_max_count;
    uint64_t self_max_count;
} perfetto_protos_ProfilePacket_HeapSample;

typedef struct _perfetto_protos_ProfilePacket_Histogram {
    pb_callback_t buckets;
} perfetto_protos_ProfilePacket_Histogram;

typedef struct _perfetto_protos_ProfilePacket_Histogram_Bucket {
    /* This bucket counts values from the previous bucket's (or -infinity if
 this is the first bucket) upper_limit (inclusive) to this upper_limit
 (exclusive). */
    bool has_upper_limit;
    uint64_t upper_limit;
    /* This is the highest bucket. This is set instead of the upper_limit. Any
 values larger or equal to the previous bucket's upper_limit are counted
 in this bucket. */
    bool has_max_bucket;
    bool max_bucket;
    /* Number of values that fall into this range. */
    bool has_count;
    uint64_t count;
} perfetto_protos_ProfilePacket_Histogram_Bucket;

typedef struct _perfetto_protos_ProfilePacket_ProcessStats {
    bool has_unwinding_errors;
    uint64_t unwinding_errors;
    bool has_heap_samples;
    uint64_t heap_samples;
    bool has_map_reparses;
    uint64_t map_reparses;
    bool has_unwinding_time_us;
    perfetto_protos_ProfilePacket_Histogram unwinding_time_us;
    bool has_total_unwinding_time_us;
    uint64_t total_unwinding_time_us;
    bool has_client_spinlock_blocked_us;
    uint64_t client_spinlock_blocked_us;
} perfetto_protos_ProfilePacket_ProcessStats;

typedef struct _perfetto_protos_ProfilePacket_ProcessHeapSamples {
    bool has_pid;
    uint64_t pid;
    pb_callback_t samples;
    /* This process was profiled from startup.
 If false, this process was already running when profiling started. */
    bool has_from_startup;
    bool from_startup;
    /* This process was not profiled because a concurrent session was active.
 If this is true, samples will be empty. */
    bool has_rejected_concurrent;
    bool rejected_concurrent;
    /* Metadata about heapprofd. */
    bool has_stats;
    perfetto_protos_ProfilePacket_ProcessStats stats;
    /* This process disconnected while it was profiled.
 If false, the process outlived the profiling session. */
    bool has_disconnected;
    bool disconnected;
    /* If disconnected, this disconnect was caused by the client overrunning
 the buffer.
 Equivalent to client_error == CLIENT_ERROR_HIT_TIMEOUT
 on new S builds. */
    bool has_buffer_overran;
    bool buffer_overran;
    /* If disconnected, this disconnected was caused by the shared memory
 buffer being corrupted. THIS IS ALWAYS A BUG IN HEAPPROFD OR CLIENT
 MEMORY CORRUPTION. */
    bool has_buffer_corrupted;
    bool buffer_corrupted;
    /* Timestamp of the state of the target process that this dump represents.
 This can be different to the timestamp of the TracePackets for various
 reasons:
 * If disconnected is set above, this is the timestamp of last state
   heapprofd had of the process before it disconnected.
 * Otherwise, if the rate of events produced by the process is high,
   heapprofd might be behind.

 TODO(fmayer): This is MONOTONIC_COARSE. Refactor ClockSnapshot::Clock
               to have a type enum that we can reuse here. */
    bool has_timestamp;
    uint64_t timestamp;
    /* If disconnected, this disconnect was caused by heapprofd exceeding
 guardrails during this profiling session. */
    bool has_hit_guardrail;
    bool hit_guardrail;
    pb_callback_t heap_name;
    bool has_sampling_interval_bytes;
    uint64_t sampling_interval_bytes;
    bool has_orig_sampling_interval_bytes;
    uint64_t orig_sampling_interval_bytes;
    bool has_client_error;
    perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError client_error;
} perfetto_protos_ProfilePacket_ProcessHeapSamples;

/* Packet emitted by heapprofd when stream_allocations = true. Only for local
 testing. Doesn't report the callsite. */
typedef struct _perfetto_protos_StreamingAllocation {
    /* TODO(fmayer): Add callstack. */
    pb_callback_t address;
    pb_callback_t size;
    pb_callback_t sample_size;
    pb_callback_t clock_monotonic_coarse_timestamp;
    pb_callback_t heap_id;
    pb_callback_t sequence_number;
} perfetto_protos_StreamingAllocation;

/* Packet emitted by heapprofd when stream_allocations = true. Only for local
 testing. Doesn't report the callsite. */
typedef struct _perfetto_protos_StreamingFree {
    /* TODO(fmayer): Add callstack. */
    pb_callback_t address;
    pb_callback_t heap_id;
    pb_callback_t sequence_number;
} perfetto_protos_StreamingFree;

/* Packet emitted by the chromium in-process signal-based callstack sampler.
 Represents a series of individual stack samples (sampled at discrete points
 in time), rather than aggregated over an interval. */
typedef struct _perfetto_protos_StreamingProfilePacket {
    /* Index into InternedData.callstacks */
    pb_callback_t callstack_iid;
    /* TODO(eseckler): ThreadDescriptor-based timestamps are deprecated. Replace
 this with ClockSnapshot-based delta encoding instead. */
    pb_callback_t timestamp_delta_us;
    bool has_process_priority;
    int32_t process_priority;
} perfetto_protos_StreamingProfilePacket;

/* Namespace for the contained enums. */
typedef struct _perfetto_protos_Profiling {
    char dummy_field;
} perfetto_protos_Profiling;

/* A notable event within the sampling implementation. */
typedef struct _perfetto_protos_PerfSample_ProducerEvent {
    pb_size_t which_optional_source_stop_reason;
    union _perfetto_protos_PerfSample_ProducerEvent_optional_source_stop_reason {
        perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason source_stop_reason;
    } optional_source_stop_reason;
} perfetto_protos_PerfSample_ProducerEvent;

/* Packet emitted by the traced_perf sampling performance profiler, which
 gathers data via the perf_event_open syscall. Each packet contains an
 individual sample with a counter value, and optionally a
 callstack.

 Timestamps are within the root packet. The config can specify the clock, or
 the implementation will default to CLOCK_MONOTONIC_RAW. Within the Android R
 timeframe, the default was CLOCK_BOOTTIME.

 There are several distinct views of this message:
 * indication of kernel buffer data loss (kernel_records_lost set)
 * indication of skipped samples (sample_skipped_reason set)
 * notable event in the sampling implementation (producer_event set)
 * normal sample (timebase_count set, typically also callstack_iid) */
typedef struct _perfetto_protos_PerfSample {
    bool has_cpu;
    uint32_t cpu;
    bool has_pid;
    uint32_t pid;
    bool has_tid;
    uint32_t tid;
    /* Unwound callstack. Might be partial, in which case a synthetic "error"
 frame is appended, and |unwind_error| is set accordingly. */
    bool has_callstack_iid;
    uint64_t callstack_iid;
    /* Execution state that the process was sampled at. */
    bool has_cpu_mode;
    perfetto_protos_Profiling_CpuMode cpu_mode;
    /* Value of the timebase counter (since the event was configured, no deltas). */
    bool has_timebase_count;
    uint64_t timebase_count;
    /* Value of the followers counter (since the event was configured, no deltas). */
    pb_callback_t follower_counts;
    pb_size_t which_optional_unwind_error;
    union _perfetto_protos_PerfSample_optional_unwind_error {
        perfetto_protos_Profiling_StackUnwindError unwind_error;
    } optional_unwind_error;
    /* If set, indicates that this message is not a sample, but rather an
 indication of data loss in the ring buffer allocated for |cpu|. Such data
 loss occurs when the kernel has insufficient ring buffer capacity to write
 a record (which gets discarded). A record in this context is an individual
 ring buffer entry, and counts more than just sample records.

 The |timestamp| of the packet corresponds to the time that the producer
 wrote the packet for trace-sorting purposes alone, and should not be
 interpreted relative to the sample timestamps. This field is sufficient to
 detect that *some* kernel data loss happened within the trace, but not the
 specific time bounds of that loss (which would require tracking precedessor
 & successor timestamps, which is not deemed necessary at the moment). */
    bool has_kernel_records_lost;
    uint64_t kernel_records_lost;
    pb_size_t which_optional_sample_skipped_reason;
    union _perfetto_protos_PerfSample_optional_sample_skipped_reason {
        perfetto_protos_PerfSample_SampleSkipReason sample_skipped_reason;
    } optional_sample_skipped_reason;
    bool has_producer_event;
    perfetto_protos_PerfSample_ProducerEvent producer_event;
} perfetto_protos_PerfSample;

/* Submessage for TracePacketDefaults. */
typedef struct _perfetto_protos_PerfSampleDefaults {
    /* The sampling timebase. Might not be identical to the data source config if
 the implementation decided to default/override some parameters. */
    bool has_timebase;
    perfetto_protos_PerfEvents_Timebase timebase;
    /* If the config requested process sharding, report back the count and which
 of those bins was selected. Never changes for the duration of a trace. */
    bool has_process_shard_count;
    uint32_t process_shard_count;
    bool has_chosen_process_shard;
    uint32_t chosen_process_shard;
    /* Description of followers event */
    pb_callback_t followers;
} perfetto_protos_PerfSampleDefaults;

typedef struct _perfetto_protos_SmapsEntry {
    pb_callback_t path;
    bool has_size_kb;
    uint64_t size_kb;
    bool has_private_dirty_kb;
    uint64_t private_dirty_kb;
    bool has_swap_kb;
    uint64_t swap_kb;
    /* for field upload (instead of path). */
    pb_callback_t file_name;
    /* TODO(crbug.com/1098746): Consider encoding this as incremental values. */
    bool has_start_address;
    uint64_t start_address;
    bool has_module_timestamp;
    uint64_t module_timestamp;
    pb_callback_t module_debugid;
    pb_callback_t module_debug_path;
    bool has_protection_flags;
    uint32_t protection_flags;
    bool has_private_clean_resident_kb;
    uint64_t private_clean_resident_kb;
    bool has_shared_dirty_resident_kb;
    uint64_t shared_dirty_resident_kb;
    bool has_shared_clean_resident_kb;
    uint64_t shared_clean_resident_kb;
    bool has_locked_kb;
    uint64_t locked_kb;
    bool has_proportional_resident_kb;
    uint64_t proportional_resident_kb;
} perfetto_protos_SmapsEntry;

typedef struct _perfetto_protos_SmapsPacket {
    bool has_pid;
    uint32_t pid;
    pb_callback_t entries;
} perfetto_protos_SmapsPacket;

/* Per-process periodically sampled stats. These samples are wrapped in a
 dedicated message (as opposite to be fields in process_tree.proto) because
 they are dumped at a different rate than cmdline and thread list.
 Note: not all of these stats will be present in every ProcessStats message
 and sometimes processes may be missing. This is because counters are
 cached to reduce emission of counters which do not change. */
typedef struct _perfetto_protos_ProcessStats {
    pb_callback_t processes;
    /* The time at which we finish collecting this batch of samples;
 the top-level packet timestamp is the time at which
 we begin collection. */
    bool has_collection_end_timestamp;
    uint64_t collection_end_timestamp;
} perfetto_protos_ProcessStats;

/* Per-thread periodically sampled stats.
 Note: not all of these stats will be present in every message. See the note
 for ProcessStats. */
typedef struct _perfetto_protos_ProcessStats_Thread {
    bool has_tid;
    int32_t tid;
} perfetto_protos_ProcessStats_Thread;

typedef struct _perfetto_protos_ProcessStats_FDInfo {
    bool has_fd;
    uint64_t fd;
    pb_callback_t path;
} perfetto_protos_ProcessStats_FDInfo;

typedef struct _perfetto_protos_ProcessStats_Process {
    bool has_pid;
    int32_t pid;
    /* See /proc/[pid]/status in `man 5 proc` for a description of these fields. */
    bool has_vm_size_kb;
    uint64_t vm_size_kb;
    bool has_vm_rss_kb;
    uint64_t vm_rss_kb;
    bool has_rss_anon_kb;
    uint64_t rss_anon_kb;
    bool has_rss_file_kb;
    uint64_t rss_file_kb;
    bool has_rss_shmem_kb;
    uint64_t rss_shmem_kb;
    bool has_vm_swap_kb;
    uint64_t vm_swap_kb;
    bool has_vm_locked_kb;
    uint64_t vm_locked_kb;
    bool has_vm_hwm_kb;
    uint64_t vm_hwm_kb; /* When adding a new field remember to update kProcMemCounterSize in
 the trace processor. */
    bool has_oom_score_adj;
    int64_t oom_score_adj;
    pb_callback_t threads;
    /* The peak resident set size is resettable in newer Posix kernels.
 This field specifies if reset is supported and if the writer had reset
 the peaks after each process stats recording. */
    bool has_is_peak_rss_resettable;
    bool is_peak_rss_resettable;
    /* Private, shared and swap footprint of the process as measured by
 Chrome. To know more about these metrics refer to:
 https://docs.google.com/document/d/1_WmgE1F5WUrhwkPqJis3dWyOiUmQKvpXp5cd4w86TvA */
    bool has_chrome_private_footprint_kb;
    uint32_t chrome_private_footprint_kb;
    bool has_chrome_peak_resident_set_kb;
    uint32_t chrome_peak_resident_set_kb;
    pb_callback_t fds;
    /* These fields are set only when scan_smaps_rollup=true */
    bool has_smr_rss_kb;
    uint64_t smr_rss_kb;
    bool has_smr_pss_kb;
    uint64_t smr_pss_kb;
    bool has_smr_pss_anon_kb;
    uint64_t smr_pss_anon_kb;
    bool has_smr_pss_file_kb;
    uint64_t smr_pss_file_kb;
    bool has_smr_pss_shmem_kb;
    uint64_t smr_pss_shmem_kb;
    /* Time spent scheduled in user mode in nanoseconds. Parsed from utime in
 /proc/pid/stat. Recorded if record_process_runtime config option is set.
 Resolution of "clock ticks", usually 10ms. */
    bool has_runtime_user_mode;
    uint64_t runtime_user_mode;
    /* Time spent scheduled in kernel mode in nanoseconds. Parsed from stime in
 /proc/pid/stat. Recorded if record_process_runtime config option is set.
 Resolution of "clock ticks", usually 10ms. */
    bool has_runtime_kernel_mode;
    uint64_t runtime_kernel_mode;
    bool has_smr_swap_pss_kb;
    uint64_t smr_swap_pss_kb;
} perfetto_protos_ProcessStats_Process;

/* Metadata about the processes and threads in the trace.
 Note: this proto was designed to be filled in by traced_probes and should
 only be populated with accurate information coming from the system. Other
 trace writers should prefer to fill ThreadDescriptor and ProcessDescriptor
 in TrackDescriptor. */
typedef struct _perfetto_protos_ProcessTree {
    /* List of processes and threads in the client. These lists are incremental
 and not exhaustive. A process and its threads might show up separately in
 different ProcessTree messages. A thread might event not show up at all, if
 no sched_switch activity was detected, for instance:
 #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
 #1 { threads: [{pid: 12, tgid: 10}] }
 #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] } */
    pb_callback_t processes;
    pb_callback_t threads;
    /* The time at which we finish collecting this process tree;
 the top-level packet timestamp is the time at which
 we begin collection. */
    bool has_collection_end_timestamp;
    uint64_t collection_end_timestamp;
} perfetto_protos_ProcessTree;

/* Representation of a thread. */
typedef struct _perfetto_protos_ProcessTree_Thread {
    /* The thread ID (as per gettid()) in the root PID namespace. */
    bool has_tid;
    int32_t tid;
    /* The name of the thread. */
    pb_callback_t name;
    /* Thread group id (i.e. the PID of the process, == TID of the main thread) */
    bool has_tgid;
    int32_t tgid;
    /* The non-root-level thread IDs if the thread runs in a PID namespace. Read
 from the NSpid entry of /proc/<tid>/status, with the first element (root-
 level thread ID) omitted. */
    pb_callback_t nstid;
} perfetto_protos_ProcessTree_Thread;

/* Representation of a process. */
typedef struct _perfetto_protos_ProcessTree_Process {
    /* The UNIX process ID, aka thread group ID (as per getpid()) in the root
 PID namespace. */
    bool has_pid;
    int32_t pid;
    /* The parent process ID, as per getppid(). */
    bool has_ppid;
    int32_t ppid;
    /* The command line for the process, as per /proc/pid/cmdline, broken up on
 NUL bytes.
 If it is a kernel thread or a zombie, there will only be one cmdline
 field and it will contain /proc/pid/comm. */
    pb_callback_t cmdline;
    /* The uid for the process, as per /proc/pid/status. */
    bool has_uid;
    int32_t uid;
    /* The non-root-level process IDs if the process runs in a PID namespace.
 Read from the NSpid entry of /proc/<pid>/status, with the first element
 (root-level process ID) omitted. */
    pb_callback_t nspid;
    /* Timestamp of when the process was created, in nanoseconds
 from boot. Parsed from starttime in /proc/pid/stat.
 Recorded if record_process_age config option is set.
 Resolution of "clock ticks", usually 10ms. */
    bool has_process_start_from_boot;
    uint64_t process_start_from_boot;
    /* If true, the process is a kernel thread.
 Set only on linux v6.4+. For traces from older devices, it is possible to
 infer most kthreads by checking that they're a descendant of kthreadd
 (pid=2), or are the idle process (pid=0).
 Introduced in: perfetto v50. */
    bool has_is_kthread;
    bool is_kthread;
    /* If true, the |cmdline| field was filled with the main thread's "comm"
 field instead.
 Introduced in: perfetto v50. */
    bool has_cmdline_is_comm;
    bool cmdline_is_comm;
} perfetto_protos_ProcessTree_Process;

/* Records the parameters for aligning clock readings between machines. */
typedef struct _perfetto_protos_RemoteClockSync {
    pb_callback_t synced_clocks;
} perfetto_protos_RemoteClockSync;

/* Synchronized clock snapshots taken on both sides of the relay port (the
 tracing service and the relay service). A round of clock synchronization
 IPC takes emits 2 SyncedClocks messages, i.e., client snapshot -> host
 snapshot -> client snapshot -> host snapshot. */
typedef struct _perfetto_protos_RemoteClockSync_SyncedClocks {
    bool has_client_clocks;
    perfetto_protos_ClockSnapshot client_clocks;
    bool has_host_clocks;
    perfetto_protos_ClockSnapshot host_clocks;
} perfetto_protos_RemoteClockSync_SyncedClocks;

/* Deliberate empty message. See comment on StatsdAtom#atom below. */
typedef struct _perfetto_protos_Atom {
    char dummy_field;
} perfetto_protos_Atom;

/* One or more statsd atoms. This must continue to match:
 perfetto/protos/third_party/statsd/shell_data.proto
 So that we can efficiently add data from statsd directly to the
 trace. */
typedef struct _perfetto_protos_StatsdAtom {
    /* Atom should be filled with an Atom proto from:
 https://cs.android.com/android/platform/superproject/main/+/main:frameworks/proto_logging/stats/atoms.proto?q=f:stats%2Fatoms.proto$%20message%5C%20Atom
 We don't reference Atom directly here since we don't want to import
 Atom.proto and all its transitive dependencies into Perfetto.
 atom and timestamp_nanos have the same cardinality */
    pb_callback_t atom;
    pb_callback_t timestamp_nanos;
} perfetto_protos_StatsdAtom;

/* Various Linux system stat counters from /proc.
 The fields in this message can be reported at different rates and with
 different granularity. See sys_stats_config.proto. */
typedef struct _perfetto_protos_SysStats {
    pb_callback_t meminfo;
    pb_callback_t vmstat;
    /* One entry per cpu. */
    pb_callback_t cpu_stat;
    /* Num processes forked since boot.
 Populated only if FORK_COUNT in config.stat_counters. */
    bool has_num_forks;
    uint64_t num_forks;
    /* Total num of irqs serviced since boot. */
    bool has_num_irq_total;
    uint64_t num_irq_total;
    pb_callback_t num_irq;
    /* Total num of softirqs since boot. */
    bool has_num_softirq_total;
    uint64_t num_softirq_total;
    /* Per-softirq count. */
    pb_callback_t num_softirq;
    /* The time at which we finish collecting this set of samples;
 the top-level packet timestamp is the time at which
 we begin collection. */
    bool has_collection_end_timestamp;
    uint64_t collection_end_timestamp;
    /* One entry per device. */
    pb_callback_t devfreq;
    /* Cpu current frequency from
 /sys/devices/system/cpu/cpu* /cpufreq/cpuinfo_cur_freq in kHz.
 One entry per cpu. Report 0 for offline cpu */
    pb_callback_t cpufreq_khz;
    /* One entry per each node's zones. */
    pb_callback_t buddy_info;
    /* One entry per disk device. */
    pb_callback_t disk_stat;
    /* One entry per PsiResource type. */
    pb_callback_t psi;
    pb_callback_t thermal_zone;
    pb_callback_t cpuidle_state;
    /* Read GPU frequency info on Intel/AMD devices. */
    pb_callback_t gpufreq_mhz;
} perfetto_protos_SysStats;

/* Counters from /proc/meminfo. Values are in KB. */
typedef struct _perfetto_protos_SysStats_MeminfoValue {
    bool has_key;
    perfetto_protos_MeminfoCounters key;
    bool has_value;
    uint64_t value;
} perfetto_protos_SysStats_MeminfoValue;

/* Counter from /proc/vmstat. Units are often pages, not KB. */
typedef struct _perfetto_protos_SysStats_VmstatValue {
    bool has_key;
    perfetto_protos_VmstatCounters key;
    bool has_value;
    uint64_t value;
} perfetto_protos_SysStats_VmstatValue;

/* Times in each mode, since boot. Unit: nanoseconds. */
typedef struct _perfetto_protos_SysStats_CpuTimes {
    bool has_cpu_id;
    uint32_t cpu_id;
    /* Time spent in user mode. */
    bool has_user_ns;
    uint64_t user_ns;
    /* Time spent in user mode (low prio). */
    bool has_user_nice_ns;
    uint64_t user_nice_ns;
    /* Time spent in system mode. */
    bool has_system_mode_ns;
    uint64_t system_mode_ns;
    /* Time spent in the idle task. */
    bool has_idle_ns;
    uint64_t idle_ns;
    /* Time spent waiting for I/O. */
    bool has_io_wait_ns;
    uint64_t io_wait_ns;
    /* Time spent servicing interrupts. */
    bool has_irq_ns;
    uint64_t irq_ns;
    /* Time spent servicing softirqs. */
    bool has_softirq_ns;
    uint64_t softirq_ns;
} perfetto_protos_SysStats_CpuTimes;

typedef struct _perfetto_protos_SysStats_InterruptCount {
    bool has_irq;
    int32_t irq;
    bool has_count;
    uint64_t count;
} perfetto_protos_SysStats_InterruptCount;

/* Frequencies for /sys/class/devfreq/ entries in kHz. */
typedef struct _perfetto_protos_SysStats_DevfreqValue {
    pb_callback_t key;
    bool has_value;
    uint64_t value;
} perfetto_protos_SysStats_DevfreqValue;

typedef struct _perfetto_protos_SysStats_BuddyInfo {
    pb_callback_t node;
    pb_callback_t zone;
    pb_callback_t order_pages;
} perfetto_protos_SysStats_BuddyInfo;

/* Counters from /proc/diskstats. */
typedef struct _perfetto_protos_SysStats_DiskStat {
    pb_callback_t device_name;
    bool has_read_sectors;
    uint64_t read_sectors;
    bool has_read_time_ms;
    uint64_t read_time_ms;
    bool has_write_sectors;
    uint64_t write_sectors;
    bool has_write_time_ms;
    uint64_t write_time_ms;
    bool has_discard_sectors;
    uint64_t discard_sectors;
    bool has_discard_time_ms;
    uint64_t discard_time_ms;
    bool has_flush_count;
    uint64_t flush_count;
    bool has_flush_time_ms;
    uint64_t flush_time_ms;
} perfetto_protos_SysStats_DiskStat;

/* Reading from /proc/pressure/ *. */
typedef struct _perfetto_protos_SysStats_PsiSample {
    bool has_resource;
    perfetto_protos_SysStats_PsiSample_PsiResource resource;
    /* Total absolute stall time (in nanos) for a given resource.
 While PSI readings are in micros, we store in nanos for consistency with
 most other time-based counters. */
    bool has_total_ns;
    uint64_t total_ns;
} perfetto_protos_SysStats_PsiSample;

/* Reading from /sys/class/thermal/ *. */
typedef struct _perfetto_protos_SysStats_ThermalZone {
    pb_callback_t name;
    bool has_temp;
    uint64_t temp;
    pb_callback_t type;
} perfetto_protos_SysStats_ThermalZone;

/* Reading from /sys/devices/system/cpu/cpu* /cpuidle/state*. */
typedef struct _perfetto_protos_SysStats_CpuIdleStateEntry {
    /* Name of the idle state, e.g. C1-C10 */
    pb_callback_t state;
    bool has_duration_us;
    uint64_t duration_us;
} perfetto_protos_SysStats_CpuIdleStateEntry;

typedef struct _perfetto_protos_SysStats_CpuIdleState {
    bool has_cpu_id;
    uint32_t cpu_id;
    pb_callback_t cpuidle_state_entry;
} perfetto_protos_SysStats_CpuIdleState;

typedef struct _perfetto_protos_Utsname {
    pb_callback_t sysname;
    pb_callback_t version;
    pb_callback_t release;
    pb_callback_t machine;
} perfetto_protos_Utsname;

/* Next id: 15; */
typedef struct _perfetto_protos_SystemInfo {
    bool has_utsname;
    perfetto_protos_Utsname utsname;
    pb_callback_t android_build_fingerprint;
    /* Ticks per second - sysconf(_SC_CLK_TCK).
 Not serialised as of perfetto v44. */
    bool has_hz;
    int64_t hz;
    /* The version of traced (the same returned by `traced --version`).
 This is a human readable string with and its format varies depending on
 the build system and the repo (standalone vs AOSP).
 This is intended for human debugging only. */
    pb_callback_t tracing_service_version;
    /* The Android SDK vesion (e.g. 21 for L, 31 for S etc).
 Introduced in Android T. */
    bool has_android_sdk_version;
    uint64_t android_sdk_version;
    /* Kernel page size - sysconf(_SC_PAGESIZE). */
    bool has_page_size;
    uint32_t page_size;
    /* The timezone offset from UTC, as per strftime("%z"), in minutes.
 Introduced in v38 / Android V. */
    bool has_timezone_off_mins;
    int32_t timezone_off_mins;
    /* Number of cpus - sysconf(_SC_NPROCESSORS_CONF).
 Might be different to the number of online cpus.
 Introduced in perfetto v44. */
    bool has_num_cpus;
    uint32_t num_cpus;
    /* The SoC model from which trace is collected */
    pb_callback_t android_soc_model;
    /* The hardware reversion from android device */
    pb_callback_t android_hardware_revision;
    /* The storage component from android_device. This field has been introduced
 after Android W in Aug 2024 and is not supported on older versions. */
    pb_callback_t android_storage_model;
    /* The RAM component information from android device. This field has been
 introduced after Android W in Aug 2024 and is not supported on older
 versions. */
    pb_callback_t android_ram_model;
    /* The guest SoC model from which trace is collected in case of VMs */
    pb_callback_t android_guest_soc_model;
    /* The manufacturer of the product/hardware.
 Source : "ro.product.manufacturer"
 Introduced after Android W in Nov 2024 and is not supported on older
 versions. */
    pb_callback_t android_device_manufacturer;
} perfetto_protos_SystemInfo;

/* Information about CPUs from procfs and sysfs. */
typedef struct _perfetto_protos_CpuInfo {
    /* Describes available CPUs, one entry per CPU. */
    pb_callback_t cpus;
} perfetto_protos_CpuInfo;

typedef struct _perfetto_protos_CpuInfo_ArmCpuIdentifier {
    /* Implementer code */
    bool has_implementer;
    uint32_t implementer;
    /* Architecture code */
    bool has_architecture;
    uint32_t architecture;
    /* CPU variant */
    bool has_variant;
    uint32_t variant;
    /* CPU part */
    bool has_part;
    uint32_t part;
    /* CPU revision */
    bool has_revision;
    uint32_t revision;
} perfetto_protos_CpuInfo_ArmCpuIdentifier;

/* Information about a single CPU. */
typedef struct _perfetto_protos_CpuInfo_Cpu {
    /* Value of "Processor" field from /proc/cpuinfo for this CPU.
 Example: "AArch64 Processor rev 12 (aarch64)" */
    pb_callback_t processor;
    /* Frequencies from
 /sys/devices/system/cpu/cpuX/cpufreq/scaling_available_frequencies
 where X is the index of this CPU. */
    pb_callback_t frequencies;
    /* Cpu capacity from /sys/devices/system/cpu/cpuX/cpu_capacity where X is
 the index of this CPU. */
    bool has_capacity;
    uint32_t capacity;
    pb_size_t which_identifier;
    union _perfetto_protos_CpuInfo_Cpu_identifier {
        perfetto_protos_CpuInfo_ArmCpuIdentifier arm_identifier;
    } identifier;
    /* Features is a bitmap containing a bit set for each feature defined in
 kCpuInfoFlags (cpu_info_flags_allowlist.h) for the corresponding array
 index. */
    bool has_features;
    uint64_t features;
} perfetto_protos_CpuInfo_Cpu;

typedef struct _perfetto_protos_TestEvent_TestPayload {
    pb_callback_t str;
    pb_callback_t nested;
    /* When 0 this is the bottom-most nested message. */
    bool has_remaining_nesting_depth;
    uint32_t remaining_nesting_depth;
    pb_callback_t single_string;
    bool has_single_int;
    int32_t single_int;
    pb_callback_t repeated_ints;
    pb_callback_t debug_annotations;
} perfetto_protos_TestEvent_TestPayload;

/* Event used by testing code. */
typedef struct _perfetto_protos_TestEvent {
    /* Arbitrary string used in tests. */
    pb_callback_t str;
    /* The current value of the random number sequence used in tests. */
    bool has_seq_value;
    uint32_t seq_value;
    /* Monotonically increased on each packet. */
    bool has_counter;
    uint64_t counter;
    /* No more packets should follow (from the current sequence). */
    bool has_is_last;
    bool is_last;
    bool has_payload;
    perfetto_protos_TestEvent_TestPayload payload;
} perfetto_protos_TestEvent;

/* Default values for TracePacket fields that hold for a particular TraceWriter
 packet sequence. This message contains a subset of the TracePacket fields
 with matching IDs. When provided, these fields define the default values
 that should be applied, at import time, to all TracePacket(s) with the same
 |trusted_packet_sequence_id|, unless otherwise specified in each packet.

 Should be reemitted whenever incremental state is cleared on the sequence. */
typedef struct _perfetto_protos_TracePacketDefaults {
    /* Default values for TrackEvents (e.g. default track). */
    bool has_track_event_defaults;
    perfetto_protos_TrackEventDefaults track_event_defaults;
    /* Defaults for perf profiler packets (PerfSample). */
    bool has_perf_sample_defaults;
    perfetto_protos_PerfSampleDefaults perf_sample_defaults;
    bool has_timestamp_clock_id;
    uint32_t timestamp_clock_id;
    /* Defaults for V8 code packets (V8JsCode, V8InternalCode, V8WasmCode,
 V8RegexpCode) */
    bool has_v8_code_defaults;
    perfetto_protos_V8CodeDefaults v8_code_defaults;
} perfetto_protos_TracePacketDefaults;

/* A random unique ID that identifies the trace.
 This message has been introduced in v32. Prior to that, the UUID was
 only (optionally) present in the TraceConfig.trace_uuid_msb/lsb fields.
 This has been moved to a standalone packet to deal with new use-cases for
 go/gapless-aot, where the same tracing session can be serialized several
 times, in which case the UUID is changed on each snapshot and does not match
 the one in the TraceConfig. */
typedef struct _perfetto_protos_TraceUuid {
    bool has_msb;
    int64_t msb;
    bool has_lsb;
    int64_t lsb;
} perfetto_protos_TraceUuid;

/* Describes a process's attributes. Emitted as part of a TrackDescriptor,
 usually by the process's main thread.

 Next id: 9. */
typedef struct _perfetto_protos_ProcessDescriptor {
    bool has_pid;
    int32_t pid;
    pb_callback_t cmdline;
    /* To support old UI. New UI should determine default sorting by process_type. */
    bool has_legacy_sort_index;
    int32_t legacy_sort_index;
    bool has_chrome_process_type;
    perfetto_protos_ProcessDescriptor_ChromeProcessType chrome_process_type;
    bool has_process_priority;
    int32_t process_priority;
    pb_callback_t process_name;
    /* Process start time in nanoseconds.
 The timestamp refers to the trace clock by default. Other clock IDs
 provided in TracePacket are not supported. */
    bool has_start_timestamp_ns;
    int64_t start_timestamp_ns;
    /* Labels can be used to further describe properties of the work performed by
 the process. For example, these can be used by Chrome renderer process to
 provide titles of frames being rendered. */
    pb_callback_t process_labels;
} perfetto_protos_ProcessDescriptor;

/* This message specifies the "range of interest" for track events. With the
 `drop_track_event_data_before` option set to `kTrackEventRangeOfInterest`,
 Trace Processor drops track events outside of this range. */
typedef struct _perfetto_protos_TrackEventRangeOfInterest {
    bool has_start_us;
    int64_t start_us;
} perfetto_protos_TrackEventRangeOfInterest;

/* Describes a thread's attributes. Emitted as part of a TrackDescriptor,
 usually by the thread's trace writer.

 Next id: 9. */
typedef struct _perfetto_protos_ThreadDescriptor {
    bool has_pid;
    int32_t pid;
    bool has_tid;
    int32_t tid;
    /* To support old UI. New UI should determine default sorting by thread_type. */
    bool has_legacy_sort_index;
    int32_t legacy_sort_index;
    bool has_chrome_thread_type;
    perfetto_protos_ThreadDescriptor_ChromeThreadType chrome_thread_type;
    pb_callback_t thread_name;
    /* Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
 and timestamp_clock_id fields instead. */
    bool has_reference_timestamp_us;
    int64_t reference_timestamp_us;
    /* Absolute reference values. Clock values in subsequent TrackEvents can be
 encoded accumulatively and relative to these. This reduces their var-int
 encoding size.
 TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding. */
    bool has_reference_thread_time_us;
    int64_t reference_thread_time_us;
    bool has_reference_thread_instruction_count;
    int64_t reference_thread_instruction_count;
} perfetto_protos_ThreadDescriptor;

/* Describes the attributes for a Chrome process. Must be paired with a
 ProcessDescriptor in the same TrackDescriptor.

 Next id: 6. */
typedef struct _perfetto_protos_ChromeProcessDescriptor {
    bool has_process_type;
    perfetto_protos_ChromeProcessDescriptor_ProcessType process_type;
    bool has_process_priority;
    int32_t process_priority;
    /* To support old UI. New UI should determine default sorting by process_type. */
    bool has_legacy_sort_index;
    int32_t legacy_sort_index;
    /* Name of the hosting app for WebView. Used to match renderer processes to
 their hosting apps. */
    pb_callback_t host_app_package_name;
    /* The ID to link crashes to trace.
 Notes:
 * The ID is per process. So, each trace may contain many IDs, and you need
   to look for the ID from crashed process to find the crash report.
 * Having a "chrome-trace-id" in crash doesn't necessarily mean we can
   get an uploaded trace, since uploads could have failed.
 * On the other hand, if there was a crash during the session and trace was
   uploaded, it is very likely to find a crash report with the trace ID.
 * This is not crash ID or trace ID. It is just a random 64-bit number
   recorded in both traces and crashes. It is possible to have collisions,
   though very rare. */
    bool has_crash_trace_id;
    uint64_t crash_trace_id;
} perfetto_protos_ChromeProcessDescriptor;

/* Describes a Chrome thread's attributes. Emitted as part of a TrackDescriptor,
 usually by the thread's trace writer. Must be paired with a ThreadDescriptor
 in the same TrackDescriptor.

 Next id: 3. */
typedef struct _perfetto_protos_ChromeThreadDescriptor {
    bool has_thread_type;
    perfetto_protos_ChromeThreadDescriptor_ThreadType thread_type;
    /* To support old UI. New UI should determine default sorting by thread_type. */
    bool has_legacy_sort_index;
    int32_t legacy_sort_index;
} perfetto_protos_ChromeThreadDescriptor;

/* Defines properties of a counter track, e.g. for built-in counters (thread
 time, instruction count, ..) or user-specified counters (e.g. memory usage of
 a specific app component).

 Counter tracks only support TYPE_COUNTER track events, which specify new
 values for the counter. For counters that require per-slice values, counter
 values can instead be provided in a more efficient encoding via TrackEvent's
 |extra_counter_track_uuids| and |extra_counter_values| fields. However,
 slice-type events cannot be emitted onto a counter track.

 Values for counters that are only emitted on a single packet sequence can
 optionally be delta-encoded, see |is_incremental|.

 Next id: 7. */
typedef struct _perfetto_protos_CounterDescriptor {
    /* For built-in counters (e.g. thread time). Custom user-specified counters
 (e.g. those emitted by TRACE_COUNTER macros of the client library)
 shouldn't set this, and instead provide a counter name via TrackDescriptor. */
    bool has_type;
    perfetto_protos_CounterDescriptor_BuiltinCounterType type;
    /* Names of categories of the counter (usually for user-specified counters).
 In the client library, categories are a way to turn groups of individual
 counters (or events) on or off. */
    pb_callback_t categories;
    /* Type of the counter's values. Built-in counters imply a value for this
 field. */
    bool has_unit;
    perfetto_protos_CounterDescriptor_Unit unit;
    /* Multiplication factor of this counter's values, e.g. to supply
 COUNTER_THREAD_TIME_NS timestamps in microseconds instead. */
    bool has_unit_multiplier;
    int64_t unit_multiplier;
    /* Whether values for this counter are provided as delta values. Only
 supported for counters that are emitted on a single packet-sequence (e.g.
 thread time). Counter values in subsequent packets on the current packet
 sequence will be interpreted as delta values from the sequence's most
 recent value for the counter. When incremental state is cleared, the
 counter value is considered to be reset to 0. Thus, the first value after
 incremental state is cleared is effectively an absolute value. */
    bool has_is_incremental;
    bool is_incremental;
    /* In order to use a unit not defined as a part of |Unit|, a free-form unit
 name can be used instead. */
    pb_callback_t unit_name;
} perfetto_protos_CounterDescriptor;

/* Defines a track for TrackEvents. Slices and instant events on the same track
 will be nested based on their timestamps, see TrackEvent::Type.

 A TrackDescriptor only needs to be emitted by one trace writer / producer and
 is valid for the entirety of the trace. To ensure the descriptor isn't lost
 when the ring buffer wraps, it should be reemitted whenever incremental state
 is cleared.

 As a fallback, TrackEvents emitted without an explicit track association will
 be associated with an implicit trace-global track (uuid = 0), see also
 |TrackEvent::track_uuid|. It is possible but not necessary to emit a
 TrackDescriptor for this implicit track.

 Next id: 14. */
typedef struct _perfetto_protos_TrackDescriptor {
    /* Unique ID that identifies this track. This ID is global to the whole trace.
 Producers should ensure that it is unlikely to clash with IDs emitted by
 other producers. A value of 0 denotes the implicit trace-global track.

 For example, legacy TRACE_EVENT macros may use a hash involving the async
 event id + id_scope, pid, and/or tid to compute this ID. */
    bool has_uuid;
    uint64_t uuid;
    pb_size_t which_static_or_dynamic_name;
    union _perfetto_protos_TrackDescriptor_static_or_dynamic_name {
        pb_callback_t name;
        /* This field is only set by the SDK when perfetto::StaticString is
     provided. */
        pb_callback_t static_name;
        /* Equivalent to name, used just to mark that the data is coming from
     android.os.Trace. */
        pb_callback_t atrace_name;
    } static_or_dynamic_name;
    /* Associate the track with a process, making it the process-global track.
 There should only be one such track per process (usually for instant
 events; trace processor uses this fact to detect pid reuse). If you need
 more (e.g. for asynchronous events), create child tracks using parent_uuid.

 Trace processor will merge events on a process track with slice-type events
 from other sources (e.g. ftrace) for the same process into a single
 timeline view. */
    bool has_process;
    perfetto_protos_ProcessDescriptor process;
    /* Associate the track with a thread, indicating that the track's events
 describe synchronous code execution on the thread. There should only be one
 such track per thread (trace processor uses this fact to detect tid reuse).

 Trace processor will merge events on a thread track with slice-type events
 from other sources (e.g. ftrace) for the same thread into a single timeline
 view. */
    bool has_thread;
    perfetto_protos_ThreadDescriptor thread;
    /* A parent track reference can be used to describe relationships between
 tracks. For example, to define an asynchronous track which is scoped to a
 specific process, specify the uuid for that process's process track here.
 Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
 thread, specify the uuid for that thread's thread track here. In general,
 setting a parent will *nest* that track under the parent in the UI and in
 the trace processor data model (with the important exception noted below).

 If not specified, the track will be a root track, i.e. not nested under any
 other track.

 Note: if the `thread` or `process` fields are set, this value will be
 *ignored* as priority is given to those fields.

 Note: if the parent is set to a track with `thread` or `process` fields
 set, the track will *not* be nested under the parent in the UI and in the
 trace processor data model. Instead, the track will inherit the parent'
 thread/process association and will appear as a *sibling* of the parent.
 This semantic exists for back-compat reasons as the UI used to work this
 way for years and changing this leads to a lot of traces subtly breaking.
 If you want to force nesting, create *another* intermediate track to act as
 the parent. */
    bool has_parent_uuid;
    uint64_t parent_uuid;
    bool has_chrome_process;
    perfetto_protos_ChromeProcessDescriptor chrome_process;
    bool has_chrome_thread;
    perfetto_protos_ChromeThreadDescriptor chrome_thread;
    /* Descriptor for a counter track. If set, the track will only support
 TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
 |extra_counter_values|). */
    bool has_counter;
    perfetto_protos_CounterDescriptor counter;
    /* If true, forces Trace Processor to use separate tracks for track events
 and system events for the same thread.
 Track events timestamps in Chrome have microsecond resolution, while
 system events use nanoseconds. It results in broken event nesting when
 track events and system events share a track. */
    bool has_disallow_merging_with_system_tracks;
    bool disallow_merging_with_system_tracks;
    bool has_child_ordering;
    perfetto_protos_TrackDescriptor_ChildTracksOrdering child_ordering;
    /* An opaque value which allows specifying how two sibling tracks should be
 ordered relative to each other: tracks with lower ranks will appear before
 tracks with higher ranks. An unspecified rank will be treated as a rank of
 0.

 Note: for tracks where the parent has `thread` or `process` are set, this
 option is *ignored*. See `parent_uuid` for details. */
    bool has_sibling_order_rank;
    int32_t sibling_order_rank;
} perfetto_protos_TrackDescriptor;

/* Chrome histogram sample hash -> name translation rules. */
typedef struct _perfetto_protos_ChromeHistorgramTranslationTable {
    pb_callback_t hash_to_name;
} perfetto_protos_ChromeHistorgramTranslationTable;

typedef struct _perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry {
    bool has_key;
    uint64_t key;
    pb_callback_t value;
} perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry;

/* Chrome user event action hash -> name translation rules. */
typedef struct _perfetto_protos_ChromeUserEventTranslationTable {
    pb_callback_t action_hash_to_name;
} perfetto_protos_ChromeUserEventTranslationTable;

typedef struct _perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry {
    bool has_key;
    uint64_t key;
    pb_callback_t value;
} perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry;

/* Chrome performance mark translation rules. */
typedef struct _perfetto_protos_ChromePerformanceMarkTranslationTable {
    pb_callback_t site_hash_to_name;
    pb_callback_t mark_hash_to_name;
} perfetto_protos_ChromePerformanceMarkTranslationTable;

typedef struct _perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry {
    bool has_key;
    uint32_t key;
    pb_callback_t value;
} perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry;

typedef struct _perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry {
    bool has_key;
    uint32_t key;
    pb_callback_t value;
} perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry;

/* Raw -> deobfuscated slice name translation rules. */
typedef struct _perfetto_protos_SliceNameTranslationTable {
    pb_callback_t raw_to_deobfuscated_name;
} perfetto_protos_SliceNameTranslationTable;

typedef struct _perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry {
    pb_callback_t key;
    pb_callback_t value;
} perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry;

/* Raw -> deobfuscated process track name translation rules. */
typedef struct _perfetto_protos_ProcessTrackNameTranslationTable {
    pb_callback_t raw_to_deobfuscated_name;
} perfetto_protos_ProcessTrackNameTranslationTable;

typedef struct _perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry {
    pb_callback_t key;
    pb_callback_t value;
} perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry;

/* Chrome study hash -> name translation rules. */
typedef struct _perfetto_protos_ChromeStudyTranslationTable {
    pb_callback_t hash_to_name;
} perfetto_protos_ChromeStudyTranslationTable;

/* Translation rules for the trace processor.
 See the comments for each rule type for specific meaning. */
typedef struct _perfetto_protos_TranslationTable {
    pb_size_t which_table;
    union _perfetto_protos_TranslationTable_table {
        perfetto_protos_ChromeHistorgramTranslationTable chrome_histogram;
        perfetto_protos_ChromeUserEventTranslationTable chrome_user_event;
        perfetto_protos_ChromePerformanceMarkTranslationTable chrome_performance_mark;
        perfetto_protos_SliceNameTranslationTable slice_name;
        perfetto_protos_ProcessTrackNameTranslationTable process_track_name;
        perfetto_protos_ChromeStudyTranslationTable chrome_study;
    } table;
} perfetto_protos_TranslationTable;

typedef struct _perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry {
    bool has_key;
    uint64_t key;
    pb_callback_t value;
} perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry;

/* When a TracingSession receives a trigger it records the boot time nanoseconds
 in the TracePacket's timestamp field as well as the name of the producer that
 triggered it. We emit this data so filtering can be done on triggers received
 in the trace. */
typedef struct _perfetto_protos_Trigger {
    /* Name of the trigger which was received. */
    pb_callback_t trigger_name;
    /* The actual producer that activated |trigger|. */
    pb_callback_t producer_name;
    /* The verified UID of the producer. */
    bool has_trusted_producer_uid;
    int32_t trusted_producer_uid;
} perfetto_protos_Trigger;

/* Indicates that the given process should be highlighted by the UI. */
typedef struct _perfetto_protos_UiState_HighlightProcess {
    pb_size_t which_selector;
    union _perfetto_protos_UiState_HighlightProcess_selector {
        /* The pid of the process to highlight. This is useful for UIs to focus
     on tracks of a particular process in the trace.
    
     If more than one process in a trace has the same pid, it is UI
     implementation specific how the process to be focused will be
     chosen. */
        uint32_t pid;
        /* The command line of the process to highlight; for most Android apps,
     this is the package name of the app. This is useful for UIs to focus
     on a particular app in the trace.
    
     If more than one process hasthe same cmdline, it is UI implementation
     specific how the process to be focused will be chosen. */
        pb_callback_t cmdline;
    } selector;
} perfetto_protos_UiState_HighlightProcess;

/* Common state for UIs visualizing Perfetto traces.
 This message can be appended as a TracePacket by UIs to save the
 visible state (e.g. scroll position/zoom state) for future opening
 of the trace.
 Design doc: go/trace-ui-state. */
typedef struct _perfetto_protos_UiState {
    /* The start and end bounds of the viewport of the UI in nanoseconds.

 This is the absolute time associated to slices and other events in
 trace processor tables (i.e. the |ts| column of most tables) */
    bool has_timeline_start_ts;
    int64_t timeline_start_ts;
    bool has_timeline_end_ts;
    int64_t timeline_end_ts;
    bool has_highlight_process;
    perfetto_protos_UiState_HighlightProcess highlight_process;
} perfetto_protos_UiState;

/* TracePacket is the root object of a Perfetto trace.
 A Perfetto trace is a linear sequence of TracePacket(s).

 The tracing service guarantees that all TracePacket(s) written by a given
 TraceWriter are seen in-order, without gaps or duplicates. If, for any
 reason, a TraceWriter sequence becomes invalid, no more packets are returned
 to the Consumer (or written into the trace file).
 TracePacket(s) written by different TraceWriter(s), hence even different
 data sources, can be seen in arbitrary order.
 The consumer can re-establish a total order, if interested, using the packet
 timestamps, after having synchronized the different clocks onto a global
 clock.

 The tracing service is agnostic of the content of TracePacket, with the
 exception of few fields (e.g.. trusted_*, trace_config) that are written by
 the service itself.

 See the [Buffers and Dataflow](/docs/concepts/buffers.md) doc for details.

 Next reserved id: 14 (up to 15).
 Next id: 117. */
typedef struct _perfetto_protos_TracePacket {
    pb_size_t which_data;
    union _perfetto_protos_TracePacket_data {
        /* Events from the Linux kernel ftrace infrastructure. */
        perfetto_protos_FtraceEventBundle ftrace_events;
        perfetto_protos_ProcessTree process_tree;
        perfetto_protos_InodeFileMap inode_file_map;
        perfetto_protos_ChromeEventBundle chrome_events;
        perfetto_protos_ClockSnapshot clock_snapshot;
        perfetto_protos_SysStats sys_stats;
        perfetto_protos_ProcessStats process_stats;
        perfetto_protos_TrackEvent track_event;
        perfetto_protos_TraceConfig trace_config;
        perfetto_protos_FtraceStats ftrace_stats;
        perfetto_protos_TraceStats trace_stats;
        /* This field is emitted at periodic intervals (~10s) and
     contains always the binary representation of the UUID
     {82477a76-b28d-42ba-81dc-33326d57a079}. This is used to be able to
     efficiently partition long traces without having to fully parse them. */
        pb_callback_t synchronization_marker;
        perfetto_protos_ProfilePacket profile_packet;
        perfetto_protos_BatteryCounters battery;
        perfetto_protos_AndroidLogPacket android_log;
        perfetto_protos_PowerRails power_rails;
        /* Deprecated, use TrackDescriptor instead. */
        perfetto_protos_ProcessDescriptor process_descriptor;
        /* Deprecated, use TrackDescriptor instead. */
        perfetto_protos_ThreadDescriptor thread_descriptor;
        perfetto_protos_SystemInfo system_info;
        perfetto_protos_Trigger trigger;
        perfetto_protos_PackagesList packages_list;
        perfetto_protos_ChromeBenchmarkMetadata chrome_benchmark_metadata;
        perfetto_protos_PerfettoMetatrace perfetto_metatrace;
        /* Zero or more proto encoded trace packets compressed using deflate.
     Each compressed_packets TracePacket (including the two field ids and
     sizes) should be less than 512KB. */
        pb_callback_t compressed_packets;
        perfetto_protos_ChromeMetadataPacket chrome_metadata;
        perfetto_protos_GpuCounterEvent gpu_counter_event;
        perfetto_protos_GpuRenderStageEvent gpu_render_stage_event;
        perfetto_protos_StreamingProfilePacket streaming_profile_packet;
        perfetto_protos_HeapGraph heap_graph;
        perfetto_protos_GraphicsFrameEvent graphics_frame_event;
        /* Only used by TrackEvent. */
        perfetto_protos_TrackDescriptor track_descriptor;
        /* Only used in profile packets. */
        perfetto_protos_ModuleSymbols module_symbols;
        perfetto_protos_VulkanMemoryEvent vulkan_memory_event;
        perfetto_protos_GpuLog gpu_log;
        perfetto_protos_DeobfuscationMapping deobfuscation_mapping;
        perfetto_protos_VulkanApiEvent vulkan_api_event;
        perfetto_protos_PerfSample perf_sample;
        perfetto_protos_CpuInfo cpu_info;
        perfetto_protos_SmapsPacket smaps_packet;
        perfetto_protos_TracingServiceEvent service_event;
        perfetto_protos_InitialDisplayState initial_display_state;
        perfetto_protos_GpuMemTotalEvent gpu_mem_total_event;
        /* Data sources can extend the trace proto with custom extension protos (see
     docs/design-docs/extensions.md). When they do that, the descriptor of
     their extension proto descriptor is serialized in this packet. This
     allows trace_processor to deserialize extended messages using reflection
     even if the extension proto is not checked in the Perfetto repo. */
        perfetto_protos_ExtensionDescriptor extension_descriptor;
        perfetto_protos_MemoryTrackerSnapshot memory_tracker_snapshot;
        perfetto_protos_StreamingAllocation streaming_allocation;
        perfetto_protos_StreamingFree streaming_free;
        perfetto_protos_FrameTimelineEvent frame_timeline_event;
        perfetto_protos_AndroidEnergyEstimationBreakdown android_energy_estimation_breakdown;
        perfetto_protos_UiState ui_state;
        perfetto_protos_AndroidCameraFrameEvent android_camera_frame_event;
        perfetto_protos_AndroidCameraSessionStats android_camera_session_stats;
        perfetto_protos_TranslationTable translation_table;
        perfetto_protos_AndroidGameInterventionList android_game_intervention_list;
        perfetto_protos_StatsdAtom statsd_atom;
        perfetto_protos_AndroidSystemProperty android_system_property;
        /* Represents a single packet sent or received by the network. */
        perfetto_protos_NetworkPacketEvent network_packet;
        perfetto_protos_TraceUuid trace_uuid;
        /* The "range of interest" for track events. See the message definition
     comments for more details. */
        perfetto_protos_TrackEventRangeOfInterest track_event_range_of_interest;
        perfetto_protos_EntityStateResidency entity_state_residency;
        /* Represents one or more packets sent or received by the network. */
        perfetto_protos_NetworkPacketBundle network_packet_bundle;
        /* Winscope traces */
        perfetto_protos_LayersSnapshotProto surfaceflinger_layers_snapshot;
        perfetto_protos_TransactionTraceEntry surfaceflinger_transactions;
        /* Events from the Windows etw infrastructure. */
        perfetto_protos_EtwTraceEventBundle etw_events;
        perfetto_protos_ShellTransition shell_transition;
        perfetto_protos_ShellHandlerMappings shell_handler_mappings;
        perfetto_protos_V8JsCode v8_js_code;
        perfetto_protos_V8InternalCode v8_internal_code;
        perfetto_protos_V8WasmCode v8_wasm_code;
        perfetto_protos_V8RegExpCode v8_reg_exp_code;
        perfetto_protos_V8CodeMove v8_code_move;
        perfetto_protos_ProtoLogMessage protolog_message;
        perfetto_protos_ProtoLogViewerConfig protolog_viewer_config;
        /* Clock synchronization with remote machines. */
        perfetto_protos_RemoteClockSync remote_clock_sync;
        perfetto_protos_ChromeTrigger chrome_trigger;
        perfetto_protos_PixelModemEvents pixel_modem_events;
        perfetto_protos_PixelModemTokenDatabase pixel_modem_token_database;
        perfetto_protos_WinscopeExtensions winscope_extensions;
        perfetto_protos_Trigger clone_snapshot_trigger;
        perfetto_protos_BluetoothTraceEvent bluetooth_trace_event;
        perfetto_protos_KernelWakelockData kernel_wakelock_data;
        perfetto_protos_AppWakelockBundle app_wakelock_bundle;
        /* This field is only used for testing.
     In previous versions of this proto this field had the id 268435455
     This caused many problems:
     - protozero decoder does not handle field ids larger than 999.
     - old versions of protoc produce Java bindings with syntax errors when
       the field id is large enough. */
        perfetto_protos_TestEvent for_testing;
    } data;
    pb_size_t which_optional_trusted_uid;
    union _perfetto_protos_TracePacket_optional_trusted_uid {
        int32_t trusted_uid;
    } optional_trusted_uid;
    /* The timestamp of the TracePacket.
 By default this timestamps refers to the trace clock (CLOCK_BOOTTIME on
 Android). It can be overridden using a different timestamp_clock_id.
 The clock domain definition in ClockSnapshot can also override:
 - The unit (default: 1ns).
 - The absolute vs delta encoding (default: absolute timestamp). */
    bool has_timestamp;
    uint64_t timestamp;
    pb_size_t which_optional_trusted_packet_sequence_id;
    union _perfetto_protos_TracePacket_optional_trusted_packet_sequence_id {
        uint32_t trusted_packet_sequence_id;
    } optional_trusted_packet_sequence_id;
    /* Incrementally emitted interned data, valid only on the packet's sequence
 (packets with the same |trusted_packet_sequence_id|). The writer will
 usually emit new interned data in the same TracePacket that first refers to
 it (since the last reset of interning state). It may also be emitted
 proactively in advance of referring to them in later packets. */
    bool has_interned_data;
    perfetto_protos_InternedData interned_data;
    bool has_sequence_flags;
    uint32_t sequence_flags;
    /* DEPRECATED. Moved to SequenceFlags::SEQ_INCREMENTAL_STATE_CLEARED. */
    bool has_incremental_state_cleared;
    bool incremental_state_cleared;
    /* Flag set by the service if, for the current packet sequence (see
 |trusted_packet_sequence_id|), either:
 * this is the first packet, or
 * one or multiple packets were dropped since the last packet that the
   consumer read from the sequence. This can happen if chunks in the trace
   buffer are overridden before the consumer could read them when the trace
   is configured in ring buffer mode.

 When packet loss occurs, incrementally emitted data (including interned
 data) on the sequence should be considered invalid up until the next packet
 with SEQ_INCREMENTAL_STATE_CLEARED set. */
    bool has_previous_packet_dropped;
    bool previous_packet_dropped;
    /* Specifies the ID of the clock used for the TracePacket |timestamp|. Can be
 one of the built-in types from ClockSnapshot::BuiltinClocks, or a
 producer-defined clock id.
 If unspecified and if no default per-sequence value has been provided via
 TracePacketDefaults, it defaults to BuiltinClocks::BOOTTIME. */
    bool has_timestamp_clock_id;
    uint32_t timestamp_clock_id;
    /* Default values for fields of later TracePackets emitted on this packet's
 sequence (TracePackets with the same |trusted_packet_sequence_id|).
 It must be reemitted when incremental state is cleared (see
 |incremental_state_cleared|).
 Requires that any future packet emitted on the same sequence specifies
 the SEQ_NEEDS_INCREMENTAL_STATE flag.
 TracePacketDefaults always override the global defaults for any future
 packet on this sequence (regardless of SEQ_NEEDS_INCREMENTAL_STATE). */
    bool has_trace_packet_defaults;
    perfetto_protos_TracePacketDefaults trace_packet_defaults;
    /* Trusted process id of the producer which generated this packet, written by
 the service. */
    bool has_trusted_pid;
    int32_t trusted_pid;
    /* Flag set by a producer (starting from SDK v29) if, for the current packet
 sequence (see |trusted_packet_sequence_id|), this is the first packet.

 This flag can be used for distinguishing the two situations when
 processing the trace:
 1. There are no prior events for the sequence because of data loss, e.g.
    due to ring buffer wrapping.
 2. There are no prior events for the sequence because it didn't start
    before this packet (= there's definitely no preceding data loss).

 Given that older SDK versions do not support this flag, this flag not
 being present for a particular sequence does not necessarily imply data
 loss. */
    bool has_first_packet_on_sequence;
    bool first_packet_on_sequence;
    /* The machine ID for identifying trace packets in a multi-machine tracing
 session. Is emitted by the tracing service for producers running on a
 remote host (e.g. a VM guest). For more context: go/crosetto-vm-tracing. */
    bool has_machine_id;
    uint32_t machine_id;
} perfetto_protos_TracePacket;

typedef struct _perfetto_protos_Trace {
    pb_callback_t packet;
} perfetto_protos_Trace;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _perfetto_protos_BuiltinClock_MIN perfetto_protos_BuiltinClock_BUILTIN_CLOCK_UNKNOWN
#define _perfetto_protos_BuiltinClock_MAX perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MAX_ID
#define _perfetto_protos_BuiltinClock_ARRAYSIZE ((perfetto_protos_BuiltinClock)(perfetto_protos_BuiltinClock_BUILTIN_CLOCK_MAX_ID+1))

#define _perfetto_protos_AndroidLogId_MIN perfetto_protos_AndroidLogId_LID_DEFAULT
#define _perfetto_protos_AndroidLogId_MAX perfetto_protos_AndroidLogId_LID_KERNEL
#define _perfetto_protos_AndroidLogId_ARRAYSIZE ((perfetto_protos_AndroidLogId)(perfetto_protos_AndroidLogId_LID_KERNEL+1))

#define _perfetto_protos_AndroidLogPriority_MIN perfetto_protos_AndroidLogPriority_PRIO_UNSPECIFIED
#define _perfetto_protos_AndroidLogPriority_MAX perfetto_protos_AndroidLogPriority_PRIO_FATAL
#define _perfetto_protos_AndroidLogPriority_ARRAYSIZE ((perfetto_protos_AndroidLogPriority)(perfetto_protos_AndroidLogPriority_PRIO_FATAL+1))

#define _perfetto_protos_ProtoLogLevel_MIN perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_UNDEFINED
#define _perfetto_protos_ProtoLogLevel_MAX perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_WTF
#define _perfetto_protos_ProtoLogLevel_ARRAYSIZE ((perfetto_protos_ProtoLogLevel)(perfetto_protos_ProtoLogLevel_PROTOLOG_LEVEL_WTF+1))

#define _perfetto_protos_AtomId_MIN perfetto_protos_AtomId_ATOM_UNSPECIFIED
#define _perfetto_protos_AtomId_MAX perfetto_protos_AtomId_ATOM_ATOM_99999
#define _perfetto_protos_AtomId_ARRAYSIZE ((perfetto_protos_AtomId)(perfetto_protos_AtomId_ATOM_ATOM_99999+1))

#define _perfetto_protos_MeminfoCounters_MIN perfetto_protos_MeminfoCounters_MEMINFO_UNSPECIFIED
#define _perfetto_protos_MeminfoCounters_MAX perfetto_protos_MeminfoCounters_MEMINFO_ION_HEAP_POOL
#define _perfetto_protos_MeminfoCounters_ARRAYSIZE ((perfetto_protos_MeminfoCounters)(perfetto_protos_MeminfoCounters_MEMINFO_ION_HEAP_POOL+1))

#define _perfetto_protos_VmstatCounters_MIN perfetto_protos_VmstatCounters_VMSTAT_UNSPECIFIED
#define _perfetto_protos_VmstatCounters_MAX perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_RESTORE_FILE
#define _perfetto_protos_VmstatCounters_ARRAYSIZE ((perfetto_protos_VmstatCounters)(perfetto_protos_VmstatCounters_VMSTAT_WORKINGSET_RESTORE_FILE+1))

#define _perfetto_protos_BluetoothTracePacketType_MIN perfetto_protos_BluetoothTracePacketType_HCI_CMD
#define _perfetto_protos_BluetoothTracePacketType_MAX perfetto_protos_BluetoothTracePacketType_HCI_ISO_TX
#define _perfetto_protos_BluetoothTracePacketType_ARRAYSIZE ((perfetto_protos_BluetoothTracePacketType)(perfetto_protos_BluetoothTracePacketType_HCI_ISO_TX+1))

#define _perfetto_protos_TrafficDirection_MIN perfetto_protos_TrafficDirection_DIR_UNSPECIFIED
#define _perfetto_protos_TrafficDirection_MAX perfetto_protos_TrafficDirection_DIR_EGRESS
#define _perfetto_protos_TrafficDirection_ARRAYSIZE ((perfetto_protos_TrafficDirection)(perfetto_protos_TrafficDirection_DIR_EGRESS+1))

#define _perfetto_protos_TrustedOverlay_MIN perfetto_protos_TrustedOverlay_UNSET
#define _perfetto_protos_TrustedOverlay_MAX perfetto_protos_TrustedOverlay_ENABLED
#define _perfetto_protos_TrustedOverlay_ARRAYSIZE ((perfetto_protos_TrustedOverlay)(perfetto_protos_TrustedOverlay_ENABLED+1))

#define _perfetto_protos_HwcCompositionType_MIN perfetto_protos_HwcCompositionType_HWC_TYPE_UNSPECIFIED
#define _perfetto_protos_HwcCompositionType_MAX perfetto_protos_HwcCompositionType_HWC_TYPE_DISPLAY_DECORATION
#define _perfetto_protos_HwcCompositionType_ARRAYSIZE ((perfetto_protos_HwcCompositionType)(perfetto_protos_HwcCompositionType_HWC_TYPE_DISPLAY_DECORATION+1))

#define _perfetto_protos_FtraceParseStatus_MIN perfetto_protos_FtraceParseStatus_FTRACE_STATUS_UNSPECIFIED
#define _perfetto_protos_FtraceParseStatus_MAX perfetto_protos_FtraceParseStatus_FTRACE_STATUS_INVALID_EVENT
#define _perfetto_protos_FtraceParseStatus_ARRAYSIZE ((perfetto_protos_FtraceParseStatus)(perfetto_protos_FtraceParseStatus_FTRACE_STATUS_INVALID_EVENT+1))

#define _perfetto_protos_FtraceClock_MIN perfetto_protos_FtraceClock_FTRACE_CLOCK_UNSPECIFIED
#define _perfetto_protos_FtraceClock_MAX perfetto_protos_FtraceClock_FTRACE_CLOCK_MONO_RAW
#define _perfetto_protos_FtraceClock_ARRAYSIZE ((perfetto_protos_FtraceClock)(perfetto_protos_FtraceClock_FTRACE_CLOCK_MONO_RAW+1))

#define _perfetto_protos_ChromeCompositorSchedulerAction_MIN perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorSchedulerAction_MAX perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON
#define _perfetto_protos_ChromeCompositorSchedulerAction_ARRAYSIZE ((perfetto_protos_ChromeCompositorSchedulerAction)(perfetto_protos_ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON+1))

#define _perfetto_protos_ChromeRAILMode_MIN perfetto_protos_ChromeRAILMode_RAIL_MODE_NONE
#define _perfetto_protos_ChromeRAILMode_MAX perfetto_protos_ChromeRAILMode_RAIL_MODE_LOAD
#define _perfetto_protos_ChromeRAILMode_ARRAYSIZE ((perfetto_protos_ChromeRAILMode)(perfetto_protos_ChromeRAILMode_RAIL_MODE_LOAD+1))

#define _perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_MIN perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED
#define _perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_MAX perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_COMPUTE
#define _perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_ARRAYSIZE ((perfetto_protos_GpuCounterDescriptor_GpuCounterGroup)(perfetto_protos_GpuCounterDescriptor_GpuCounterGroup_COMPUTE+1))

#define _perfetto_protos_GpuCounterDescriptor_MeasureUnit_MIN perfetto_protos_GpuCounterDescriptor_MeasureUnit_NONE
#define _perfetto_protos_GpuCounterDescriptor_MeasureUnit_MAX perfetto_protos_GpuCounterDescriptor_MeasureUnit_INSTRUCTION
#define _perfetto_protos_GpuCounterDescriptor_MeasureUnit_ARRAYSIZE ((perfetto_protos_GpuCounterDescriptor_MeasureUnit)(perfetto_protos_GpuCounterDescriptor_MeasureUnit_INSTRUCTION+1))

#define _perfetto_protos_AndroidInputEventConfig_TraceMode_MIN perfetto_protos_AndroidInputEventConfig_TraceMode_TRACE_MODE_TRACE_ALL
#define _perfetto_protos_AndroidInputEventConfig_TraceMode_MAX perfetto_protos_AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES
#define _perfetto_protos_AndroidInputEventConfig_TraceMode_ARRAYSIZE ((perfetto_protos_AndroidInputEventConfig_TraceMode)(perfetto_protos_AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES+1))

#define _perfetto_protos_AndroidInputEventConfig_TraceLevel_MIN perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_NONE
#define _perfetto_protos_AndroidInputEventConfig_TraceLevel_MAX perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE
#define _perfetto_protos_AndroidInputEventConfig_TraceLevel_ARRAYSIZE ((perfetto_protos_AndroidInputEventConfig_TraceLevel)(perfetto_protos_AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE+1))

#define _perfetto_protos_PixelModemConfig_EventGroup_MIN perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_UNKNOWN
#define _perfetto_protos_PixelModemConfig_EventGroup_MAX perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH
#define _perfetto_protos_PixelModemConfig_EventGroup_ARRAYSIZE ((perfetto_protos_PixelModemConfig_EventGroup)(perfetto_protos_PixelModemConfig_EventGroup_EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH+1))

#define _perfetto_protos_ProtoLogConfig_TracingMode_MIN perfetto_protos_ProtoLogConfig_TracingMode_DEFAULT
#define _perfetto_protos_ProtoLogConfig_TracingMode_MAX perfetto_protos_ProtoLogConfig_TracingMode_ENABLE_ALL
#define _perfetto_protos_ProtoLogConfig_TracingMode_ARRAYSIZE ((perfetto_protos_ProtoLogConfig_TracingMode)(perfetto_protos_ProtoLogConfig_TracingMode_ENABLE_ALL+1))

#define _perfetto_protos_SurfaceFlingerLayersConfig_Mode_MIN perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_UNSPECIFIED
#define _perfetto_protos_SurfaceFlingerLayersConfig_Mode_MAX perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY
#define _perfetto_protos_SurfaceFlingerLayersConfig_Mode_ARRAYSIZE ((perfetto_protos_SurfaceFlingerLayersConfig_Mode)(perfetto_protos_SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY+1))

#define _perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_MIN perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_UNSPECIFIED
#define _perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_MAX perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS
#define _perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_ARRAYSIZE ((perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag)(perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS+1))

#define _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MIN perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_UNSPECIFIED
#define _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MAX perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_ACTIVE
#define _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_ARRAYSIZE ((perfetto_protos_SurfaceFlingerTransactionsConfig_Mode)(perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MODE_ACTIVE+1))

#define _perfetto_protos_WindowManagerConfig_LogFrequency_MIN perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_UNSPECIFIED
#define _perfetto_protos_WindowManagerConfig_LogFrequency_MAX perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP
#define _perfetto_protos_WindowManagerConfig_LogFrequency_ARRAYSIZE ((perfetto_protos_WindowManagerConfig_LogFrequency)(perfetto_protos_WindowManagerConfig_LogFrequency_LOG_FREQUENCY_SINGLE_DUMP+1))

#define _perfetto_protos_WindowManagerConfig_LogLevel_MIN perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_UNSPECIFIED
#define _perfetto_protos_WindowManagerConfig_LogLevel_MAX perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL
#define _perfetto_protos_WindowManagerConfig_LogLevel_ARRAYSIZE ((perfetto_protos_WindowManagerConfig_LogLevel)(perfetto_protos_WindowManagerConfig_LogLevel_LOG_LEVEL_CRITICAL+1))

#define _perfetto_protos_ChromeConfig_ClientPriority_MIN perfetto_protos_ChromeConfig_ClientPriority_UNKNOWN
#define _perfetto_protos_ChromeConfig_ClientPriority_MAX perfetto_protos_ChromeConfig_ClientPriority_USER_INITIATED
#define _perfetto_protos_ChromeConfig_ClientPriority_ARRAYSIZE ((perfetto_protos_ChromeConfig_ClientPriority)(perfetto_protos_ChromeConfig_ClientPriority_USER_INITIATED+1))

#define _perfetto_protos_EtwConfig_KernelFlag_MIN perfetto_protos_EtwConfig_KernelFlag_CSWITCH
#define _perfetto_protos_EtwConfig_KernelFlag_MAX perfetto_protos_EtwConfig_KernelFlag_DISPATCHER
#define _perfetto_protos_EtwConfig_KernelFlag_ARRAYSIZE ((perfetto_protos_EtwConfig_KernelFlag)(perfetto_protos_EtwConfig_KernelFlag_DISPATCHER+1))

#define _perfetto_protos_FtraceConfig_KsymsMemPolicy_MIN perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_UNSPECIFIED
#define _perfetto_protos_FtraceConfig_KsymsMemPolicy_MAX perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_RETAIN
#define _perfetto_protos_FtraceConfig_KsymsMemPolicy_ARRAYSIZE ((perfetto_protos_FtraceConfig_KsymsMemPolicy)(perfetto_protos_FtraceConfig_KsymsMemPolicy_KSYMS_RETAIN+1))

#define _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_MIN perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_UNKNOWN
#define _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_MAX perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_BOTH
#define _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_ARRAYSIZE ((perfetto_protos_FtraceConfig_KprobeEvent_KprobeType)(perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_KPROBE_TYPE_BOTH+1))

#define _perfetto_protos_ConsoleConfig_Output_MIN perfetto_protos_ConsoleConfig_Output_OUTPUT_UNSPECIFIED
#define _perfetto_protos_ConsoleConfig_Output_MAX perfetto_protos_ConsoleConfig_Output_OUTPUT_STDERR
#define _perfetto_protos_ConsoleConfig_Output_ARRAYSIZE ((perfetto_protos_ConsoleConfig_Output)(perfetto_protos_ConsoleConfig_Output_OUTPUT_STDERR+1))

#define _perfetto_protos_AndroidPowerConfig_BatteryCounters_MIN perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_UNSPECIFIED
#define _perfetto_protos_AndroidPowerConfig_BatteryCounters_MAX perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_VOLTAGE
#define _perfetto_protos_AndroidPowerConfig_BatteryCounters_ARRAYSIZE ((perfetto_protos_AndroidPowerConfig_BatteryCounters)(perfetto_protos_AndroidPowerConfig_BatteryCounters_BATTERY_COUNTER_VOLTAGE+1))

#define _perfetto_protos_ProcessStatsConfig_Quirks_MIN perfetto_protos_ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED
#define _perfetto_protos_ProcessStatsConfig_Quirks_MAX perfetto_protos_ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND
#define _perfetto_protos_ProcessStatsConfig_Quirks_ARRAYSIZE ((perfetto_protos_ProcessStatsConfig_Quirks)(perfetto_protos_ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND+1))

#define _perfetto_protos_PerfEvents_Counter_MIN perfetto_protos_PerfEvents_Counter_UNKNOWN_COUNTER
#define _perfetto_protos_PerfEvents_Counter_MAX perfetto_protos_PerfEvents_Counter_SW_DUMMY
#define _perfetto_protos_PerfEvents_Counter_ARRAYSIZE ((perfetto_protos_PerfEvents_Counter)(perfetto_protos_PerfEvents_Counter_SW_DUMMY+1))

#define _perfetto_protos_PerfEvents_PerfClock_MIN perfetto_protos_PerfEvents_PerfClock_UNKNOWN_PERF_CLOCK
#define _perfetto_protos_PerfEvents_PerfClock_MAX perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_BOOTTIME
#define _perfetto_protos_PerfEvents_PerfClock_ARRAYSIZE ((perfetto_protos_PerfEvents_PerfClock)(perfetto_protos_PerfEvents_PerfClock_PERF_CLOCK_BOOTTIME+1))

#define _perfetto_protos_PerfEventConfig_UnwindMode_MIN perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_UNKNOWN
#define _perfetto_protos_PerfEventConfig_UnwindMode_MAX perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_FRAME_POINTER
#define _perfetto_protos_PerfEventConfig_UnwindMode_ARRAYSIZE ((perfetto_protos_PerfEventConfig_UnwindMode)(perfetto_protos_PerfEventConfig_UnwindMode_UNWIND_FRAME_POINTER+1))

#define _perfetto_protos_SysStatsConfig_StatCounters_MIN perfetto_protos_SysStatsConfig_StatCounters_STAT_UNSPECIFIED
#define _perfetto_protos_SysStatsConfig_StatCounters_MAX perfetto_protos_SysStatsConfig_StatCounters_STAT_FORK_COUNT
#define _perfetto_protos_SysStatsConfig_StatCounters_ARRAYSIZE ((perfetto_protos_SysStatsConfig_StatCounters)(perfetto_protos_SysStatsConfig_StatCounters_STAT_FORK_COUNT+1))

#define _perfetto_protos_DataSourceConfig_SessionInitiator_MIN perfetto_protos_DataSourceConfig_SessionInitiator_SESSION_INITIATOR_UNSPECIFIED
#define _perfetto_protos_DataSourceConfig_SessionInitiator_MAX perfetto_protos_DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM
#define _perfetto_protos_DataSourceConfig_SessionInitiator_ARRAYSIZE ((perfetto_protos_DataSourceConfig_SessionInitiator)(perfetto_protos_DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM+1))

#define _perfetto_protos_TraceConfig_LockdownModeOperation_MIN perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED
#define _perfetto_protos_TraceConfig_LockdownModeOperation_MAX perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_SET
#define _perfetto_protos_TraceConfig_LockdownModeOperation_ARRAYSIZE ((perfetto_protos_TraceConfig_LockdownModeOperation)(perfetto_protos_TraceConfig_LockdownModeOperation_LOCKDOWN_SET+1))

#define _perfetto_protos_TraceConfig_CompressionType_MIN perfetto_protos_TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED
#define _perfetto_protos_TraceConfig_CompressionType_MAX perfetto_protos_TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE
#define _perfetto_protos_TraceConfig_CompressionType_ARRAYSIZE ((perfetto_protos_TraceConfig_CompressionType)(perfetto_protos_TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE+1))

#define _perfetto_protos_TraceConfig_StatsdLogging_MIN perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_UNSPECIFIED
#define _perfetto_protos_TraceConfig_StatsdLogging_MAX perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_DISABLED
#define _perfetto_protos_TraceConfig_StatsdLogging_ARRAYSIZE ((perfetto_protos_TraceConfig_StatsdLogging)(perfetto_protos_TraceConfig_StatsdLogging_STATSD_LOGGING_DISABLED+1))

#define _perfetto_protos_TraceConfig_BufferConfig_FillPolicy_MIN perfetto_protos_TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED
#define _perfetto_protos_TraceConfig_BufferConfig_FillPolicy_MAX perfetto_protos_TraceConfig_BufferConfig_FillPolicy_DISCARD
#define _perfetto_protos_TraceConfig_BufferConfig_FillPolicy_ARRAYSIZE ((perfetto_protos_TraceConfig_BufferConfig_FillPolicy)(perfetto_protos_TraceConfig_BufferConfig_FillPolicy_DISCARD+1))

#define _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_MIN perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED
#define _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_MAX perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_CLONE_SNAPSHOT
#define _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_ARRAYSIZE ((perfetto_protos_TraceConfig_TriggerConfig_TriggerMode)(perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_CLONE_SNAPSHOT+1))

#define _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_MIN perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_UNSPECIFIED
#define _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_MAX perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS
#define _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_ARRAYSIZE ((perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy)(perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS+1))

#define _perfetto_protos_TraceStats_FinalFlushOutcome_MIN perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_UNSPECIFIED
#define _perfetto_protos_TraceStats_FinalFlushOutcome_MAX perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED
#define _perfetto_protos_TraceStats_FinalFlushOutcome_ARRAYSIZE ((perfetto_protos_TraceStats_FinalFlushOutcome)(perfetto_protos_TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED+1))

#define _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_MIN perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_UNSPECIFIED
#define _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_MAX perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR
#define _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_ARRAYSIZE ((perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus)(perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR+1))

#define _perfetto_protos_FrameTimelineEvent_JankType_MIN perfetto_protos_FrameTimelineEvent_JankType_JANK_UNSPECIFIED
#define _perfetto_protos_FrameTimelineEvent_JankType_MAX perfetto_protos_FrameTimelineEvent_JankType_JANK_DROPPED
#define _perfetto_protos_FrameTimelineEvent_JankType_ARRAYSIZE ((perfetto_protos_FrameTimelineEvent_JankType)(perfetto_protos_FrameTimelineEvent_JankType_JANK_DROPPED+1))

#define _perfetto_protos_FrameTimelineEvent_JankSeverityType_MIN perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_UNKNOWN
#define _perfetto_protos_FrameTimelineEvent_JankSeverityType_MAX perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_FULL
#define _perfetto_protos_FrameTimelineEvent_JankSeverityType_ARRAYSIZE ((perfetto_protos_FrameTimelineEvent_JankSeverityType)(perfetto_protos_FrameTimelineEvent_JankSeverityType_SEVERITY_FULL+1))

#define _perfetto_protos_FrameTimelineEvent_PresentType_MIN perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED
#define _perfetto_protos_FrameTimelineEvent_PresentType_MAX perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_UNKNOWN
#define _perfetto_protos_FrameTimelineEvent_PresentType_ARRAYSIZE ((perfetto_protos_FrameTimelineEvent_PresentType)(perfetto_protos_FrameTimelineEvent_PresentType_PRESENT_UNKNOWN+1))

#define _perfetto_protos_FrameTimelineEvent_PredictionType_MIN perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED
#define _perfetto_protos_FrameTimelineEvent_PredictionType_MAX perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN
#define _perfetto_protos_FrameTimelineEvent_PredictionType_ARRAYSIZE ((perfetto_protos_FrameTimelineEvent_PredictionType)(perfetto_protos_FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN+1))

#define _perfetto_protos_GraphicsFrameEvent_BufferEventType_MIN perfetto_protos_GraphicsFrameEvent_BufferEventType_UNSPECIFIED
#define _perfetto_protos_GraphicsFrameEvent_BufferEventType_MAX perfetto_protos_GraphicsFrameEvent_BufferEventType_CANCEL
#define _perfetto_protos_GraphicsFrameEvent_BufferEventType_ARRAYSIZE ((perfetto_protos_GraphicsFrameEvent_BufferEventType)(perfetto_protos_GraphicsFrameEvent_BufferEventType_CANCEL+1))

#define _perfetto_protos_KernelWakelockData_Wakelock_Type_MIN perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_UNKNOWN
#define _perfetto_protos_KernelWakelockData_Wakelock_Type_MAX perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_NATIVE
#define _perfetto_protos_KernelWakelockData_Wakelock_Type_ARRAYSIZE ((perfetto_protos_KernelWakelockData_Wakelock_Type)(perfetto_protos_KernelWakelockData_Wakelock_Type_WAKELOCK_TYPE_NATIVE+1))

#define _perfetto_protos_LayersTraceFileProto_MagicNumber_MIN perfetto_protos_LayersTraceFileProto_MagicNumber_INVALID
#define _perfetto_protos_LayersTraceFileProto_MagicNumber_MAX perfetto_protos_LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L
#define _perfetto_protos_LayersTraceFileProto_MagicNumber_ARRAYSIZE ((perfetto_protos_LayersTraceFileProto_MagicNumber)(perfetto_protos_LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L+1))

#define _perfetto_protos_TransactionTraceFile_MagicNumber_MIN perfetto_protos_TransactionTraceFile_MagicNumber_INVALID
#define _perfetto_protos_TransactionTraceFile_MagicNumber_MAX perfetto_protos_TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L
#define _perfetto_protos_TransactionTraceFile_MagicNumber_ARRAYSIZE ((perfetto_protos_TransactionTraceFile_MagicNumber)(perfetto_protos_TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L+1))

#define _perfetto_protos_LayerState_ChangesLsb_MIN perfetto_protos_LayerState_ChangesLsb_eCornerRadiusChanged
#define _perfetto_protos_LayerState_ChangesLsb_MAX perfetto_protos_LayerState_ChangesLsb_eInputInfoChanged
#define _perfetto_protos_LayerState_ChangesLsb_ARRAYSIZE ((perfetto_protos_LayerState_ChangesLsb)(perfetto_protos_LayerState_ChangesLsb_eInputInfoChanged+1))

#define _perfetto_protos_LayerState_ChangesMsb_MIN perfetto_protos_LayerState_ChangesMsb_eChangesMsbNone
#define _perfetto_protos_LayerState_ChangesMsb_MAX perfetto_protos_LayerState_ChangesMsb_eDropInputModeChanged
#define _perfetto_protos_LayerState_ChangesMsb_ARRAYSIZE ((perfetto_protos_LayerState_ChangesMsb)(perfetto_protos_LayerState_ChangesMsb_eDropInputModeChanged+1))

#define _perfetto_protos_LayerState_Flags_MIN perfetto_protos_LayerState_Flags_eFlagsNone
#define _perfetto_protos_LayerState_Flags_MAX perfetto_protos_LayerState_Flags_eLayerIsDisplayDecoration
#define _perfetto_protos_LayerState_Flags_ARRAYSIZE ((perfetto_protos_LayerState_Flags)(perfetto_protos_LayerState_Flags_eLayerIsDisplayDecoration+1))

#define _perfetto_protos_LayerState_DropInputMode_MIN perfetto_protos_LayerState_DropInputMode_NONE
#define _perfetto_protos_LayerState_DropInputMode_MAX perfetto_protos_LayerState_DropInputMode_OBSCURED
#define _perfetto_protos_LayerState_DropInputMode_ARRAYSIZE ((perfetto_protos_LayerState_DropInputMode)(perfetto_protos_LayerState_DropInputMode_OBSCURED+1))

#define _perfetto_protos_LayerState_BufferData_BufferDataChange_MIN perfetto_protos_LayerState_BufferData_BufferDataChange_BufferDataChangeNone
#define _perfetto_protos_LayerState_BufferData_BufferDataChange_MAX perfetto_protos_LayerState_BufferData_BufferDataChange_cachedBufferChanged
#define _perfetto_protos_LayerState_BufferData_BufferDataChange_ARRAYSIZE ((perfetto_protos_LayerState_BufferData_BufferDataChange)(perfetto_protos_LayerState_BufferData_BufferDataChange_cachedBufferChanged+1))

#define _perfetto_protos_LayerState_BufferData_PixelFormat_MIN perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM
#define _perfetto_protos_LayerState_BufferData_PixelFormat_MAX perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8
#define _perfetto_protos_LayerState_BufferData_PixelFormat_ARRAYSIZE ((perfetto_protos_LayerState_BufferData_PixelFormat)(perfetto_protos_LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8+1))

#define _perfetto_protos_DisplayState_Changes_MIN perfetto_protos_DisplayState_Changes_eChangesNone
#define _perfetto_protos_DisplayState_Changes_MAX perfetto_protos_DisplayState_Changes_eFlagsChanged
#define _perfetto_protos_DisplayState_Changes_ARRAYSIZE ((perfetto_protos_DisplayState_Changes)(perfetto_protos_DisplayState_Changes_eFlagsChanged+1))

#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MIN perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED
#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MAX perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED
#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_ARRAYSIZE ((perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType)(perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED+1))

#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_MIN perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED
#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_MAX perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE
#define _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_ARRAYSIZE ((perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType)(perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE+1))

#define _perfetto_protos_ChromeTracedValue_NestedType_MIN perfetto_protos_ChromeTracedValue_NestedType_DICT
#define _perfetto_protos_ChromeTracedValue_NestedType_MAX perfetto_protos_ChromeTracedValue_NestedType_ARRAY
#define _perfetto_protos_ChromeTracedValue_NestedType_ARRAYSIZE ((perfetto_protos_ChromeTracedValue_NestedType)(perfetto_protos_ChromeTracedValue_NestedType_ARRAY+1))

#define _perfetto_protos_ChromeLegacyJsonTrace_TraceType_MIN perfetto_protos_ChromeLegacyJsonTrace_TraceType_USER_TRACE
#define _perfetto_protos_ChromeLegacyJsonTrace_TraceType_MAX perfetto_protos_ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE
#define _perfetto_protos_ChromeLegacyJsonTrace_TraceType_ARRAYSIZE ((perfetto_protos_ChromeLegacyJsonTrace_TraceType)(perfetto_protos_ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE+1))

#define _perfetto_protos_InternedV8JsScript_Type_MIN perfetto_protos_InternedV8JsScript_Type_TYPE_UNKNOWN
#define _perfetto_protos_InternedV8JsScript_Type_MAX perfetto_protos_InternedV8JsScript_Type_TYPE_INSPECTOR
#define _perfetto_protos_InternedV8JsScript_Type_ARRAYSIZE ((perfetto_protos_InternedV8JsScript_Type)(perfetto_protos_InternedV8JsScript_Type_TYPE_INSPECTOR+1))

#define _perfetto_protos_InternedV8JsFunction_Kind_MIN perfetto_protos_InternedV8JsFunction_Kind_KIND_UNKNOWN
#define _perfetto_protos_InternedV8JsFunction_Kind_MAX perfetto_protos_InternedV8JsFunction_Kind_KIND_INVALID
#define _perfetto_protos_InternedV8JsFunction_Kind_ARRAYSIZE ((perfetto_protos_InternedV8JsFunction_Kind)(perfetto_protos_InternedV8JsFunction_Kind_KIND_INVALID+1))

#define _perfetto_protos_V8JsCode_Tier_MIN perfetto_protos_V8JsCode_Tier_TIER_UNKNOWN
#define _perfetto_protos_V8JsCode_Tier_MAX perfetto_protos_V8JsCode_Tier_TIER_TURBOFAN
#define _perfetto_protos_V8JsCode_Tier_ARRAYSIZE ((perfetto_protos_V8JsCode_Tier)(perfetto_protos_V8JsCode_Tier_TIER_TURBOFAN+1))

#define _perfetto_protos_V8InternalCode_Type_MIN perfetto_protos_V8InternalCode_Type_TYPE_UNKNOWN
#define _perfetto_protos_V8InternalCode_Type_MAX perfetto_protos_V8InternalCode_Type_TYPE_C_WASM_ENTRY
#define _perfetto_protos_V8InternalCode_Type_ARRAYSIZE ((perfetto_protos_V8InternalCode_Type)(perfetto_protos_V8InternalCode_Type_TYPE_C_WASM_ENTRY+1))

#define _perfetto_protos_V8WasmCode_Tier_MIN perfetto_protos_V8WasmCode_Tier_TIER_UNKNOWN
#define _perfetto_protos_V8WasmCode_Tier_MAX perfetto_protos_V8WasmCode_Tier_TIER_TURBOFAN
#define _perfetto_protos_V8WasmCode_Tier_ARRAYSIZE ((perfetto_protos_V8WasmCode_Tier)(perfetto_protos_V8WasmCode_Tier_TIER_TURBOFAN+1))

#define _perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_MIN perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_UNKNOWN
#define _perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_MAX perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID
#define _perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_ARRAYSIZE ((perfetto_protos_ClockSnapshot_Clock_BuiltinClocks)(perfetto_protos_ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID+1))

#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MIN perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_EXECUTIVE
#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MAX perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON
#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_ARRAYSIZE ((perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason)(perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON+1))

#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_MIN perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_KERNEL_MODE
#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_MAX perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_USER_MODE
#define _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_ARRAYSIZE ((perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode)(perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_USER_MODE+1))

#define _perfetto_protos_CSwitchEtwEvent_OldThreadState_MIN perfetto_protos_CSwitchEtwEvent_OldThreadState_INITIALIZED
#define _perfetto_protos_CSwitchEtwEvent_OldThreadState_MAX perfetto_protos_CSwitchEtwEvent_OldThreadState_DEFERRED_READY
#define _perfetto_protos_CSwitchEtwEvent_OldThreadState_ARRAYSIZE ((perfetto_protos_CSwitchEtwEvent_OldThreadState)(perfetto_protos_CSwitchEtwEvent_OldThreadState_DEFERRED_READY+1))

#define _perfetto_protos_ReadyThreadEtwEvent_AdjustReason_MIN perfetto_protos_ReadyThreadEtwEvent_AdjustReason_IGNORE_THE_INCREMENT
#define _perfetto_protos_ReadyThreadEtwEvent_AdjustReason_MAX perfetto_protos_ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST
#define _perfetto_protos_ReadyThreadEtwEvent_AdjustReason_ARRAYSIZE ((perfetto_protos_ReadyThreadEtwEvent_AdjustReason)(perfetto_protos_ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST+1))

#define _perfetto_protos_ReadyThreadEtwEvent_TraceFlag_MIN perfetto_protos_ReadyThreadEtwEvent_TraceFlag_TRACE_FLAG_UNSPECIFIED
#define _perfetto_protos_ReadyThreadEtwEvent_TraceFlag_MAX perfetto_protos_ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT
#define _perfetto_protos_ReadyThreadEtwEvent_TraceFlag_ARRAYSIZE ((perfetto_protos_ReadyThreadEtwEvent_TraceFlag)(perfetto_protos_ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT+1))

#define _perfetto_protos_FieldDescriptorProto_Type_MIN perfetto_protos_FieldDescriptorProto_Type_TYPE_DOUBLE
#define _perfetto_protos_FieldDescriptorProto_Type_MAX perfetto_protos_FieldDescriptorProto_Type_TYPE_SINT64
#define _perfetto_protos_FieldDescriptorProto_Type_ARRAYSIZE ((perfetto_protos_FieldDescriptorProto_Type)(perfetto_protos_FieldDescriptorProto_Type_TYPE_SINT64+1))

#define _perfetto_protos_FieldDescriptorProto_Label_MIN perfetto_protos_FieldDescriptorProto_Label_LABEL_OPTIONAL
#define _perfetto_protos_FieldDescriptorProto_Label_MAX perfetto_protos_FieldDescriptorProto_Label_LABEL_REPEATED
#define _perfetto_protos_FieldDescriptorProto_Label_ARRAYSIZE ((perfetto_protos_FieldDescriptorProto_Label)(perfetto_protos_FieldDescriptorProto_Label_LABEL_REPEATED+1))

#define _perfetto_protos_InodeFileMap_Entry_Type_MIN perfetto_protos_InodeFileMap_Entry_Type_UNKNOWN
#define _perfetto_protos_InodeFileMap_Entry_Type_MAX perfetto_protos_InodeFileMap_Entry_Type_DIRECTORY
#define _perfetto_protos_InodeFileMap_Entry_Type_ARRAYSIZE ((perfetto_protos_InodeFileMap_Entry_Type)(perfetto_protos_InodeFileMap_Entry_Type_DIRECTORY+1))

#define _perfetto_protos_KprobeEvent_KprobeType_MIN perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_UNKNOWN
#define _perfetto_protos_KprobeEvent_KprobeType_MAX perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_INSTANT
#define _perfetto_protos_KprobeEvent_KprobeType_ARRAYSIZE ((perfetto_protos_KprobeEvent_KprobeType)(perfetto_protos_KprobeEvent_KprobeType_KPROBE_TYPE_INSTANT+1))

#define _perfetto_protos_FtraceStats_Phase_MIN perfetto_protos_FtraceStats_Phase_UNSPECIFIED
#define _perfetto_protos_FtraceStats_Phase_MAX perfetto_protos_FtraceStats_Phase_END_OF_TRACE
#define _perfetto_protos_FtraceStats_Phase_ARRAYSIZE ((perfetto_protos_FtraceStats_Phase)(perfetto_protos_FtraceStats_Phase_END_OF_TRACE+1))

#define _perfetto_protos_GpuLog_Severity_MIN perfetto_protos_GpuLog_Severity_LOG_SEVERITY_UNSPECIFIED
#define _perfetto_protos_GpuLog_Severity_MAX perfetto_protos_GpuLog_Severity_LOG_SEVERITY_ERROR
#define _perfetto_protos_GpuLog_Severity_ARRAYSIZE ((perfetto_protos_GpuLog_Severity)(perfetto_protos_GpuLog_Severity_LOG_SEVERITY_ERROR+1))

#define _perfetto_protos_InternedGraphicsContext_Api_MIN perfetto_protos_InternedGraphicsContext_Api_UNDEFINED
#define _perfetto_protos_InternedGraphicsContext_Api_MAX perfetto_protos_InternedGraphicsContext_Api_OPEN_CL
#define _perfetto_protos_InternedGraphicsContext_Api_ARRAYSIZE ((perfetto_protos_InternedGraphicsContext_Api)(perfetto_protos_InternedGraphicsContext_Api_OPEN_CL+1))

#define _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_MIN perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_OTHER
#define _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_MAX perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_COMPUTE
#define _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_ARRAYSIZE ((perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory)(perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_COMPUTE+1))

#define _perfetto_protos_VulkanMemoryEvent_Source_MIN perfetto_protos_VulkanMemoryEvent_Source_SOURCE_UNSPECIFIED
#define _perfetto_protos_VulkanMemoryEvent_Source_MAX perfetto_protos_VulkanMemoryEvent_Source_SOURCE_IMAGE
#define _perfetto_protos_VulkanMemoryEvent_Source_ARRAYSIZE ((perfetto_protos_VulkanMemoryEvent_Source)(perfetto_protos_VulkanMemoryEvent_Source_SOURCE_IMAGE+1))

#define _perfetto_protos_VulkanMemoryEvent_Operation_MIN perfetto_protos_VulkanMemoryEvent_Operation_OP_UNSPECIFIED
#define _perfetto_protos_VulkanMemoryEvent_Operation_MAX perfetto_protos_VulkanMemoryEvent_Operation_OP_ANNOTATIONS
#define _perfetto_protos_VulkanMemoryEvent_Operation_ARRAYSIZE ((perfetto_protos_VulkanMemoryEvent_Operation)(perfetto_protos_VulkanMemoryEvent_Operation_OP_ANNOTATIONS+1))

#define _perfetto_protos_VulkanMemoryEvent_AllocationScope_MIN perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_UNSPECIFIED
#define _perfetto_protos_VulkanMemoryEvent_AllocationScope_MAX perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE
#define _perfetto_protos_VulkanMemoryEvent_AllocationScope_ARRAYSIZE ((perfetto_protos_VulkanMemoryEvent_AllocationScope)(perfetto_protos_VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE+1))

#define _perfetto_protos_DebugAnnotation_NestedValue_NestedType_MIN perfetto_protos_DebugAnnotation_NestedValue_NestedType_UNSPECIFIED
#define _perfetto_protos_DebugAnnotation_NestedValue_NestedType_MAX perfetto_protos_DebugAnnotation_NestedValue_NestedType_ARRAY
#define _perfetto_protos_DebugAnnotation_NestedValue_NestedType_ARRAYSIZE ((perfetto_protos_DebugAnnotation_NestedValue_NestedType)(perfetto_protos_DebugAnnotation_NestedValue_NestedType_ARRAY+1))

#define _perfetto_protos_LogMessage_Priority_MIN perfetto_protos_LogMessage_Priority_PRIO_UNSPECIFIED
#define _perfetto_protos_LogMessage_Priority_MAX perfetto_protos_LogMessage_Priority_PRIO_FATAL
#define _perfetto_protos_LogMessage_Priority_ARRAYSIZE ((perfetto_protos_LogMessage_Priority)(perfetto_protos_LogMessage_Priority_PRIO_FATAL+1))

#define _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_MIN perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_UNKNOWN
#define _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_MAX perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES
#define _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_ARRAYSIZE ((perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState)(perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES+1))

#define _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_MIN perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_MAX perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_BLOCKED
#define _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_ARRAYSIZE ((perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode)(perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_BLOCKED+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_MIN perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_MAX perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState)(perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_MIN perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_MAX perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_READY_TO_COMMIT
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState)(perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_READY_TO_COMMIT+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_MIN perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_MAX perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState)(perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_MIN perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_MAX perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_DRAW
#define _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState)(perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_DRAW+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_MIN perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_MAX perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY
#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority)(perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY+1))

#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_MIN perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_HANDLER_UNSPECIFIED
#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_MAX perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER
#define _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ARRAYSIZE ((perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState)(perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER+1))

#define _perfetto_protos_BeginFrameArgs_BeginFrameArgsType_MIN perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED
#define _perfetto_protos_BeginFrameArgs_BeginFrameArgsType_MAX perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_MISSED
#define _perfetto_protos_BeginFrameArgs_BeginFrameArgsType_ARRAYSIZE ((perfetto_protos_BeginFrameArgs_BeginFrameArgsType)(perfetto_protos_BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_MISSED+1))

#define _perfetto_protos_BeginImplFrameArgs_State_MIN perfetto_protos_BeginImplFrameArgs_State_BEGIN_FRAME_FINISHED
#define _perfetto_protos_BeginImplFrameArgs_State_MAX perfetto_protos_BeginImplFrameArgs_State_BEGIN_FRAME_USING
#define _perfetto_protos_BeginImplFrameArgs_State_ARRAYSIZE ((perfetto_protos_BeginImplFrameArgs_State)(perfetto_protos_BeginImplFrameArgs_State_BEGIN_FRAME_USING+1))

#define _perfetto_protos_ChromeFrameReporter_State_MIN perfetto_protos_ChromeFrameReporter_State_STATE_NO_UPDATE_DESIRED
#define _perfetto_protos_ChromeFrameReporter_State_MAX perfetto_protos_ChromeFrameReporter_State_STATE_DROPPED
#define _perfetto_protos_ChromeFrameReporter_State_ARRAYSIZE ((perfetto_protos_ChromeFrameReporter_State)(perfetto_protos_ChromeFrameReporter_State_STATE_DROPPED+1))

#define _perfetto_protos_ChromeFrameReporter_FrameDropReason_MIN perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_UNSPECIFIED
#define _perfetto_protos_ChromeFrameReporter_FrameDropReason_MAX perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_CLIENT_COMPOSITOR
#define _perfetto_protos_ChromeFrameReporter_FrameDropReason_ARRAYSIZE ((perfetto_protos_ChromeFrameReporter_FrameDropReason)(perfetto_protos_ChromeFrameReporter_FrameDropReason_REASON_CLIENT_COMPOSITOR+1))

#define _perfetto_protos_ChromeFrameReporter_ScrollState_MIN perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_NONE
#define _perfetto_protos_ChromeFrameReporter_ScrollState_MAX perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_UNKNOWN
#define _perfetto_protos_ChromeFrameReporter_ScrollState_ARRAYSIZE ((perfetto_protos_ChromeFrameReporter_ScrollState)(perfetto_protos_ChromeFrameReporter_ScrollState_SCROLL_UNKNOWN+1))

#define _perfetto_protos_ChromeFrameReporter_FrameType_MIN perfetto_protos_ChromeFrameReporter_FrameType_FORKED
#define _perfetto_protos_ChromeFrameReporter_FrameType_MAX perfetto_protos_ChromeFrameReporter_FrameType_BACKFILL
#define _perfetto_protos_ChromeFrameReporter_FrameType_ARRAYSIZE ((perfetto_protos_ChromeFrameReporter_FrameType)(perfetto_protos_ChromeFrameReporter_FrameType_BACKFILL+1))

#define _perfetto_protos_ChromeLatencyInfo_Step_MIN perfetto_protos_ChromeLatencyInfo_Step_STEP_UNSPECIFIED
#define _perfetto_protos_ChromeLatencyInfo_Step_MAX perfetto_protos_ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS
#define _perfetto_protos_ChromeLatencyInfo_Step_ARRAYSIZE ((perfetto_protos_ChromeLatencyInfo_Step)(perfetto_protos_ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS+1))

#define _perfetto_protos_ChromeLatencyInfo_LatencyComponentType_MIN perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED
#define _perfetto_protos_ChromeLatencyInfo_LatencyComponentType_MAX perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP
#define _perfetto_protos_ChromeLatencyInfo_LatencyComponentType_ARRAYSIZE ((perfetto_protos_ChromeLatencyInfo_LatencyComponentType)(perfetto_protos_ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP+1))

#define _perfetto_protos_ChromeLatencyInfo_InputType_MIN perfetto_protos_ChromeLatencyInfo_InputType_UNSPECIFIED_OR_OTHER
#define _perfetto_protos_ChromeLatencyInfo_InputType_MAX perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_TAP_CANCEL
#define _perfetto_protos_ChromeLatencyInfo_InputType_ARRAYSIZE ((perfetto_protos_ChromeLatencyInfo_InputType)(perfetto_protos_ChromeLatencyInfo_InputType_GESTURE_TAP_CANCEL+1))

#define _perfetto_protos_ChromeLegacyIpc_MessageClass_MIN perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_UNSPECIFIED
#define _perfetto_protos_ChromeLegacyIpc_MessageClass_MAX perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_UNFREEZABLE_FRAME
#define _perfetto_protos_ChromeLegacyIpc_MessageClass_ARRAYSIZE ((perfetto_protos_ChromeLegacyIpc_MessageClass)(perfetto_protos_ChromeLegacyIpc_MessageClass_CLASS_UNFREEZABLE_FRAME+1))

#define _perfetto_protos_TrackEvent_Type_MIN perfetto_protos_TrackEvent_Type_TYPE_UNSPECIFIED
#define _perfetto_protos_TrackEvent_Type_MAX perfetto_protos_TrackEvent_Type_TYPE_COUNTER
#define _perfetto_protos_TrackEvent_Type_ARRAYSIZE ((perfetto_protos_TrackEvent_Type)(perfetto_protos_TrackEvent_Type_TYPE_COUNTER+1))

#define _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_MIN perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED
#define _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_MAX perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT
#define _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_ARRAYSIZE ((perfetto_protos_TrackEvent_LegacyEvent_FlowDirection)(perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT+1))

#define _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_MIN perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED
#define _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_MAX perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD
#define _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_ARRAYSIZE ((perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope)(perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD+1))

#define _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_MIN perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL
#define _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_MAX perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND
#define _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_ARRAYSIZE ((perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail)(perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND+1))

#define _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_MIN perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED
#define _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_MAX perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT
#define _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_ARRAYSIZE ((perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units)(perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT+1))

#define _perfetto_protos_HeapGraphRoot_Type_MIN perfetto_protos_HeapGraphRoot_Type_ROOT_UNKNOWN
#define _perfetto_protos_HeapGraphRoot_Type_MAX perfetto_protos_HeapGraphRoot_Type_ROOT_JNI_MONITOR
#define _perfetto_protos_HeapGraphRoot_Type_ARRAYSIZE ((perfetto_protos_HeapGraphRoot_Type)(perfetto_protos_HeapGraphRoot_Type_ROOT_JNI_MONITOR+1))

#define _perfetto_protos_HeapGraphType_Kind_MIN perfetto_protos_HeapGraphType_Kind_KIND_UNKNOWN
#define _perfetto_protos_HeapGraphType_Kind_MAX perfetto_protos_HeapGraphType_Kind_KIND_PHANTOM_REFERENCE
#define _perfetto_protos_HeapGraphType_Kind_ARRAYSIZE ((perfetto_protos_HeapGraphType_Kind)(perfetto_protos_HeapGraphType_Kind_KIND_PHANTOM_REFERENCE+1))

#define _perfetto_protos_HeapGraphObject_HeapType_MIN perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_UNKNOWN
#define _perfetto_protos_HeapGraphObject_HeapType_MAX perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_BOOT_IMAGE
#define _perfetto_protos_HeapGraphObject_HeapType_ARRAYSIZE ((perfetto_protos_HeapGraphObject_HeapType)(perfetto_protos_HeapGraphObject_HeapType_HEAP_TYPE_BOOT_IMAGE+1))

#define _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_MIN perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE
#define _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_MAX perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS
#define _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_ARRAYSIZE ((perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError)(perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS+1))

#define _perfetto_protos_Profiling_CpuMode_MIN perfetto_protos_Profiling_CpuMode_MODE_UNKNOWN
#define _perfetto_protos_Profiling_CpuMode_MAX perfetto_protos_Profiling_CpuMode_MODE_GUEST_USER
#define _perfetto_protos_Profiling_CpuMode_ARRAYSIZE ((perfetto_protos_Profiling_CpuMode)(perfetto_protos_Profiling_CpuMode_MODE_GUEST_USER+1))

#define _perfetto_protos_Profiling_StackUnwindError_MIN perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN
#define _perfetto_protos_Profiling_StackUnwindError_MAX perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_PTRACE_CALL
#define _perfetto_protos_Profiling_StackUnwindError_ARRAYSIZE ((perfetto_protos_Profiling_StackUnwindError)(perfetto_protos_Profiling_StackUnwindError_UNWIND_ERROR_PTRACE_CALL+1))

#define _perfetto_protos_PerfSample_SampleSkipReason_MIN perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN
#define _perfetto_protos_PerfSample_SampleSkipReason_MAX perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_NOT_IN_SCOPE
#define _perfetto_protos_PerfSample_SampleSkipReason_ARRAYSIZE ((perfetto_protos_PerfSample_SampleSkipReason)(perfetto_protos_PerfSample_SampleSkipReason_PROFILER_SKIP_NOT_IN_SCOPE+1))

#define _perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_MIN perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN
#define _perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_MAX perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL
#define _perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_ARRAYSIZE ((perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason)(perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL+1))

#define _perfetto_protos_SysStats_PsiSample_PsiResource_MIN perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_UNSPECIFIED
#define _perfetto_protos_SysStats_PsiSample_PsiResource_MAX perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL
#define _perfetto_protos_SysStats_PsiSample_PsiResource_ARRAYSIZE ((perfetto_protos_SysStats_PsiSample_PsiResource)(perfetto_protos_SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL+1))

#define _perfetto_protos_ProcessDescriptor_ChromeProcessType_MIN perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_UNSPECIFIED
#define _perfetto_protos_ProcessDescriptor_ChromeProcessType_MAX perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER
#define _perfetto_protos_ProcessDescriptor_ChromeProcessType_ARRAYSIZE ((perfetto_protos_ProcessDescriptor_ChromeProcessType)(perfetto_protos_ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER+1))

#define _perfetto_protos_ThreadDescriptor_ChromeThreadType_MIN perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_UNSPECIFIED
#define _perfetto_protos_ThreadDescriptor_ChromeThreadType_MAX perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SAMPLING_PROFILER
#define _perfetto_protos_ThreadDescriptor_ChromeThreadType_ARRAYSIZE ((perfetto_protos_ThreadDescriptor_ChromeThreadType)(perfetto_protos_ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SAMPLING_PROFILER+1))

#define _perfetto_protos_ChromeProcessDescriptor_ProcessType_MIN perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_UNSPECIFIED
#define _perfetto_protos_ChromeProcessDescriptor_ProcessType_MAX perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_MEDIA_FOUNDATION
#define _perfetto_protos_ChromeProcessDescriptor_ProcessType_ARRAYSIZE ((perfetto_protos_ChromeProcessDescriptor_ProcessType)(perfetto_protos_ChromeProcessDescriptor_ProcessType_PROCESS_SERVICE_MEDIA_FOUNDATION+1))

#define _perfetto_protos_ChromeThreadDescriptor_ThreadType_MIN perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_UNSPECIFIED
#define _perfetto_protos_ChromeThreadDescriptor_ThreadType_MAX perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_GPU
#define _perfetto_protos_ChromeThreadDescriptor_ThreadType_ARRAYSIZE ((perfetto_protos_ChromeThreadDescriptor_ThreadType)(perfetto_protos_ChromeThreadDescriptor_ThreadType_THREAD_COMPOSITOR_GPU+1))

#define _perfetto_protos_CounterDescriptor_BuiltinCounterType_MIN perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_UNSPECIFIED
#define _perfetto_protos_CounterDescriptor_BuiltinCounterType_MAX perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT
#define _perfetto_protos_CounterDescriptor_BuiltinCounterType_ARRAYSIZE ((perfetto_protos_CounterDescriptor_BuiltinCounterType)(perfetto_protos_CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT+1))

#define _perfetto_protos_CounterDescriptor_Unit_MIN perfetto_protos_CounterDescriptor_Unit_UNIT_UNSPECIFIED
#define _perfetto_protos_CounterDescriptor_Unit_MAX perfetto_protos_CounterDescriptor_Unit_UNIT_SIZE_BYTES
#define _perfetto_protos_CounterDescriptor_Unit_ARRAYSIZE ((perfetto_protos_CounterDescriptor_Unit)(perfetto_protos_CounterDescriptor_Unit_UNIT_SIZE_BYTES+1))

#define _perfetto_protos_TrackDescriptor_ChildTracksOrdering_MIN perfetto_protos_TrackDescriptor_ChildTracksOrdering_UNKNOWN
#define _perfetto_protos_TrackDescriptor_ChildTracksOrdering_MAX perfetto_protos_TrackDescriptor_ChildTracksOrdering_EXPLICIT
#define _perfetto_protos_TrackDescriptor_ChildTracksOrdering_ARRAYSIZE ((perfetto_protos_TrackDescriptor_ChildTracksOrdering)(perfetto_protos_TrackDescriptor_ChildTracksOrdering_EXPLICIT+1))

#define _perfetto_protos_TracePacket_SequenceFlags_MIN perfetto_protos_TracePacket_SequenceFlags_SEQ_UNSPECIFIED
#define _perfetto_protos_TracePacket_SequenceFlags_MAX perfetto_protos_TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE
#define _perfetto_protos_TracePacket_SequenceFlags_ARRAYSIZE ((perfetto_protos_TracePacket_SequenceFlags)(perfetto_protos_TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE+1))




#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_numerator_units_ENUMTYPE perfetto_protos_GpuCounterDescriptor_MeasureUnit
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_denominator_units_ENUMTYPE perfetto_protos_GpuCounterDescriptor_MeasureUnit
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_groups_ENUMTYPE perfetto_protos_GpuCounterDescriptor_GpuCounterGroup










#define perfetto_protos_AndroidInputEventConfig_mode_ENUMTYPE perfetto_protos_AndroidInputEventConfig_TraceMode

#define perfetto_protos_AndroidInputEventConfig_TraceRule_trace_level_ENUMTYPE perfetto_protos_AndroidInputEventConfig_TraceLevel

#define perfetto_protos_AndroidLogConfig_log_ids_ENUMTYPE perfetto_protos_AndroidLogId
#define perfetto_protos_AndroidLogConfig_min_prio_ENUMTYPE perfetto_protos_AndroidLogPriority








#define perfetto_protos_PixelModemConfig_event_group_ENUMTYPE perfetto_protos_PixelModemConfig_EventGroup

#define perfetto_protos_ProtoLogConfig_tracing_mode_ENUMTYPE perfetto_protos_ProtoLogConfig_TracingMode
#define perfetto_protos_ProtoLogConfig_default_log_from_level_ENUMTYPE perfetto_protos_ProtoLogLevel

#define perfetto_protos_ProtoLogGroup_log_from_ENUMTYPE perfetto_protos_ProtoLogLevel

#define perfetto_protos_SurfaceFlingerLayersConfig_mode_ENUMTYPE perfetto_protos_SurfaceFlingerLayersConfig_Mode
#define perfetto_protos_SurfaceFlingerLayersConfig_trace_flags_ENUMTYPE perfetto_protos_SurfaceFlingerLayersConfig_TraceFlag

#define perfetto_protos_SurfaceFlingerTransactionsConfig_mode_ENUMTYPE perfetto_protos_SurfaceFlingerTransactionsConfig_Mode

#define perfetto_protos_WindowManagerConfig_log_frequency_ENUMTYPE perfetto_protos_WindowManagerConfig_LogFrequency
#define perfetto_protos_WindowManagerConfig_log_level_ENUMTYPE perfetto_protos_WindowManagerConfig_LogLevel

#define perfetto_protos_ChromeConfig_client_priority_ENUMTYPE perfetto_protos_ChromeConfig_ClientPriority





#define perfetto_protos_EtwConfig_kernel_flags_ENUMTYPE perfetto_protos_EtwConfig_KernelFlag

#define perfetto_protos_FtraceConfig_ksyms_mem_policy_ENUMTYPE perfetto_protos_FtraceConfig_KsymsMemPolicy

#define perfetto_protos_FtraceConfig_KprobeEvent_type_ENUMTYPE perfetto_protos_FtraceConfig_KprobeEvent_KprobeType










#define perfetto_protos_ConsoleConfig_output_ENUMTYPE perfetto_protos_ConsoleConfig_Output


#define perfetto_protos_AndroidPowerConfig_battery_counters_ENUMTYPE perfetto_protos_AndroidPowerConfig_BatteryCounters

#define perfetto_protos_ProcessStatsConfig_quirks_ENUMTYPE perfetto_protos_ProcessStatsConfig_Quirks






#define perfetto_protos_PerfEvents_Timebase_event_counter_ENUMTYPE perfetto_protos_PerfEvents_Counter
#define perfetto_protos_PerfEvents_Timebase_timestamp_clock_ENUMTYPE perfetto_protos_PerfEvents_PerfClock



#define perfetto_protos_FollowerEvent_event_counter_ENUMTYPE perfetto_protos_PerfEvents_Counter


#define perfetto_protos_PerfEventConfig_CallstackSampling_user_frames_ENUMTYPE perfetto_protos_PerfEventConfig_UnwindMode


#define perfetto_protos_StatsdTracingConfig_push_atom_id_ENUMTYPE perfetto_protos_AtomId

#define perfetto_protos_StatsdPullAtomConfig_pull_atom_id_ENUMTYPE perfetto_protos_AtomId

#define perfetto_protos_SysStatsConfig_meminfo_counters_ENUMTYPE perfetto_protos_MeminfoCounters
#define perfetto_protos_SysStatsConfig_vmstat_counters_ENUMTYPE perfetto_protos_VmstatCounters
#define perfetto_protos_SysStatsConfig_stat_counters_ENUMTYPE perfetto_protos_SysStatsConfig_StatCounters





#define perfetto_protos_DataSourceConfig_session_initiator_ENUMTYPE perfetto_protos_DataSourceConfig_SessionInitiator

#define perfetto_protos_TraceConfig_lockdown_mode_ENUMTYPE perfetto_protos_TraceConfig_LockdownModeOperation
#define perfetto_protos_TraceConfig_compression_type_ENUMTYPE perfetto_protos_TraceConfig_CompressionType
#define perfetto_protos_TraceConfig_statsd_logging_ENUMTYPE perfetto_protos_TraceConfig_StatsdLogging

#define perfetto_protos_TraceConfig_BufferConfig_fill_policy_ENUMTYPE perfetto_protos_TraceConfig_BufferConfig_FillPolicy


#define perfetto_protos_TraceConfig_BuiltinDataSource_primary_trace_clock_ENUMTYPE perfetto_protos_BuiltinClock




#define perfetto_protos_TraceConfig_TriggerConfig_trigger_mode_ENUMTYPE perfetto_protos_TraceConfig_TriggerConfig_TriggerMode





#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_policy_ENUMTYPE perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy





#define perfetto_protos_TraceStats_final_flush_outcome_ENUMTYPE perfetto_protos_TraceStats_FinalFlushOutcome








#define perfetto_protos_AndroidLogPacket_LogEvent_log_id_ENUMTYPE perfetto_protos_AndroidLogId
#define perfetto_protos_AndroidLogPacket_LogEvent_prio_ENUMTYPE perfetto_protos_AndroidLogPriority







#define perfetto_protos_BluetoothTraceEvent_packet_type_ENUMTYPE perfetto_protos_BluetoothTracePacketType

#define perfetto_protos_AndroidCameraFrameEvent_capture_result_status_ENUMTYPE perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus








#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_present_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_PresentType
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_prediction_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_PredictionType
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_jank_severity_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_JankSeverityType


#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_present_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_PresentType
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_prediction_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_PredictionType
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_jank_severity_type_ENUMTYPE perfetto_protos_FrameTimelineEvent_JankSeverityType




#define perfetto_protos_GraphicsFrameEvent_BufferEvent_type_ENUMTYPE perfetto_protos_GraphicsFrameEvent_BufferEventType



#define perfetto_protos_KernelWakelockData_Wakelock_wakelock_type_ENUMTYPE perfetto_protos_KernelWakelockData_Wakelock_Type

#define perfetto_protos_NetworkPacketEvent_direction_ENUMTYPE perfetto_protos_TrafficDirection









#define perfetto_protos_ProtoLogViewerConfig_MessageData_level_ENUMTYPE perfetto_protos_ProtoLogLevel


















#define perfetto_protos_LayerProto_hwc_composition_type_ENUMTYPE perfetto_protos_HwcCompositionType
#define perfetto_protos_LayerProto_trusted_overlay_ENUMTYPE perfetto_protos_TrustedOverlay












#define perfetto_protos_LayerState_drop_input_mode_ENUMTYPE perfetto_protos_LayerState_DropInputMode
#define perfetto_protos_LayerState_trusted_overlay_ENUMTYPE perfetto_protos_TrustedOverlay



#define perfetto_protos_LayerState_BufferData_pixel_format_ENUMTYPE perfetto_protos_LayerState_BufferData_PixelFormat








#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_trigger_type_ENUMTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType


#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_event_type_ENUMTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType

#define perfetto_protos_ChromeTracedValue_nested_type_ENUMTYPE perfetto_protos_ChromeTracedValue_NestedType





#define perfetto_protos_ChromeLegacyJsonTrace_type_ENUMTYPE perfetto_protos_ChromeLegacyJsonTrace_TraceType





#define perfetto_protos_InternedV8JsScript_type_ENUMTYPE perfetto_protos_InternedV8JsScript_Type


#define perfetto_protos_InternedV8JsFunction_kind_ENUMTYPE perfetto_protos_InternedV8JsFunction_Kind



#define perfetto_protos_V8JsCode_tier_ENUMTYPE perfetto_protos_V8JsCode_Tier

#define perfetto_protos_V8InternalCode_type_ENUMTYPE perfetto_protos_V8InternalCode_Type

#define perfetto_protos_V8WasmCode_tier_ENUMTYPE perfetto_protos_V8WasmCode_Tier




#define perfetto_protos_ClockSnapshot_primary_trace_clock_ENUMTYPE perfetto_protos_BuiltinClock


#define perfetto_protos_CSwitchEtwEvent_old_thread_wait_reason_ENUMTYPE perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason
#define perfetto_protos_CSwitchEtwEvent_old_thread_wait_mode_ENUMTYPE perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode
#define perfetto_protos_CSwitchEtwEvent_old_thread_state_ENUMTYPE perfetto_protos_CSwitchEtwEvent_OldThreadState

#define perfetto_protos_ReadyThreadEtwEvent_adjust_reason_ENUMTYPE perfetto_protos_ReadyThreadEtwEvent_AdjustReason
#define perfetto_protos_ReadyThreadEtwEvent_flag_ENUMTYPE perfetto_protos_ReadyThreadEtwEvent_TraceFlag










#define perfetto_protos_FieldDescriptorProto_label_ENUMTYPE perfetto_protos_FieldDescriptorProto_Label
#define perfetto_protos_FieldDescriptorProto_type_ENUMTYPE perfetto_protos_FieldDescriptorProto_Type







#define perfetto_protos_InodeFileMap_Entry_type_ENUMTYPE perfetto_protos_InodeFileMap_Entry_Type















































































































































































































































#define perfetto_protos_KprobeEvent_type_ENUMTYPE perfetto_protos_KprobeEvent_KprobeType







































































































































































































































































































#define perfetto_protos_FtraceStats_phase_ENUMTYPE perfetto_protos_FtraceStats_Phase
#define perfetto_protos_FtraceStats_ftrace_parse_errors_ENUMTYPE perfetto_protos_FtraceParseStatus

#define perfetto_protos_FtraceEventBundle_ftrace_clock_ENUMTYPE perfetto_protos_FtraceClock


#define perfetto_protos_FtraceEventBundle_FtraceError_status_ENUMTYPE perfetto_protos_FtraceParseStatus



#define perfetto_protos_GpuLog_severity_ENUMTYPE perfetto_protos_GpuLog_Severity






#define perfetto_protos_InternedGraphicsContext_api_ENUMTYPE perfetto_protos_InternedGraphicsContext_Api

#define perfetto_protos_InternedGpuRenderStageSpecification_category_ENUMTYPE perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory





#define perfetto_protos_VulkanMemoryEvent_source_ENUMTYPE perfetto_protos_VulkanMemoryEvent_Source
#define perfetto_protos_VulkanMemoryEvent_operation_ENUMTYPE perfetto_protos_VulkanMemoryEvent_Operation
#define perfetto_protos_VulkanMemoryEvent_allocation_scope_ENUMTYPE perfetto_protos_VulkanMemoryEvent_AllocationScope











#define perfetto_protos_DebugAnnotation_NestedValue_nested_type_ENUMTYPE perfetto_protos_DebugAnnotation_NestedValue_NestedType



#define perfetto_protos_LogMessage_prio_ENUMTYPE perfetto_protos_LogMessage_Priority





#define perfetto_protos_ChromeApplicationStateInfo_application_state_ENUMTYPE perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState

#define perfetto_protos_ChromeCompositorSchedulerState_inside_action_ENUMTYPE perfetto_protos_ChromeCompositorSchedulerAction
#define perfetto_protos_ChromeCompositorSchedulerState_deadline_mode_ENUMTYPE perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode


#define perfetto_protos_ChromeCompositorStateMachine_MajorState_next_action_ENUMTYPE perfetto_protos_ChromeCompositorSchedulerAction
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_begin_impl_frame_state_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_begin_main_frame_state_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_layer_tree_frame_sink_state_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_forced_redraw_state_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState

#define perfetto_protos_ChromeCompositorStateMachine_MinorState_tree_priority_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_scroll_handler_state_ENUMTYPE perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState

#define perfetto_protos_BeginFrameArgs_type_ENUMTYPE perfetto_protos_BeginFrameArgs_BeginFrameArgsType

#define perfetto_protos_BeginImplFrameArgs_state_ENUMTYPE perfetto_protos_BeginImplFrameArgs_State






#define perfetto_protos_ChromeFrameReporter_state_ENUMTYPE perfetto_protos_ChromeFrameReporter_State
#define perfetto_protos_ChromeFrameReporter_reason_ENUMTYPE perfetto_protos_ChromeFrameReporter_FrameDropReason
#define perfetto_protos_ChromeFrameReporter_scroll_state_ENUMTYPE perfetto_protos_ChromeFrameReporter_ScrollState
#define perfetto_protos_ChromeFrameReporter_frame_type_ENUMTYPE perfetto_protos_ChromeFrameReporter_FrameType


#define perfetto_protos_ChromeLatencyInfo_step_ENUMTYPE perfetto_protos_ChromeLatencyInfo_Step
#define perfetto_protos_ChromeLatencyInfo_input_type_ENUMTYPE perfetto_protos_ChromeLatencyInfo_InputType

#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_component_type_ENUMTYPE perfetto_protos_ChromeLatencyInfo_LatencyComponentType

#define perfetto_protos_ChromeLegacyIpc_message_class_ENUMTYPE perfetto_protos_ChromeLegacyIpc_MessageClass



#define perfetto_protos_ChromeRendererSchedulerState_rail_mode_ENUMTYPE perfetto_protos_ChromeRAILMode





#define perfetto_protos_TrackEvent_type_ENUMTYPE perfetto_protos_TrackEvent_Type

#define perfetto_protos_TrackEvent_LegacyEvent_flow_direction_ENUMTYPE perfetto_protos_TrackEvent_LegacyEvent_FlowDirection
#define perfetto_protos_TrackEvent_LegacyEvent_instant_event_scope_ENUMTYPE perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope





#define perfetto_protos_MemoryTrackerSnapshot_level_of_detail_ENUMTYPE perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail



#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_units_ENUMTYPE perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units






















#define perfetto_protos_HeapGraphRoot_root_type_ENUMTYPE perfetto_protos_HeapGraphRoot_Type

#define perfetto_protos_HeapGraphType_kind_ENUMTYPE perfetto_protos_HeapGraphType_Kind

#define perfetto_protos_HeapGraphObject_heap_type_delta_ENUMTYPE perfetto_protos_HeapGraphObject_HeapType







#define perfetto_protos_ProfilePacket_ProcessHeapSamples_client_error_ENUMTYPE perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError





#define perfetto_protos_PerfSample_cpu_mode_ENUMTYPE perfetto_protos_Profiling_CpuMode
#define perfetto_protos_PerfSample_optional_unwind_error_unwind_error_ENUMTYPE perfetto_protos_Profiling_StackUnwindError
#define perfetto_protos_PerfSample_optional_sample_skipped_reason_sample_skipped_reason_ENUMTYPE perfetto_protos_PerfSample_SampleSkipReason

#define perfetto_protos_PerfSample_ProducerEvent_optional_source_stop_reason_source_stop_reason_ENUMTYPE perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason
















#define perfetto_protos_SysStats_MeminfoValue_key_ENUMTYPE perfetto_protos_MeminfoCounters

#define perfetto_protos_SysStats_VmstatValue_key_ENUMTYPE perfetto_protos_VmstatCounters






#define perfetto_protos_SysStats_PsiSample_resource_ENUMTYPE perfetto_protos_SysStats_PsiSample_PsiResource













#define perfetto_protos_ProcessDescriptor_chrome_process_type_ENUMTYPE perfetto_protos_ProcessDescriptor_ChromeProcessType


#define perfetto_protos_ThreadDescriptor_chrome_thread_type_ENUMTYPE perfetto_protos_ThreadDescriptor_ChromeThreadType

#define perfetto_protos_ChromeProcessDescriptor_process_type_ENUMTYPE perfetto_protos_ChromeProcessDescriptor_ProcessType

#define perfetto_protos_ChromeThreadDescriptor_thread_type_ENUMTYPE perfetto_protos_ChromeThreadDescriptor_ThreadType

#define perfetto_protos_CounterDescriptor_type_ENUMTYPE perfetto_protos_CounterDescriptor_BuiltinCounterType
#define perfetto_protos_CounterDescriptor_unit_ENUMTYPE perfetto_protos_CounterDescriptor_Unit

#define perfetto_protos_TrackDescriptor_child_ordering_ENUMTYPE perfetto_protos_TrackDescriptor_ChildTracksOrdering





















/* Initializer values for message structs */
#define perfetto_protos_FtraceDescriptor_init_default {{{NULL}, NULL}}
#define perfetto_protos_FtraceDescriptor_AtraceCategory_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterDescriptor_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventCategory_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventDescriptor_init_default {{{NULL}, NULL}}
#define perfetto_protos_DataSourceDescriptor_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, perfetto_protos_GpuCounterDescriptor_init_default, false, perfetto_protos_TrackEventDescriptor_init_default, false, 0, false, perfetto_protos_FtraceDescriptor_init_default, false, 0}
#define perfetto_protos_TracingServiceState_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TracingServiceState_Producer_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TracingServiceState_DataSource_init_default {false, perfetto_protos_DataSourceDescriptor_init_default, false, 0}
#define perfetto_protos_TracingServiceState_TracingSession_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidGameInterventionListConfig_init_default {{{NULL}, NULL}}
#define perfetto_protos_AndroidInputEventConfig_init_default {false, _perfetto_protos_AndroidInputEventConfig_TraceMode_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidInputEventConfig_TraceRule_init_default {false, _perfetto_protos_AndroidInputEventConfig_TraceLevel_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidLogConfig_init_default {{{NULL}, NULL}, false, _perfetto_protos_AndroidLogPriority_MIN, {{NULL}, NULL}}
#define perfetto_protos_AndroidPolledStateConfig_init_default {false, 0}
#define perfetto_protos_AndroidSdkSyspropGuardConfig_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidSystemPropertyConfig_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_AppWakelocksConfig_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KernelWakelocksConfig_init_default {false, 0}
#define perfetto_protos_NetworkPacketTraceConfig_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PackagesListConfig_init_default {{{NULL}, NULL}}
#define perfetto_protos_PixelModemConfig_init_default {false, _perfetto_protos_PixelModemConfig_EventGroup_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogConfig_init_default {{{NULL}, NULL}, false, _perfetto_protos_ProtoLogConfig_TracingMode_MIN, false, _perfetto_protos_ProtoLogLevel_MIN}
#define perfetto_protos_ProtoLogGroup_init_default {{{NULL}, NULL}, false, _perfetto_protos_ProtoLogLevel_MIN, false, 0}
#define perfetto_protos_SurfaceFlingerLayersConfig_init_default {false, _perfetto_protos_SurfaceFlingerLayersConfig_Mode_MIN, {{NULL}, NULL}}
#define perfetto_protos_SurfaceFlingerTransactionsConfig_init_default {false, _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MIN}
#define perfetto_protos_WindowManagerConfig_init_default {false, _perfetto_protos_WindowManagerConfig_LogFrequency_MIN, false, _perfetto_protos_WindowManagerConfig_LogLevel_MIN}
#define perfetto_protos_ChromeConfig_init_default {{{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_ChromeConfig_ClientPriority_MIN, {{NULL}, NULL}}
#define perfetto_protos_ChromiumHistogramSamplesConfig_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromiumSystemMetricsConfig_init_default {false, 0}
#define perfetto_protos_V8Config_init_default    {false, 0, false, 0}
#define perfetto_protos_EtwConfig_init_default   {{{NULL}, NULL}}
#define perfetto_protos_FtraceConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_FtraceConfig_CompactSchedConfig_init_default, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_FtraceConfig_KsymsMemPolicy_MIN, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_FtraceConfig_PrintFilter_init_default, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_FtraceConfig_KprobeEvent_init_default {{{NULL}, NULL}, false, _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_MIN}
#define perfetto_protos_FtraceConfig_CompactSchedConfig_init_default {false, 0}
#define perfetto_protos_FtraceConfig_PrintFilter_init_default {{{NULL}, NULL}}
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_init_default {0, {{{NULL}, NULL}}, false, 0}
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterConfig_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GpuRenderStagesConfig_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_VulkanMemoryConfig_init_default {false, 0, false, 0}
#define perfetto_protos_InodeFileConfig_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ConsoleConfig_init_default {false, _perfetto_protos_ConsoleConfig_Output_MIN, false, 0}
#define perfetto_protos_InterceptorConfig_init_default {{{NULL}, NULL}, false, perfetto_protos_ConsoleConfig_init_default}
#define perfetto_protos_AndroidPowerConfig_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ProcessStatsConfig_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_HeapprofdConfig_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_init_default, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_init_default {false, 0, false, 0}
#define perfetto_protos_JavaHprofConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_init_default, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_PerfEvents_init_default  {0}
#define perfetto_protos_PerfEvents_Timebase_init_default {0, {0}, 0, {perfetto_protos_PerfEvents_Tracepoint_init_default}, {{NULL}, NULL}, false, _perfetto_protos_PerfEvents_PerfClock_MIN}
#define perfetto_protos_PerfEvents_Tracepoint_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfEvents_RawEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FollowerEvent_init_default {0, {_perfetto_protos_PerfEvents_Counter_MIN}, {{NULL}, NULL}}
#define perfetto_protos_PerfEventConfig_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_PerfEvents_Timebase_init_default, false, perfetto_protos_PerfEventConfig_CallstackSampling_init_default, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfEventConfig_CallstackSampling_init_default {false, perfetto_protos_PerfEventConfig_Scope_init_default, false, 0, false, _perfetto_protos_PerfEventConfig_UnwindMode_MIN}
#define perfetto_protos_PerfEventConfig_Scope_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_StatsdTracingConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StatsdPullAtomConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysStatsConfig_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SystemInfoConfig_init_default {0}
#define perfetto_protos_TestConfig_init_default  {false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TestConfig_DummyFields_init_default}
#define perfetto_protos_TestConfig_DummyFields_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DataSourceConfig_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_DataSourceConfig_SessionInitiator_MIN, false, perfetto_protos_FtraceConfig_init_default, false, perfetto_protos_ChromeConfig_init_default, false, perfetto_protos_InodeFileConfig_init_default, false, perfetto_protos_ProcessStatsConfig_init_default, false, perfetto_protos_SysStatsConfig_init_default, false, perfetto_protos_HeapprofdConfig_init_default, false, perfetto_protos_AndroidPowerConfig_init_default, false, perfetto_protos_AndroidLogConfig_init_default, false, perfetto_protos_GpuCounterConfig_init_default, false, perfetto_protos_PackagesListConfig_init_default, false, perfetto_protos_JavaHprofConfig_init_default, false, perfetto_protos_PerfEventConfig_init_default, false, perfetto_protos_VulkanMemoryConfig_init_default, false, perfetto_protos_TrackEventConfig_init_default, false, perfetto_protos_AndroidPolledStateConfig_init_default, false, perfetto_protos_InterceptorConfig_init_default, false, perfetto_protos_AndroidGameInterventionListConfig_init_default, false, perfetto_protos_StatsdTracingConfig_init_default, false, perfetto_protos_AndroidSystemPropertyConfig_init_default, false, perfetto_protos_SystemInfoConfig_init_default, false, perfetto_protos_NetworkPacketTraceConfig_init_default, false, perfetto_protos_SurfaceFlingerLayersConfig_init_default, false, 0, false, perfetto_protos_SurfaceFlingerTransactionsConfig_init_default, false, perfetto_protos_AndroidSdkSyspropGuardConfig_init_default, false, perfetto_protos_EtwConfig_init_default, false, perfetto_protos_ProtoLogConfig_init_default, false, perfetto_protos_V8Config_init_default, false, perfetto_protos_AndroidInputEventConfig_init_default, false, perfetto_protos_PixelModemConfig_init_default, false, perfetto_protos_WindowManagerConfig_init_default, false, perfetto_protos_ChromiumSystemMetricsConfig_init_default, false, perfetto_protos_KernelWakelocksConfig_init_default, false, perfetto_protos_GpuRenderStagesConfig_init_default, false, perfetto_protos_ChromiumHistogramSamplesConfig_init_default, false, perfetto_protos_AppWakelocksConfig_init_default, {{NULL}, NULL}, false, perfetto_protos_TestConfig_init_default}
#define perfetto_protos_TraceConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_TraceConfig_LockdownModeOperation_MIN, {{NULL}, NULL}, false, perfetto_protos_TraceConfig_StatsdMetadata_init_default, false, 0, false, 0, false, 0, false, perfetto_protos_TraceConfig_GuardrailOverrides_init_default, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TraceConfig_TriggerConfig_init_default, {{NULL}, NULL}, false, 0, false, perfetto_protos_TraceConfig_BuiltinDataSource_init_default, false, perfetto_protos_TraceConfig_IncrementalStateConfig_init_default, {{NULL}, NULL}, false, 0, false, _perfetto_protos_TraceConfig_CompressionType_MIN, false, perfetto_protos_TraceConfig_IncidentReportConfig_init_default, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, _perfetto_protos_TraceConfig_StatsdLogging_MIN, false, perfetto_protos_TraceConfig_TraceFilter_init_default, false, perfetto_protos_TraceConfig_AndroidReportConfig_init_default, false, perfetto_protos_TraceConfig_CmdTraceStartDelay_init_default, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_BufferConfig_init_default {false, 0, false, _perfetto_protos_TraceConfig_BufferConfig_FillPolicy_MIN, false, 0, false, 0}
#define perfetto_protos_TraceConfig_DataSource_init_default {false, perfetto_protos_DataSourceConfig_init_default, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_BuiltinDataSource_init_default {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_BuiltinClock_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_ProducerConfig_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_StatsdMetadata_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_GuardrailOverrides_init_default {false, 0, false, 0}
#define perfetto_protos_TraceConfig_TriggerConfig_init_default {false, _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_IncrementalStateConfig_init_default {false, 0}
#define perfetto_protos_TraceConfig_IncidentReportConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_TraceFilter_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_init_default}
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_init_default {false, _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_init_default {{{NULL}, NULL}}
#define perfetto_protos_TraceConfig_AndroidReportConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_init_default {false, 0, false, 0}
#define perfetto_protos_TraceConfig_SessionSemaphore_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_TraceStats_init_default  {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TraceStats_FilterStats_init_default, false, 0, false, 0, false, 0, false, _perfetto_protos_TraceStats_FinalFlushOutcome_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceStats_BufferStats_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceStats_WriterStats_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TraceStats_FilterStats_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidGameInterventionList_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_init_default {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidLogPacket_init_default {{{NULL}, NULL}, false, perfetto_protos_AndroidLogPacket_Stats_init_default}
#define perfetto_protos_AndroidLogPacket_LogEvent_init_default {false, _perfetto_protos_AndroidLogId_MIN, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_AndroidLogPriority_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_init_default {{{NULL}, NULL}, 0, {0}}
#define perfetto_protos_AndroidLogPacket_Stats_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidSystemProperty_init_default {{{NULL}, NULL}}
#define perfetto_protos_AndroidSystemProperty_PropertyValue_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AppWakelockInfo_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AppWakelockBundle_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_AppWakelockInfo_init_default, false, 0}
#define perfetto_protos_BluetoothTraceEvent_init_default {false, _perfetto_protos_BluetoothTracePacketType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidCameraFrameEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidCameraSessionStats_init_default {false, 0, false, perfetto_protos_AndroidCameraSessionStats_CameraGraph_init_default}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FrameTimelineEvent_init_default {0, {perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_init_default}}
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_FrameTimelineEvent_PresentType_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PredictionType_MIN, false, 0, false, _perfetto_protos_FrameTimelineEvent_JankSeverityType_MIN}
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_init_default {false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PresentType_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PredictionType_MIN, false, _perfetto_protos_FrameTimelineEvent_JankSeverityType_MIN}
#define perfetto_protos_FrameTimelineEvent_FrameEnd_init_default {false, 0}
#define perfetto_protos_GpuMemTotalEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_GraphicsFrameEvent_init_default {false, perfetto_protos_GraphicsFrameEvent_BufferEvent_init_default}
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_init_default {false, 0, false, _perfetto_protos_GraphicsFrameEvent_BufferEventType_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_InitialDisplayState_init_default {false, 0, false, 0}
#define perfetto_protos_KernelWakelockData_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_KernelWakelockData_Wakelock_init_default {false, 0, {{NULL}, NULL}, false, _perfetto_protos_KernelWakelockData_Wakelock_Type_MIN}
#define perfetto_protos_NetworkPacketEvent_init_default {false, _perfetto_protos_TrafficDirection_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NetworkPacketBundle_init_default {0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_NetworkPacketContext_init_default {false, 0, false, perfetto_protos_NetworkPacketEvent_init_default}
#define perfetto_protos_PackagesList_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_PackagesList_PackageInfo_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PixelModemEvents_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PixelModemTokenDatabase_init_default {{{NULL}, NULL}}
#define perfetto_protos_ProtoLogMessage_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ProtoLogViewerConfig_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogViewerConfig_MessageData_init_default {false, 0, {{NULL}, NULL}, false, _perfetto_protos_ProtoLogLevel_MIN, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogViewerConfig_Group_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ShellTransition_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ShellTransition_Target_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ShellHandlerMappings_init_default {{{NULL}, NULL}}
#define perfetto_protos_ShellHandlerMapping_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_RectProto_init_default   {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_RegionProto_init_default {{{NULL}, NULL}}
#define perfetto_protos_SizeProto_init_default   {false, 0, false, 0}
#define perfetto_protos_TransformProto_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ColorProto_init_default  {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_InputWindowInfoProto_init_default {false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_RegionProto_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_TransformProto_init_default, false, 0}
#define perfetto_protos_BlurRegion_init_default  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ColorTransformProto_init_default {{{NULL}, NULL}}
#define perfetto_protos_LayersTraceFileProto_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_LayersSnapshotProto_init_default {false, 0, {{NULL}, NULL}, false, perfetto_protos_LayersProto_init_default, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_LayersProto_init_default {{{NULL}, NULL}}
#define perfetto_protos_DisplayProto_init_default {false, 0, {{NULL}, NULL}, false, 0, false, perfetto_protos_SizeProto_init_default, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_TransformProto_init_default, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerProto_init_default  {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_RegionProto_init_default, false, perfetto_protos_RegionProto_init_default, false, perfetto_protos_RegionProto_init_default, false, 0, false, 0, false, perfetto_protos_PositionProto_init_default, false, perfetto_protos_PositionProto_init_default, false, perfetto_protos_SizeProto_init_default, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_RectProto_init_default, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_ColorProto_init_default, false, perfetto_protos_ColorProto_init_default, false, 0, false, perfetto_protos_TransformProto_init_default, false, perfetto_protos_TransformProto_init_default, false, 0, false, 0, false, perfetto_protos_ActiveBufferProto_init_default, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_FloatRectProto_init_default, false, 0, false, 0, false, 0, false, _perfetto_protos_HwcCompositionType_MIN, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_TransformProto_init_default, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_TransformProto_init_default, false, perfetto_protos_FloatRectProto_init_default, false, perfetto_protos_FloatRectProto_init_default, false, perfetto_protos_FloatRectProto_init_default, false, perfetto_protos_InputWindowInfoProto_init_default, false, perfetto_protos_FloatRectProto_init_default, false, 0, false, perfetto_protos_ColorTransformProto_init_default, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, 0, false, _perfetto_protos_TrustedOverlay_MIN}
#define perfetto_protos_LayerProto_MetadataEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_PositionProto_init_default {false, 0, false, 0}
#define perfetto_protos_FloatRectProto_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ActiveBufferProto_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BarrierLayerProto_init_default {false, 0, false, 0}
#define perfetto_protos_TransactionTraceFile_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TransactionTraceEntry_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DisplayInfo_init_default {false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_Transform_init_default, false, perfetto_protos_Transform_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerCreationArgs_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Transform_init_default   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TransactionState_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_LayerState_init_default  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_LayerState_Matrix22_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_LayerState_Color3_init_default, false, perfetto_protos_RegionProto_init_default, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_LayerState_BufferData_init_default, false, 0, false, 0, false, perfetto_protos_ColorTransformProto_init_default, {{NULL}, NULL}, false, perfetto_protos_LayerState_WindowInfo_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_RectProto_init_default, false, _perfetto_protos_LayerState_DropInputMode_MIN, false, _perfetto_protos_TrustedOverlay_MIN}
#define perfetto_protos_LayerState_Matrix22_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerState_Color3_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_LayerState_BufferData_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_LayerState_BufferData_PixelFormat_MIN, false, 0}
#define perfetto_protos_LayerState_WindowInfo_init_default {false, 0, false, 0, false, perfetto_protos_RegionProto_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_Transform_init_default, false, 0}
#define perfetto_protos_DisplayState_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_default, false, perfetto_protos_RectProto_init_default, false, 0, false, 0}
#define perfetto_protos_WinscopeExtensions_init_default {NULL}
#define perfetto_protos_ChromeBenchmarkMetadata_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromeMetadataPacket_init_default {false, perfetto_protos_BackgroundTracingMetadata_init_default, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeMetadataPacket_FinchHash_init_default {false, 0, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_init_default {false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_init_default, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_init_default {false, _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MIN, false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_init_default, false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_init_default, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_init_default {false, _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_MIN, false, 0}
#define perfetto_protos_ChromeTracedValue_init_default {false, _perfetto_protos_ChromeTracedValue_NestedType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeStringTableEntry_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeTraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromeTraceEvent_Arg_init_default {{{NULL}, NULL}, 0, {0}, false, 0}
#define perfetto_protos_ChromeMetadata_init_default {{{NULL}, NULL}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_ChromeLegacyJsonTrace_init_default {false, _perfetto_protos_ChromeLegacyJsonTrace_TraceType_MIN, {{NULL}, NULL}}
#define perfetto_protos_ChromeEventBundle_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeTrigger_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_V8String_init_default    {0, {{{NULL}, NULL}}}
#define perfetto_protos_InternedV8String_init_default {false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_InternedV8JsScript_init_default {false, 0, false, 0, false, _perfetto_protos_InternedV8JsScript_Type_MIN, false, perfetto_protos_V8String_init_default, false, perfetto_protos_V8String_init_default}
#define perfetto_protos_InternedV8WasmScript_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InternedV8JsFunction_init_default {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_InternedV8JsFunction_Kind_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_InternedV8Isolate_init_default {false, 0, false, 0, false, 0, false, perfetto_protos_InternedV8Isolate_CodeRange_init_default, false, 0, false, 0}
#define perfetto_protos_InternedV8Isolate_CodeRange_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_V8JsCode_init_default    {false, 0, false, 0, false, 0, false, _perfetto_protos_V8JsCode_Tier_MIN, false, 0, false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_V8InternalCode_init_default {false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_V8InternalCode_Type_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8WasmCode_init_default  {false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_V8WasmCode_Tier_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8RegExpCode_init_default {false, 0, false, 0, false, perfetto_protos_V8String_init_default, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8CodeMove_init_default  {false, 0, false, 0, false, 0, false, 0, false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_V8CodeDefaults_init_default {false, 0}
#define perfetto_protos_ClockSnapshot_init_default {{{NULL}, NULL}, false, _perfetto_protos_BuiltinClock_MIN}
#define perfetto_protos_ClockSnapshot_Clock_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CSwitchEtwEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MIN, false, _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_MIN, false, _perfetto_protos_CSwitchEtwEvent_OldThreadState_MIN, false, 0, false, 0}
#define perfetto_protos_ReadyThreadEtwEvent_init_default {false, 0, false, _perfetto_protos_ReadyThreadEtwEvent_AdjustReason_MIN, false, 0, false, _perfetto_protos_ReadyThreadEtwEvent_TraceFlag_MIN}
#define perfetto_protos_EtwTraceEvent_init_default {false, 0, 0, {perfetto_protos_CSwitchEtwEvent_init_default}, false, 0}
#define perfetto_protos_EtwTraceEventBundle_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FileDescriptorSet_init_default {{{NULL}, NULL}}
#define perfetto_protos_FileDescriptorProto_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DescriptorProto_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DescriptorProto_ReservedRange_init_default {false, 0, false, 0}
#define perfetto_protos_UninterpretedOption_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_UninterpretedOption_NamePart_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_FieldOptions_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FieldDescriptorProto_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, _perfetto_protos_FieldDescriptorProto_Label_MIN, false, _perfetto_protos_FieldDescriptorProto_Type_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_FieldOptions_init_default, false, 0}
#define perfetto_protos_OneofDescriptorProto_init_default {{{NULL}, NULL}, false, perfetto_protos_OneofOptions_init_default}
#define perfetto_protos_EnumDescriptorProto_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EnumValueDescriptorProto_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_OneofOptions_init_default {NULL}
#define perfetto_protos_ExtensionDescriptor_init_default {false, perfetto_protos_FileDescriptorSet_init_default}
#define perfetto_protos_InodeFileMap_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InodeFileMap_Entry_init_default {false, 0, {{NULL}, NULL}, false, _perfetto_protos_InodeFileMap_Entry_Type_MIN}
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BclIrqTriggerFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderTransactionFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_init_default {false, 0}
#define perfetto_protos_BinderSetPriorityFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderLockFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_BinderLockedFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_BinderUnlockFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderCommandFtraceEvent_init_default {false, 0}
#define perfetto_protos_BinderReturnFtraceEvent_init_default {false, 0}
#define perfetto_protos_BlockRqIssueFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioBackmergeFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioBounceFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioCompleteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioQueueFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioRemapFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockDirtyBufferFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_BlockGetrqFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockPlugFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_BlockRqAbortFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockRqCompleteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BlockRqInsertFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockRqRemapFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockRqRequeueFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockSleeprqFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockSplitFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockTouchBufferFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_BlockUnplugFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockIoStartFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockIoDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_CgroupAttachTaskFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupMkdirFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRemountFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRmdirFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupTransferTasksFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupDestroyRootFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupReleaseFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRenameFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupSetupRootFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ClkEnableFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_ClkDisableFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_ClkSetRateFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_CmaAllocStartFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CmaAllocInfoFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionBeginFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferredFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionFinishedFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_init_default {false, 0}
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MmCompactionSuitableFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ParamSetValueCpmFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_CpuhpExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpLatencyFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpPauseFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DcvshFreqFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DevfreqFrequencyFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DmaFenceInitFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceEmitFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceSignaledFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaHeapStatFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DpuDsiRxFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DpuDsiTxFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_DrmVblankEventFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DropInodeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EvictInodeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FallocateExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ForgetFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FreeInodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4InsertRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalStartFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4LoadInodeFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocAllocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocFreeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4PunchHoleFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReadpageFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReleasepageFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RequestInodeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFsFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TrimExtentFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TruncateExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WriteBeginFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WriteEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepageFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepagesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsEvictInodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsFallocateFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGetVictimFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIgetFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIgetExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsNewInodeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsReadpageFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFsFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsWriteBeginFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_F2fsWriteEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIostatFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGcBeginFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGcEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaStatFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaMapFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FenceInitFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceDestroyFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceEnableSignalFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceSignaledFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DoSysOpenFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_OpenExecFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_PrintFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FuncgraphEntryFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_FuncgraphExitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GenericFtraceEvent_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GenericFtraceEvent_Field_init_default {{{NULL}, NULL}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_KprobeEvent_init_default {{{NULL}, NULL}, false, _perfetto_protos_KprobeEvent_KprobeType_MIN}
#define perfetto_protos_GoogleIccEventFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GoogleIrmEventFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuMemTotalFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_DrmSchedJobFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DrmRunJobFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_init_default {false, 0}
#define perfetto_protos_HypEnterFtraceEvent_init_default {0}
#define perfetto_protos_HypExitFtraceEvent_init_default {0}
#define perfetto_protos_HostHcallFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_HostSmcFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_HostMemAbortFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_I2cReadFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_I2cWriteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_I2cResultFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_I2cReplyFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusReadFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusWriteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusResultFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusReplyFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonStatFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_IpiEntryFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_IpiExitFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_IpiRaiseFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SoftirqEntryFtraceEvent_init_default {false, 0}
#define perfetto_protos_SoftirqExitFtraceEvent_init_default {false, 0}
#define perfetto_protos_SoftirqRaiseFtraceEvent_init_default {false, 0}
#define perfetto_protos_IrqHandlerEntryFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IrqHandlerExitFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysEndFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysFailFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysStartFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_init_default {false, 0}
#define perfetto_protos_IommuMapRangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferEndFtraceEvent_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferFailFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferStartFtraceEvent_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonCpAllocRetryFtraceEvent_init_default {false, 0}
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonPrefetchingFtraceEvent_init_default {false, 0}
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KfreeFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KmallocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmallocNodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheAllocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheFreeFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MigratePagesEndFtraceEvent_init_default {false, 0}
#define perfetto_protos_MigratePagesStartFtraceEvent_init_default {false, 0}
#define perfetto_protos_MigrateRetryFtraceEvent_init_default {false, 0}
#define perfetto_protos_MmPageAllocFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageFreeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_RssStatFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonHeapShrinkFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonHeapGrowFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonBufferCreateFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_IonBufferDestroyFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmAccessFaultFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmAckIrqFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmAgeHvaFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmAgePageFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmArmClearDebugFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmEntryFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmExitFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmFpuFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmGetTimerMapFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmGuestFaultFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmHandleSysRegFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmHvcArm64FtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmIrqLineFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmMmioFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmMmioEmulateFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmSetIrqFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmSetWayFlushFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmSysAccessFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmTimerEmulateFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmToggleCacheFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_KvmUserspaceExitFtraceEvent_init_default {false, 0}
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmWfxArm64FtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_TrapRegFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_LowmemoryKillFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCmdKickoffFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MdpCommitFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetOtFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpSsppChangeFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TracingMarkWriteFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCompareBwFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpSsppSetFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MdpMisrCrcFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpTraceCounterFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_init_default {false, 0}
#define perfetto_protos_MdpMixerUpdateFtraceEvent_init_default {false, 0}
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_init_default {false, 0}
#define perfetto_protos_MmEventRecordFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NetifReceiveSkbFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_NetDevXmitFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_init_default {false, 0}
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_MarkVictimFtraceEvent_init_default {false, 0}
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DsiRxFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_DsiTxFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_PanelWriteGenericFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_init_default {false, 0}
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_CpuFrequencyFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_CpuIdleFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_ClockEnableFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ClockDisableFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ClockSetRateFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SuspendResumeFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GpuFrequencyFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_WakeupSourceActivateFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuWorkPeriodFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ConsoleFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_SysEnterFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysExitFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_RegulatorDisableFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_init_default {{{NULL}, NULL}}
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_RpmStatusFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedSwitchFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedWakeupFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedBlockedReasonFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_SchedCpuHotplugFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakingFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakeupNewFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedProcessExecFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedProcessExitFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedProcessForkFtraceEvent_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_SchedProcessFreeFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedProcessHangFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SchedProcessWaitFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedPiSetprioFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedMigrateTaskFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ScmCallStartFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_ScmCallEndFtraceEvent_init_default {0}
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SignalDeliverFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_SignalGenerateFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KfreeSkbFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_InetSockSetStateFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SyncPtFtraceEvent_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SyncTimelineFtraceEvent_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SyncWaitFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_RssStatThrottledFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_init_default {false, 0}
#define perfetto_protos_ZeroFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TaskNewtaskFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TaskRenameFtraceEvent_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ThermalTemperatureFtraceEvent_init_default {false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CdevUpdateFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustySmcFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustySmcDoneFtraceEvent_init_default {false, 0}
#define perfetto_protos_TrustyStdCall32FtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_init_default {false, 0}
#define perfetto_protos_TrustyShareMemoryFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_init_default {false, 0}
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_TrustyIrqFtraceEvent_init_default {false, 0}
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcConnectFtraceEvent_init_default {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyIpcWriteFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcPollFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcReadFtraceEvent_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcRxFtraceEvent_init_default {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_UfshcdCommandFtraceEvent_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_UfshcdClkGatingFtraceEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_V4l2QbufFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_V4l2DqbufFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioVideoCmdFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_init_default {false, 0}
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_init_default {false, 0}
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_init_default {false, 0}
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_init_default {false, 0, false, 0}
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FtraceEvent_init_default {false, 0, false, 0, 0, {perfetto_protos_PrintFtraceEvent_init_default}, false, 0}
#define perfetto_protos_FtraceCpuStats_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FtraceKprobeStats_init_default {false, 0, false, 0}
#define perfetto_protos_FtraceStats_init_default {false, _perfetto_protos_FtraceStats_Phase_MIN, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, perfetto_protos_FtraceKprobeStats_init_default}
#define perfetto_protos_FtraceEventBundle_init_default {false, 0, {{NULL}, NULL}, false, 0, false, perfetto_protos_FtraceEventBundle_CompactSched_init_default, false, _perfetto_protos_FtraceClock_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FtraceEventBundle_CompactSched_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_FtraceEventBundle_FtraceError_init_default {false, 0, false, _perfetto_protos_FtraceParseStatus_MIN}
#define perfetto_protos_GpuCounterEvent_init_default {false, perfetto_protos_GpuCounterDescriptor_init_default, {{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuCounterEvent_GpuCounter_init_default {false, 0, 0, {0}}
#define perfetto_protos_GpuLog_init_default      {false, _perfetto_protos_GpuLog_Severity_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_GpuRenderStageEvent_Specifications_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, NULL}
#define perfetto_protos_GpuRenderStageEvent_ExtraData_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_Specifications_init_default {false, perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_init_default, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_init_default {false, 0, false, 0}
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InternedGraphicsContext_init_default {false, 0, false, 0, false, _perfetto_protos_InternedGraphicsContext_Api_MIN}
#define perfetto_protos_InternedGpuRenderStageSpecification_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_MIN}
#define perfetto_protos_VulkanApiEvent_init_default {0, {perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_init_default}}
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_VulkanMemoryEventAnnotation_init_default {false, 0, 0, {0}}
#define perfetto_protos_VulkanMemoryEvent_init_default {false, _perfetto_protos_VulkanMemoryEvent_Source_MIN, false, _perfetto_protos_VulkanMemoryEvent_Operation_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_VulkanMemoryEvent_AllocationScope_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_InternedString_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Line_init_default        {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AddressSymbols_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ModuleSymbols_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_Mapping_init_default     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_Frame_init_default       {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Callstack_init_default   {false, 0, {{NULL}, NULL}}
#define perfetto_protos_HistogramName_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeHistogramSample_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_DebugAnnotation_init_default {0, {0}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {0}, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotation_NestedValue_init_default {false, _perfetto_protos_DebugAnnotation_NestedValue_NestedType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotationName_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotationValueTypeName_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_LogMessage_init_default  {false, 0, false, 0, false, _perfetto_protos_LogMessage_Priority_MIN}
#define perfetto_protos_LogMessageBody_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_UnsymbolizedSourceLocation_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_SourceLocation_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeActiveProcesses_init_default {{{NULL}, NULL}}
#define perfetto_protos_ChromeApplicationStateInfo_init_default {false, _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_MIN}
#define perfetto_protos_ChromeCompositorSchedulerState_init_default {false, perfetto_protos_ChromeCompositorStateMachine_init_default, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeCompositorSchedulerAction_MIN, false, _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_BeginImplFrameArgs_init_default, false, perfetto_protos_BeginFrameObserverState_init_default, false, perfetto_protos_BeginFrameSourceState_init_default, false, perfetto_protos_CompositorTimingHistory_init_default}
#define perfetto_protos_ChromeCompositorStateMachine_init_default {false, perfetto_protos_ChromeCompositorStateMachine_MajorState_init_default, false, perfetto_protos_ChromeCompositorStateMachine_MinorState_init_default}
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_init_default {false, _perfetto_protos_ChromeCompositorSchedulerAction_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_MIN}
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BeginFrameArgs_init_default {false, _perfetto_protos_BeginFrameArgs_BeginFrameArgsType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0, {0}, false, 0}
#define perfetto_protos_BeginImplFrameArgs_init_default {false, 0, false, 0, false, _perfetto_protos_BeginImplFrameArgs_State_MIN, 0, {perfetto_protos_BeginFrameArgs_init_default}, false, perfetto_protos_BeginImplFrameArgs_TimestampsInUs_init_default}
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BeginFrameObserverState_init_default {false, 0, false, perfetto_protos_BeginFrameArgs_init_default}
#define perfetto_protos_BeginFrameSourceState_init_default {false, 0, false, 0, false, 0, false, perfetto_protos_BeginFrameArgs_init_default}
#define perfetto_protos_CompositorTimingHistory_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeContentSettingsEventInfo_init_default {false, 0}
#define perfetto_protos_ChromeFrameReporter_init_default {false, _perfetto_protos_ChromeFrameReporter_State_MIN, false, _perfetto_protos_ChromeFrameReporter_FrameDropReason_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeFrameReporter_ScrollState_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeFrameReporter_FrameType_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeKeyedService_init_default {{{NULL}, NULL}}
#define perfetto_protos_ChromeLatencyInfo_init_default {false, 0, false, _perfetto_protos_ChromeLatencyInfo_Step_MIN, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeLatencyInfo_InputType_MIN}
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_init_default {false, _perfetto_protos_ChromeLatencyInfo_LatencyComponentType_MIN, false, 0}
#define perfetto_protos_ChromeLegacyIpc_init_default {false, _perfetto_protos_ChromeLegacyIpc_MessageClass_MIN, false, 0}
#define perfetto_protos_ChromeMessagePump_init_default {false, 0, false, 0}
#define perfetto_protos_ChromeMojoEventInfo_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeRendererSchedulerState_init_default {false, _perfetto_protos_ChromeRAILMode_MIN, false, 0, false, 0}
#define perfetto_protos_ChromeUserEvent_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeWindowHandleEventInfo_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_Screenshot_init_default  {{{NULL}, NULL}}
#define perfetto_protos_TaskExecution_init_default {false, 0}
#define perfetto_protos_TrackEvent_init_default  {0, {0}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_TaskExecution_init_default, false, perfetto_protos_TrackEvent_LegacyEvent_init_default, 0, {0}, false, _perfetto_protos_TrackEvent_Type_MIN, 0, {0}, false, 0, {{NULL}, NULL}, false, perfetto_protos_LogMessage_init_default, {{NULL}, NULL}, false, perfetto_protos_ChromeCompositorSchedulerState_init_default, false, perfetto_protos_ChromeUserEvent_init_default, false, perfetto_protos_ChromeKeyedService_init_default, false, perfetto_protos_ChromeLegacyIpc_init_default, false, perfetto_protos_ChromeHistogramSample_init_default, false, perfetto_protos_ChromeLatencyInfo_init_default, 0, {0}, {{NULL}, NULL}, false, perfetto_protos_ChromeFrameReporter_init_default, 0, {perfetto_protos_SourceLocation_init_default}, false, perfetto_protos_ChromeMessagePump_init_default, {{NULL}, NULL}, false, perfetto_protos_ChromeMojoEventInfo_init_default, false, perfetto_protos_ChromeApplicationStateInfo_init_default, false, perfetto_protos_ChromeRendererSchedulerState_init_default, false, perfetto_protos_ChromeWindowHandleEventInfo_init_default, {{NULL}, NULL}, false, perfetto_protos_ChromeContentSettingsEventInfo_init_default, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_ChromeActiveProcesses_init_default, false, perfetto_protos_Screenshot_init_default, NULL}
#define perfetto_protos_TrackEvent_LegacyEvent_init_default {false, 0, false, 0, false, 0, false, 0, 0, {0}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_MIN, false, _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_TrackEventDefaults_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EventCategory_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_EventName_init_default   {false, 0, {{NULL}, NULL}}
#define perfetto_protos_InternedData_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_init_default {false, 0, false, _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_MIN, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_init_default {{{NULL}, NULL}, false, _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_MIN, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_init_default {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PerfettoMetatrace_init_default {0, {0}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfettoMetatrace_Arg_init_default {0, {{{NULL}, NULL}}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_PerfettoMetatrace_InternedString_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_TracingServiceEvent_init_default {0, {0}}
#define perfetto_protos_TracingServiceEvent_DataSources_init_default {{{NULL}, NULL}}
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyConsumer_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyConsumerDescriptor_init_default {{{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyEstimationBreakdown_init_default {false, perfetto_protos_AndroidEnergyConsumerDescriptor_init_default, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_init_default {false, 0, false, 0}
#define perfetto_protos_EntityStateResidency_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EntityStateResidency_PowerEntityState_init_default {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EntityStateResidency_StateResidency_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BatteryCounters_init_default {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_PowerRails_init_default  {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PowerRails_RailDescriptor_init_default {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_PowerRails_EnergyData_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_ObfuscatedMember_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ObfuscatedClass_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DeobfuscationMapping_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_HeapGraphRoot_init_default {{{NULL}, NULL}, false, _perfetto_protos_HeapGraphRoot_Type_MIN}
#define perfetto_protos_HeapGraphType_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_HeapGraphType_Kind_MIN, false, 0}
#define perfetto_protos_HeapGraphObject_init_default {0, {0}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_HeapGraphObject_HeapType_MIN}
#define perfetto_protos_HeapGraph_init_default   {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProfilePacket_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_HeapSample_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_Histogram_init_default {{{NULL}, NULL}}
#define perfetto_protos_ProfilePacket_Histogram_Bucket_init_default {false, 0, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_ProcessStats_init_default {false, 0, false, 0, false, 0, false, perfetto_protos_ProfilePacket_Histogram_init_default, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_init_default {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_ProfilePacket_ProcessStats_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_MIN}
#define perfetto_protos_StreamingAllocation_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StreamingFree_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StreamingProfilePacket_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_Profiling_init_default   {0}
#define perfetto_protos_PerfSample_init_default  {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_Profiling_CpuMode_MIN, false, 0, {{NULL}, NULL}, 0, {_perfetto_protos_Profiling_StackUnwindError_MIN}, false, 0, 0, {_perfetto_protos_PerfSample_SampleSkipReason_MIN}, false, perfetto_protos_PerfSample_ProducerEvent_init_default}
#define perfetto_protos_PerfSample_ProducerEvent_init_default {0, {_perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_MIN}}
#define perfetto_protos_PerfSampleDefaults_init_default {false, perfetto_protos_PerfEvents_Timebase_init_default, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SmapsEntry_init_default  {{{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmapsPacket_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessStats_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ProcessStats_Thread_init_default {false, 0}
#define perfetto_protos_ProcessStats_FDInfo_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessStats_Process_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ProcessTree_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ProcessTree_Thread_init_default {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessTree_Process_init_default {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_RemoteClockSync_init_default {{{NULL}, NULL}}
#define perfetto_protos_RemoteClockSync_SyncedClocks_init_default {false, perfetto_protos_ClockSnapshot_init_default, false, perfetto_protos_ClockSnapshot_init_default}
#define perfetto_protos_Atom_init_default        {0}
#define perfetto_protos_StatsdAtom_init_default  {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_init_default    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_MeminfoValue_init_default {false, _perfetto_protos_MeminfoCounters_MIN, false, 0}
#define perfetto_protos_SysStats_VmstatValue_init_default {false, _perfetto_protos_VmstatCounters_MIN, false, 0}
#define perfetto_protos_SysStats_CpuTimes_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SysStats_InterruptCount_init_default {false, 0, false, 0}
#define perfetto_protos_SysStats_DevfreqValue_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SysStats_BuddyInfo_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_DiskStat_init_default {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SysStats_PsiSample_init_default {false, _perfetto_protos_SysStats_PsiSample_PsiResource_MIN, false, 0}
#define perfetto_protos_SysStats_ThermalZone_init_default {{{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysStats_CpuIdleStateEntry_init_default {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SysStats_CpuIdleState_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Utsname_init_default     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SystemInfo_init_default  {false, perfetto_protos_Utsname_init_default, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_CpuInfo_init_default     {{{NULL}, NULL}}
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuInfo_Cpu_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, 0, {perfetto_protos_CpuInfo_ArmCpuIdentifier_init_default}, false, 0}
#define perfetto_protos_TestEvent_init_default   {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, perfetto_protos_TestEvent_TestPayload_init_default}
#define perfetto_protos_TestEvent_TestPayload_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TracePacketDefaults_init_default {false, perfetto_protos_TrackEventDefaults_init_default, false, perfetto_protos_PerfSampleDefaults_init_default, false, 0, false, perfetto_protos_V8CodeDefaults_init_default}
#define perfetto_protos_TraceUuid_init_default   {false, 0, false, 0}
#define perfetto_protos_ProcessDescriptor_init_default {false, 0, {{NULL}, NULL}, false, 0, false, _perfetto_protos_ProcessDescriptor_ChromeProcessType_MIN, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrackEventRangeOfInterest_init_default {false, 0}
#define perfetto_protos_ThreadDescriptor_init_default {false, 0, false, 0, false, 0, false, _perfetto_protos_ThreadDescriptor_ChromeThreadType_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeProcessDescriptor_init_default {false, _perfetto_protos_ChromeProcessDescriptor_ProcessType_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeThreadDescriptor_init_default {false, _perfetto_protos_ChromeThreadDescriptor_ThreadType_MIN, false, 0}
#define perfetto_protos_CounterDescriptor_init_default {false, _perfetto_protos_CounterDescriptor_BuiltinCounterType_MIN, {{NULL}, NULL}, false, _perfetto_protos_CounterDescriptor_Unit_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrackDescriptor_init_default {false, 0, 0, {{{NULL}, NULL}}, false, perfetto_protos_ProcessDescriptor_init_default, false, perfetto_protos_ThreadDescriptor_init_default, false, 0, false, perfetto_protos_ChromeProcessDescriptor_init_default, false, perfetto_protos_ChromeThreadDescriptor_init_default, false, perfetto_protos_CounterDescriptor_init_default, false, 0, false, _perfetto_protos_TrackDescriptor_ChildTracksOrdering_MIN, false, 0}
#define perfetto_protos_TranslationTable_init_default {0, {perfetto_protos_ChromeHistorgramTranslationTable_init_default}}
#define perfetto_protos_ChromeHistorgramTranslationTable_init_default {{{NULL}, NULL}}
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeUserEventTranslationTable_init_default {{{NULL}, NULL}}
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SliceNameTranslationTable_init_default {{{NULL}, NULL}}
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProcessTrackNameTranslationTable_init_default {{{NULL}, NULL}}
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeStudyTranslationTable_init_default {{{NULL}, NULL}}
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_init_default {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Trigger_init_default     {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_UiState_init_default     {false, 0, false, 0, false, perfetto_protos_UiState_HighlightProcess_init_default}
#define perfetto_protos_UiState_HighlightProcess_init_default {0, {0}}
#define perfetto_protos_TracePacket_init_default {0, {perfetto_protos_FtraceEventBundle_init_default}, 0, {0}, false, 0, 0, {0}, false, perfetto_protos_InternedData_init_default, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TracePacketDefaults_init_default, false, 0, false, 0, false, 0}
#define perfetto_protos_Trace_init_default       {{{NULL}, NULL}}
#define perfetto_protos_FtraceDescriptor_init_zero {{{NULL}, NULL}}
#define perfetto_protos_FtraceDescriptor_AtraceCategory_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterDescriptor_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventCategory_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventDescriptor_init_zero {{{NULL}, NULL}}
#define perfetto_protos_DataSourceDescriptor_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, perfetto_protos_GpuCounterDescriptor_init_zero, false, perfetto_protos_TrackEventDescriptor_init_zero, false, 0, false, perfetto_protos_FtraceDescriptor_init_zero, false, 0}
#define perfetto_protos_TracingServiceState_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TracingServiceState_Producer_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TracingServiceState_DataSource_init_zero {false, perfetto_protos_DataSourceDescriptor_init_zero, false, 0}
#define perfetto_protos_TracingServiceState_TracingSession_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidGameInterventionListConfig_init_zero {{{NULL}, NULL}}
#define perfetto_protos_AndroidInputEventConfig_init_zero {false, _perfetto_protos_AndroidInputEventConfig_TraceMode_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidInputEventConfig_TraceRule_init_zero {false, _perfetto_protos_AndroidInputEventConfig_TraceLevel_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidLogConfig_init_zero {{{NULL}, NULL}, false, _perfetto_protos_AndroidLogPriority_MIN, {{NULL}, NULL}}
#define perfetto_protos_AndroidPolledStateConfig_init_zero {false, 0}
#define perfetto_protos_AndroidSdkSyspropGuardConfig_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidSystemPropertyConfig_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_AppWakelocksConfig_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KernelWakelocksConfig_init_zero {false, 0}
#define perfetto_protos_NetworkPacketTraceConfig_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PackagesListConfig_init_zero {{{NULL}, NULL}}
#define perfetto_protos_PixelModemConfig_init_zero {false, _perfetto_protos_PixelModemConfig_EventGroup_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogConfig_init_zero {{{NULL}, NULL}, false, _perfetto_protos_ProtoLogConfig_TracingMode_MIN, false, _perfetto_protos_ProtoLogLevel_MIN}
#define perfetto_protos_ProtoLogGroup_init_zero  {{{NULL}, NULL}, false, _perfetto_protos_ProtoLogLevel_MIN, false, 0}
#define perfetto_protos_SurfaceFlingerLayersConfig_init_zero {false, _perfetto_protos_SurfaceFlingerLayersConfig_Mode_MIN, {{NULL}, NULL}}
#define perfetto_protos_SurfaceFlingerTransactionsConfig_init_zero {false, _perfetto_protos_SurfaceFlingerTransactionsConfig_Mode_MIN}
#define perfetto_protos_WindowManagerConfig_init_zero {false, _perfetto_protos_WindowManagerConfig_LogFrequency_MIN, false, _perfetto_protos_WindowManagerConfig_LogLevel_MIN}
#define perfetto_protos_ChromeConfig_init_zero   {{{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_ChromeConfig_ClientPriority_MIN, {{NULL}, NULL}}
#define perfetto_protos_ChromiumHistogramSamplesConfig_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromiumSystemMetricsConfig_init_zero {false, 0}
#define perfetto_protos_V8Config_init_zero       {false, 0, false, 0}
#define perfetto_protos_EtwConfig_init_zero      {{{NULL}, NULL}}
#define perfetto_protos_FtraceConfig_init_zero   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_FtraceConfig_CompactSchedConfig_init_zero, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_FtraceConfig_KsymsMemPolicy_MIN, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_FtraceConfig_PrintFilter_init_zero, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_FtraceConfig_KprobeEvent_init_zero {{{NULL}, NULL}, false, _perfetto_protos_FtraceConfig_KprobeEvent_KprobeType_MIN}
#define perfetto_protos_FtraceConfig_CompactSchedConfig_init_zero {false, 0}
#define perfetto_protos_FtraceConfig_PrintFilter_init_zero {{{NULL}, NULL}}
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_init_zero {0, {{{NULL}, NULL}}, false, 0}
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuCounterConfig_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GpuRenderStagesConfig_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_VulkanMemoryConfig_init_zero {false, 0, false, 0}
#define perfetto_protos_InodeFileConfig_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ConsoleConfig_init_zero  {false, _perfetto_protos_ConsoleConfig_Output_MIN, false, 0}
#define perfetto_protos_InterceptorConfig_init_zero {{{NULL}, NULL}, false, perfetto_protos_ConsoleConfig_init_zero}
#define perfetto_protos_AndroidPowerConfig_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ProcessStatsConfig_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_HeapprofdConfig_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_init_zero, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_init_zero {false, 0, false, 0}
#define perfetto_protos_JavaHprofConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_init_zero, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_PerfEvents_init_zero     {0}
#define perfetto_protos_PerfEvents_Timebase_init_zero {0, {0}, 0, {perfetto_protos_PerfEvents_Tracepoint_init_zero}, {{NULL}, NULL}, false, _perfetto_protos_PerfEvents_PerfClock_MIN}
#define perfetto_protos_PerfEvents_Tracepoint_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfEvents_RawEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FollowerEvent_init_zero  {0, {_perfetto_protos_PerfEvents_Counter_MIN}, {{NULL}, NULL}}
#define perfetto_protos_PerfEventConfig_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_PerfEvents_Timebase_init_zero, false, perfetto_protos_PerfEventConfig_CallstackSampling_init_zero, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfEventConfig_CallstackSampling_init_zero {false, perfetto_protos_PerfEventConfig_Scope_init_zero, false, 0, false, _perfetto_protos_PerfEventConfig_UnwindMode_MIN}
#define perfetto_protos_PerfEventConfig_Scope_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_StatsdTracingConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StatsdPullAtomConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysStatsConfig_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SystemInfoConfig_init_zero {0}
#define perfetto_protos_TestConfig_init_zero     {false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TestConfig_DummyFields_init_zero}
#define perfetto_protos_TestConfig_DummyFields_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TrackEventConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DataSourceConfig_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_DataSourceConfig_SessionInitiator_MIN, false, perfetto_protos_FtraceConfig_init_zero, false, perfetto_protos_ChromeConfig_init_zero, false, perfetto_protos_InodeFileConfig_init_zero, false, perfetto_protos_ProcessStatsConfig_init_zero, false, perfetto_protos_SysStatsConfig_init_zero, false, perfetto_protos_HeapprofdConfig_init_zero, false, perfetto_protos_AndroidPowerConfig_init_zero, false, perfetto_protos_AndroidLogConfig_init_zero, false, perfetto_protos_GpuCounterConfig_init_zero, false, perfetto_protos_PackagesListConfig_init_zero, false, perfetto_protos_JavaHprofConfig_init_zero, false, perfetto_protos_PerfEventConfig_init_zero, false, perfetto_protos_VulkanMemoryConfig_init_zero, false, perfetto_protos_TrackEventConfig_init_zero, false, perfetto_protos_AndroidPolledStateConfig_init_zero, false, perfetto_protos_InterceptorConfig_init_zero, false, perfetto_protos_AndroidGameInterventionListConfig_init_zero, false, perfetto_protos_StatsdTracingConfig_init_zero, false, perfetto_protos_AndroidSystemPropertyConfig_init_zero, false, perfetto_protos_SystemInfoConfig_init_zero, false, perfetto_protos_NetworkPacketTraceConfig_init_zero, false, perfetto_protos_SurfaceFlingerLayersConfig_init_zero, false, 0, false, perfetto_protos_SurfaceFlingerTransactionsConfig_init_zero, false, perfetto_protos_AndroidSdkSyspropGuardConfig_init_zero, false, perfetto_protos_EtwConfig_init_zero, false, perfetto_protos_ProtoLogConfig_init_zero, false, perfetto_protos_V8Config_init_zero, false, perfetto_protos_AndroidInputEventConfig_init_zero, false, perfetto_protos_PixelModemConfig_init_zero, false, perfetto_protos_WindowManagerConfig_init_zero, false, perfetto_protos_ChromiumSystemMetricsConfig_init_zero, false, perfetto_protos_KernelWakelocksConfig_init_zero, false, perfetto_protos_GpuRenderStagesConfig_init_zero, false, perfetto_protos_ChromiumHistogramSamplesConfig_init_zero, false, perfetto_protos_AppWakelocksConfig_init_zero, {{NULL}, NULL}, false, perfetto_protos_TestConfig_init_zero}
#define perfetto_protos_TraceConfig_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_TraceConfig_LockdownModeOperation_MIN, {{NULL}, NULL}, false, perfetto_protos_TraceConfig_StatsdMetadata_init_zero, false, 0, false, 0, false, 0, false, perfetto_protos_TraceConfig_GuardrailOverrides_init_zero, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TraceConfig_TriggerConfig_init_zero, {{NULL}, NULL}, false, 0, false, perfetto_protos_TraceConfig_BuiltinDataSource_init_zero, false, perfetto_protos_TraceConfig_IncrementalStateConfig_init_zero, {{NULL}, NULL}, false, 0, false, _perfetto_protos_TraceConfig_CompressionType_MIN, false, perfetto_protos_TraceConfig_IncidentReportConfig_init_zero, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, _perfetto_protos_TraceConfig_StatsdLogging_MIN, false, perfetto_protos_TraceConfig_TraceFilter_init_zero, false, perfetto_protos_TraceConfig_AndroidReportConfig_init_zero, false, perfetto_protos_TraceConfig_CmdTraceStartDelay_init_zero, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_BufferConfig_init_zero {false, 0, false, _perfetto_protos_TraceConfig_BufferConfig_FillPolicy_MIN, false, 0, false, 0}
#define perfetto_protos_TraceConfig_DataSource_init_zero {false, perfetto_protos_DataSourceConfig_init_zero, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_BuiltinDataSource_init_zero {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_BuiltinClock_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_ProducerConfig_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_StatsdMetadata_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_GuardrailOverrides_init_zero {false, 0, false, 0}
#define perfetto_protos_TraceConfig_TriggerConfig_init_zero {false, _perfetto_protos_TraceConfig_TriggerConfig_TriggerMode_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_IncrementalStateConfig_init_zero {false, 0}
#define perfetto_protos_TraceConfig_IncidentReportConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceConfig_TraceFilter_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_init_zero}
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_init_zero {false, _perfetto_protos_TraceConfig_TraceFilter_StringFilterPolicy_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_init_zero {{{NULL}, NULL}}
#define perfetto_protos_TraceConfig_AndroidReportConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_init_zero {false, 0, false, 0}
#define perfetto_protos_TraceConfig_SessionSemaphore_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_TraceStats_init_zero     {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TraceStats_FilterStats_init_zero, false, 0, false, 0, false, 0, false, _perfetto_protos_TraceStats_FinalFlushOutcome_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TraceStats_BufferStats_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TraceStats_WriterStats_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TraceStats_FilterStats_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidGameInterventionList_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_init_zero {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidLogPacket_init_zero {{{NULL}, NULL}, false, perfetto_protos_AndroidLogPacket_Stats_init_zero}
#define perfetto_protos_AndroidLogPacket_LogEvent_init_zero {false, _perfetto_protos_AndroidLogId_MIN, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_AndroidLogPriority_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_init_zero {{{NULL}, NULL}, 0, {0}}
#define perfetto_protos_AndroidLogPacket_Stats_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidSystemProperty_init_zero {{{NULL}, NULL}}
#define perfetto_protos_AndroidSystemProperty_PropertyValue_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AppWakelockInfo_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AppWakelockBundle_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_AppWakelockInfo_init_zero, false, 0}
#define perfetto_protos_BluetoothTraceEvent_init_zero {false, _perfetto_protos_BluetoothTracePacketType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidCameraFrameEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_AndroidCameraFrameEvent_CaptureResultStatus_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidCameraSessionStats_init_zero {false, 0, false, perfetto_protos_AndroidCameraSessionStats_CameraGraph_init_zero}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FrameTimelineEvent_init_zero {0, {perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_init_zero}}
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_FrameTimelineEvent_PresentType_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PredictionType_MIN, false, 0, false, _perfetto_protos_FrameTimelineEvent_JankSeverityType_MIN}
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_init_zero {false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PresentType_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_FrameTimelineEvent_PredictionType_MIN, false, _perfetto_protos_FrameTimelineEvent_JankSeverityType_MIN}
#define perfetto_protos_FrameTimelineEvent_FrameEnd_init_zero {false, 0}
#define perfetto_protos_GpuMemTotalEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_GraphicsFrameEvent_init_zero {false, perfetto_protos_GraphicsFrameEvent_BufferEvent_init_zero}
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_init_zero {false, 0, false, _perfetto_protos_GraphicsFrameEvent_BufferEventType_MIN, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_InitialDisplayState_init_zero {false, 0, false, 0}
#define perfetto_protos_KernelWakelockData_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_KernelWakelockData_Wakelock_init_zero {false, 0, {{NULL}, NULL}, false, _perfetto_protos_KernelWakelockData_Wakelock_Type_MIN}
#define perfetto_protos_NetworkPacketEvent_init_zero {false, _perfetto_protos_TrafficDirection_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NetworkPacketBundle_init_zero {0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_NetworkPacketContext_init_zero {false, 0, false, perfetto_protos_NetworkPacketEvent_init_zero}
#define perfetto_protos_PackagesList_init_zero   {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_PackagesList_PackageInfo_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PixelModemEvents_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PixelModemTokenDatabase_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ProtoLogMessage_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ProtoLogViewerConfig_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogViewerConfig_MessageData_init_zero {false, 0, {{NULL}, NULL}, false, _perfetto_protos_ProtoLogLevel_MIN, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProtoLogViewerConfig_Group_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ShellTransition_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ShellTransition_Target_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ShellHandlerMappings_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ShellHandlerMapping_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_RectProto_init_zero      {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_RegionProto_init_zero    {{{NULL}, NULL}}
#define perfetto_protos_SizeProto_init_zero      {false, 0, false, 0}
#define perfetto_protos_TransformProto_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ColorProto_init_zero     {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_InputWindowInfoProto_init_zero {false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_RegionProto_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_TransformProto_init_zero, false, 0}
#define perfetto_protos_BlurRegion_init_zero     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ColorTransformProto_init_zero {{{NULL}, NULL}}
#define perfetto_protos_LayersTraceFileProto_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_LayersSnapshotProto_init_zero {false, 0, {{NULL}, NULL}, false, perfetto_protos_LayersProto_init_zero, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_LayersProto_init_zero    {{{NULL}, NULL}}
#define perfetto_protos_DisplayProto_init_zero   {false, 0, {{NULL}, NULL}, false, 0, false, perfetto_protos_SizeProto_init_zero, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_TransformProto_init_zero, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerProto_init_zero     {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_RegionProto_init_zero, false, perfetto_protos_RegionProto_init_zero, false, perfetto_protos_RegionProto_init_zero, false, 0, false, 0, false, perfetto_protos_PositionProto_init_zero, false, perfetto_protos_PositionProto_init_zero, false, perfetto_protos_SizeProto_init_zero, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_RectProto_init_zero, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_ColorProto_init_zero, false, perfetto_protos_ColorProto_init_zero, false, 0, false, perfetto_protos_TransformProto_init_zero, false, perfetto_protos_TransformProto_init_zero, false, 0, false, 0, false, perfetto_protos_ActiveBufferProto_init_zero, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_FloatRectProto_init_zero, false, 0, false, 0, false, 0, false, _perfetto_protos_HwcCompositionType_MIN, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_TransformProto_init_zero, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_TransformProto_init_zero, false, perfetto_protos_FloatRectProto_init_zero, false, perfetto_protos_FloatRectProto_init_zero, false, perfetto_protos_FloatRectProto_init_zero, false, perfetto_protos_InputWindowInfoProto_init_zero, false, perfetto_protos_FloatRectProto_init_zero, false, 0, false, perfetto_protos_ColorTransformProto_init_zero, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, 0, false, _perfetto_protos_TrustedOverlay_MIN}
#define perfetto_protos_LayerProto_MetadataEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_PositionProto_init_zero  {false, 0, false, 0}
#define perfetto_protos_FloatRectProto_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ActiveBufferProto_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BarrierLayerProto_init_zero {false, 0, false, 0}
#define perfetto_protos_TransactionTraceFile_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TransactionTraceEntry_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DisplayInfo_init_zero    {false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_Transform_init_zero, false, perfetto_protos_Transform_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerCreationArgs_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Transform_init_zero      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TransactionState_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_LayerState_init_zero     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_LayerState_Matrix22_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_LayerState_Color3_init_zero, false, perfetto_protos_RegionProto_init_zero, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_LayerState_BufferData_init_zero, false, 0, false, 0, false, perfetto_protos_ColorTransformProto_init_zero, {{NULL}, NULL}, false, perfetto_protos_LayerState_WindowInfo_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_RectProto_init_zero, false, _perfetto_protos_LayerState_DropInputMode_MIN, false, _perfetto_protos_TrustedOverlay_MIN}
#define perfetto_protos_LayerState_Matrix22_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LayerState_Color3_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_LayerState_BufferData_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_LayerState_BufferData_PixelFormat_MIN, false, 0}
#define perfetto_protos_LayerState_WindowInfo_init_zero {false, 0, false, 0, false, perfetto_protos_RegionProto_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_Transform_init_zero, false, 0}
#define perfetto_protos_DisplayState_init_zero   {false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_RectProto_init_zero, false, perfetto_protos_RectProto_init_zero, false, 0, false, 0}
#define perfetto_protos_WinscopeExtensions_init_zero {NULL}
#define perfetto_protos_ChromeBenchmarkMetadata_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromeMetadataPacket_init_zero {false, perfetto_protos_BackgroundTracingMetadata_init_zero, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeMetadataPacket_FinchHash_init_zero {false, 0, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_init_zero {false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_init_zero, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_init_zero {false, _perfetto_protos_BackgroundTracingMetadata_TriggerRule_TriggerType_MIN, false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_init_zero, false, perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_init_zero, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_init_zero {false, _perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_MIN, false, 0}
#define perfetto_protos_ChromeTracedValue_init_zero {false, _perfetto_protos_ChromeTracedValue_NestedType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeStringTableEntry_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeTraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ChromeTraceEvent_Arg_init_zero {{{NULL}, NULL}, 0, {0}, false, 0}
#define perfetto_protos_ChromeMetadata_init_zero {{{NULL}, NULL}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_ChromeLegacyJsonTrace_init_zero {false, _perfetto_protos_ChromeLegacyJsonTrace_TraceType_MIN, {{NULL}, NULL}}
#define perfetto_protos_ChromeEventBundle_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeTrigger_init_zero  {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_V8String_init_zero       {0, {{{NULL}, NULL}}}
#define perfetto_protos_InternedV8String_init_zero {false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_InternedV8JsScript_init_zero {false, 0, false, 0, false, _perfetto_protos_InternedV8JsScript_Type_MIN, false, perfetto_protos_V8String_init_zero, false, perfetto_protos_V8String_init_zero}
#define perfetto_protos_InternedV8WasmScript_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InternedV8JsFunction_init_zero {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_InternedV8JsFunction_Kind_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_InternedV8Isolate_init_zero {false, 0, false, 0, false, 0, false, perfetto_protos_InternedV8Isolate_CodeRange_init_zero, false, 0, false, 0}
#define perfetto_protos_InternedV8Isolate_CodeRange_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_V8JsCode_init_zero       {false, 0, false, 0, false, 0, false, _perfetto_protos_V8JsCode_Tier_MIN, false, 0, false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_V8InternalCode_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_V8InternalCode_Type_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8WasmCode_init_zero     {false, 0, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_V8WasmCode_Tier_MIN, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8RegExpCode_init_zero   {false, 0, false, 0, false, perfetto_protos_V8String_init_zero, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_V8CodeMove_init_zero     {false, 0, false, 0, false, 0, false, 0, false, 0, 0, {{{NULL}, NULL}}}
#define perfetto_protos_V8CodeDefaults_init_zero {false, 0}
#define perfetto_protos_ClockSnapshot_init_zero  {{{NULL}, NULL}, false, _perfetto_protos_BuiltinClock_MIN}
#define perfetto_protos_ClockSnapshot_Clock_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CSwitchEtwEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_CSwitchEtwEvent_OldThreadWaitReason_MIN, false, _perfetto_protos_CSwitchEtwEvent_OldThreadWaitMode_MIN, false, _perfetto_protos_CSwitchEtwEvent_OldThreadState_MIN, false, 0, false, 0}
#define perfetto_protos_ReadyThreadEtwEvent_init_zero {false, 0, false, _perfetto_protos_ReadyThreadEtwEvent_AdjustReason_MIN, false, 0, false, _perfetto_protos_ReadyThreadEtwEvent_TraceFlag_MIN}
#define perfetto_protos_EtwTraceEvent_init_zero  {false, 0, 0, {perfetto_protos_CSwitchEtwEvent_init_zero}, false, 0}
#define perfetto_protos_EtwTraceEventBundle_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FileDescriptorSet_init_zero {{{NULL}, NULL}}
#define perfetto_protos_FileDescriptorProto_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DescriptorProto_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DescriptorProto_ReservedRange_init_zero {false, 0, false, 0}
#define perfetto_protos_UninterpretedOption_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_UninterpretedOption_NamePart_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_FieldOptions_init_zero   {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FieldDescriptorProto_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, _perfetto_protos_FieldDescriptorProto_Label_MIN, false, _perfetto_protos_FieldDescriptorProto_Type_MIN, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_FieldOptions_init_zero, false, 0}
#define perfetto_protos_OneofDescriptorProto_init_zero {{{NULL}, NULL}, false, perfetto_protos_OneofOptions_init_zero}
#define perfetto_protos_EnumDescriptorProto_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EnumValueDescriptorProto_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_OneofOptions_init_zero   {NULL}
#define perfetto_protos_ExtensionDescriptor_init_zero {false, perfetto_protos_FileDescriptorSet_init_zero}
#define perfetto_protos_InodeFileMap_init_zero   {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InodeFileMap_Entry_init_zero {false, 0, {{NULL}, NULL}, false, _perfetto_protos_InodeFileMap_Entry_Type_MIN}
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BclIrqTriggerFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderTransactionFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_init_zero {false, 0}
#define perfetto_protos_BinderSetPriorityFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderLockFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_BinderLockedFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_BinderUnlockFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BinderCommandFtraceEvent_init_zero {false, 0}
#define perfetto_protos_BinderReturnFtraceEvent_init_zero {false, 0}
#define perfetto_protos_BlockRqIssueFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioBackmergeFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioBounceFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioCompleteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioQueueFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockBioRemapFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockDirtyBufferFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_BlockGetrqFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockPlugFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_BlockRqAbortFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockRqCompleteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_BlockRqInsertFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockRqRemapFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockRqRequeueFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockSleeprqFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockSplitFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockTouchBufferFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_BlockUnplugFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_BlockIoStartFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_BlockIoDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_CgroupAttachTaskFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupMkdirFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRemountFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRmdirFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupTransferTasksFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupDestroyRootFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupReleaseFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupRenameFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CgroupSetupRootFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ClkEnableFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ClkDisableFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ClkSetRateFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_CmaAllocStartFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CmaAllocInfoFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferredFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionFinishedFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MmCompactionSuitableFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ParamSetValueCpmFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_CpuhpExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpLatencyFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuhpPauseFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DcvshFreqFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DevfreqFrequencyFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DmaFenceInitFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceEmitFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceSignaledFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DmaHeapStatFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DpuDsiRxFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DpuDsiTxFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_DrmVblankEventFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4DropInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4EvictInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FallocateExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ForgetFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4FreeInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4InsertRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalStartFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4LoadInodeFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocAllocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocFreeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4PunchHoleFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReadpageFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ReleasepageFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4RequestInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4SyncFsFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TrimExtentFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4TruncateExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WriteBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WriteEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepageFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepagesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsEvictInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsFallocateFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGetVictimFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIgetFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIgetExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsNewInodeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsReadpageFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsSyncFsFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsWriteBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_F2fsWriteEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIostatFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGcBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_F2fsGcEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaStatFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_FastrpcDmaMapFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FenceInitFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceDestroyFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceEnableSignalFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FenceSignaledFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DoSysOpenFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_OpenExecFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_PrintFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_FuncgraphEntryFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_FuncgraphExitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GenericFtraceEvent_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GenericFtraceEvent_Field_init_zero {{{NULL}, NULL}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_KprobeEvent_init_zero    {{{NULL}, NULL}, false, _perfetto_protos_KprobeEvent_KprobeType_MIN}
#define perfetto_protos_GoogleIccEventFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GoogleIrmEventFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuMemTotalFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_DrmSchedJobFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DrmRunJobFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_init_zero {false, 0}
#define perfetto_protos_HypEnterFtraceEvent_init_zero {0}
#define perfetto_protos_HypExitFtraceEvent_init_zero {0}
#define perfetto_protos_HostHcallFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_HostSmcFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_HostMemAbortFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_I2cReadFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_I2cWriteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_I2cResultFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_I2cReplyFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusReadFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusWriteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusResultFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmbusReplyFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonStatFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_IpiEntryFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_IpiExitFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_IpiRaiseFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SoftirqEntryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_SoftirqExitFtraceEvent_init_zero {false, 0}
#define perfetto_protos_SoftirqRaiseFtraceEvent_init_zero {false, 0}
#define perfetto_protos_IrqHandlerEntryFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IrqHandlerExitFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysEndFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysFailFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_AllocPagesSysStartFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_IommuMapRangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferEndFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferFailFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonAllocBufferStartFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonCpAllocRetryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonPrefetchingFtraceEvent_init_zero {false, 0}
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KfreeFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KmallocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmallocNodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheAllocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KmemCacheFreeFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MigratePagesEndFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MigratePagesStartFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MigrateRetryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MmPageAllocFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageFreeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_RssStatFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_IonHeapShrinkFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonHeapGrowFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_IonBufferCreateFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_IonBufferDestroyFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmAccessFaultFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmAckIrqFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmAgeHvaFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmAgePageFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmArmClearDebugFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmEntryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmExitFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmFpuFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmGetTimerMapFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmGuestFaultFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmHandleSysRegFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmHvcArm64FtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmIrqLineFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmMmioFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KvmMmioEmulateFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmSetIrqFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmSetWayFlushFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmSysAccessFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmTimerEmulateFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmToggleCacheFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_KvmUserspaceExitFtraceEvent_init_zero {false, 0}
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_KvmWfxArm64FtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_TrapRegFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_LowmemoryKillFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCmdKickoffFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MdpCommitFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetOtFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpSsppChangeFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TracingMarkWriteFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCompareBwFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpSsppSetFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MdpMisrCrcFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpTraceCounterFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MdpMixerUpdateFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MmEventRecordFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NetifReceiveSkbFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_NetDevXmitFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_init_zero {false, 0}
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_MarkVictimFtraceEvent_init_zero {false, 0}
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DsiRxFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_DsiTxFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_PanelWriteGenericFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_init_zero {false, 0}
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_CpuFrequencyFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_CpuIdleFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_ClockEnableFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ClockDisableFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ClockSetRateFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SuspendResumeFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_GpuFrequencyFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_WakeupSourceActivateFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuWorkPeriodFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ConsoleFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_SysEnterFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysExitFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_RegulatorDisableFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_RpmStatusFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedSwitchFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedWakeupFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedBlockedReasonFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_SchedCpuHotplugFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakingFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakeupNewFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedProcessExecFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedProcessExitFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedProcessForkFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_SchedProcessFreeFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedProcessHangFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SchedProcessWaitFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SchedPiSetprioFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedMigrateTaskFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ScmCallStartFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_ScmCallEndFtraceEvent_init_zero {0}
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SignalDeliverFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_SignalGenerateFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_KfreeSkbFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_InetSockSetStateFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SyncPtFtraceEvent_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SyncTimelineFtraceEvent_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SyncWaitFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_RssStatThrottledFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_init_zero {false, 0}
#define perfetto_protos_ZeroFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TaskNewtaskFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_TaskRenameFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ThermalTemperatureFtraceEvent_init_zero {false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_CdevUpdateFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustySmcFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustySmcDoneFtraceEvent_init_zero {false, 0}
#define perfetto_protos_TrustyStdCall32FtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_init_zero {false, 0}
#define perfetto_protos_TrustyShareMemoryFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_init_zero {false, 0}
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_TrustyIrqFtraceEvent_init_zero {false, 0}
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcConnectFtraceEvent_init_zero {false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_TrustyIpcWriteFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcPollFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcReadFtraceEvent_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyIpcRxFtraceEvent_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_UfshcdCommandFtraceEvent_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_UfshcdClkGatingFtraceEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_V4l2QbufFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_V4l2DqbufFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioVideoCmdFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_init_zero {false, 0}
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_init_zero {false, 0}
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_init_zero {false, 0, false, 0}
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FtraceEvent_init_zero    {false, 0, false, 0, 0, {perfetto_protos_PrintFtraceEvent_init_zero}, false, 0}
#define perfetto_protos_FtraceCpuStats_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_FtraceKprobeStats_init_zero {false, 0, false, 0}
#define perfetto_protos_FtraceStats_init_zero    {false, _perfetto_protos_FtraceStats_Phase_MIN, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, perfetto_protos_FtraceKprobeStats_init_zero}
#define perfetto_protos_FtraceEventBundle_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, perfetto_protos_FtraceEventBundle_CompactSched_init_zero, false, _perfetto_protos_FtraceClock_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_FtraceEventBundle_CompactSched_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_FtraceEventBundle_FtraceError_init_zero {false, 0, false, _perfetto_protos_FtraceParseStatus_MIN}
#define perfetto_protos_GpuCounterEvent_init_zero {false, perfetto_protos_GpuCounterDescriptor_init_zero, {{NULL}, NULL}, false, 0}
#define perfetto_protos_GpuCounterEvent_GpuCounter_init_zero {false, 0, 0, {0}}
#define perfetto_protos_GpuLog_init_zero         {false, _perfetto_protos_GpuLog_Severity_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, perfetto_protos_GpuRenderStageEvent_Specifications_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, NULL}
#define perfetto_protos_GpuRenderStageEvent_ExtraData_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_Specifications_init_zero {false, perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_init_zero, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_init_zero {false, 0, false, 0}
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_InternedGraphicsContext_init_zero {false, 0, false, 0, false, _perfetto_protos_InternedGraphicsContext_Api_MIN}
#define perfetto_protos_InternedGpuRenderStageSpecification_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, _perfetto_protos_InternedGpuRenderStageSpecification_RenderStageCategory_MIN}
#define perfetto_protos_VulkanApiEvent_init_zero {0, {perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_init_zero}}
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_VulkanMemoryEventAnnotation_init_zero {false, 0, 0, {0}}
#define perfetto_protos_VulkanMemoryEvent_init_zero {false, _perfetto_protos_VulkanMemoryEvent_Source_MIN, false, _perfetto_protos_VulkanMemoryEvent_Operation_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_VulkanMemoryEvent_AllocationScope_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_InternedString_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Line_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_AddressSymbols_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ModuleSymbols_init_zero  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_Mapping_init_zero        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_Frame_init_zero          {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_Callstack_init_zero      {false, 0, {{NULL}, NULL}}
#define perfetto_protos_HistogramName_init_zero  {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeHistogramSample_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_DebugAnnotation_init_zero {0, {0}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {0}, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotation_NestedValue_init_zero {false, _perfetto_protos_DebugAnnotation_NestedValue_NestedType_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotationName_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_DebugAnnotationValueTypeName_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_LogMessage_init_zero     {false, 0, false, 0, false, _perfetto_protos_LogMessage_Priority_MIN}
#define perfetto_protos_LogMessageBody_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_UnsymbolizedSourceLocation_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_SourceLocation_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeActiveProcesses_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ChromeApplicationStateInfo_init_zero {false, _perfetto_protos_ChromeApplicationStateInfo_ChromeApplicationState_MIN}
#define perfetto_protos_ChromeCompositorSchedulerState_init_zero {false, perfetto_protos_ChromeCompositorStateMachine_init_zero, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeCompositorSchedulerAction_MIN, false, _perfetto_protos_ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_BeginImplFrameArgs_init_zero, false, perfetto_protos_BeginFrameObserverState_init_zero, false, perfetto_protos_BeginFrameSourceState_init_zero, false, perfetto_protos_CompositorTimingHistory_init_zero}
#define perfetto_protos_ChromeCompositorStateMachine_init_zero {false, perfetto_protos_ChromeCompositorStateMachine_MajorState_init_zero, false, perfetto_protos_ChromeCompositorStateMachine_MinorState_init_zero}
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_init_zero {false, _perfetto_protos_ChromeCompositorSchedulerAction_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginImplFrameState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_BeginMainFrameState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_MIN}
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeCompositorStateMachine_MinorState_TreePriority_MIN, false, _perfetto_protos_ChromeCompositorStateMachine_MinorState_ScrollHandlerState_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BeginFrameArgs_init_zero {false, _perfetto_protos_BeginFrameArgs_BeginFrameArgsType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0, {0}, false, 0}
#define perfetto_protos_BeginImplFrameArgs_init_zero {false, 0, false, 0, false, _perfetto_protos_BeginImplFrameArgs_State_MIN, 0, {perfetto_protos_BeginFrameArgs_init_zero}, false, perfetto_protos_BeginImplFrameArgs_TimestampsInUs_init_zero}
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BeginFrameObserverState_init_zero {false, 0, false, perfetto_protos_BeginFrameArgs_init_zero}
#define perfetto_protos_BeginFrameSourceState_init_zero {false, 0, false, 0, false, 0, false, perfetto_protos_BeginFrameArgs_init_zero}
#define perfetto_protos_CompositorTimingHistory_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeContentSettingsEventInfo_init_zero {false, 0}
#define perfetto_protos_ChromeFrameReporter_init_zero {false, _perfetto_protos_ChromeFrameReporter_State_MIN, false, _perfetto_protos_ChromeFrameReporter_FrameDropReason_MIN, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeFrameReporter_ScrollState_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeFrameReporter_FrameType_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeKeyedService_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ChromeLatencyInfo_init_zero {false, 0, false, _perfetto_protos_ChromeLatencyInfo_Step_MIN, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _perfetto_protos_ChromeLatencyInfo_InputType_MIN}
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_init_zero {false, _perfetto_protos_ChromeLatencyInfo_LatencyComponentType_MIN, false, 0}
#define perfetto_protos_ChromeLegacyIpc_init_zero {false, _perfetto_protos_ChromeLegacyIpc_MessageClass_MIN, false, 0}
#define perfetto_protos_ChromeMessagePump_init_zero {false, 0, false, 0}
#define perfetto_protos_ChromeMojoEventInfo_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeRendererSchedulerState_init_zero {false, _perfetto_protos_ChromeRAILMode_MIN, false, 0, false, 0}
#define perfetto_protos_ChromeUserEvent_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeWindowHandleEventInfo_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_Screenshot_init_zero     {{{NULL}, NULL}}
#define perfetto_protos_TaskExecution_init_zero  {false, 0}
#define perfetto_protos_TrackEvent_init_zero     {0, {0}, 0, {0}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_TaskExecution_init_zero, false, perfetto_protos_TrackEvent_LegacyEvent_init_zero, 0, {0}, false, _perfetto_protos_TrackEvent_Type_MIN, 0, {0}, false, 0, {{NULL}, NULL}, false, perfetto_protos_LogMessage_init_zero, {{NULL}, NULL}, false, perfetto_protos_ChromeCompositorSchedulerState_init_zero, false, perfetto_protos_ChromeUserEvent_init_zero, false, perfetto_protos_ChromeKeyedService_init_zero, false, perfetto_protos_ChromeLegacyIpc_init_zero, false, perfetto_protos_ChromeHistogramSample_init_zero, false, perfetto_protos_ChromeLatencyInfo_init_zero, 0, {0}, {{NULL}, NULL}, false, perfetto_protos_ChromeFrameReporter_init_zero, 0, {perfetto_protos_SourceLocation_init_zero}, false, perfetto_protos_ChromeMessagePump_init_zero, {{NULL}, NULL}, false, perfetto_protos_ChromeMojoEventInfo_init_zero, false, perfetto_protos_ChromeApplicationStateInfo_init_zero, false, perfetto_protos_ChromeRendererSchedulerState_init_zero, false, perfetto_protos_ChromeWindowHandleEventInfo_init_zero, {{NULL}, NULL}, false, perfetto_protos_ChromeContentSettingsEventInfo_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, perfetto_protos_ChromeActiveProcesses_init_zero, false, perfetto_protos_Screenshot_init_zero, NULL}
#define perfetto_protos_TrackEvent_LegacyEvent_init_zero {false, 0, false, 0, false, 0, false, 0, 0, {0}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _perfetto_protos_TrackEvent_LegacyEvent_FlowDirection_MIN, false, _perfetto_protos_TrackEvent_LegacyEvent_InstantEventScope_MIN, false, 0, false, 0, false, 0}
#define perfetto_protos_TrackEventDefaults_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EventCategory_init_zero  {false, 0, {{NULL}, NULL}}
#define perfetto_protos_EventName_init_zero      {false, 0, {{NULL}, NULL}}
#define perfetto_protos_InternedData_init_zero   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_init_zero {false, 0, false, _perfetto_protos_MemoryTrackerSnapshot_LevelOfDetail_MIN, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_init_zero {{{NULL}, NULL}, false, _perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_MIN, false, 0, {{NULL}, NULL}}
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_init_zero {false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_PerfettoMetatrace_init_zero {0, {0}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PerfettoMetatrace_Arg_init_zero {0, {{{NULL}, NULL}}, 0, {{{NULL}, NULL}}}
#define perfetto_protos_PerfettoMetatrace_InternedString_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_TracingServiceEvent_init_zero {0, {0}}
#define perfetto_protos_TracingServiceEvent_DataSources_init_zero {{{NULL}, NULL}}
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyConsumer_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyConsumerDescriptor_init_zero {{{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyEstimationBreakdown_init_zero {false, perfetto_protos_AndroidEnergyConsumerDescriptor_init_zero, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_init_zero {false, 0, false, 0}
#define perfetto_protos_EntityStateResidency_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EntityStateResidency_PowerEntityState_init_zero {false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_EntityStateResidency_StateResidency_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_BatteryCounters_init_zero {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_PowerRails_init_zero     {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_PowerRails_RailDescriptor_init_zero {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_PowerRails_EnergyData_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_ObfuscatedMember_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ObfuscatedClass_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_DeobfuscationMapping_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_HeapGraphRoot_init_zero  {{{NULL}, NULL}, false, _perfetto_protos_HeapGraphRoot_Type_MIN}
#define perfetto_protos_HeapGraphType_init_zero  {false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, _perfetto_protos_HeapGraphType_Kind_MIN, false, 0}
#define perfetto_protos_HeapGraphObject_init_zero {0, {0}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_HeapGraphObject_HeapType_MIN}
#define perfetto_protos_HeapGraph_init_zero      {false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProfilePacket_init_zero  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_HeapSample_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_Histogram_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ProfilePacket_Histogram_Bucket_init_zero {false, 0, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_ProcessStats_init_zero {false, 0, false, 0, false, 0, false, perfetto_protos_ProfilePacket_Histogram_init_zero, false, 0, false, 0}
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, 0, false, perfetto_protos_ProfilePacket_ProcessStats_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, _perfetto_protos_ProfilePacket_ProcessHeapSamples_ClientError_MIN}
#define perfetto_protos_StreamingAllocation_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StreamingFree_init_zero  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_StreamingProfilePacket_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_Profiling_init_zero      {0}
#define perfetto_protos_PerfSample_init_zero     {false, 0, false, 0, false, 0, false, 0, false, _perfetto_protos_Profiling_CpuMode_MIN, false, 0, {{NULL}, NULL}, 0, {_perfetto_protos_Profiling_StackUnwindError_MIN}, false, 0, 0, {_perfetto_protos_PerfSample_SampleSkipReason_MIN}, false, perfetto_protos_PerfSample_ProducerEvent_init_zero}
#define perfetto_protos_PerfSample_ProducerEvent_init_zero {0, {_perfetto_protos_PerfSample_ProducerEvent_DataSourceStopReason_MIN}}
#define perfetto_protos_PerfSampleDefaults_init_zero {false, perfetto_protos_PerfEvents_Timebase_init_zero, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SmapsEntry_init_zero     {{{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SmapsPacket_init_zero    {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessStats_init_zero   {{{NULL}, NULL}, false, 0}
#define perfetto_protos_ProcessStats_Thread_init_zero {false, 0}
#define perfetto_protos_ProcessStats_FDInfo_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessStats_Process_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_ProcessTree_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ProcessTree_Thread_init_zero {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_ProcessTree_Process_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_RemoteClockSync_init_zero {{{NULL}, NULL}}
#define perfetto_protos_RemoteClockSync_SyncedClocks_init_zero {false, perfetto_protos_ClockSnapshot_init_zero, false, perfetto_protos_ClockSnapshot_init_zero}
#define perfetto_protos_Atom_init_zero           {0}
#define perfetto_protos_StatsdAtom_init_zero     {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_init_zero       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_MeminfoValue_init_zero {false, _perfetto_protos_MeminfoCounters_MIN, false, 0}
#define perfetto_protos_SysStats_VmstatValue_init_zero {false, _perfetto_protos_VmstatCounters_MIN, false, 0}
#define perfetto_protos_SysStats_CpuTimes_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SysStats_InterruptCount_init_zero {false, 0, false, 0}
#define perfetto_protos_SysStats_DevfreqValue_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SysStats_BuddyInfo_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SysStats_DiskStat_init_zero {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_SysStats_PsiSample_init_zero {false, _perfetto_protos_SysStats_PsiSample_PsiResource_MIN, false, 0}
#define perfetto_protos_SysStats_ThermalZone_init_zero {{{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_SysStats_CpuIdleStateEntry_init_zero {{{NULL}, NULL}, false, 0}
#define perfetto_protos_SysStats_CpuIdleState_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Utsname_init_zero        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_SystemInfo_init_zero     {false, perfetto_protos_Utsname_init_zero, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_CpuInfo_init_zero        {{{NULL}, NULL}}
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0}
#define perfetto_protos_CpuInfo_Cpu_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, 0, {perfetto_protos_CpuInfo_ArmCpuIdentifier_init_zero}, false, 0}
#define perfetto_protos_TestEvent_init_zero      {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, perfetto_protos_TestEvent_TestPayload_init_zero}
#define perfetto_protos_TestEvent_TestPayload_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_TracePacketDefaults_init_zero {false, perfetto_protos_TrackEventDefaults_init_zero, false, perfetto_protos_PerfSampleDefaults_init_zero, false, 0, false, perfetto_protos_V8CodeDefaults_init_zero}
#define perfetto_protos_TraceUuid_init_zero      {false, 0, false, 0}
#define perfetto_protos_ProcessDescriptor_init_zero {false, 0, {{NULL}, NULL}, false, 0, false, _perfetto_protos_ProcessDescriptor_ChromeProcessType_MIN, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrackEventRangeOfInterest_init_zero {false, 0}
#define perfetto_protos_ThreadDescriptor_init_zero {false, 0, false, 0, false, 0, false, _perfetto_protos_ThreadDescriptor_ChromeThreadType_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define perfetto_protos_ChromeProcessDescriptor_init_zero {false, _perfetto_protos_ChromeProcessDescriptor_ProcessType_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0}
#define perfetto_protos_ChromeThreadDescriptor_init_zero {false, _perfetto_protos_ChromeThreadDescriptor_ThreadType_MIN, false, 0}
#define perfetto_protos_CounterDescriptor_init_zero {false, _perfetto_protos_CounterDescriptor_BuiltinCounterType_MIN, {{NULL}, NULL}, false, _perfetto_protos_CounterDescriptor_Unit_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define perfetto_protos_TrackDescriptor_init_zero {false, 0, 0, {{{NULL}, NULL}}, false, perfetto_protos_ProcessDescriptor_init_zero, false, perfetto_protos_ThreadDescriptor_init_zero, false, 0, false, perfetto_protos_ChromeProcessDescriptor_init_zero, false, perfetto_protos_ChromeThreadDescriptor_init_zero, false, perfetto_protos_CounterDescriptor_init_zero, false, 0, false, _perfetto_protos_TrackDescriptor_ChildTracksOrdering_MIN, false, 0}
#define perfetto_protos_TranslationTable_init_zero {0, {perfetto_protos_ChromeHistorgramTranslationTable_init_zero}}
#define perfetto_protos_ChromeHistorgramTranslationTable_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromeUserEventTranslationTable_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_SliceNameTranslationTable_init_zero {{{NULL}, NULL}}
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ProcessTrackNameTranslationTable_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define perfetto_protos_ChromeStudyTranslationTable_init_zero {{{NULL}, NULL}}
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_init_zero {false, 0, {{NULL}, NULL}}
#define perfetto_protos_Trigger_init_zero        {{{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define perfetto_protos_UiState_init_zero        {false, 0, false, 0, false, perfetto_protos_UiState_HighlightProcess_init_zero}
#define perfetto_protos_UiState_HighlightProcess_init_zero {0, {0}}
#define perfetto_protos_TracePacket_init_zero    {0, {perfetto_protos_FtraceEventBundle_init_zero}, 0, {0}, false, 0, 0, {0}, false, perfetto_protos_InternedData_init_zero, false, 0, false, 0, false, 0, false, 0, false, perfetto_protos_TracePacketDefaults_init_zero, false, 0, false, 0, false, 0}
#define perfetto_protos_Trace_init_zero          {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define perfetto_protos_FtraceDescriptor_atrace_categories_tag 1
#define perfetto_protos_FtraceDescriptor_AtraceCategory_name_tag 1
#define perfetto_protos_FtraceDescriptor_AtraceCategory_description_tag 2
#define perfetto_protos_GpuCounterDescriptor_specs_tag 1
#define perfetto_protos_GpuCounterDescriptor_blocks_tag 2
#define perfetto_protos_GpuCounterDescriptor_min_sampling_period_ns_tag 3
#define perfetto_protos_GpuCounterDescriptor_max_sampling_period_ns_tag 4
#define perfetto_protos_GpuCounterDescriptor_supports_instrumented_sampling_tag 5
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_counter_id_tag 1
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_name_tag 2
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_description_tag 3
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_int_peak_value_tag 5
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_double_peak_value_tag 6
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_numerator_units_tag 7
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_denominator_units_tag 8
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_select_by_default_tag 9
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_groups_tag 10
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_block_id_tag 1
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_block_capacity_tag 2
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_name_tag 3
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_description_tag 4
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_counter_ids_tag 5
#define perfetto_protos_TrackEventCategory_name_tag 1
#define perfetto_protos_TrackEventCategory_description_tag 2
#define perfetto_protos_TrackEventCategory_tags_tag 3
#define perfetto_protos_TrackEventDescriptor_available_categories_tag 1
#define perfetto_protos_DataSourceDescriptor_name_tag 1
#define perfetto_protos_DataSourceDescriptor_will_notify_on_stop_tag 2
#define perfetto_protos_DataSourceDescriptor_will_notify_on_start_tag 3
#define perfetto_protos_DataSourceDescriptor_handles_incremental_state_clear_tag 4
#define perfetto_protos_DataSourceDescriptor_gpu_counter_descriptor_tag 5
#define perfetto_protos_DataSourceDescriptor_track_event_descriptor_tag 6
#define perfetto_protos_DataSourceDescriptor_id_tag 7
#define perfetto_protos_DataSourceDescriptor_ftrace_descriptor_tag 8
#define perfetto_protos_DataSourceDescriptor_no_flush_tag 9
#define perfetto_protos_TracingServiceState_producers_tag 1
#define perfetto_protos_TracingServiceState_data_sources_tag 2
#define perfetto_protos_TracingServiceState_num_sessions_tag 3
#define perfetto_protos_TracingServiceState_num_sessions_started_tag 4
#define perfetto_protos_TracingServiceState_tracing_service_version_tag 5
#define perfetto_protos_TracingServiceState_tracing_sessions_tag 6
#define perfetto_protos_TracingServiceState_supports_tracing_sessions_tag 7
#define perfetto_protos_TracingServiceState_Producer_id_tag 1
#define perfetto_protos_TracingServiceState_Producer_name_tag 2
#define perfetto_protos_TracingServiceState_Producer_uid_tag 3
#define perfetto_protos_TracingServiceState_Producer_sdk_version_tag 4
#define perfetto_protos_TracingServiceState_Producer_pid_tag 5
#define perfetto_protos_TracingServiceState_Producer_frozen_tag 6
#define perfetto_protos_TracingServiceState_DataSource_ds_descriptor_tag 1
#define perfetto_protos_TracingServiceState_DataSource_producer_id_tag 2
#define perfetto_protos_TracingServiceState_TracingSession_id_tag 1
#define perfetto_protos_TracingServiceState_TracingSession_consumer_uid_tag 2
#define perfetto_protos_TracingServiceState_TracingSession_state_tag 3
#define perfetto_protos_TracingServiceState_TracingSession_unique_session_name_tag 4
#define perfetto_protos_TracingServiceState_TracingSession_buffer_size_kb_tag 5
#define perfetto_protos_TracingServiceState_TracingSession_duration_ms_tag 6
#define perfetto_protos_TracingServiceState_TracingSession_num_data_sources_tag 7
#define perfetto_protos_TracingServiceState_TracingSession_start_realtime_ns_tag 8
#define perfetto_protos_TracingServiceState_TracingSession_bugreport_score_tag 9
#define perfetto_protos_TracingServiceState_TracingSession_bugreport_filename_tag 10
#define perfetto_protos_TracingServiceState_TracingSession_is_started_tag 11
#define perfetto_protos_AndroidGameInterventionListConfig_package_name_filter_tag 1
#define perfetto_protos_AndroidInputEventConfig_mode_tag 1
#define perfetto_protos_AndroidInputEventConfig_rules_tag 2
#define perfetto_protos_AndroidInputEventConfig_trace_dispatcher_input_events_tag 3
#define perfetto_protos_AndroidInputEventConfig_trace_dispatcher_window_dispatch_tag 4
#define perfetto_protos_AndroidInputEventConfig_TraceRule_trace_level_tag 1
#define perfetto_protos_AndroidInputEventConfig_TraceRule_match_all_packages_tag 2
#define perfetto_protos_AndroidInputEventConfig_TraceRule_match_any_packages_tag 3
#define perfetto_protos_AndroidInputEventConfig_TraceRule_match_secure_tag 4
#define perfetto_protos_AndroidInputEventConfig_TraceRule_match_ime_connection_active_tag 5
#define perfetto_protos_AndroidLogConfig_log_ids_tag 1
#define perfetto_protos_AndroidLogConfig_min_prio_tag 3
#define perfetto_protos_AndroidLogConfig_filter_tags_tag 4
#define perfetto_protos_AndroidPolledStateConfig_poll_ms_tag 1
#define perfetto_protos_AndroidSdkSyspropGuardConfig_surfaceflinger_skia_track_events_tag 1
#define perfetto_protos_AndroidSdkSyspropGuardConfig_hwui_skia_track_events_tag 2
#define perfetto_protos_AndroidSdkSyspropGuardConfig_hwui_package_name_filter_tag 3
#define perfetto_protos_AndroidSystemPropertyConfig_poll_ms_tag 1
#define perfetto_protos_AndroidSystemPropertyConfig_property_name_tag 2
#define perfetto_protos_AppWakelocksConfig_write_delay_ms_tag 1
#define perfetto_protos_AppWakelocksConfig_filter_duration_below_ms_tag 2
#define perfetto_protos_AppWakelocksConfig_drop_owner_pid_tag 3
#define perfetto_protos_KernelWakelocksConfig_poll_ms_tag 1
#define perfetto_protos_NetworkPacketTraceConfig_poll_ms_tag 1
#define perfetto_protos_NetworkPacketTraceConfig_aggregation_threshold_tag 2
#define perfetto_protos_NetworkPacketTraceConfig_intern_limit_tag 3
#define perfetto_protos_NetworkPacketTraceConfig_drop_local_port_tag 4
#define perfetto_protos_NetworkPacketTraceConfig_drop_remote_port_tag 5
#define perfetto_protos_NetworkPacketTraceConfig_drop_tcp_flags_tag 6
#define perfetto_protos_PackagesListConfig_package_name_filter_tag 1
#define perfetto_protos_PixelModemConfig_event_group_tag 1
#define perfetto_protos_PixelModemConfig_pigweed_hash_allow_list_tag 2
#define perfetto_protos_PixelModemConfig_pigweed_hash_deny_list_tag 3
#define perfetto_protos_ProtoLogConfig_group_overrides_tag 1
#define perfetto_protos_ProtoLogConfig_tracing_mode_tag 2
#define perfetto_protos_ProtoLogConfig_default_log_from_level_tag 3
#define perfetto_protos_ProtoLogGroup_group_name_tag 1
#define perfetto_protos_ProtoLogGroup_log_from_tag 2
#define perfetto_protos_ProtoLogGroup_collect_stacktrace_tag 3
#define perfetto_protos_SurfaceFlingerLayersConfig_mode_tag 1
#define perfetto_protos_SurfaceFlingerLayersConfig_trace_flags_tag 2
#define perfetto_protos_SurfaceFlingerTransactionsConfig_mode_tag 1
#define perfetto_protos_WindowManagerConfig_log_frequency_tag 1
#define perfetto_protos_WindowManagerConfig_log_level_tag 2
#define perfetto_protos_ChromeConfig_trace_config_tag 1
#define perfetto_protos_ChromeConfig_privacy_filtering_enabled_tag 2
#define perfetto_protos_ChromeConfig_convert_to_legacy_json_tag 3
#define perfetto_protos_ChromeConfig_client_priority_tag 4
#define perfetto_protos_ChromeConfig_json_agent_label_filter_tag 5
#define perfetto_protos_ChromiumHistogramSamplesConfig_histograms_tag 1
#define perfetto_protos_ChromiumHistogramSamplesConfig_filter_histogram_names_tag 2
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_histogram_name_tag 1
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_min_value_tag 2
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_max_value_tag 3
#define perfetto_protos_ChromiumSystemMetricsConfig_sampling_interval_ms_tag 1
#define perfetto_protos_V8Config_log_script_sources_tag 1
#define perfetto_protos_V8Config_log_instructions_tag 2
#define perfetto_protos_EtwConfig_kernel_flags_tag 1
#define perfetto_protos_FtraceConfig_KprobeEvent_probe_tag 1
#define perfetto_protos_FtraceConfig_KprobeEvent_type_tag 2
#define perfetto_protos_FtraceConfig_CompactSchedConfig_enabled_tag 1
#define perfetto_protos_FtraceConfig_PrintFilter_rules_tag 1
#define perfetto_protos_FtraceConfig_ftrace_events_tag 1
#define perfetto_protos_FtraceConfig_atrace_categories_tag 2
#define perfetto_protos_FtraceConfig_atrace_apps_tag 3
#define perfetto_protos_FtraceConfig_buffer_size_kb_tag 10
#define perfetto_protos_FtraceConfig_drain_period_ms_tag 11
#define perfetto_protos_FtraceConfig_compact_sched_tag 12
#define perfetto_protos_FtraceConfig_symbolize_ksyms_tag 13
#define perfetto_protos_FtraceConfig_initialize_ksyms_synchronously_for_testing_tag 14
#define perfetto_protos_FtraceConfig_throttle_rss_stat_tag 15
#define perfetto_protos_FtraceConfig_disable_generic_events_tag 16
#define perfetto_protos_FtraceConfig_ksyms_mem_policy_tag 17
#define perfetto_protos_FtraceConfig_syscall_events_tag 18
#define perfetto_protos_FtraceConfig_enable_function_graph_tag 19
#define perfetto_protos_FtraceConfig_function_filters_tag 20
#define perfetto_protos_FtraceConfig_function_graph_roots_tag 21
#define perfetto_protos_FtraceConfig_print_filter_tag 22
#define perfetto_protos_FtraceConfig_preserve_ftrace_buffer_tag 23
#define perfetto_protos_FtraceConfig_use_monotonic_raw_clock_tag 24
#define perfetto_protos_FtraceConfig_instance_name_tag 25
#define perfetto_protos_FtraceConfig_buffer_size_lower_bound_tag 27
#define perfetto_protos_FtraceConfig_atrace_categories_prefer_sdk_tag 28
#define perfetto_protos_FtraceConfig_drain_buffer_percent_tag 29
#define perfetto_protos_FtraceConfig_kprobe_events_tag 30
#define perfetto_protos_FtraceConfig_debug_ftrace_abi_tag 31
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_type_tag 1
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_prefix_tag 2
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_prefix_tag 1
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_atrace_msg_tag 3
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_allow_tag 2
#define perfetto_protos_GpuCounterConfig_counter_period_ns_tag 1
#define perfetto_protos_GpuCounterConfig_counter_ids_tag 2
#define perfetto_protos_GpuCounterConfig_instrumented_sampling_tag 3
#define perfetto_protos_GpuCounterConfig_fix_gpu_clock_tag 4
#define perfetto_protos_GpuRenderStagesConfig_full_loadstore_tag 1
#define perfetto_protos_GpuRenderStagesConfig_low_overhead_tag 2
#define perfetto_protos_GpuRenderStagesConfig_trace_metrics_tag 3
#define perfetto_protos_VulkanMemoryConfig_track_driver_memory_usage_tag 1
#define perfetto_protos_VulkanMemoryConfig_track_device_memory_usage_tag 2
#define perfetto_protos_InodeFileConfig_scan_interval_ms_tag 1
#define perfetto_protos_InodeFileConfig_scan_delay_ms_tag 2
#define perfetto_protos_InodeFileConfig_scan_batch_size_tag 3
#define perfetto_protos_InodeFileConfig_do_not_scan_tag 4
#define perfetto_protos_InodeFileConfig_scan_mount_points_tag 5
#define perfetto_protos_InodeFileConfig_mount_point_mapping_tag 6
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_mountpoint_tag 1
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_scan_roots_tag 2
#define perfetto_protos_ConsoleConfig_output_tag 1
#define perfetto_protos_ConsoleConfig_enable_colors_tag 2
#define perfetto_protos_InterceptorConfig_name_tag 1
#define perfetto_protos_InterceptorConfig_console_config_tag 100
#define perfetto_protos_AndroidPowerConfig_battery_poll_ms_tag 1
#define perfetto_protos_AndroidPowerConfig_battery_counters_tag 2
#define perfetto_protos_AndroidPowerConfig_collect_power_rails_tag 3
#define perfetto_protos_AndroidPowerConfig_collect_energy_estimation_breakdown_tag 4
#define perfetto_protos_AndroidPowerConfig_collect_entity_state_residency_tag 5
#define perfetto_protos_ProcessStatsConfig_quirks_tag 1
#define perfetto_protos_ProcessStatsConfig_scan_all_processes_on_start_tag 2
#define perfetto_protos_ProcessStatsConfig_record_thread_names_tag 3
#define perfetto_protos_ProcessStatsConfig_proc_stats_poll_ms_tag 4
#define perfetto_protos_ProcessStatsConfig_proc_stats_cache_ttl_ms_tag 6
#define perfetto_protos_ProcessStatsConfig_resolve_process_fds_tag 9
#define perfetto_protos_ProcessStatsConfig_scan_smaps_rollup_tag 10
#define perfetto_protos_ProcessStatsConfig_record_process_age_tag 11
#define perfetto_protos_ProcessStatsConfig_record_process_runtime_tag 12
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_dump_phase_ms_tag 5
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_dump_interval_ms_tag 6
#define perfetto_protos_HeapprofdConfig_sampling_interval_bytes_tag 1
#define perfetto_protos_HeapprofdConfig_process_cmdline_tag 2
#define perfetto_protos_HeapprofdConfig_pid_tag  4
#define perfetto_protos_HeapprofdConfig_all_tag  5
#define perfetto_protos_HeapprofdConfig_continuous_dump_config_tag 6
#define perfetto_protos_HeapprofdConfig_skip_symbol_prefix_tag 7
#define perfetto_protos_HeapprofdConfig_shmem_size_bytes_tag 8
#define perfetto_protos_HeapprofdConfig_block_client_tag 9
#define perfetto_protos_HeapprofdConfig_no_startup_tag 10
#define perfetto_protos_HeapprofdConfig_no_running_tag 11
#define perfetto_protos_HeapprofdConfig_dump_at_max_tag 13
#define perfetto_protos_HeapprofdConfig_block_client_timeout_us_tag 14
#define perfetto_protos_HeapprofdConfig_min_anonymous_memory_kb_tag 15
#define perfetto_protos_HeapprofdConfig_max_heapprofd_memory_kb_tag 16
#define perfetto_protos_HeapprofdConfig_max_heapprofd_cpu_secs_tag 17
#define perfetto_protos_HeapprofdConfig_disable_fork_teardown_tag 18
#define perfetto_protos_HeapprofdConfig_disable_vfork_detection_tag 19
#define perfetto_protos_HeapprofdConfig_heaps_tag 20
#define perfetto_protos_HeapprofdConfig_all_heaps_tag 21
#define perfetto_protos_HeapprofdConfig_heap_sampling_intervals_tag 22
#define perfetto_protos_HeapprofdConfig_stream_allocations_tag 23
#define perfetto_protos_HeapprofdConfig_adaptive_sampling_shmem_threshold_tag 24
#define perfetto_protos_HeapprofdConfig_adaptive_sampling_max_sampling_interval_bytes_tag 25
#define perfetto_protos_HeapprofdConfig_target_installed_by_tag 26
#define perfetto_protos_HeapprofdConfig_exclude_heaps_tag 27
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_dump_phase_ms_tag 1
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_dump_interval_ms_tag 2
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_scan_pids_only_on_start_tag 3
#define perfetto_protos_JavaHprofConfig_process_cmdline_tag 1
#define perfetto_protos_JavaHprofConfig_pid_tag  2
#define perfetto_protos_JavaHprofConfig_continuous_dump_config_tag 3
#define perfetto_protos_JavaHprofConfig_min_anonymous_memory_kb_tag 4
#define perfetto_protos_JavaHprofConfig_dump_smaps_tag 5
#define perfetto_protos_JavaHprofConfig_ignored_types_tag 6
#define perfetto_protos_JavaHprofConfig_target_installed_by_tag 7
#define perfetto_protos_PerfEvents_Tracepoint_name_tag 1
#define perfetto_protos_PerfEvents_Tracepoint_filter_tag 2
#define perfetto_protos_PerfEvents_RawEvent_type_tag 1
#define perfetto_protos_PerfEvents_RawEvent_config_tag 2
#define perfetto_protos_PerfEvents_RawEvent_config1_tag 3
#define perfetto_protos_PerfEvents_RawEvent_config2_tag 4
#define perfetto_protos_PerfEvents_Timebase_period_tag 1
#define perfetto_protos_PerfEvents_Timebase_frequency_tag 2
#define perfetto_protos_PerfEvents_Timebase_poll_period_ms_tag 6
#define perfetto_protos_PerfEvents_Timebase_tracepoint_tag 3
#define perfetto_protos_PerfEvents_Timebase_counter_tag 4
#define perfetto_protos_PerfEvents_Timebase_raw_event_tag 5
#define perfetto_protos_PerfEvents_Timebase_name_tag 10
#define perfetto_protos_PerfEvents_Timebase_timestamp_clock_tag 11
#define perfetto_protos_FollowerEvent_counter_tag 1
#define perfetto_protos_FollowerEvent_tracepoint_tag 2
#define perfetto_protos_FollowerEvent_raw_event_tag 3
#define perfetto_protos_FollowerEvent_name_tag   4
#define perfetto_protos_PerfEventConfig_Scope_target_pid_tag 1
#define perfetto_protos_PerfEventConfig_Scope_target_cmdline_tag 2
#define perfetto_protos_PerfEventConfig_Scope_exclude_pid_tag 3
#define perfetto_protos_PerfEventConfig_Scope_exclude_cmdline_tag 4
#define perfetto_protos_PerfEventConfig_Scope_additional_cmdline_count_tag 5
#define perfetto_protos_PerfEventConfig_Scope_process_shard_count_tag 6
#define perfetto_protos_PerfEventConfig_CallstackSampling_scope_tag 1
#define perfetto_protos_PerfEventConfig_CallstackSampling_kernel_frames_tag 2
#define perfetto_protos_PerfEventConfig_CallstackSampling_user_frames_tag 3
#define perfetto_protos_PerfEventConfig_all_cpus_tag 1
#define perfetto_protos_PerfEventConfig_sampling_frequency_tag 2
#define perfetto_protos_PerfEventConfig_ring_buffer_pages_tag 3
#define perfetto_protos_PerfEventConfig_target_pid_tag 4
#define perfetto_protos_PerfEventConfig_target_cmdline_tag 5
#define perfetto_protos_PerfEventConfig_exclude_pid_tag 6
#define perfetto_protos_PerfEventConfig_exclude_cmdline_tag 7
#define perfetto_protos_PerfEventConfig_ring_buffer_read_period_ms_tag 8
#define perfetto_protos_PerfEventConfig_remote_descriptor_timeout_ms_tag 9
#define perfetto_protos_PerfEventConfig_unwind_state_clear_period_ms_tag 10
#define perfetto_protos_PerfEventConfig_additional_cmdline_count_tag 11
#define perfetto_protos_PerfEventConfig_kernel_frames_tag 12
#define perfetto_protos_PerfEventConfig_max_daemon_memory_kb_tag 13
#define perfetto_protos_PerfEventConfig_timebase_tag 15
#define perfetto_protos_PerfEventConfig_callstack_sampling_tag 16
#define perfetto_protos_PerfEventConfig_max_enqueued_footprint_kb_tag 17
#define perfetto_protos_PerfEventConfig_target_installed_by_tag 18
#define perfetto_protos_PerfEventConfig_followers_tag 19
#define perfetto_protos_PerfEventConfig_target_cpu_tag 20
#define perfetto_protos_StatsdTracingConfig_push_atom_id_tag 1
#define perfetto_protos_StatsdTracingConfig_raw_push_atom_id_tag 2
#define perfetto_protos_StatsdTracingConfig_pull_config_tag 3
#define perfetto_protos_StatsdPullAtomConfig_pull_atom_id_tag 1
#define perfetto_protos_StatsdPullAtomConfig_raw_pull_atom_id_tag 2
#define perfetto_protos_StatsdPullAtomConfig_pull_frequency_ms_tag 3
#define perfetto_protos_StatsdPullAtomConfig_packages_tag 4
#define perfetto_protos_SysStatsConfig_meminfo_period_ms_tag 1
#define perfetto_protos_SysStatsConfig_meminfo_counters_tag 2
#define perfetto_protos_SysStatsConfig_vmstat_period_ms_tag 3
#define perfetto_protos_SysStatsConfig_vmstat_counters_tag 4
#define perfetto_protos_SysStatsConfig_stat_period_ms_tag 5
#define perfetto_protos_SysStatsConfig_stat_counters_tag 6
#define perfetto_protos_SysStatsConfig_devfreq_period_ms_tag 7
#define perfetto_protos_SysStatsConfig_cpufreq_period_ms_tag 8
#define perfetto_protos_SysStatsConfig_buddyinfo_period_ms_tag 9
#define perfetto_protos_SysStatsConfig_diskstat_period_ms_tag 10
#define perfetto_protos_SysStatsConfig_psi_period_ms_tag 11
#define perfetto_protos_SysStatsConfig_thermal_period_ms_tag 12
#define perfetto_protos_SysStatsConfig_cpuidle_period_ms_tag 13
#define perfetto_protos_SysStatsConfig_gpufreq_period_ms_tag 14
#define perfetto_protos_TestConfig_DummyFields_field_uint32_tag 1
#define perfetto_protos_TestConfig_DummyFields_field_int32_tag 2
#define perfetto_protos_TestConfig_DummyFields_field_uint64_tag 3
#define perfetto_protos_TestConfig_DummyFields_field_int64_tag 4
#define perfetto_protos_TestConfig_DummyFields_field_fixed64_tag 5
#define perfetto_protos_TestConfig_DummyFields_field_sfixed64_tag 6
#define perfetto_protos_TestConfig_DummyFields_field_fixed32_tag 7
#define perfetto_protos_TestConfig_DummyFields_field_sfixed32_tag 8
#define perfetto_protos_TestConfig_DummyFields_field_double_tag 9
#define perfetto_protos_TestConfig_DummyFields_field_float_tag 10
#define perfetto_protos_TestConfig_DummyFields_field_sint64_tag 11
#define perfetto_protos_TestConfig_DummyFields_field_sint32_tag 12
#define perfetto_protos_TestConfig_DummyFields_field_string_tag 13
#define perfetto_protos_TestConfig_DummyFields_field_bytes_tag 14
#define perfetto_protos_TestConfig_message_count_tag 1
#define perfetto_protos_TestConfig_max_messages_per_second_tag 2
#define perfetto_protos_TestConfig_seed_tag      3
#define perfetto_protos_TestConfig_message_size_tag 4
#define perfetto_protos_TestConfig_send_batch_on_register_tag 5
#define perfetto_protos_TestConfig_dummy_fields_tag 6
#define perfetto_protos_TrackEventConfig_disabled_categories_tag 1
#define perfetto_protos_TrackEventConfig_enabled_categories_tag 2
#define perfetto_protos_TrackEventConfig_disabled_tags_tag 3
#define perfetto_protos_TrackEventConfig_enabled_tags_tag 4
#define perfetto_protos_TrackEventConfig_disable_incremental_timestamps_tag 5
#define perfetto_protos_TrackEventConfig_timestamp_unit_multiplier_tag 6
#define perfetto_protos_TrackEventConfig_filter_debug_annotations_tag 7
#define perfetto_protos_TrackEventConfig_enable_thread_time_sampling_tag 8
#define perfetto_protos_TrackEventConfig_filter_dynamic_event_names_tag 9
#define perfetto_protos_DataSourceConfig_name_tag 1
#define perfetto_protos_DataSourceConfig_target_buffer_tag 2
#define perfetto_protos_DataSourceConfig_trace_duration_ms_tag 3
#define perfetto_protos_DataSourceConfig_tracing_session_id_tag 4
#define perfetto_protos_DataSourceConfig_enable_extra_guardrails_tag 6
#define perfetto_protos_DataSourceConfig_stop_timeout_ms_tag 7
#define perfetto_protos_DataSourceConfig_session_initiator_tag 8
#define perfetto_protos_DataSourceConfig_ftrace_config_tag 100
#define perfetto_protos_DataSourceConfig_chrome_config_tag 101
#define perfetto_protos_DataSourceConfig_inode_file_config_tag 102
#define perfetto_protos_DataSourceConfig_process_stats_config_tag 103
#define perfetto_protos_DataSourceConfig_sys_stats_config_tag 104
#define perfetto_protos_DataSourceConfig_heapprofd_config_tag 105
#define perfetto_protos_DataSourceConfig_android_power_config_tag 106
#define perfetto_protos_DataSourceConfig_android_log_config_tag 107
#define perfetto_protos_DataSourceConfig_gpu_counter_config_tag 108
#define perfetto_protos_DataSourceConfig_packages_list_config_tag 109
#define perfetto_protos_DataSourceConfig_java_hprof_config_tag 110
#define perfetto_protos_DataSourceConfig_perf_event_config_tag 111
#define perfetto_protos_DataSourceConfig_vulkan_memory_config_tag 112
#define perfetto_protos_DataSourceConfig_track_event_config_tag 113
#define perfetto_protos_DataSourceConfig_android_polled_state_config_tag 114
#define perfetto_protos_DataSourceConfig_interceptor_config_tag 115
#define perfetto_protos_DataSourceConfig_android_game_intervention_list_config_tag 116
#define perfetto_protos_DataSourceConfig_statsd_tracing_config_tag 117
#define perfetto_protos_DataSourceConfig_android_system_property_config_tag 118
#define perfetto_protos_DataSourceConfig_system_info_config_tag 119
#define perfetto_protos_DataSourceConfig_network_packet_trace_config_tag 120
#define perfetto_protos_DataSourceConfig_surfaceflinger_layers_config_tag 121
#define perfetto_protos_DataSourceConfig_prefer_suspend_clock_for_duration_tag 122
#define perfetto_protos_DataSourceConfig_surfaceflinger_transactions_config_tag 123
#define perfetto_protos_DataSourceConfig_android_sdk_sysprop_guard_config_tag 124
#define perfetto_protos_DataSourceConfig_etw_config_tag 125
#define perfetto_protos_DataSourceConfig_protolog_config_tag 126
#define perfetto_protos_DataSourceConfig_v8_config_tag 127
#define perfetto_protos_DataSourceConfig_android_input_event_config_tag 128
#define perfetto_protos_DataSourceConfig_pixel_modem_config_tag 129
#define perfetto_protos_DataSourceConfig_windowmanager_config_tag 130
#define perfetto_protos_DataSourceConfig_chromium_system_metrics_tag 131
#define perfetto_protos_DataSourceConfig_kernel_wakelocks_config_tag 132
#define perfetto_protos_DataSourceConfig_gpu_renderstages_config_tag 133
#define perfetto_protos_DataSourceConfig_chromium_histogram_samples_tag 134
#define perfetto_protos_DataSourceConfig_app_wakelocks_config_tag 135
#define perfetto_protos_DataSourceConfig_legacy_config_tag 1000
#define perfetto_protos_DataSourceConfig_for_testing_tag 1001
#define perfetto_protos_TraceConfig_BufferConfig_size_kb_tag 1
#define perfetto_protos_TraceConfig_BufferConfig_fill_policy_tag 4
#define perfetto_protos_TraceConfig_BufferConfig_transfer_on_clone_tag 5
#define perfetto_protos_TraceConfig_BufferConfig_clear_before_clone_tag 6
#define perfetto_protos_TraceConfig_DataSource_config_tag 1
#define perfetto_protos_TraceConfig_DataSource_producer_name_filter_tag 2
#define perfetto_protos_TraceConfig_DataSource_producer_name_regex_filter_tag 3
#define perfetto_protos_TraceConfig_BuiltinDataSource_disable_clock_snapshotting_tag 1
#define perfetto_protos_TraceConfig_BuiltinDataSource_disable_trace_config_tag 2
#define perfetto_protos_TraceConfig_BuiltinDataSource_disable_system_info_tag 3
#define perfetto_protos_TraceConfig_BuiltinDataSource_disable_service_events_tag 4
#define perfetto_protos_TraceConfig_BuiltinDataSource_primary_trace_clock_tag 5
#define perfetto_protos_TraceConfig_BuiltinDataSource_snapshot_interval_ms_tag 6
#define perfetto_protos_TraceConfig_BuiltinDataSource_prefer_suspend_clock_for_snapshot_tag 7
#define perfetto_protos_TraceConfig_BuiltinDataSource_disable_chunk_usage_histograms_tag 8
#define perfetto_protos_TraceConfig_ProducerConfig_producer_name_tag 1
#define perfetto_protos_TraceConfig_ProducerConfig_shm_size_kb_tag 2
#define perfetto_protos_TraceConfig_ProducerConfig_page_size_kb_tag 3
#define perfetto_protos_TraceConfig_StatsdMetadata_triggering_alert_id_tag 1
#define perfetto_protos_TraceConfig_StatsdMetadata_triggering_config_uid_tag 2
#define perfetto_protos_TraceConfig_StatsdMetadata_triggering_config_id_tag 3
#define perfetto_protos_TraceConfig_StatsdMetadata_triggering_subscription_id_tag 4
#define perfetto_protos_TraceConfig_GuardrailOverrides_max_upload_per_day_bytes_tag 1
#define perfetto_protos_TraceConfig_GuardrailOverrides_max_tracing_buffer_size_kb_tag 2
#define perfetto_protos_TraceConfig_TriggerConfig_trigger_mode_tag 1
#define perfetto_protos_TraceConfig_TriggerConfig_triggers_tag 2
#define perfetto_protos_TraceConfig_TriggerConfig_trigger_timeout_ms_tag 3
#define perfetto_protos_TraceConfig_TriggerConfig_use_clone_snapshot_if_available_tag 5
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_name_tag 1
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_producer_name_regex_tag 2
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_stop_delay_ms_tag 3
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_max_per_24_h_tag 4
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_skip_probability_tag 5
#define perfetto_protos_TraceConfig_IncrementalStateConfig_clear_period_ms_tag 1
#define perfetto_protos_TraceConfig_IncidentReportConfig_destination_package_tag 1
#define perfetto_protos_TraceConfig_IncidentReportConfig_destination_class_tag 2
#define perfetto_protos_TraceConfig_IncidentReportConfig_privacy_level_tag 3
#define perfetto_protos_TraceConfig_IncidentReportConfig_skip_dropbox_tag 4
#define perfetto_protos_TraceConfig_IncidentReportConfig_skip_incidentd_tag 5
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_policy_tag 1
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_regex_pattern_tag 2
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_atrace_payload_starts_with_tag 3
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_rules_tag 1
#define perfetto_protos_TraceConfig_TraceFilter_bytecode_tag 1
#define perfetto_protos_TraceConfig_TraceFilter_bytecode_v2_tag 2
#define perfetto_protos_TraceConfig_TraceFilter_string_filter_chain_tag 3
#define perfetto_protos_TraceConfig_AndroidReportConfig_reporter_service_package_tag 1
#define perfetto_protos_TraceConfig_AndroidReportConfig_reporter_service_class_tag 2
#define perfetto_protos_TraceConfig_AndroidReportConfig_skip_report_tag 3
#define perfetto_protos_TraceConfig_AndroidReportConfig_use_pipe_in_framework_for_testing_tag 4
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_min_delay_ms_tag 1
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_max_delay_ms_tag 2
#define perfetto_protos_TraceConfig_buffers_tag  1
#define perfetto_protos_TraceConfig_data_sources_tag 2
#define perfetto_protos_TraceConfig_duration_ms_tag 3
#define perfetto_protos_TraceConfig_enable_extra_guardrails_tag 4
#define perfetto_protos_TraceConfig_lockdown_mode_tag 5
#define perfetto_protos_TraceConfig_producers_tag 6
#define perfetto_protos_TraceConfig_statsd_metadata_tag 7
#define perfetto_protos_TraceConfig_write_into_file_tag 8
#define perfetto_protos_TraceConfig_file_write_period_ms_tag 9
#define perfetto_protos_TraceConfig_max_file_size_bytes_tag 10
#define perfetto_protos_TraceConfig_guardrail_overrides_tag 11
#define perfetto_protos_TraceConfig_deferred_start_tag 12
#define perfetto_protos_TraceConfig_flush_period_ms_tag 13
#define perfetto_protos_TraceConfig_flush_timeout_ms_tag 14
#define perfetto_protos_TraceConfig_notify_traceur_tag 16
#define perfetto_protos_TraceConfig_trigger_config_tag 17
#define perfetto_protos_TraceConfig_activate_triggers_tag 18
#define perfetto_protos_TraceConfig_allow_user_build_tracing_tag 19
#define perfetto_protos_TraceConfig_builtin_data_sources_tag 20
#define perfetto_protos_TraceConfig_incremental_state_config_tag 21
#define perfetto_protos_TraceConfig_unique_session_name_tag 22
#define perfetto_protos_TraceConfig_data_source_stop_timeout_ms_tag 23
#define perfetto_protos_TraceConfig_compression_type_tag 24
#define perfetto_protos_TraceConfig_incident_report_config_tag 25
#define perfetto_protos_TraceConfig_trace_uuid_msb_tag 27
#define perfetto_protos_TraceConfig_trace_uuid_lsb_tag 28
#define perfetto_protos_TraceConfig_output_path_tag 29
#define perfetto_protos_TraceConfig_bugreport_score_tag 30
#define perfetto_protos_TraceConfig_statsd_logging_tag 31
#define perfetto_protos_TraceConfig_trace_filter_tag 33
#define perfetto_protos_TraceConfig_android_report_config_tag 34
#define perfetto_protos_TraceConfig_cmd_trace_start_delay_tag 35
#define perfetto_protos_TraceConfig_prefer_suspend_clock_for_duration_tag 36
#define perfetto_protos_TraceConfig_bugreport_filename_tag 38
#define perfetto_protos_TraceConfig_session_semaphores_tag 39
#define perfetto_protos_TraceConfig_SessionSemaphore_name_tag 1
#define perfetto_protos_TraceConfig_SessionSemaphore_max_other_session_count_tag 2
#define perfetto_protos_TraceStats_BufferStats_bytes_written_tag 1
#define perfetto_protos_TraceStats_BufferStats_chunks_written_tag 2
#define perfetto_protos_TraceStats_BufferStats_chunks_overwritten_tag 3
#define perfetto_protos_TraceStats_BufferStats_write_wrap_count_tag 4
#define perfetto_protos_TraceStats_BufferStats_patches_succeeded_tag 5
#define perfetto_protos_TraceStats_BufferStats_patches_failed_tag 6
#define perfetto_protos_TraceStats_BufferStats_readaheads_succeeded_tag 7
#define perfetto_protos_TraceStats_BufferStats_readaheads_failed_tag 8
#define perfetto_protos_TraceStats_BufferStats_abi_violations_tag 9
#define perfetto_protos_TraceStats_BufferStats_chunks_rewritten_tag 10
#define perfetto_protos_TraceStats_BufferStats_chunks_committed_out_of_order_tag 11
#define perfetto_protos_TraceStats_BufferStats_buffer_size_tag 12
#define perfetto_protos_TraceStats_BufferStats_bytes_overwritten_tag 13
#define perfetto_protos_TraceStats_BufferStats_bytes_read_tag 14
#define perfetto_protos_TraceStats_BufferStats_padding_bytes_written_tag 15
#define perfetto_protos_TraceStats_BufferStats_padding_bytes_cleared_tag 16
#define perfetto_protos_TraceStats_BufferStats_chunks_read_tag 17
#define perfetto_protos_TraceStats_BufferStats_chunks_discarded_tag 18
#define perfetto_protos_TraceStats_BufferStats_trace_writer_packet_loss_tag 19
#define perfetto_protos_TraceStats_WriterStats_sequence_id_tag 1
#define perfetto_protos_TraceStats_WriterStats_chunk_payload_histogram_counts_tag 2
#define perfetto_protos_TraceStats_WriterStats_chunk_payload_histogram_sum_tag 3
#define perfetto_protos_TraceStats_WriterStats_buffer_tag 4
#define perfetto_protos_TraceStats_FilterStats_input_packets_tag 1
#define perfetto_protos_TraceStats_FilterStats_input_bytes_tag 2
#define perfetto_protos_TraceStats_FilterStats_output_bytes_tag 3
#define perfetto_protos_TraceStats_FilterStats_errors_tag 4
#define perfetto_protos_TraceStats_FilterStats_time_taken_ns_tag 5
#define perfetto_protos_TraceStats_FilterStats_bytes_discarded_per_buffer_tag 20
#define perfetto_protos_TraceStats_buffer_stats_tag 1
#define perfetto_protos_TraceStats_producers_connected_tag 2
#define perfetto_protos_TraceStats_producers_seen_tag 3
#define perfetto_protos_TraceStats_data_sources_registered_tag 4
#define perfetto_protos_TraceStats_data_sources_seen_tag 5
#define perfetto_protos_TraceStats_tracing_sessions_tag 6
#define perfetto_protos_TraceStats_total_buffers_tag 7
#define perfetto_protos_TraceStats_chunks_discarded_tag 8
#define perfetto_protos_TraceStats_patches_discarded_tag 9
#define perfetto_protos_TraceStats_invalid_packets_tag 10
#define perfetto_protos_TraceStats_filter_stats_tag 11
#define perfetto_protos_TraceStats_flushes_requested_tag 12
#define perfetto_protos_TraceStats_flushes_succeeded_tag 13
#define perfetto_protos_TraceStats_flushes_failed_tag 14
#define perfetto_protos_TraceStats_final_flush_outcome_tag 15
#define perfetto_protos_TraceStats_chunk_payload_histogram_def_tag 17
#define perfetto_protos_TraceStats_writer_stats_tag 18
#define perfetto_protos_AndroidGameInterventionList_game_packages_tag 1
#define perfetto_protos_AndroidGameInterventionList_parse_error_tag 2
#define perfetto_protos_AndroidGameInterventionList_read_error_tag 3
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_mode_tag 1
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_use_angle_tag 2
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_resolution_downscale_tag 3
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_fps_tag 4
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_name_tag 1
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_uid_tag 2
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_current_mode_tag 3
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_game_mode_info_tag 4
#define perfetto_protos_AndroidLogPacket_LogEvent_log_id_tag 1
#define perfetto_protos_AndroidLogPacket_LogEvent_pid_tag 2
#define perfetto_protos_AndroidLogPacket_LogEvent_tid_tag 3
#define perfetto_protos_AndroidLogPacket_LogEvent_uid_tag 4
#define perfetto_protos_AndroidLogPacket_LogEvent_timestamp_tag 5
#define perfetto_protos_AndroidLogPacket_LogEvent_tag_tag 6
#define perfetto_protos_AndroidLogPacket_LogEvent_prio_tag 7
#define perfetto_protos_AndroidLogPacket_LogEvent_message_tag 8
#define perfetto_protos_AndroidLogPacket_LogEvent_args_tag 9
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_name_tag 1
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_int_value_tag 2
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_float_value_tag 3
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_string_value_tag 4
#define perfetto_protos_AndroidLogPacket_Stats_num_total_tag 1
#define perfetto_protos_AndroidLogPacket_Stats_num_failed_tag 2
#define perfetto_protos_AndroidLogPacket_Stats_num_skipped_tag 3
#define perfetto_protos_AndroidLogPacket_events_tag 1
#define perfetto_protos_AndroidLogPacket_stats_tag 2
#define perfetto_protos_AndroidSystemProperty_values_tag 1
#define perfetto_protos_AndroidSystemProperty_PropertyValue_name_tag 1
#define perfetto_protos_AndroidSystemProperty_PropertyValue_value_tag 2
#define perfetto_protos_AppWakelockInfo_iid_tag  1
#define perfetto_protos_AppWakelockInfo_tag_tag  2
#define perfetto_protos_AppWakelockInfo_flags_tag 3
#define perfetto_protos_AppWakelockInfo_owner_pid_tag 4
#define perfetto_protos_AppWakelockInfo_owner_uid_tag 5
#define perfetto_protos_AppWakelockInfo_work_uid_tag 6
#define perfetto_protos_AppWakelockBundle_intern_id_tag 1
#define perfetto_protos_AppWakelockBundle_encoded_ts_tag 2
#define perfetto_protos_AppWakelockBundle_info_tag 3
#define perfetto_protos_AppWakelockBundle_acquired_tag 4
#define perfetto_protos_BluetoothTraceEvent_packet_type_tag 1
#define perfetto_protos_BluetoothTraceEvent_count_tag 2
#define perfetto_protos_BluetoothTraceEvent_length_tag 3
#define perfetto_protos_BluetoothTraceEvent_duration_tag 4
#define perfetto_protos_BluetoothTraceEvent_op_code_tag 5
#define perfetto_protos_BluetoothTraceEvent_event_code_tag 6
#define perfetto_protos_BluetoothTraceEvent_subevent_code_tag 7
#define perfetto_protos_BluetoothTraceEvent_connection_handle_tag 8
#define perfetto_protos_AndroidCameraFrameEvent_session_id_tag 1
#define perfetto_protos_AndroidCameraFrameEvent_camera_id_tag 2
#define perfetto_protos_AndroidCameraFrameEvent_frame_number_tag 3
#define perfetto_protos_AndroidCameraFrameEvent_request_id_tag 4
#define perfetto_protos_AndroidCameraFrameEvent_request_received_ns_tag 5
#define perfetto_protos_AndroidCameraFrameEvent_request_processing_started_ns_tag 6
#define perfetto_protos_AndroidCameraFrameEvent_start_of_exposure_ns_tag 7
#define perfetto_protos_AndroidCameraFrameEvent_start_of_frame_ns_tag 8
#define perfetto_protos_AndroidCameraFrameEvent_responses_all_sent_ns_tag 9
#define perfetto_protos_AndroidCameraFrameEvent_capture_result_status_tag 10
#define perfetto_protos_AndroidCameraFrameEvent_skipped_sensor_frames_tag 11
#define perfetto_protos_AndroidCameraFrameEvent_capture_intent_tag 12
#define perfetto_protos_AndroidCameraFrameEvent_num_streams_tag 13
#define perfetto_protos_AndroidCameraFrameEvent_node_processing_details_tag 14
#define perfetto_protos_AndroidCameraFrameEvent_vendor_data_version_tag 15
#define perfetto_protos_AndroidCameraFrameEvent_vendor_data_tag 16
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_node_id_tag 1
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_start_processing_ns_tag 2
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_end_processing_ns_tag 3
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_scheduling_latency_ns_tag 4
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_nodes_tag 1
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_edges_tag 2
#define perfetto_protos_AndroidCameraSessionStats_session_id_tag 1
#define perfetto_protos_AndroidCameraSessionStats_graph_tag 2
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_node_id_tag 1
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_input_ids_tag 2
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_output_ids_tag 3
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_vendor_data_version_tag 4
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_vendor_data_tag 5
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_output_node_id_tag 1
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_output_id_tag 2
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_input_node_id_tag 3
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_input_id_tag 4
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_vendor_data_version_tag 5
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_vendor_data_tag 6
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_cookie_tag 1
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_token_tag 2
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_display_frame_token_tag 3
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_pid_tag 4
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_layer_name_tag 5
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_cookie_tag 1
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_token_tag 2
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_display_frame_token_tag 3
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_pid_tag 4
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_layer_name_tag 5
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_present_type_tag 6
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_on_time_finish_tag 7
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_gpu_composition_tag 8
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_jank_type_tag 9
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_prediction_type_tag 10
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_is_buffer_tag 11
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_jank_severity_type_tag 12
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_cookie_tag 1
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_token_tag 2
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_pid_tag 3
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_cookie_tag 1
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_token_tag 2
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_pid_tag 3
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_present_type_tag 4
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_on_time_finish_tag 5
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_gpu_composition_tag 6
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_jank_type_tag 7
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_prediction_type_tag 8
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_jank_severity_type_tag 9
#define perfetto_protos_FrameTimelineEvent_FrameEnd_cookie_tag 1
#define perfetto_protos_FrameTimelineEvent_expected_display_frame_start_tag 1
#define perfetto_protos_FrameTimelineEvent_actual_display_frame_start_tag 2
#define perfetto_protos_FrameTimelineEvent_expected_surface_frame_start_tag 3
#define perfetto_protos_FrameTimelineEvent_actual_surface_frame_start_tag 4
#define perfetto_protos_FrameTimelineEvent_frame_end_tag 5
#define perfetto_protos_GpuMemTotalEvent_gpu_id_tag 1
#define perfetto_protos_GpuMemTotalEvent_pid_tag 2
#define perfetto_protos_GpuMemTotalEvent_size_tag 3
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_frame_number_tag 1
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_type_tag 2
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_layer_name_tag 3
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_duration_ns_tag 4
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_buffer_id_tag 5
#define perfetto_protos_GraphicsFrameEvent_buffer_event_tag 1
#define perfetto_protos_InitialDisplayState_display_state_tag 1
#define perfetto_protos_InitialDisplayState_brightness_tag 2
#define perfetto_protos_KernelWakelockData_wakelock_tag 1
#define perfetto_protos_KernelWakelockData_wakelock_id_tag 2
#define perfetto_protos_KernelWakelockData_time_held_millis_tag 3
#define perfetto_protos_KernelWakelockData_Wakelock_wakelock_id_tag 1
#define perfetto_protos_KernelWakelockData_Wakelock_wakelock_name_tag 2
#define perfetto_protos_KernelWakelockData_Wakelock_wakelock_type_tag 3
#define perfetto_protos_NetworkPacketEvent_direction_tag 1
#define perfetto_protos_NetworkPacketEvent_interface_tag 2
#define perfetto_protos_NetworkPacketEvent_length_tag 3
#define perfetto_protos_NetworkPacketEvent_uid_tag 4
#define perfetto_protos_NetworkPacketEvent_tag_tag 5
#define perfetto_protos_NetworkPacketEvent_ip_proto_tag 6
#define perfetto_protos_NetworkPacketEvent_tcp_flags_tag 7
#define perfetto_protos_NetworkPacketEvent_local_port_tag 8
#define perfetto_protos_NetworkPacketEvent_remote_port_tag 9
#define perfetto_protos_NetworkPacketEvent_icmp_type_tag 10
#define perfetto_protos_NetworkPacketEvent_icmp_code_tag 11
#define perfetto_protos_NetworkPacketBundle_iid_tag 1
#define perfetto_protos_NetworkPacketBundle_ctx_tag 2
#define perfetto_protos_NetworkPacketBundle_packet_timestamps_tag 3
#define perfetto_protos_NetworkPacketBundle_packet_lengths_tag 4
#define perfetto_protos_NetworkPacketBundle_total_packets_tag 5
#define perfetto_protos_NetworkPacketBundle_total_duration_tag 6
#define perfetto_protos_NetworkPacketBundle_total_length_tag 7
#define perfetto_protos_NetworkPacketContext_iid_tag 1
#define perfetto_protos_NetworkPacketContext_ctx_tag 2
#define perfetto_protos_PackagesList_packages_tag 1
#define perfetto_protos_PackagesList_parse_error_tag 2
#define perfetto_protos_PackagesList_read_error_tag 3
#define perfetto_protos_PackagesList_PackageInfo_name_tag 1
#define perfetto_protos_PackagesList_PackageInfo_uid_tag 2
#define perfetto_protos_PackagesList_PackageInfo_debuggable_tag 3
#define perfetto_protos_PackagesList_PackageInfo_profileable_from_shell_tag 4
#define perfetto_protos_PackagesList_PackageInfo_version_code_tag 5
#define perfetto_protos_PixelModemEvents_events_tag 1
#define perfetto_protos_PixelModemEvents_event_time_nanos_tag 2
#define perfetto_protos_PixelModemTokenDatabase_database_tag 1
#define perfetto_protos_ProtoLogMessage_message_id_tag 1
#define perfetto_protos_ProtoLogMessage_str_param_iids_tag 2
#define perfetto_protos_ProtoLogMessage_sint64_params_tag 3
#define perfetto_protos_ProtoLogMessage_double_params_tag 4
#define perfetto_protos_ProtoLogMessage_boolean_params_tag 5
#define perfetto_protos_ProtoLogMessage_stacktrace_iid_tag 6
#define perfetto_protos_ProtoLogViewerConfig_messages_tag 1
#define perfetto_protos_ProtoLogViewerConfig_groups_tag 2
#define perfetto_protos_ProtoLogViewerConfig_MessageData_message_id_tag 1
#define perfetto_protos_ProtoLogViewerConfig_MessageData_message_tag 2
#define perfetto_protos_ProtoLogViewerConfig_MessageData_level_tag 3
#define perfetto_protos_ProtoLogViewerConfig_MessageData_group_id_tag 4
#define perfetto_protos_ProtoLogViewerConfig_MessageData_location_tag 5
#define perfetto_protos_ProtoLogViewerConfig_Group_id_tag 1
#define perfetto_protos_ProtoLogViewerConfig_Group_name_tag 2
#define perfetto_protos_ProtoLogViewerConfig_Group_tag_tag 3
#define perfetto_protos_ShellTransition_id_tag   1
#define perfetto_protos_ShellTransition_create_time_ns_tag 2
#define perfetto_protos_ShellTransition_send_time_ns_tag 3
#define perfetto_protos_ShellTransition_dispatch_time_ns_tag 4
#define perfetto_protos_ShellTransition_merge_time_ns_tag 5
#define perfetto_protos_ShellTransition_merge_request_time_ns_tag 6
#define perfetto_protos_ShellTransition_shell_abort_time_ns_tag 7
#define perfetto_protos_ShellTransition_wm_abort_time_ns_tag 8
#define perfetto_protos_ShellTransition_finish_time_ns_tag 9
#define perfetto_protos_ShellTransition_start_transaction_id_tag 10
#define perfetto_protos_ShellTransition_finish_transaction_id_tag 11
#define perfetto_protos_ShellTransition_handler_tag 12
#define perfetto_protos_ShellTransition_type_tag 13
#define perfetto_protos_ShellTransition_targets_tag 14
#define perfetto_protos_ShellTransition_merge_target_tag 15
#define perfetto_protos_ShellTransition_flags_tag 16
#define perfetto_protos_ShellTransition_starting_window_remove_time_ns_tag 17
#define perfetto_protos_ShellTransition_Target_mode_tag 1
#define perfetto_protos_ShellTransition_Target_layer_id_tag 2
#define perfetto_protos_ShellTransition_Target_window_id_tag 3
#define perfetto_protos_ShellTransition_Target_flags_tag 4
#define perfetto_protos_ShellHandlerMappings_mapping_tag 1
#define perfetto_protos_ShellHandlerMapping_id_tag 1
#define perfetto_protos_ShellHandlerMapping_name_tag 2
#define perfetto_protos_RectProto_left_tag       1
#define perfetto_protos_RectProto_top_tag        2
#define perfetto_protos_RectProto_right_tag      3
#define perfetto_protos_RectProto_bottom_tag     4
#define perfetto_protos_RegionProto_rect_tag     2
#define perfetto_protos_SizeProto_w_tag          1
#define perfetto_protos_SizeProto_h_tag          2
#define perfetto_protos_TransformProto_dsdx_tag  1
#define perfetto_protos_TransformProto_dtdx_tag  2
#define perfetto_protos_TransformProto_dsdy_tag  3
#define perfetto_protos_TransformProto_dtdy_tag  4
#define perfetto_protos_TransformProto_type_tag  5
#define perfetto_protos_ColorProto_r_tag         1
#define perfetto_protos_ColorProto_g_tag         2
#define perfetto_protos_ColorProto_b_tag         3
#define perfetto_protos_ColorProto_a_tag         4
#define perfetto_protos_InputWindowInfoProto_layout_params_flags_tag 1
#define perfetto_protos_InputWindowInfoProto_layout_params_type_tag 2
#define perfetto_protos_InputWindowInfoProto_frame_tag 3
#define perfetto_protos_InputWindowInfoProto_touchable_region_tag 4
#define perfetto_protos_InputWindowInfoProto_surface_inset_tag 5
#define perfetto_protos_InputWindowInfoProto_visible_tag 6
#define perfetto_protos_InputWindowInfoProto_can_receive_keys_tag 7
#define perfetto_protos_InputWindowInfoProto_focusable_tag 8
#define perfetto_protos_InputWindowInfoProto_has_wallpaper_tag 9
#define perfetto_protos_InputWindowInfoProto_global_scale_factor_tag 10
#define perfetto_protos_InputWindowInfoProto_window_x_scale_tag 11
#define perfetto_protos_InputWindowInfoProto_window_y_scale_tag 12
#define perfetto_protos_InputWindowInfoProto_crop_layer_id_tag 13
#define perfetto_protos_InputWindowInfoProto_replace_touchable_region_with_crop_tag 14
#define perfetto_protos_InputWindowInfoProto_touchable_region_crop_tag 15
#define perfetto_protos_InputWindowInfoProto_transform_tag 16
#define perfetto_protos_InputWindowInfoProto_input_config_tag 17
#define perfetto_protos_BlurRegion_blur_radius_tag 1
#define perfetto_protos_BlurRegion_corner_radius_tl_tag 2
#define perfetto_protos_BlurRegion_corner_radius_tr_tag 3
#define perfetto_protos_BlurRegion_corner_radius_bl_tag 4
#define perfetto_protos_BlurRegion_corner_radius_br_tag 5
#define perfetto_protos_BlurRegion_alpha_tag     6
#define perfetto_protos_BlurRegion_left_tag      7
#define perfetto_protos_BlurRegion_top_tag       8
#define perfetto_protos_BlurRegion_right_tag     9
#define perfetto_protos_BlurRegion_bottom_tag    10
#define perfetto_protos_ColorTransformProto_val_tag 1
#define perfetto_protos_LayersTraceFileProto_magic_number_tag 1
#define perfetto_protos_LayersTraceFileProto_entry_tag 2
#define perfetto_protos_LayersTraceFileProto_real_to_elapsed_time_offset_nanos_tag 3
#define perfetto_protos_LayersProto_layers_tag   1
#define perfetto_protos_LayersSnapshotProto_elapsed_realtime_nanos_tag 1
#define perfetto_protos_LayersSnapshotProto_where_tag 2
#define perfetto_protos_LayersSnapshotProto_layers_tag 3
#define perfetto_protos_LayersSnapshotProto_hwc_blob_tag 4
#define perfetto_protos_LayersSnapshotProto_excludes_composition_state_tag 5
#define perfetto_protos_LayersSnapshotProto_missed_entries_tag 6
#define perfetto_protos_LayersSnapshotProto_displays_tag 7
#define perfetto_protos_LayersSnapshotProto_vsync_id_tag 8
#define perfetto_protos_DisplayProto_id_tag      1
#define perfetto_protos_DisplayProto_name_tag    2
#define perfetto_protos_DisplayProto_layer_stack_tag 3
#define perfetto_protos_DisplayProto_size_tag    4
#define perfetto_protos_DisplayProto_layer_stack_space_rect_tag 5
#define perfetto_protos_DisplayProto_transform_tag 6
#define perfetto_protos_DisplayProto_is_virtual_tag 7
#define perfetto_protos_DisplayProto_dpi_x_tag   8
#define perfetto_protos_DisplayProto_dpi_y_tag   9
#define perfetto_protos_LayerProto_MetadataEntry_key_tag 1
#define perfetto_protos_LayerProto_MetadataEntry_value_tag 2
#define perfetto_protos_PositionProto_x_tag      1
#define perfetto_protos_PositionProto_y_tag      2
#define perfetto_protos_FloatRectProto_left_tag  1
#define perfetto_protos_FloatRectProto_top_tag   2
#define perfetto_protos_FloatRectProto_right_tag 3
#define perfetto_protos_FloatRectProto_bottom_tag 4
#define perfetto_protos_ActiveBufferProto_width_tag 1
#define perfetto_protos_ActiveBufferProto_height_tag 2
#define perfetto_protos_ActiveBufferProto_stride_tag 3
#define perfetto_protos_ActiveBufferProto_format_tag 4
#define perfetto_protos_ActiveBufferProto_usage_tag 5
#define perfetto_protos_LayerProto_id_tag        1
#define perfetto_protos_LayerProto_name_tag      2
#define perfetto_protos_LayerProto_children_tag  3
#define perfetto_protos_LayerProto_relatives_tag 4
#define perfetto_protos_LayerProto_type_tag      5
#define perfetto_protos_LayerProto_transparent_region_tag 6
#define perfetto_protos_LayerProto_visible_region_tag 7
#define perfetto_protos_LayerProto_damage_region_tag 8
#define perfetto_protos_LayerProto_layer_stack_tag 9
#define perfetto_protos_LayerProto_z_tag         10
#define perfetto_protos_LayerProto_position_tag  11
#define perfetto_protos_LayerProto_requested_position_tag 12
#define perfetto_protos_LayerProto_size_tag      13
#define perfetto_protos_LayerProto_crop_tag      14
#define perfetto_protos_LayerProto_final_crop_tag 15
#define perfetto_protos_LayerProto_is_opaque_tag 16
#define perfetto_protos_LayerProto_invalidate_tag 17
#define perfetto_protos_LayerProto_dataspace_tag 18
#define perfetto_protos_LayerProto_pixel_format_tag 19
#define perfetto_protos_LayerProto_color_tag     20
#define perfetto_protos_LayerProto_requested_color_tag 21
#define perfetto_protos_LayerProto_flags_tag     22
#define perfetto_protos_LayerProto_transform_tag 23
#define perfetto_protos_LayerProto_requested_transform_tag 24
#define perfetto_protos_LayerProto_parent_tag    25
#define perfetto_protos_LayerProto_z_order_relative_of_tag 26
#define perfetto_protos_LayerProto_active_buffer_tag 27
#define perfetto_protos_LayerProto_queued_frames_tag 28
#define perfetto_protos_LayerProto_refresh_pending_tag 29
#define perfetto_protos_LayerProto_hwc_frame_tag 30
#define perfetto_protos_LayerProto_hwc_crop_tag  31
#define perfetto_protos_LayerProto_hwc_transform_tag 32
#define perfetto_protos_LayerProto_window_type_tag 33
#define perfetto_protos_LayerProto_app_id_tag    34
#define perfetto_protos_LayerProto_hwc_composition_type_tag 35
#define perfetto_protos_LayerProto_is_protected_tag 36
#define perfetto_protos_LayerProto_curr_frame_tag 37
#define perfetto_protos_LayerProto_barrier_layer_tag 38
#define perfetto_protos_LayerProto_buffer_transform_tag 39
#define perfetto_protos_LayerProto_effective_scaling_mode_tag 40
#define perfetto_protos_LayerProto_corner_radius_tag 41
#define perfetto_protos_LayerProto_metadata_tag  42
#define perfetto_protos_LayerProto_effective_transform_tag 43
#define perfetto_protos_LayerProto_source_bounds_tag 44
#define perfetto_protos_LayerProto_bounds_tag    45
#define perfetto_protos_LayerProto_screen_bounds_tag 46
#define perfetto_protos_LayerProto_input_window_info_tag 47
#define perfetto_protos_LayerProto_corner_radius_crop_tag 48
#define perfetto_protos_LayerProto_shadow_radius_tag 49
#define perfetto_protos_LayerProto_color_transform_tag 50
#define perfetto_protos_LayerProto_is_relative_of_tag 51
#define perfetto_protos_LayerProto_background_blur_radius_tag 52
#define perfetto_protos_LayerProto_owner_uid_tag 53
#define perfetto_protos_LayerProto_blur_regions_tag 54
#define perfetto_protos_LayerProto_is_trusted_overlay_tag 55
#define perfetto_protos_LayerProto_requested_corner_radius_tag 56
#define perfetto_protos_LayerProto_destination_frame_tag 57
#define perfetto_protos_LayerProto_original_id_tag 58
#define perfetto_protos_LayerProto_trusted_overlay_tag 59
#define perfetto_protos_BarrierLayerProto_id_tag 1
#define perfetto_protos_BarrierLayerProto_frame_number_tag 2
#define perfetto_protos_TransactionTraceFile_magic_number_tag 1
#define perfetto_protos_TransactionTraceFile_entry_tag 2
#define perfetto_protos_TransactionTraceFile_real_to_elapsed_time_offset_nanos_tag 3
#define perfetto_protos_TransactionTraceFile_version_tag 4
#define perfetto_protos_TransactionTraceEntry_elapsed_realtime_nanos_tag 1
#define perfetto_protos_TransactionTraceEntry_vsync_id_tag 2
#define perfetto_protos_TransactionTraceEntry_transactions_tag 3
#define perfetto_protos_TransactionTraceEntry_added_layers_tag 4
#define perfetto_protos_TransactionTraceEntry_destroyed_layers_tag 5
#define perfetto_protos_TransactionTraceEntry_added_displays_tag 6
#define perfetto_protos_TransactionTraceEntry_removed_displays_tag 7
#define perfetto_protos_TransactionTraceEntry_destroyed_layer_handles_tag 8
#define perfetto_protos_TransactionTraceEntry_displays_changed_tag 9
#define perfetto_protos_TransactionTraceEntry_displays_tag 10
#define perfetto_protos_LayerCreationArgs_layer_id_tag 1
#define perfetto_protos_LayerCreationArgs_name_tag 2
#define perfetto_protos_LayerCreationArgs_flags_tag 3
#define perfetto_protos_LayerCreationArgs_parent_id_tag 4
#define perfetto_protos_LayerCreationArgs_mirror_from_id_tag 5
#define perfetto_protos_LayerCreationArgs_add_to_root_tag 6
#define perfetto_protos_LayerCreationArgs_layer_stack_to_mirror_tag 7
#define perfetto_protos_Transform_dsdx_tag       1
#define perfetto_protos_Transform_dtdx_tag       2
#define perfetto_protos_Transform_dtdy_tag       3
#define perfetto_protos_Transform_dsdy_tag       4
#define perfetto_protos_Transform_tx_tag         5
#define perfetto_protos_Transform_ty_tag         6
#define perfetto_protos_DisplayInfo_layer_stack_tag 1
#define perfetto_protos_DisplayInfo_display_id_tag 2
#define perfetto_protos_DisplayInfo_logical_width_tag 3
#define perfetto_protos_DisplayInfo_logical_height_tag 4
#define perfetto_protos_DisplayInfo_transform_inverse_tag 5
#define perfetto_protos_DisplayInfo_transform_tag 6
#define perfetto_protos_DisplayInfo_receives_input_tag 7
#define perfetto_protos_DisplayInfo_is_secure_tag 8
#define perfetto_protos_DisplayInfo_is_primary_tag 9
#define perfetto_protos_DisplayInfo_is_virtual_tag 10
#define perfetto_protos_DisplayInfo_rotation_flags_tag 11
#define perfetto_protos_DisplayInfo_transform_hint_tag 12
#define perfetto_protos_TransactionState_pid_tag 1
#define perfetto_protos_TransactionState_uid_tag 2
#define perfetto_protos_TransactionState_vsync_id_tag 3
#define perfetto_protos_TransactionState_input_event_id_tag 4
#define perfetto_protos_TransactionState_post_time_tag 5
#define perfetto_protos_TransactionState_transaction_id_tag 6
#define perfetto_protos_TransactionState_layer_changes_tag 7
#define perfetto_protos_TransactionState_display_changes_tag 8
#define perfetto_protos_TransactionState_merged_transaction_ids_tag 9
#define perfetto_protos_LayerState_Matrix22_dsdx_tag 1
#define perfetto_protos_LayerState_Matrix22_dtdx_tag 2
#define perfetto_protos_LayerState_Matrix22_dtdy_tag 3
#define perfetto_protos_LayerState_Matrix22_dsdy_tag 4
#define perfetto_protos_LayerState_Color3_r_tag  1
#define perfetto_protos_LayerState_Color3_g_tag  2
#define perfetto_protos_LayerState_Color3_b_tag  3
#define perfetto_protos_LayerState_BufferData_buffer_id_tag 1
#define perfetto_protos_LayerState_BufferData_width_tag 2
#define perfetto_protos_LayerState_BufferData_height_tag 3
#define perfetto_protos_LayerState_BufferData_frame_number_tag 4
#define perfetto_protos_LayerState_BufferData_flags_tag 5
#define perfetto_protos_LayerState_BufferData_cached_buffer_id_tag 6
#define perfetto_protos_LayerState_BufferData_pixel_format_tag 7
#define perfetto_protos_LayerState_BufferData_usage_tag 8
#define perfetto_protos_LayerState_WindowInfo_layout_params_flags_tag 1
#define perfetto_protos_LayerState_WindowInfo_layout_params_type_tag 2
#define perfetto_protos_LayerState_WindowInfo_touchable_region_tag 3
#define perfetto_protos_LayerState_WindowInfo_surface_inset_tag 4
#define perfetto_protos_LayerState_WindowInfo_focusable_tag 5
#define perfetto_protos_LayerState_WindowInfo_has_wallpaper_tag 6
#define perfetto_protos_LayerState_WindowInfo_global_scale_factor_tag 7
#define perfetto_protos_LayerState_WindowInfo_crop_layer_id_tag 8
#define perfetto_protos_LayerState_WindowInfo_replace_touchable_region_with_crop_tag 9
#define perfetto_protos_LayerState_WindowInfo_touchable_region_crop_tag 10
#define perfetto_protos_LayerState_WindowInfo_transform_tag 11
#define perfetto_protos_LayerState_WindowInfo_input_config_tag 12
#define perfetto_protos_LayerState_layer_id_tag  1
#define perfetto_protos_LayerState_what_tag      2
#define perfetto_protos_LayerState_x_tag         3
#define perfetto_protos_LayerState_y_tag         4
#define perfetto_protos_LayerState_z_tag         5
#define perfetto_protos_LayerState_w_tag         6
#define perfetto_protos_LayerState_h_tag         7
#define perfetto_protos_LayerState_layer_stack_tag 8
#define perfetto_protos_LayerState_flags_tag     9
#define perfetto_protos_LayerState_mask_tag      10
#define perfetto_protos_LayerState_matrix_tag    11
#define perfetto_protos_LayerState_corner_radius_tag 12
#define perfetto_protos_LayerState_background_blur_radius_tag 13
#define perfetto_protos_LayerState_parent_id_tag 14
#define perfetto_protos_LayerState_relative_parent_id_tag 15
#define perfetto_protos_LayerState_alpha_tag     16
#define perfetto_protos_LayerState_color_tag     17
#define perfetto_protos_LayerState_transparent_region_tag 18
#define perfetto_protos_LayerState_transform_tag 19
#define perfetto_protos_LayerState_transform_to_display_inverse_tag 20
#define perfetto_protos_LayerState_crop_tag      21
#define perfetto_protos_LayerState_buffer_data_tag 22
#define perfetto_protos_LayerState_api_tag       23
#define perfetto_protos_LayerState_has_sideband_stream_tag 24
#define perfetto_protos_LayerState_color_transform_tag 25
#define perfetto_protos_LayerState_blur_regions_tag 26
#define perfetto_protos_LayerState_window_info_handle_tag 27
#define perfetto_protos_LayerState_bg_color_alpha_tag 28
#define perfetto_protos_LayerState_bg_color_dataspace_tag 29
#define perfetto_protos_LayerState_color_space_agnostic_tag 30
#define perfetto_protos_LayerState_shadow_radius_tag 31
#define perfetto_protos_LayerState_frame_rate_selection_priority_tag 32
#define perfetto_protos_LayerState_frame_rate_tag 33
#define perfetto_protos_LayerState_frame_rate_compatibility_tag 34
#define perfetto_protos_LayerState_change_frame_rate_strategy_tag 35
#define perfetto_protos_LayerState_fixed_transform_hint_tag 36
#define perfetto_protos_LayerState_frame_number_tag 37
#define perfetto_protos_LayerState_auto_refresh_tag 38
#define perfetto_protos_LayerState_is_trusted_overlay_tag 39
#define perfetto_protos_LayerState_buffer_crop_tag 40
#define perfetto_protos_LayerState_destination_frame_tag 41
#define perfetto_protos_LayerState_drop_input_mode_tag 42
#define perfetto_protos_LayerState_trusted_overlay_tag 43
#define perfetto_protos_DisplayState_id_tag      1
#define perfetto_protos_DisplayState_what_tag    2
#define perfetto_protos_DisplayState_flags_tag   3
#define perfetto_protos_DisplayState_layer_stack_tag 4
#define perfetto_protos_DisplayState_orientation_tag 5
#define perfetto_protos_DisplayState_layer_stack_space_rect_tag 6
#define perfetto_protos_DisplayState_oriented_display_space_rect_tag 7
#define perfetto_protos_DisplayState_width_tag   8
#define perfetto_protos_DisplayState_height_tag  9
#define perfetto_protos_ChromeBenchmarkMetadata_benchmark_start_time_us_tag 1
#define perfetto_protos_ChromeBenchmarkMetadata_story_run_time_us_tag 2
#define perfetto_protos_ChromeBenchmarkMetadata_benchmark_name_tag 3
#define perfetto_protos_ChromeBenchmarkMetadata_benchmark_description_tag 4
#define perfetto_protos_ChromeBenchmarkMetadata_label_tag 5
#define perfetto_protos_ChromeBenchmarkMetadata_story_name_tag 6
#define perfetto_protos_ChromeBenchmarkMetadata_story_tags_tag 7
#define perfetto_protos_ChromeBenchmarkMetadata_story_run_index_tag 8
#define perfetto_protos_ChromeBenchmarkMetadata_had_failures_tag 9
#define perfetto_protos_ChromeMetadataPacket_FinchHash_name_tag 1
#define perfetto_protos_ChromeMetadataPacket_FinchHash_group_tag 2
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_histogram_name_hash_tag 1
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_histogram_min_trigger_tag 2
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_histogram_max_trigger_tag 3
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_event_type_tag 1
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_content_trigger_name_hash_tag 2
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_trigger_type_tag 1
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_histogram_rule_tag 2
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_named_rule_tag 3
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_name_hash_tag 4
#define perfetto_protos_BackgroundTracingMetadata_triggered_rule_tag 1
#define perfetto_protos_BackgroundTracingMetadata_active_rules_tag 2
#define perfetto_protos_BackgroundTracingMetadata_scenario_name_hash_tag 3
#define perfetto_protos_ChromeMetadataPacket_background_tracing_metadata_tag 1
#define perfetto_protos_ChromeMetadataPacket_chrome_version_code_tag 2
#define perfetto_protos_ChromeMetadataPacket_enabled_categories_tag 3
#define perfetto_protos_ChromeMetadataPacket_field_trial_hashes_tag 4
#define perfetto_protos_ChromeTracedValue_nested_type_tag 1
#define perfetto_protos_ChromeTracedValue_dict_keys_tag 2
#define perfetto_protos_ChromeTracedValue_dict_values_tag 3
#define perfetto_protos_ChromeTracedValue_array_values_tag 4
#define perfetto_protos_ChromeTracedValue_int_value_tag 5
#define perfetto_protos_ChromeTracedValue_double_value_tag 6
#define perfetto_protos_ChromeTracedValue_bool_value_tag 7
#define perfetto_protos_ChromeTracedValue_string_value_tag 8
#define perfetto_protos_ChromeStringTableEntry_value_tag 1
#define perfetto_protos_ChromeStringTableEntry_index_tag 2
#define perfetto_protos_ChromeTraceEvent_name_tag 1
#define perfetto_protos_ChromeTraceEvent_timestamp_tag 2
#define perfetto_protos_ChromeTraceEvent_phase_tag 3
#define perfetto_protos_ChromeTraceEvent_thread_id_tag 4
#define perfetto_protos_ChromeTraceEvent_duration_tag 5
#define perfetto_protos_ChromeTraceEvent_thread_duration_tag 6
#define perfetto_protos_ChromeTraceEvent_scope_tag 7
#define perfetto_protos_ChromeTraceEvent_id_tag  8
#define perfetto_protos_ChromeTraceEvent_flags_tag 9
#define perfetto_protos_ChromeTraceEvent_category_group_name_tag 10
#define perfetto_protos_ChromeTraceEvent_process_id_tag 11
#define perfetto_protos_ChromeTraceEvent_thread_timestamp_tag 12
#define perfetto_protos_ChromeTraceEvent_bind_id_tag 13
#define perfetto_protos_ChromeTraceEvent_args_tag 14
#define perfetto_protos_ChromeTraceEvent_name_index_tag 15
#define perfetto_protos_ChromeTraceEvent_category_group_name_index_tag 16
#define perfetto_protos_ChromeTraceEvent_Arg_name_tag 1
#define perfetto_protos_ChromeTraceEvent_Arg_bool_value_tag 2
#define perfetto_protos_ChromeTraceEvent_Arg_uint_value_tag 3
#define perfetto_protos_ChromeTraceEvent_Arg_int_value_tag 4
#define perfetto_protos_ChromeTraceEvent_Arg_double_value_tag 5
#define perfetto_protos_ChromeTraceEvent_Arg_string_value_tag 6
#define perfetto_protos_ChromeTraceEvent_Arg_pointer_value_tag 7
#define perfetto_protos_ChromeTraceEvent_Arg_json_value_tag 8
#define perfetto_protos_ChromeTraceEvent_Arg_traced_value_tag 10
#define perfetto_protos_ChromeTraceEvent_Arg_name_index_tag 9
#define perfetto_protos_ChromeMetadata_name_tag  1
#define perfetto_protos_ChromeMetadata_string_value_tag 2
#define perfetto_protos_ChromeMetadata_bool_value_tag 3
#define perfetto_protos_ChromeMetadata_int_value_tag 4
#define perfetto_protos_ChromeMetadata_json_value_tag 5
#define perfetto_protos_ChromeLegacyJsonTrace_type_tag 1
#define perfetto_protos_ChromeLegacyJsonTrace_data_tag 2
#define perfetto_protos_ChromeEventBundle_trace_events_tag 1
#define perfetto_protos_ChromeEventBundle_metadata_tag 2
#define perfetto_protos_ChromeEventBundle_string_table_tag 3
#define perfetto_protos_ChromeEventBundle_legacy_ftrace_output_tag 4
#define perfetto_protos_ChromeEventBundle_legacy_json_trace_tag 5
#define perfetto_protos_ChromeTrigger_trigger_name_tag 1
#define perfetto_protos_ChromeTrigger_trigger_name_hash_tag 2
#define perfetto_protos_ChromeTrigger_flow_id_tag 3
#define perfetto_protos_V8String_latin1_tag      1
#define perfetto_protos_V8String_utf16_le_tag    2
#define perfetto_protos_V8String_utf16_be_tag    3
#define perfetto_protos_InternedV8String_iid_tag 1
#define perfetto_protos_InternedV8String_latin1_tag 2
#define perfetto_protos_InternedV8String_utf16_le_tag 3
#define perfetto_protos_InternedV8String_utf16_be_tag 4
#define perfetto_protos_InternedV8JsScript_iid_tag 1
#define perfetto_protos_InternedV8JsScript_script_id_tag 2
#define perfetto_protos_InternedV8JsScript_type_tag 3
#define perfetto_protos_InternedV8JsScript_name_tag 4
#define perfetto_protos_InternedV8JsScript_source_tag 5
#define perfetto_protos_InternedV8WasmScript_iid_tag 1
#define perfetto_protos_InternedV8WasmScript_script_id_tag 2
#define perfetto_protos_InternedV8WasmScript_url_tag 3
#define perfetto_protos_InternedV8WasmScript_wire_bytes_tag 4
#define perfetto_protos_InternedV8JsFunction_iid_tag 1
#define perfetto_protos_InternedV8JsFunction_v8_js_function_name_iid_tag 2
#define perfetto_protos_InternedV8JsFunction_v8_js_script_iid_tag 3
#define perfetto_protos_InternedV8JsFunction_is_toplevel_tag 4
#define perfetto_protos_InternedV8JsFunction_kind_tag 5
#define perfetto_protos_InternedV8JsFunction_byte_offset_tag 6
#define perfetto_protos_InternedV8JsFunction_line_tag 7
#define perfetto_protos_InternedV8JsFunction_column_tag 8
#define perfetto_protos_InternedV8Isolate_CodeRange_base_address_tag 1
#define perfetto_protos_InternedV8Isolate_CodeRange_size_tag 2
#define perfetto_protos_InternedV8Isolate_CodeRange_embedded_blob_code_copy_start_address_tag 3
#define perfetto_protos_InternedV8Isolate_CodeRange_is_process_wide_tag 4
#define perfetto_protos_InternedV8Isolate_iid_tag 1
#define perfetto_protos_InternedV8Isolate_pid_tag 2
#define perfetto_protos_InternedV8Isolate_isolate_id_tag 3
#define perfetto_protos_InternedV8Isolate_code_range_tag 4
#define perfetto_protos_InternedV8Isolate_embedded_blob_code_start_address_tag 5
#define perfetto_protos_InternedV8Isolate_embedded_blob_code_size_tag 6
#define perfetto_protos_V8JsCode_v8_isolate_iid_tag 1
#define perfetto_protos_V8JsCode_tid_tag         2
#define perfetto_protos_V8JsCode_v8_js_function_iid_tag 3
#define perfetto_protos_V8JsCode_tier_tag        4
#define perfetto_protos_V8JsCode_instruction_start_tag 5
#define perfetto_protos_V8JsCode_instruction_size_bytes_tag 6
#define perfetto_protos_V8JsCode_machine_code_tag 7
#define perfetto_protos_V8JsCode_bytecode_tag    8
#define perfetto_protos_V8InternalCode_v8_isolate_iid_tag 1
#define perfetto_protos_V8InternalCode_tid_tag   2
#define perfetto_protos_V8InternalCode_name_tag  3
#define perfetto_protos_V8InternalCode_type_tag  4
#define perfetto_protos_V8InternalCode_builtin_id_tag 5
#define perfetto_protos_V8InternalCode_instruction_start_tag 6
#define perfetto_protos_V8InternalCode_instruction_size_bytes_tag 7
#define perfetto_protos_V8InternalCode_machine_code_tag 8
#define perfetto_protos_V8WasmCode_v8_isolate_iid_tag 1
#define perfetto_protos_V8WasmCode_tid_tag       2
#define perfetto_protos_V8WasmCode_v8_wasm_script_iid_tag 3
#define perfetto_protos_V8WasmCode_function_name_tag 4
#define perfetto_protos_V8WasmCode_tier_tag      5
#define perfetto_protos_V8WasmCode_code_offset_in_module_tag 6
#define perfetto_protos_V8WasmCode_instruction_start_tag 7
#define perfetto_protos_V8WasmCode_instruction_size_bytes_tag 8
#define perfetto_protos_V8WasmCode_machine_code_tag 9
#define perfetto_protos_V8RegExpCode_v8_isolate_iid_tag 1
#define perfetto_protos_V8RegExpCode_tid_tag     2
#define perfetto_protos_V8RegExpCode_pattern_tag 3
#define perfetto_protos_V8RegExpCode_instruction_start_tag 4
#define perfetto_protos_V8RegExpCode_instruction_size_bytes_tag 5
#define perfetto_protos_V8RegExpCode_machine_code_tag 6
#define perfetto_protos_V8CodeMove_isolate_iid_tag 1
#define perfetto_protos_V8CodeMove_tid_tag       2
#define perfetto_protos_V8CodeMove_from_instruction_start_address_tag 3
#define perfetto_protos_V8CodeMove_to_instruction_start_address_tag 4
#define perfetto_protos_V8CodeMove_instruction_size_bytes_tag 5
#define perfetto_protos_V8CodeMove_to_machine_code_tag 6
#define perfetto_protos_V8CodeMove_to_bytecode_tag 7
#define perfetto_protos_V8CodeDefaults_tid_tag   1
#define perfetto_protos_ClockSnapshot_clocks_tag 1
#define perfetto_protos_ClockSnapshot_primary_trace_clock_tag 2
#define perfetto_protos_ClockSnapshot_Clock_clock_id_tag 1
#define perfetto_protos_ClockSnapshot_Clock_timestamp_tag 2
#define perfetto_protos_ClockSnapshot_Clock_is_incremental_tag 3
#define perfetto_protos_ClockSnapshot_Clock_unit_multiplier_ns_tag 4
#define perfetto_protos_CSwitchEtwEvent_new_thread_id_tag 1
#define perfetto_protos_CSwitchEtwEvent_old_thread_id_tag 2
#define perfetto_protos_CSwitchEtwEvent_new_thread_priority_tag 3
#define perfetto_protos_CSwitchEtwEvent_old_thread_priority_tag 4
#define perfetto_protos_CSwitchEtwEvent_previous_c_state_tag 5
#define perfetto_protos_CSwitchEtwEvent_old_thread_wait_reason_tag 6
#define perfetto_protos_CSwitchEtwEvent_old_thread_wait_mode_tag 7
#define perfetto_protos_CSwitchEtwEvent_old_thread_state_tag 8
#define perfetto_protos_CSwitchEtwEvent_old_thread_wait_ideal_processor_tag 9
#define perfetto_protos_CSwitchEtwEvent_new_thread_wait_time_tag 10
#define perfetto_protos_ReadyThreadEtwEvent_t_thread_id_tag 1
#define perfetto_protos_ReadyThreadEtwEvent_adjust_reason_tag 2
#define perfetto_protos_ReadyThreadEtwEvent_adjust_increment_tag 3
#define perfetto_protos_ReadyThreadEtwEvent_flag_tag 4
#define perfetto_protos_EtwTraceEvent_timestamp_tag 1
#define perfetto_protos_EtwTraceEvent_c_switch_tag 2
#define perfetto_protos_EtwTraceEvent_ready_thread_tag 3
#define perfetto_protos_EtwTraceEvent_cpu_tag    4
#define perfetto_protos_EtwTraceEventBundle_cpu_tag 1
#define perfetto_protos_EtwTraceEventBundle_event_tag 2
#define perfetto_protos_FileDescriptorSet_file_tag 1
#define perfetto_protos_FileDescriptorProto_name_tag 1
#define perfetto_protos_FileDescriptorProto_package_tag 2
#define perfetto_protos_FileDescriptorProto_dependency_tag 3
#define perfetto_protos_FileDescriptorProto_message_type_tag 4
#define perfetto_protos_FileDescriptorProto_enum_type_tag 5
#define perfetto_protos_FileDescriptorProto_extension_tag 7
#define perfetto_protos_FileDescriptorProto_public_dependency_tag 10
#define perfetto_protos_FileDescriptorProto_weak_dependency_tag 11
#define perfetto_protos_DescriptorProto_name_tag 1
#define perfetto_protos_DescriptorProto_field_tag 2
#define perfetto_protos_DescriptorProto_nested_type_tag 3
#define perfetto_protos_DescriptorProto_enum_type_tag 4
#define perfetto_protos_DescriptorProto_extension_tag 6
#define perfetto_protos_DescriptorProto_oneof_decl_tag 8
#define perfetto_protos_DescriptorProto_reserved_range_tag 9
#define perfetto_protos_DescriptorProto_reserved_name_tag 10
#define perfetto_protos_DescriptorProto_ReservedRange_start_tag 1
#define perfetto_protos_DescriptorProto_ReservedRange_end_tag 2
#define perfetto_protos_UninterpretedOption_name_tag 2
#define perfetto_protos_UninterpretedOption_identifier_value_tag 3
#define perfetto_protos_UninterpretedOption_positive_int_value_tag 4
#define perfetto_protos_UninterpretedOption_negative_int_value_tag 5
#define perfetto_protos_UninterpretedOption_double_value_tag 6
#define perfetto_protos_UninterpretedOption_string_value_tag 7
#define perfetto_protos_UninterpretedOption_aggregate_value_tag 8
#define perfetto_protos_UninterpretedOption_NamePart_name_part_tag 1
#define perfetto_protos_UninterpretedOption_NamePart_is_extension_tag 2
#define perfetto_protos_FieldOptions_packed_tag  2
#define perfetto_protos_FieldOptions_uninterpreted_option_tag 999
#define perfetto_protos_FieldDescriptorProto_name_tag 1
#define perfetto_protos_FieldDescriptorProto_extendee_tag 2
#define perfetto_protos_FieldDescriptorProto_number_tag 3
#define perfetto_protos_FieldDescriptorProto_label_tag 4
#define perfetto_protos_FieldDescriptorProto_type_tag 5
#define perfetto_protos_FieldDescriptorProto_type_name_tag 6
#define perfetto_protos_FieldDescriptorProto_default_value_tag 7
#define perfetto_protos_FieldDescriptorProto_options_tag 8
#define perfetto_protos_FieldDescriptorProto_oneof_index_tag 9
#define perfetto_protos_EnumDescriptorProto_name_tag 1
#define perfetto_protos_EnumDescriptorProto_value_tag 2
#define perfetto_protos_EnumDescriptorProto_reserved_name_tag 5
#define perfetto_protos_EnumValueDescriptorProto_name_tag 1
#define perfetto_protos_EnumValueDescriptorProto_number_tag 2
#define perfetto_protos_OneofDescriptorProto_name_tag 1
#define perfetto_protos_OneofDescriptorProto_options_tag 2
#define perfetto_protos_ExtensionDescriptor_extension_set_tag 1
#define perfetto_protos_InodeFileMap_block_device_id_tag 1
#define perfetto_protos_InodeFileMap_mount_points_tag 2
#define perfetto_protos_InodeFileMap_entries_tag 3
#define perfetto_protos_InodeFileMap_Entry_inode_number_tag 1
#define perfetto_protos_InodeFileMap_Entry_paths_tag 2
#define perfetto_protos_InodeFileMap_Entry_type_tag 3
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_bytes_tag 1
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_ino_tag 2
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_offset_tag 3
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_bytes_tag 1
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_cmdline_tag 2
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_i_size_tag 3
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_ino_tag 4
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_offset_tag 5
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_pathbuf_tag 6
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_pid_tag 7
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_bytes_tag 1
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_ino_tag 2
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_offset_tag 3
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_bytes_tag 1
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_cmdline_tag 2
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_i_size_tag 3
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_ino_tag 4
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_offset_tag 5
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_pathbuf_tag 6
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_pid_tag 7
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_bytes_tag 1
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_ino_tag 2
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_offset_tag 3
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_cmdline_tag 1
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_i_size_tag 2
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_ino_tag 3
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_pathbuf_tag 4
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_pid_tag 5
#define perfetto_protos_BclIrqTriggerFtraceEvent_id_tag 1
#define perfetto_protos_BclIrqTriggerFtraceEvent_throttle_tag 2
#define perfetto_protos_BclIrqTriggerFtraceEvent_cpu0_limit_tag 3
#define perfetto_protos_BclIrqTriggerFtraceEvent_cpu1_limit_tag 4
#define perfetto_protos_BclIrqTriggerFtraceEvent_cpu2_limit_tag 5
#define perfetto_protos_BclIrqTriggerFtraceEvent_tpu_limit_tag 6
#define perfetto_protos_BclIrqTriggerFtraceEvent_gpu_limit_tag 7
#define perfetto_protos_BclIrqTriggerFtraceEvent_voltage_tag 8
#define perfetto_protos_BclIrqTriggerFtraceEvent_capacity_tag 9
#define perfetto_protos_BinderTransactionFtraceEvent_debug_id_tag 1
#define perfetto_protos_BinderTransactionFtraceEvent_target_node_tag 2
#define perfetto_protos_BinderTransactionFtraceEvent_to_proc_tag 3
#define perfetto_protos_BinderTransactionFtraceEvent_to_thread_tag 4
#define perfetto_protos_BinderTransactionFtraceEvent_reply_tag 5
#define perfetto_protos_BinderTransactionFtraceEvent_code_tag 6
#define perfetto_protos_BinderTransactionFtraceEvent_flags_tag 7
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_debug_id_tag 1
#define perfetto_protos_BinderSetPriorityFtraceEvent_proc_tag 1
#define perfetto_protos_BinderSetPriorityFtraceEvent_thread_tag 2
#define perfetto_protos_BinderSetPriorityFtraceEvent_old_prio_tag 3
#define perfetto_protos_BinderSetPriorityFtraceEvent_new_prio_tag 4
#define perfetto_protos_BinderSetPriorityFtraceEvent_desired_prio_tag 5
#define perfetto_protos_BinderLockFtraceEvent_tag_tag 1
#define perfetto_protos_BinderLockedFtraceEvent_tag_tag 1
#define perfetto_protos_BinderUnlockFtraceEvent_tag_tag 1
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_data_size_tag 1
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_debug_id_tag 2
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_offsets_size_tag 3
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_extra_buffers_size_tag 4
#define perfetto_protos_BinderCommandFtraceEvent_cmd_tag 1
#define perfetto_protos_BinderReturnFtraceEvent_cmd_tag 1
#define perfetto_protos_BlockRqIssueFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqIssueFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqIssueFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqIssueFtraceEvent_bytes_tag 4
#define perfetto_protos_BlockRqIssueFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockRqIssueFtraceEvent_comm_tag 6
#define perfetto_protos_BlockRqIssueFtraceEvent_cmd_tag 7
#define perfetto_protos_BlockBioBackmergeFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioBackmergeFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioBackmergeFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioBackmergeFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockBioBackmergeFtraceEvent_comm_tag 5
#define perfetto_protos_BlockBioBounceFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioBounceFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioBounceFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioBounceFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockBioBounceFtraceEvent_comm_tag 5
#define perfetto_protos_BlockBioCompleteFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioCompleteFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioCompleteFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioCompleteFtraceEvent_error_tag 4
#define perfetto_protos_BlockBioCompleteFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_comm_tag 5
#define perfetto_protos_BlockBioQueueFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioQueueFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioQueueFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioQueueFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockBioQueueFtraceEvent_comm_tag 5
#define perfetto_protos_BlockBioRemapFtraceEvent_dev_tag 1
#define perfetto_protos_BlockBioRemapFtraceEvent_sector_tag 2
#define perfetto_protos_BlockBioRemapFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockBioRemapFtraceEvent_old_dev_tag 4
#define perfetto_protos_BlockBioRemapFtraceEvent_old_sector_tag 5
#define perfetto_protos_BlockBioRemapFtraceEvent_rwbs_tag 6
#define perfetto_protos_BlockDirtyBufferFtraceEvent_dev_tag 1
#define perfetto_protos_BlockDirtyBufferFtraceEvent_sector_tag 2
#define perfetto_protos_BlockDirtyBufferFtraceEvent_size_tag 3
#define perfetto_protos_BlockGetrqFtraceEvent_dev_tag 1
#define perfetto_protos_BlockGetrqFtraceEvent_sector_tag 2
#define perfetto_protos_BlockGetrqFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockGetrqFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockGetrqFtraceEvent_comm_tag 5
#define perfetto_protos_BlockPlugFtraceEvent_comm_tag 1
#define perfetto_protos_BlockRqAbortFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqAbortFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqAbortFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqAbortFtraceEvent_errors_tag 4
#define perfetto_protos_BlockRqAbortFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockRqAbortFtraceEvent_cmd_tag 6
#define perfetto_protos_BlockRqCompleteFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqCompleteFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqCompleteFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqCompleteFtraceEvent_errors_tag 4
#define perfetto_protos_BlockRqCompleteFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockRqCompleteFtraceEvent_cmd_tag 6
#define perfetto_protos_BlockRqCompleteFtraceEvent_error_tag 7
#define perfetto_protos_BlockRqInsertFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqInsertFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqInsertFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqInsertFtraceEvent_bytes_tag 4
#define perfetto_protos_BlockRqInsertFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockRqInsertFtraceEvent_comm_tag 6
#define perfetto_protos_BlockRqInsertFtraceEvent_cmd_tag 7
#define perfetto_protos_BlockRqRemapFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqRemapFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqRemapFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqRemapFtraceEvent_old_dev_tag 4
#define perfetto_protos_BlockRqRemapFtraceEvent_old_sector_tag 5
#define perfetto_protos_BlockRqRemapFtraceEvent_nr_bios_tag 6
#define perfetto_protos_BlockRqRemapFtraceEvent_rwbs_tag 7
#define perfetto_protos_BlockRqRequeueFtraceEvent_dev_tag 1
#define perfetto_protos_BlockRqRequeueFtraceEvent_sector_tag 2
#define perfetto_protos_BlockRqRequeueFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockRqRequeueFtraceEvent_errors_tag 4
#define perfetto_protos_BlockRqRequeueFtraceEvent_rwbs_tag 5
#define perfetto_protos_BlockRqRequeueFtraceEvent_cmd_tag 6
#define perfetto_protos_BlockSleeprqFtraceEvent_dev_tag 1
#define perfetto_protos_BlockSleeprqFtraceEvent_sector_tag 2
#define perfetto_protos_BlockSleeprqFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockSleeprqFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockSleeprqFtraceEvent_comm_tag 5
#define perfetto_protos_BlockSplitFtraceEvent_dev_tag 1
#define perfetto_protos_BlockSplitFtraceEvent_sector_tag 2
#define perfetto_protos_BlockSplitFtraceEvent_new_sector_tag 3
#define perfetto_protos_BlockSplitFtraceEvent_rwbs_tag 4
#define perfetto_protos_BlockSplitFtraceEvent_comm_tag 5
#define perfetto_protos_BlockTouchBufferFtraceEvent_dev_tag 1
#define perfetto_protos_BlockTouchBufferFtraceEvent_sector_tag 2
#define perfetto_protos_BlockTouchBufferFtraceEvent_size_tag 3
#define perfetto_protos_BlockUnplugFtraceEvent_nr_rq_tag 1
#define perfetto_protos_BlockUnplugFtraceEvent_comm_tag 2
#define perfetto_protos_BlockIoStartFtraceEvent_dev_tag 1
#define perfetto_protos_BlockIoStartFtraceEvent_sector_tag 2
#define perfetto_protos_BlockIoStartFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockIoStartFtraceEvent_bytes_tag 4
#define perfetto_protos_BlockIoStartFtraceEvent_ioprio_tag 5
#define perfetto_protos_BlockIoStartFtraceEvent_rwbs_tag 6
#define perfetto_protos_BlockIoStartFtraceEvent_comm_tag 7
#define perfetto_protos_BlockIoStartFtraceEvent_cmd_tag 8
#define perfetto_protos_BlockIoDoneFtraceEvent_dev_tag 1
#define perfetto_protos_BlockIoDoneFtraceEvent_sector_tag 2
#define perfetto_protos_BlockIoDoneFtraceEvent_nr_sector_tag 3
#define perfetto_protos_BlockIoDoneFtraceEvent_bytes_tag 4
#define perfetto_protos_BlockIoDoneFtraceEvent_ioprio_tag 5
#define perfetto_protos_BlockIoDoneFtraceEvent_rwbs_tag 6
#define perfetto_protos_BlockIoDoneFtraceEvent_comm_tag 7
#define perfetto_protos_BlockIoDoneFtraceEvent_cmd_tag 8
#define perfetto_protos_CgroupAttachTaskFtraceEvent_dst_root_tag 1
#define perfetto_protos_CgroupAttachTaskFtraceEvent_dst_id_tag 2
#define perfetto_protos_CgroupAttachTaskFtraceEvent_pid_tag 3
#define perfetto_protos_CgroupAttachTaskFtraceEvent_comm_tag 4
#define perfetto_protos_CgroupAttachTaskFtraceEvent_cname_tag 5
#define perfetto_protos_CgroupAttachTaskFtraceEvent_dst_level_tag 6
#define perfetto_protos_CgroupAttachTaskFtraceEvent_dst_path_tag 7
#define perfetto_protos_CgroupMkdirFtraceEvent_root_tag 1
#define perfetto_protos_CgroupMkdirFtraceEvent_id_tag 2
#define perfetto_protos_CgroupMkdirFtraceEvent_cname_tag 3
#define perfetto_protos_CgroupMkdirFtraceEvent_level_tag 4
#define perfetto_protos_CgroupMkdirFtraceEvent_path_tag 5
#define perfetto_protos_CgroupRemountFtraceEvent_root_tag 1
#define perfetto_protos_CgroupRemountFtraceEvent_ss_mask_tag 2
#define perfetto_protos_CgroupRemountFtraceEvent_name_tag 3
#define perfetto_protos_CgroupRmdirFtraceEvent_root_tag 1
#define perfetto_protos_CgroupRmdirFtraceEvent_id_tag 2
#define perfetto_protos_CgroupRmdirFtraceEvent_cname_tag 3
#define perfetto_protos_CgroupRmdirFtraceEvent_level_tag 4
#define perfetto_protos_CgroupRmdirFtraceEvent_path_tag 5
#define perfetto_protos_CgroupTransferTasksFtraceEvent_dst_root_tag 1
#define perfetto_protos_CgroupTransferTasksFtraceEvent_dst_id_tag 2
#define perfetto_protos_CgroupTransferTasksFtraceEvent_pid_tag 3
#define perfetto_protos_CgroupTransferTasksFtraceEvent_comm_tag 4
#define perfetto_protos_CgroupTransferTasksFtraceEvent_cname_tag 5
#define perfetto_protos_CgroupTransferTasksFtraceEvent_dst_level_tag 6
#define perfetto_protos_CgroupTransferTasksFtraceEvent_dst_path_tag 7
#define perfetto_protos_CgroupDestroyRootFtraceEvent_root_tag 1
#define perfetto_protos_CgroupDestroyRootFtraceEvent_ss_mask_tag 2
#define perfetto_protos_CgroupDestroyRootFtraceEvent_name_tag 3
#define perfetto_protos_CgroupReleaseFtraceEvent_root_tag 1
#define perfetto_protos_CgroupReleaseFtraceEvent_id_tag 2
#define perfetto_protos_CgroupReleaseFtraceEvent_cname_tag 3
#define perfetto_protos_CgroupReleaseFtraceEvent_level_tag 4
#define perfetto_protos_CgroupReleaseFtraceEvent_path_tag 5
#define perfetto_protos_CgroupRenameFtraceEvent_root_tag 1
#define perfetto_protos_CgroupRenameFtraceEvent_id_tag 2
#define perfetto_protos_CgroupRenameFtraceEvent_cname_tag 3
#define perfetto_protos_CgroupRenameFtraceEvent_level_tag 4
#define perfetto_protos_CgroupRenameFtraceEvent_path_tag 5
#define perfetto_protos_CgroupSetupRootFtraceEvent_root_tag 1
#define perfetto_protos_CgroupSetupRootFtraceEvent_ss_mask_tag 2
#define perfetto_protos_CgroupSetupRootFtraceEvent_name_tag 3
#define perfetto_protos_ClkEnableFtraceEvent_name_tag 1
#define perfetto_protos_ClkDisableFtraceEvent_name_tag 1
#define perfetto_protos_ClkSetRateFtraceEvent_name_tag 1
#define perfetto_protos_ClkSetRateFtraceEvent_rate_tag 2
#define perfetto_protos_CmaAllocStartFtraceEvent_align_tag 1
#define perfetto_protos_CmaAllocStartFtraceEvent_count_tag 2
#define perfetto_protos_CmaAllocStartFtraceEvent_name_tag 3
#define perfetto_protos_CmaAllocInfoFtraceEvent_align_tag 1
#define perfetto_protos_CmaAllocInfoFtraceEvent_count_tag 2
#define perfetto_protos_CmaAllocInfoFtraceEvent_err_iso_tag 3
#define perfetto_protos_CmaAllocInfoFtraceEvent_err_mig_tag 4
#define perfetto_protos_CmaAllocInfoFtraceEvent_err_test_tag 5
#define perfetto_protos_CmaAllocInfoFtraceEvent_name_tag 6
#define perfetto_protos_CmaAllocInfoFtraceEvent_nr_mapped_tag 7
#define perfetto_protos_CmaAllocInfoFtraceEvent_nr_migrated_tag 8
#define perfetto_protos_CmaAllocInfoFtraceEvent_nr_reclaimed_tag 9
#define perfetto_protos_CmaAllocInfoFtraceEvent_pfn_tag 10
#define perfetto_protos_MmCompactionBeginFtraceEvent_zone_start_tag 1
#define perfetto_protos_MmCompactionBeginFtraceEvent_migrate_pfn_tag 2
#define perfetto_protos_MmCompactionBeginFtraceEvent_free_pfn_tag 3
#define perfetto_protos_MmCompactionBeginFtraceEvent_zone_end_tag 4
#define perfetto_protos_MmCompactionBeginFtraceEvent_sync_tag 5
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_idx_tag 2
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_order_tag 3
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_considered_tag 4
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_defer_shift_tag 5
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_order_failed_tag 6
#define perfetto_protos_MmCompactionDeferredFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionDeferredFtraceEvent_idx_tag 2
#define perfetto_protos_MmCompactionDeferredFtraceEvent_order_tag 3
#define perfetto_protos_MmCompactionDeferredFtraceEvent_considered_tag 4
#define perfetto_protos_MmCompactionDeferredFtraceEvent_defer_shift_tag 5
#define perfetto_protos_MmCompactionDeferredFtraceEvent_order_failed_tag 6
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_idx_tag 2
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_order_tag 3
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_considered_tag 4
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_defer_shift_tag 5
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_order_failed_tag 6
#define perfetto_protos_MmCompactionEndFtraceEvent_zone_start_tag 1
#define perfetto_protos_MmCompactionEndFtraceEvent_migrate_pfn_tag 2
#define perfetto_protos_MmCompactionEndFtraceEvent_free_pfn_tag 3
#define perfetto_protos_MmCompactionEndFtraceEvent_zone_end_tag 4
#define perfetto_protos_MmCompactionEndFtraceEvent_sync_tag 5
#define perfetto_protos_MmCompactionEndFtraceEvent_status_tag 6
#define perfetto_protos_MmCompactionFinishedFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionFinishedFtraceEvent_idx_tag 2
#define perfetto_protos_MmCompactionFinishedFtraceEvent_order_tag 3
#define perfetto_protos_MmCompactionFinishedFtraceEvent_ret_tag 4
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_start_pfn_tag 1
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_end_pfn_tag 2
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_nr_scanned_tag 3
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_nr_taken_tag 4
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_start_pfn_tag 1
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_end_pfn_tag 2
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_nr_scanned_tag 3
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_nr_taken_tag 4
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_order_tag 2
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_classzone_idx_tag 3
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_highest_zoneidx_tag 4
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_nr_migrated_tag 1
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_nr_failed_tag 2
#define perfetto_protos_MmCompactionSuitableFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionSuitableFtraceEvent_idx_tag 2
#define perfetto_protos_MmCompactionSuitableFtraceEvent_order_tag 3
#define perfetto_protos_MmCompactionSuitableFtraceEvent_ret_tag 4
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_order_tag 1
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_gfp_mask_tag 2
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_mode_tag 3
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_prio_tag 4
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_nid_tag 1
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_order_tag 2
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_classzone_idx_tag 3
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_highest_zoneidx_tag 4
#define perfetto_protos_ParamSetValueCpmFtraceEvent_body_tag 1
#define perfetto_protos_ParamSetValueCpmFtraceEvent_value_tag 2
#define perfetto_protos_ParamSetValueCpmFtraceEvent_timestamp_tag 3
#define perfetto_protos_CpuhpExitFtraceEvent_cpu_tag 1
#define perfetto_protos_CpuhpExitFtraceEvent_idx_tag 2
#define perfetto_protos_CpuhpExitFtraceEvent_ret_tag 3
#define perfetto_protos_CpuhpExitFtraceEvent_state_tag 4
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_cpu_tag 1
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_fun_tag 2
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_idx_tag 3
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_target_tag 4
#define perfetto_protos_CpuhpEnterFtraceEvent_cpu_tag 1
#define perfetto_protos_CpuhpEnterFtraceEvent_fun_tag 2
#define perfetto_protos_CpuhpEnterFtraceEvent_idx_tag 3
#define perfetto_protos_CpuhpEnterFtraceEvent_target_tag 4
#define perfetto_protos_CpuhpLatencyFtraceEvent_cpu_tag 1
#define perfetto_protos_CpuhpLatencyFtraceEvent_ret_tag 2
#define perfetto_protos_CpuhpLatencyFtraceEvent_state_tag 3
#define perfetto_protos_CpuhpLatencyFtraceEvent_time_tag 4
#define perfetto_protos_CpuhpPauseFtraceEvent_active_cpus_tag 1
#define perfetto_protos_CpuhpPauseFtraceEvent_cpus_tag 2
#define perfetto_protos_CpuhpPauseFtraceEvent_pause_tag 3
#define perfetto_protos_CpuhpPauseFtraceEvent_time_tag 4
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_current_time_tag 1
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_current_timestamp_tag 2
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_delta_tag 3
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_ec_fifo_timestamp_tag 4
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_ec_sensor_num_tag 5
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_fifo_timestamp_tag 6
#define perfetto_protos_DcvshFreqFtraceEvent_cpu_tag 1
#define perfetto_protos_DcvshFreqFtraceEvent_freq_tag 2
#define perfetto_protos_DevfreqFrequencyFtraceEvent_dev_name_tag 1
#define perfetto_protos_DevfreqFrequencyFtraceEvent_freq_tag 2
#define perfetto_protos_DevfreqFrequencyFtraceEvent_prev_freq_tag 3
#define perfetto_protos_DevfreqFrequencyFtraceEvent_busy_time_tag 4
#define perfetto_protos_DevfreqFrequencyFtraceEvent_total_time_tag 5
#define perfetto_protos_DmaFenceInitFtraceEvent_context_tag 1
#define perfetto_protos_DmaFenceInitFtraceEvent_driver_tag 2
#define perfetto_protos_DmaFenceInitFtraceEvent_seqno_tag 3
#define perfetto_protos_DmaFenceInitFtraceEvent_timeline_tag 4
#define perfetto_protos_DmaFenceEmitFtraceEvent_context_tag 1
#define perfetto_protos_DmaFenceEmitFtraceEvent_driver_tag 2
#define perfetto_protos_DmaFenceEmitFtraceEvent_seqno_tag 3
#define perfetto_protos_DmaFenceEmitFtraceEvent_timeline_tag 4
#define perfetto_protos_DmaFenceSignaledFtraceEvent_context_tag 1
#define perfetto_protos_DmaFenceSignaledFtraceEvent_driver_tag 2
#define perfetto_protos_DmaFenceSignaledFtraceEvent_seqno_tag 3
#define perfetto_protos_DmaFenceSignaledFtraceEvent_timeline_tag 4
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_context_tag 1
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_driver_tag 2
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_seqno_tag 3
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_timeline_tag 4
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_context_tag 1
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_driver_tag 2
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_seqno_tag 3
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_timeline_tag 4
#define perfetto_protos_DmaHeapStatFtraceEvent_inode_tag 1
#define perfetto_protos_DmaHeapStatFtraceEvent_len_tag 2
#define perfetto_protos_DmaHeapStatFtraceEvent_total_allocated_tag 3
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_pid_tag 1
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_trace_name_tag 2
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_trace_begin_tag 3
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_name_tag 4
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_type_tag 5
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_value_tag 6
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_header_tag 1
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_payload_tag 2
#define perfetto_protos_DpuDsiRxFtraceEvent_cmd_tag 1
#define perfetto_protos_DpuDsiRxFtraceEvent_rx_buf_tag 2
#define perfetto_protos_DpuDsiTxFtraceEvent_type_tag 1
#define perfetto_protos_DpuDsiTxFtraceEvent_tx_buf_tag 2
#define perfetto_protos_DpuDsiTxFtraceEvent_last_tag 3
#define perfetto_protos_DpuDsiTxFtraceEvent_delay_ms_tag 4
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_id_tag 1
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_frames_pending_tag 2
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_vsync_count_tag 3
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_id_tag 1
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_output_id_tag 2
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_enable_tag 3
#define perfetto_protos_DrmVblankEventFtraceEvent_crtc_tag 1
#define perfetto_protos_DrmVblankEventFtraceEvent_high_prec_tag 2
#define perfetto_protos_DrmVblankEventFtraceEvent_seq_tag 3
#define perfetto_protos_DrmVblankEventFtraceEvent_time_tag 4
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_crtc_tag 1
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_file_tag 2
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_seq_tag 3
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_copied_tag 5
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_parent_tag 3
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_datasync_tag 4
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_ret_tag 3
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_data_blocks_tag 3
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_meta_blocks_tag 4
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_block_tag 3
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_len_tag 4
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_logical_tag 5
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_lleft_tag 6
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_lright_tag 7
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_goal_tag 8
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_pleft_tag 9
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_pright_tag 10
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_flags_tag 11
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_dir_tag 3
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_mode_tag 4
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_new_size_tag 3
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_offset_tag 3
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_i_blocks_tag 3
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_freed_blocks_tag 4
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_reserved_data_blocks_tag 5
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_reserved_meta_blocks_tag 6
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_allocated_meta_blocks_tag 7
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_mode_tag 8
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_i_blocks_tag 3
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_reserved_data_blocks_tag 4
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_reserved_meta_blocks_tag 5
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_mode_tag 6
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_md_needed_tag 7
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_i_blocks_tag 3
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_used_blocks_tag 4
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_reserved_data_blocks_tag 5
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_reserved_meta_blocks_tag 6
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_allocated_meta_blocks_tag 7
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_quota_claim_tag 8
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_mode_tag 9
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_first_page_tag 3
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_nr_to_write_tag 4
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_sync_mode_tag 5
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_b_blocknr_tag 6
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_b_size_tag 7
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_b_state_tag 8
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_io_done_tag 9
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_pages_written_tag 10
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_rw_tag 5
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_len_tag 4
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_rw_tag 5
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_ret_tag 6
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_blk_tag 2
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_count_tag 3
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_len_tag 3
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_needed_tag 4
#define perfetto_protos_Ext4DropInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4DropInodeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4DropInodeFtraceEvent_drop_tag 3
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_len_tag 4
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_pblk_tag 5
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_status_tag 6
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_len_tag 4
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_pblk_tag 5
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_status_tag 6
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_len_tag 4
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_pblk_tag 5
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_status_tag 6
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_len_tag 4
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_pblk_tag 5
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_status_tag 6
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_found_tag 7
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_len_tag 4
#define perfetto_protos_Ext4EsShrinkFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsShrinkFtraceEvent_nr_shrunk_tag 2
#define perfetto_protos_Ext4EsShrinkFtraceEvent_scan_time_tag 3
#define perfetto_protos_Ext4EsShrinkFtraceEvent_nr_skipped_tag 4
#define perfetto_protos_Ext4EsShrinkFtraceEvent_retried_tag 5
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_nr_to_scan_tag 2
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_cache_cnt_tag 3
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_nr_to_scan_tag 2
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_cache_cnt_tag 3
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_nr_shrunk_tag 2
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_cache_cnt_tag 3
#define perfetto_protos_Ext4EvictInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4EvictInodeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4EvictInodeFtraceEvent_nlink_tag 3
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_m_lblk_tag 3
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_m_len_tag 4
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_u_lblk_tag 5
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_u_len_tag 6
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_u_pblk_tag 7
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_m_lblk_tag 3
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_m_len_tag 4
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_u_lblk_tag 5
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_u_len_tag 6
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_u_pblk_tag 7
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_i_lblk_tag 8
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_i_len_tag 9
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_i_pblk_tag 10
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_flags_tag 3
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_lblk_tag 4
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_pblk_tag 5
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_len_tag 6
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_allocated_tag 7
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_newblk_tag 8
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_ret_tag 4
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_pblk_tag 3
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_lblk_tag 4
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_len_tag 4
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_flags_tag 3
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_pblk_tag 4
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_lblk_tag 5
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_len_tag 6
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_mflags_tag 7
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_ret_tag 8
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_len_tag 4
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_start_tag 5
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_start_tag 3
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_end_tag 4
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_depth_tag 5
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_start_tag 3
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_end_tag 4
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_depth_tag 5
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_partial_tag 6
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_eh_entries_tag 7
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_pc_lblk_tag 8
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_pc_pclu_tag 9
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_pc_state_tag 10
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_pblk_tag 3
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_partial_tag 3
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_start_tag 4
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_ee_lblk_tag 5
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_ee_pblk_tag 6
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_ee_len_tag 7
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_pc_lblk_tag 8
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_pc_pclu_tag 9
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_pc_state_tag 10
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_pblk_tag 3
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_lblk_tag 4
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_len_tag 5
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_offset_tag 3
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_len_tag 4
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_mode_tag 5
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_pos_tag 6
#define perfetto_protos_Ext4FallocateExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4FallocateExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4FallocateExitFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4FallocateExitFtraceEvent_blocks_tag 4
#define perfetto_protos_Ext4FallocateExitFtraceEvent_ret_tag 5
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_from_tag 3
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_to_tag 4
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_reverse_tag 5
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_found_tag 6
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_found_blk_tag 7
#define perfetto_protos_Ext4ForgetFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ForgetFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ForgetFtraceEvent_block_tag 3
#define perfetto_protos_Ext4ForgetFtraceEvent_is_metadata_tag 4
#define perfetto_protos_Ext4ForgetFtraceEvent_mode_tag 5
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_block_tag 3
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_count_tag 4
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_mode_tag 6
#define perfetto_protos_Ext4FreeInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4FreeInodeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4FreeInodeFtraceEvent_uid_tag 3
#define perfetto_protos_Ext4FreeInodeFtraceEvent_gid_tag 4
#define perfetto_protos_Ext4FreeInodeFtraceEvent_blocks_tag 5
#define perfetto_protos_Ext4FreeInodeFtraceEvent_mode_tag 6
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_flags_tag 2
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_pblk_tag 4
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_len_tag 5
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_ret_tag 6
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_len_tag 4
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_lblk_tag 3
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_len_tag 4
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_flags_tag 3
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_pblk_tag 4
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_lblk_tag 5
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_len_tag 6
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_mflags_tag 7
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_ret_tag 8
#define perfetto_protos_Ext4InsertRangeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4InsertRangeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4InsertRangeFtraceEvent_offset_tag 3
#define perfetto_protos_Ext4InsertRangeFtraceEvent_len_tag 4
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_index_tag 3
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_offset_tag 4
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_length_tag 5
#define perfetto_protos_Ext4JournalStartFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4JournalStartFtraceEvent_ip_tag 2
#define perfetto_protos_Ext4JournalStartFtraceEvent_blocks_tag 3
#define perfetto_protos_Ext4JournalStartFtraceEvent_rsv_blocks_tag 4
#define perfetto_protos_Ext4JournalStartFtraceEvent_nblocks_tag 5
#define perfetto_protos_Ext4JournalStartFtraceEvent_revoke_creds_tag 6
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_ip_tag 2
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_blocks_tag 3
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_index_tag 3
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_offset_tag 4
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_length_tag 5
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_len_tag 4
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_copied_tag 5
#define perfetto_protos_Ext4LoadInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4LoadInodeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_group_tag 2
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_ip_tag 3
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_group_tag 2
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_group_tag 2
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_needed_tag 2
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_pa_pstart_tag 3
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_pa_lstart_tag 4
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_pa_len_tag 5
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_pa_pstart_tag 3
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_pa_lstart_tag 4
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_pa_len_tag 5
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_pa_pstart_tag 2
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_pa_len_tag 3
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_block_tag 3
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_count_tag 4
#define perfetto_protos_Ext4MballocAllocFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MballocAllocFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MballocAllocFtraceEvent_orig_logical_tag 3
#define perfetto_protos_Ext4MballocAllocFtraceEvent_orig_start_tag 4
#define perfetto_protos_Ext4MballocAllocFtraceEvent_orig_group_tag 5
#define perfetto_protos_Ext4MballocAllocFtraceEvent_orig_len_tag 6
#define perfetto_protos_Ext4MballocAllocFtraceEvent_goal_logical_tag 7
#define perfetto_protos_Ext4MballocAllocFtraceEvent_goal_start_tag 8
#define perfetto_protos_Ext4MballocAllocFtraceEvent_goal_group_tag 9
#define perfetto_protos_Ext4MballocAllocFtraceEvent_goal_len_tag 10
#define perfetto_protos_Ext4MballocAllocFtraceEvent_result_logical_tag 11
#define perfetto_protos_Ext4MballocAllocFtraceEvent_result_start_tag 12
#define perfetto_protos_Ext4MballocAllocFtraceEvent_result_group_tag 13
#define perfetto_protos_Ext4MballocAllocFtraceEvent_result_len_tag 14
#define perfetto_protos_Ext4MballocAllocFtraceEvent_found_tag 15
#define perfetto_protos_Ext4MballocAllocFtraceEvent_groups_tag 16
#define perfetto_protos_Ext4MballocAllocFtraceEvent_buddy_tag 17
#define perfetto_protos_Ext4MballocAllocFtraceEvent_flags_tag 18
#define perfetto_protos_Ext4MballocAllocFtraceEvent_tail_tag 19
#define perfetto_protos_Ext4MballocAllocFtraceEvent_cr_tag 20
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_result_start_tag 3
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_result_group_tag 4
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_result_len_tag 5
#define perfetto_protos_Ext4MballocFreeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MballocFreeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MballocFreeFtraceEvent_result_start_tag 3
#define perfetto_protos_Ext4MballocFreeFtraceEvent_result_group_tag 4
#define perfetto_protos_Ext4MballocFreeFtraceEvent_result_len_tag 5
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_orig_logical_tag 3
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_orig_start_tag 4
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_orig_group_tag 5
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_orig_len_tag 6
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_result_logical_tag 7
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_result_start_tag 8
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_result_group_tag 9
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_result_len_tag 10
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_orig_ino_tag 3
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_uid_tag 4
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_gid_tag 5
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_mode_tag 6
#define perfetto_protos_Ext4PunchHoleFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4PunchHoleFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4PunchHoleFtraceEvent_offset_tag 3
#define perfetto_protos_Ext4PunchHoleFtraceEvent_len_tag 4
#define perfetto_protos_Ext4PunchHoleFtraceEvent_mode_tag 5
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_group_tag 2
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_prefetch_tag 3
#define perfetto_protos_Ext4ReadpageFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ReadpageFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ReadpageFtraceEvent_index_tag 3
#define perfetto_protos_Ext4ReleasepageFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ReleasepageFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ReleasepageFtraceEvent_index_tag 3
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_from_tag 3
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_to_tag 4
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_partial_tag 5
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_ee_pblk_tag 6
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_ee_lblk_tag 7
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_ee_len_tag 8
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_pc_lblk_tag 9
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_pc_pclu_tag 10
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_pc_state_tag 11
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_len_tag 3
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_logical_tag 4
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_lleft_tag 5
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_lright_tag 6
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_goal_tag 7
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_pleft_tag 8
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_pright_tag 9
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_flags_tag 10
#define perfetto_protos_Ext4RequestInodeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4RequestInodeFtraceEvent_dir_tag 2
#define perfetto_protos_Ext4RequestInodeFtraceEvent_mode_tag 3
#define perfetto_protos_Ext4SyncFsFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4SyncFsFtraceEvent_wait_tag 2
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_dev_major_tag 1
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_dev_minor_tag 2
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_group_tag 3
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_start_tag 4
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_len_tag 5
#define perfetto_protos_Ext4TrimExtentFtraceEvent_dev_major_tag 1
#define perfetto_protos_Ext4TrimExtentFtraceEvent_dev_minor_tag 2
#define perfetto_protos_Ext4TrimExtentFtraceEvent_group_tag 3
#define perfetto_protos_Ext4TrimExtentFtraceEvent_start_tag 4
#define perfetto_protos_Ext4TrimExtentFtraceEvent_len_tag 5
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_blocks_tag 3
#define perfetto_protos_Ext4TruncateExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4TruncateExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4TruncateExitFtraceEvent_blocks_tag 3
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_parent_tag 3
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_size_tag 4
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_ret_tag 3
#define perfetto_protos_Ext4WriteBeginFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4WriteBeginFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4WriteBeginFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4WriteBeginFtraceEvent_len_tag 4
#define perfetto_protos_Ext4WriteBeginFtraceEvent_flags_tag 5
#define perfetto_protos_Ext4WriteEndFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4WriteEndFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4WriteEndFtraceEvent_pos_tag 3
#define perfetto_protos_Ext4WriteEndFtraceEvent_len_tag 4
#define perfetto_protos_Ext4WriteEndFtraceEvent_copied_tag 5
#define perfetto_protos_Ext4WritepageFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4WritepageFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4WritepageFtraceEvent_index_tag 3
#define perfetto_protos_Ext4WritepagesFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4WritepagesFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4WritepagesFtraceEvent_nr_to_write_tag 3
#define perfetto_protos_Ext4WritepagesFtraceEvent_pages_skipped_tag 4
#define perfetto_protos_Ext4WritepagesFtraceEvent_range_start_tag 5
#define perfetto_protos_Ext4WritepagesFtraceEvent_range_end_tag 6
#define perfetto_protos_Ext4WritepagesFtraceEvent_writeback_index_tag 7
#define perfetto_protos_Ext4WritepagesFtraceEvent_sync_mode_tag 8
#define perfetto_protos_Ext4WritepagesFtraceEvent_for_kupdate_tag 9
#define perfetto_protos_Ext4WritepagesFtraceEvent_range_cyclic_tag 10
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_ret_tag 3
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_pages_written_tag 4
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_pages_skipped_tag 5
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_writeback_index_tag 6
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_sync_mode_tag 7
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_dev_tag 1
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_ino_tag 2
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_offset_tag 3
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_len_tag 4
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_mode_tag 5
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_btype_tag 2
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_sync_tag 3
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_sector_tag 4
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_size_tag 5
#define perfetto_protos_F2fsEvictInodeFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsEvictInodeFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsEvictInodeFtraceEvent_pino_tag 3
#define perfetto_protos_F2fsEvictInodeFtraceEvent_mode_tag 4
#define perfetto_protos_F2fsEvictInodeFtraceEvent_size_tag 5
#define perfetto_protos_F2fsEvictInodeFtraceEvent_nlink_tag 6
#define perfetto_protos_F2fsEvictInodeFtraceEvent_blocks_tag 7
#define perfetto_protos_F2fsEvictInodeFtraceEvent_advise_tag 8
#define perfetto_protos_F2fsFallocateFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsFallocateFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsFallocateFtraceEvent_mode_tag 3
#define perfetto_protos_F2fsFallocateFtraceEvent_offset_tag 4
#define perfetto_protos_F2fsFallocateFtraceEvent_len_tag 5
#define perfetto_protos_F2fsFallocateFtraceEvent_size_tag 6
#define perfetto_protos_F2fsFallocateFtraceEvent_blocks_tag 7
#define perfetto_protos_F2fsFallocateFtraceEvent_ret_tag 8
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_iblock_tag 3
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_bh_start_tag 4
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_bh_size_tag 5
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_ret_tag 6
#define perfetto_protos_F2fsGetVictimFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsGetVictimFtraceEvent_type_tag 2
#define perfetto_protos_F2fsGetVictimFtraceEvent_gc_type_tag 3
#define perfetto_protos_F2fsGetVictimFtraceEvent_alloc_mode_tag 4
#define perfetto_protos_F2fsGetVictimFtraceEvent_gc_mode_tag 5
#define perfetto_protos_F2fsGetVictimFtraceEvent_victim_tag 6
#define perfetto_protos_F2fsGetVictimFtraceEvent_ofs_unit_tag 7
#define perfetto_protos_F2fsGetVictimFtraceEvent_pre_victim_tag 8
#define perfetto_protos_F2fsGetVictimFtraceEvent_prefree_tag 9
#define perfetto_protos_F2fsGetVictimFtraceEvent_free_tag 10
#define perfetto_protos_F2fsGetVictimFtraceEvent_cost_tag 11
#define perfetto_protos_F2fsIgetFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsIgetFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsIgetFtraceEvent_pino_tag 3
#define perfetto_protos_F2fsIgetFtraceEvent_mode_tag 4
#define perfetto_protos_F2fsIgetFtraceEvent_size_tag 5
#define perfetto_protos_F2fsIgetFtraceEvent_nlink_tag 6
#define perfetto_protos_F2fsIgetFtraceEvent_blocks_tag 7
#define perfetto_protos_F2fsIgetFtraceEvent_advise_tag 8
#define perfetto_protos_F2fsIgetExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsIgetExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsIgetExitFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsNewInodeFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsNewInodeFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsNewInodeFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsReadpageFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsReadpageFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsReadpageFtraceEvent_index_tag 3
#define perfetto_protos_F2fsReadpageFtraceEvent_blkaddr_tag 4
#define perfetto_protos_F2fsReadpageFtraceEvent_type_tag 5
#define perfetto_protos_F2fsReadpageFtraceEvent_dir_tag 6
#define perfetto_protos_F2fsReadpageFtraceEvent_dirty_tag 7
#define perfetto_protos_F2fsReadpageFtraceEvent_uptodate_tag 8
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_nid_tag 2
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_ofs_in_node_tag 3
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_type_tag 3
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_dir_tag 4
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_index_tag 5
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_dirty_tag 6
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_uptodate_tag 7
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_type_tag 3
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_index_tag 4
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_block_tag 5
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_pino_tag 3
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_mode_tag 4
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_size_tag 5
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_nlink_tag 6
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_blocks_tag 7
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_advise_tag 8
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_need_cp_tag 3
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_datasync_tag 4
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_ret_tag 5
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_cp_reason_tag 6
#define perfetto_protos_F2fsSyncFsFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsSyncFsFtraceEvent_dirty_tag 2
#define perfetto_protos_F2fsSyncFsFtraceEvent_wait_tag 3
#define perfetto_protos_F2fsTruncateFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateFtraceEvent_pino_tag 3
#define perfetto_protos_F2fsTruncateFtraceEvent_mode_tag 4
#define perfetto_protos_F2fsTruncateFtraceEvent_size_tag 5
#define perfetto_protos_F2fsTruncateFtraceEvent_nlink_tag 6
#define perfetto_protos_F2fsTruncateFtraceEvent_blocks_tag 7
#define perfetto_protos_F2fsTruncateFtraceEvent_advise_tag 8
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_size_tag 3
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_blocks_tag 4
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_from_tag 5
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_nid_tag 3
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_ofs_tag 4
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_free_tag 5
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_size_tag 3
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_blocks_tag 4
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_from_tag 5
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_nid_tag 3
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_blk_addr_tag 4
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_nid_tag 3
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_blk_addr_tag 4
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_nid_tag 3
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_depth_tag 4
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_err_tag 5
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_size_tag 3
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_blocks_tag 4
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_name_tag 5
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_ret_tag 3
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_type_tag 3
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_dir_tag 4
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_index_tag 5
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_dirty_tag 6
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_uptodate_tag 7
#define perfetto_protos_F2fsWriteBeginFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsWriteBeginFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsWriteBeginFtraceEvent_pos_tag 3
#define perfetto_protos_F2fsWriteBeginFtraceEvent_len_tag 4
#define perfetto_protos_F2fsWriteBeginFtraceEvent_flags_tag 5
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_is_umount_tag 2
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_msg_tag 3
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_reason_tag 4
#define perfetto_protos_F2fsWriteEndFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsWriteEndFtraceEvent_ino_tag 2
#define perfetto_protos_F2fsWriteEndFtraceEvent_pos_tag 3
#define perfetto_protos_F2fsWriteEndFtraceEvent_len_tag 4
#define perfetto_protos_F2fsWriteEndFtraceEvent_copied_tag 5
#define perfetto_protos_F2fsIostatFtraceEvent_app_bio_tag 1
#define perfetto_protos_F2fsIostatFtraceEvent_app_brio_tag 2
#define perfetto_protos_F2fsIostatFtraceEvent_app_dio_tag 3
#define perfetto_protos_F2fsIostatFtraceEvent_app_drio_tag 4
#define perfetto_protos_F2fsIostatFtraceEvent_app_mio_tag 5
#define perfetto_protos_F2fsIostatFtraceEvent_app_mrio_tag 6
#define perfetto_protos_F2fsIostatFtraceEvent_app_rio_tag 7
#define perfetto_protos_F2fsIostatFtraceEvent_app_wio_tag 8
#define perfetto_protos_F2fsIostatFtraceEvent_dev_tag 9
#define perfetto_protos_F2fsIostatFtraceEvent_fs_cdrio_tag 10
#define perfetto_protos_F2fsIostatFtraceEvent_fs_cp_dio_tag 11
#define perfetto_protos_F2fsIostatFtraceEvent_fs_cp_mio_tag 12
#define perfetto_protos_F2fsIostatFtraceEvent_fs_cp_nio_tag 13
#define perfetto_protos_F2fsIostatFtraceEvent_fs_dio_tag 14
#define perfetto_protos_F2fsIostatFtraceEvent_fs_discard_tag 15
#define perfetto_protos_F2fsIostatFtraceEvent_fs_drio_tag 16
#define perfetto_protos_F2fsIostatFtraceEvent_fs_gc_dio_tag 17
#define perfetto_protos_F2fsIostatFtraceEvent_fs_gc_nio_tag 18
#define perfetto_protos_F2fsIostatFtraceEvent_fs_gdrio_tag 19
#define perfetto_protos_F2fsIostatFtraceEvent_fs_mio_tag 20
#define perfetto_protos_F2fsIostatFtraceEvent_fs_mrio_tag 21
#define perfetto_protos_F2fsIostatFtraceEvent_fs_nio_tag 22
#define perfetto_protos_F2fsIostatFtraceEvent_fs_nrio_tag 23
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_rd_avg_tag 1
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_rd_cnt_tag 2
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_rd_peak_tag 3
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_as_avg_tag 4
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_as_cnt_tag 5
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_as_peak_tag 6
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_s_avg_tag 7
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_s_cnt_tag 8
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_d_wr_s_peak_tag 9
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_dev_tag 10
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_rd_avg_tag 11
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_rd_cnt_tag 12
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_rd_peak_tag 13
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_as_avg_tag 14
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_as_cnt_tag 15
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_as_peak_tag 16
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_s_avg_tag 17
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_s_cnt_tag 18
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_m_wr_s_peak_tag 19
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_rd_avg_tag 20
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_rd_cnt_tag 21
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_rd_peak_tag 22
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_as_avg_tag 23
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_as_cnt_tag 24
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_as_peak_tag 25
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_s_avg_tag 26
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_s_cnt_tag 27
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_n_wr_s_peak_tag 28
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_wait_ms_tag 2
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_prefree_tag 3
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_free_tag 4
#define perfetto_protos_F2fsGcBeginFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsGcBeginFtraceEvent_sync_tag 2
#define perfetto_protos_F2fsGcBeginFtraceEvent_background_tag 3
#define perfetto_protos_F2fsGcBeginFtraceEvent_dirty_nodes_tag 4
#define perfetto_protos_F2fsGcBeginFtraceEvent_dirty_dents_tag 5
#define perfetto_protos_F2fsGcBeginFtraceEvent_dirty_imeta_tag 6
#define perfetto_protos_F2fsGcBeginFtraceEvent_free_sec_tag 7
#define perfetto_protos_F2fsGcBeginFtraceEvent_free_seg_tag 8
#define perfetto_protos_F2fsGcBeginFtraceEvent_reserved_seg_tag 9
#define perfetto_protos_F2fsGcBeginFtraceEvent_prefree_seg_tag 10
#define perfetto_protos_F2fsGcBeginFtraceEvent_gc_type_tag 11
#define perfetto_protos_F2fsGcBeginFtraceEvent_no_bg_gc_tag 12
#define perfetto_protos_F2fsGcBeginFtraceEvent_nr_free_secs_tag 13
#define perfetto_protos_F2fsGcEndFtraceEvent_dev_tag 1
#define perfetto_protos_F2fsGcEndFtraceEvent_ret_tag 2
#define perfetto_protos_F2fsGcEndFtraceEvent_seg_freed_tag 3
#define perfetto_protos_F2fsGcEndFtraceEvent_sec_freed_tag 4
#define perfetto_protos_F2fsGcEndFtraceEvent_dirty_nodes_tag 5
#define perfetto_protos_F2fsGcEndFtraceEvent_dirty_dents_tag 6
#define perfetto_protos_F2fsGcEndFtraceEvent_dirty_imeta_tag 7
#define perfetto_protos_F2fsGcEndFtraceEvent_free_sec_tag 8
#define perfetto_protos_F2fsGcEndFtraceEvent_free_seg_tag 9
#define perfetto_protos_F2fsGcEndFtraceEvent_reserved_seg_tag 10
#define perfetto_protos_F2fsGcEndFtraceEvent_prefree_seg_tag 11
#define perfetto_protos_FastrpcDmaStatFtraceEvent_cid_tag 1
#define perfetto_protos_FastrpcDmaStatFtraceEvent_len_tag 2
#define perfetto_protos_FastrpcDmaStatFtraceEvent_total_allocated_tag 3
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_cid_tag 1
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_phys_tag 2
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_size_tag 3
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_cid_tag 1
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_phys_tag 2
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_size_tag 3
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_attr_tag 4
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_mflags_tag 5
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_cid_tag 1
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_phys_tag 2
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_size_tag 3
#define perfetto_protos_FastrpcDmaMapFtraceEvent_cid_tag 1
#define perfetto_protos_FastrpcDmaMapFtraceEvent_fd_tag 2
#define perfetto_protos_FastrpcDmaMapFtraceEvent_phys_tag 3
#define perfetto_protos_FastrpcDmaMapFtraceEvent_size_tag 4
#define perfetto_protos_FastrpcDmaMapFtraceEvent_len_tag 5
#define perfetto_protos_FastrpcDmaMapFtraceEvent_attr_tag 6
#define perfetto_protos_FastrpcDmaMapFtraceEvent_mflags_tag 7
#define perfetto_protos_FenceInitFtraceEvent_context_tag 1
#define perfetto_protos_FenceInitFtraceEvent_driver_tag 2
#define perfetto_protos_FenceInitFtraceEvent_seqno_tag 3
#define perfetto_protos_FenceInitFtraceEvent_timeline_tag 4
#define perfetto_protos_FenceDestroyFtraceEvent_context_tag 1
#define perfetto_protos_FenceDestroyFtraceEvent_driver_tag 2
#define perfetto_protos_FenceDestroyFtraceEvent_seqno_tag 3
#define perfetto_protos_FenceDestroyFtraceEvent_timeline_tag 4
#define perfetto_protos_FenceEnableSignalFtraceEvent_context_tag 1
#define perfetto_protos_FenceEnableSignalFtraceEvent_driver_tag 2
#define perfetto_protos_FenceEnableSignalFtraceEvent_seqno_tag 3
#define perfetto_protos_FenceEnableSignalFtraceEvent_timeline_tag 4
#define perfetto_protos_FenceSignaledFtraceEvent_context_tag 1
#define perfetto_protos_FenceSignaledFtraceEvent_driver_tag 2
#define perfetto_protos_FenceSignaledFtraceEvent_seqno_tag 3
#define perfetto_protos_FenceSignaledFtraceEvent_timeline_tag 4
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_pfn_tag 1
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_i_ino_tag 2
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_index_tag 3
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_s_dev_tag 4
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_page_tag 5
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_pfn_tag 1
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_i_ino_tag 2
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_index_tag 3
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_s_dev_tag 4
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_page_tag 5
#define perfetto_protos_DoSysOpenFtraceEvent_filename_tag 1
#define perfetto_protos_DoSysOpenFtraceEvent_flags_tag 2
#define perfetto_protos_DoSysOpenFtraceEvent_mode_tag 3
#define perfetto_protos_OpenExecFtraceEvent_filename_tag 1
#define perfetto_protos_PrintFtraceEvent_ip_tag  1
#define perfetto_protos_PrintFtraceEvent_buf_tag 2
#define perfetto_protos_FuncgraphEntryFtraceEvent_depth_tag 1
#define perfetto_protos_FuncgraphEntryFtraceEvent_func_tag 2
#define perfetto_protos_FuncgraphExitFtraceEvent_calltime_tag 1
#define perfetto_protos_FuncgraphExitFtraceEvent_depth_tag 2
#define perfetto_protos_FuncgraphExitFtraceEvent_func_tag 3
#define perfetto_protos_FuncgraphExitFtraceEvent_overrun_tag 4
#define perfetto_protos_FuncgraphExitFtraceEvent_rettime_tag 5
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_pid_tag 1
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_name_tag 4
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_type_tag 5
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_value_tag 6
#define perfetto_protos_GenericFtraceEvent_event_name_tag 1
#define perfetto_protos_GenericFtraceEvent_field_tag 2
#define perfetto_protos_GenericFtraceEvent_Field_name_tag 1
#define perfetto_protos_GenericFtraceEvent_Field_str_value_tag 3
#define perfetto_protos_GenericFtraceEvent_Field_int_value_tag 4
#define perfetto_protos_GenericFtraceEvent_Field_uint_value_tag 5
#define perfetto_protos_KprobeEvent_name_tag     1
#define perfetto_protos_KprobeEvent_type_tag     2
#define perfetto_protos_GoogleIccEventFtraceEvent_event_tag 1
#define perfetto_protos_GoogleIccEventFtraceEvent_timestamp_tag 2
#define perfetto_protos_GoogleIrmEventFtraceEvent_event_tag 1
#define perfetto_protos_GoogleIrmEventFtraceEvent_timestamp_tag 2
#define perfetto_protos_GpuMemTotalFtraceEvent_gpu_id_tag 1
#define perfetto_protos_GpuMemTotalFtraceEvent_pid_tag 2
#define perfetto_protos_GpuMemTotalFtraceEvent_size_tag 3
#define perfetto_protos_DrmSchedJobFtraceEvent_entity_tag 1
#define perfetto_protos_DrmSchedJobFtraceEvent_fence_tag 2
#define perfetto_protos_DrmSchedJobFtraceEvent_hw_job_count_tag 3
#define perfetto_protos_DrmSchedJobFtraceEvent_id_tag 4
#define perfetto_protos_DrmSchedJobFtraceEvent_job_count_tag 5
#define perfetto_protos_DrmSchedJobFtraceEvent_name_tag 6
#define perfetto_protos_DrmRunJobFtraceEvent_entity_tag 1
#define perfetto_protos_DrmRunJobFtraceEvent_fence_tag 2
#define perfetto_protos_DrmRunJobFtraceEvent_hw_job_count_tag 3
#define perfetto_protos_DrmRunJobFtraceEvent_id_tag 4
#define perfetto_protos_DrmRunJobFtraceEvent_job_count_tag 5
#define perfetto_protos_DrmRunJobFtraceEvent_name_tag 6
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_fence_tag 1
#define perfetto_protos_HostHcallFtraceEvent_id_tag 1
#define perfetto_protos_HostHcallFtraceEvent_invalid_tag 2
#define perfetto_protos_HostSmcFtraceEvent_id_tag 1
#define perfetto_protos_HostSmcFtraceEvent_forwarded_tag 2
#define perfetto_protos_HostMemAbortFtraceEvent_esr_tag 1
#define perfetto_protos_HostMemAbortFtraceEvent_addr_tag 2
#define perfetto_protos_I2cReadFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_I2cReadFtraceEvent_msg_nr_tag 2
#define perfetto_protos_I2cReadFtraceEvent_addr_tag 3
#define perfetto_protos_I2cReadFtraceEvent_flags_tag 4
#define perfetto_protos_I2cReadFtraceEvent_len_tag 5
#define perfetto_protos_I2cWriteFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_I2cWriteFtraceEvent_msg_nr_tag 2
#define perfetto_protos_I2cWriteFtraceEvent_addr_tag 3
#define perfetto_protos_I2cWriteFtraceEvent_flags_tag 4
#define perfetto_protos_I2cWriteFtraceEvent_len_tag 5
#define perfetto_protos_I2cWriteFtraceEvent_buf_tag 6
#define perfetto_protos_I2cResultFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_I2cResultFtraceEvent_nr_msgs_tag 2
#define perfetto_protos_I2cResultFtraceEvent_ret_tag 3
#define perfetto_protos_I2cReplyFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_I2cReplyFtraceEvent_msg_nr_tag 2
#define perfetto_protos_I2cReplyFtraceEvent_addr_tag 3
#define perfetto_protos_I2cReplyFtraceEvent_flags_tag 4
#define perfetto_protos_I2cReplyFtraceEvent_len_tag 5
#define perfetto_protos_I2cReplyFtraceEvent_buf_tag 6
#define perfetto_protos_SmbusReadFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_SmbusReadFtraceEvent_flags_tag 2
#define perfetto_protos_SmbusReadFtraceEvent_addr_tag 3
#define perfetto_protos_SmbusReadFtraceEvent_command_tag 4
#define perfetto_protos_SmbusReadFtraceEvent_protocol_tag 5
#define perfetto_protos_SmbusWriteFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_SmbusWriteFtraceEvent_addr_tag 2
#define perfetto_protos_SmbusWriteFtraceEvent_flags_tag 3
#define perfetto_protos_SmbusWriteFtraceEvent_command_tag 4
#define perfetto_protos_SmbusWriteFtraceEvent_len_tag 5
#define perfetto_protos_SmbusWriteFtraceEvent_protocol_tag 6
#define perfetto_protos_SmbusResultFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_SmbusResultFtraceEvent_addr_tag 2
#define perfetto_protos_SmbusResultFtraceEvent_flags_tag 3
#define perfetto_protos_SmbusResultFtraceEvent_read_write_tag 4
#define perfetto_protos_SmbusResultFtraceEvent_command_tag 5
#define perfetto_protos_SmbusResultFtraceEvent_res_tag 6
#define perfetto_protos_SmbusResultFtraceEvent_protocol_tag 7
#define perfetto_protos_SmbusReplyFtraceEvent_adapter_nr_tag 1
#define perfetto_protos_SmbusReplyFtraceEvent_addr_tag 2
#define perfetto_protos_SmbusReplyFtraceEvent_flags_tag 3
#define perfetto_protos_SmbusReplyFtraceEvent_command_tag 4
#define perfetto_protos_SmbusReplyFtraceEvent_len_tag 5
#define perfetto_protos_SmbusReplyFtraceEvent_protocol_tag 6
#define perfetto_protos_IonStatFtraceEvent_buffer_id_tag 1
#define perfetto_protos_IonStatFtraceEvent_len_tag 2
#define perfetto_protos_IonStatFtraceEvent_total_allocated_tag 3
#define perfetto_protos_IpiEntryFtraceEvent_reason_tag 1
#define perfetto_protos_IpiExitFtraceEvent_reason_tag 1
#define perfetto_protos_IpiRaiseFtraceEvent_target_cpus_tag 1
#define perfetto_protos_IpiRaiseFtraceEvent_reason_tag 2
#define perfetto_protos_SoftirqEntryFtraceEvent_vec_tag 1
#define perfetto_protos_SoftirqExitFtraceEvent_vec_tag 1
#define perfetto_protos_SoftirqRaiseFtraceEvent_vec_tag 1
#define perfetto_protos_IrqHandlerEntryFtraceEvent_irq_tag 1
#define perfetto_protos_IrqHandlerEntryFtraceEvent_name_tag 2
#define perfetto_protos_IrqHandlerEntryFtraceEvent_handler_tag 3
#define perfetto_protos_IrqHandlerExitFtraceEvent_irq_tag 1
#define perfetto_protos_IrqHandlerExitFtraceEvent_ret_tag 2
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_gpu_freq_tag 1
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_gpu_id_tag 2
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_id_tag 1
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_timestamp_tag 2
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_queued_tag 3
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_flags_tag 4
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_prio_tag 5
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_id_tag 1
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_timestamp_tag 2
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_inflight_tag 3
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_flags_tag 4
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_ticks_tag 5
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_secs_tag 6
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_usecs_tag 7
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_prio_tag 8
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_rb_id_tag 9
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_rptr_tag 10
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_wptr_tag 11
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_q_inflight_tag 12
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_dispatch_queue_tag 13
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_id_tag 1
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_timestamp_tag 2
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_ticks_tag 3
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_prio_tag 4
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_id_tag 1
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_timestamp_tag 2
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_inflight_tag 3
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_recovery_tag 4
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_flags_tag 5
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_start_tag 6
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_retire_tag 7
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_prio_tag 8
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_rb_id_tag 9
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_rptr_tag 10
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_wptr_tag 11
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_q_inflight_tag 12
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_fault_recovery_tag 13
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_dispatch_queue_tag 14
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_submitted_to_rb_tag 15
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_retired_on_gmu_tag 16
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_active_tag 17
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_order_tag 2
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_order_tag 2
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_order_tag 2
#define perfetto_protos_AllocPagesSysEndFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesSysEndFtraceEvent_order_tag 2
#define perfetto_protos_AllocPagesSysFailFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesSysFailFtraceEvent_order_tag 2
#define perfetto_protos_AllocPagesSysStartFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_AllocPagesSysStartFtraceEvent_order_tag 2
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_tries_tag 1
#define perfetto_protos_IommuMapRangeFtraceEvent_chunk_size_tag 1
#define perfetto_protos_IommuMapRangeFtraceEvent_len_tag 2
#define perfetto_protos_IommuMapRangeFtraceEvent_pa_tag 3
#define perfetto_protos_IommuMapRangeFtraceEvent_va_tag 4
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_len_tag 1
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_num_tag 2
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_pa_tag 3
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_sec_id_tag 4
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_va_tag 5
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_len_tag 1
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_num_tag 2
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_pa_tag 3
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_sec_id_tag 4
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_va_tag 5
#define perfetto_protos_IonAllocBufferEndFtraceEvent_client_name_tag 1
#define perfetto_protos_IonAllocBufferEndFtraceEvent_flags_tag 2
#define perfetto_protos_IonAllocBufferEndFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonAllocBufferEndFtraceEvent_len_tag 4
#define perfetto_protos_IonAllocBufferEndFtraceEvent_mask_tag 5
#define perfetto_protos_IonAllocBufferFailFtraceEvent_client_name_tag 1
#define perfetto_protos_IonAllocBufferFailFtraceEvent_error_tag 2
#define perfetto_protos_IonAllocBufferFailFtraceEvent_flags_tag 3
#define perfetto_protos_IonAllocBufferFailFtraceEvent_heap_name_tag 4
#define perfetto_protos_IonAllocBufferFailFtraceEvent_len_tag 5
#define perfetto_protos_IonAllocBufferFailFtraceEvent_mask_tag 6
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_client_name_tag 1
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_error_tag 2
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_flags_tag 3
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_heap_name_tag 4
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_len_tag 5
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_mask_tag 6
#define perfetto_protos_IonAllocBufferStartFtraceEvent_client_name_tag 1
#define perfetto_protos_IonAllocBufferStartFtraceEvent_flags_tag 2
#define perfetto_protos_IonAllocBufferStartFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonAllocBufferStartFtraceEvent_len_tag 4
#define perfetto_protos_IonAllocBufferStartFtraceEvent_mask_tag 5
#define perfetto_protos_IonCpAllocRetryFtraceEvent_tries_tag 1
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_align_tag 1
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_flags_tag 2
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_len_tag 4
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_align_tag 1
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_flags_tag 2
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_len_tag 4
#define perfetto_protos_IonPrefetchingFtraceEvent_len_tag 1
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_is_prefetch_tag 1
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_len_tag 2
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_pool_total_tag 3
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_is_prefetch_tag 1
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_len_tag 2
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_pool_total_tag 3
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_align_tag 1
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_flags_tag 2
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_len_tag 4
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_align_tag 1
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_flags_tag 2
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_heap_name_tag 3
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_len_tag 4
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_drained_size_tag 1
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_skipped_size_tag 2
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_drained_size_tag 1
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_skipped_size_tag 2
#define perfetto_protos_KfreeFtraceEvent_call_site_tag 1
#define perfetto_protos_KfreeFtraceEvent_ptr_tag 2
#define perfetto_protos_KmallocFtraceEvent_bytes_alloc_tag 1
#define perfetto_protos_KmallocFtraceEvent_bytes_req_tag 2
#define perfetto_protos_KmallocFtraceEvent_call_site_tag 3
#define perfetto_protos_KmallocFtraceEvent_gfp_flags_tag 4
#define perfetto_protos_KmallocFtraceEvent_ptr_tag 5
#define perfetto_protos_KmallocNodeFtraceEvent_bytes_alloc_tag 1
#define perfetto_protos_KmallocNodeFtraceEvent_bytes_req_tag 2
#define perfetto_protos_KmallocNodeFtraceEvent_call_site_tag 3
#define perfetto_protos_KmallocNodeFtraceEvent_gfp_flags_tag 4
#define perfetto_protos_KmallocNodeFtraceEvent_node_tag 5
#define perfetto_protos_KmallocNodeFtraceEvent_ptr_tag 6
#define perfetto_protos_KmemCacheAllocFtraceEvent_bytes_alloc_tag 1
#define perfetto_protos_KmemCacheAllocFtraceEvent_bytes_req_tag 2
#define perfetto_protos_KmemCacheAllocFtraceEvent_call_site_tag 3
#define perfetto_protos_KmemCacheAllocFtraceEvent_gfp_flags_tag 4
#define perfetto_protos_KmemCacheAllocFtraceEvent_ptr_tag 5
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_bytes_alloc_tag 1
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_bytes_req_tag 2
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_call_site_tag 3
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_gfp_flags_tag 4
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_node_tag 5
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_ptr_tag 6
#define perfetto_protos_KmemCacheFreeFtraceEvent_call_site_tag 1
#define perfetto_protos_KmemCacheFreeFtraceEvent_ptr_tag 2
#define perfetto_protos_MigratePagesEndFtraceEvent_mode_tag 1
#define perfetto_protos_MigratePagesStartFtraceEvent_mode_tag 1
#define perfetto_protos_MigrateRetryFtraceEvent_tries_tag 1
#define perfetto_protos_MmPageAllocFtraceEvent_gfp_flags_tag 1
#define perfetto_protos_MmPageAllocFtraceEvent_migratetype_tag 2
#define perfetto_protos_MmPageAllocFtraceEvent_order_tag 3
#define perfetto_protos_MmPageAllocFtraceEvent_page_tag 4
#define perfetto_protos_MmPageAllocFtraceEvent_pfn_tag 5
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_alloc_migratetype_tag 1
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_alloc_order_tag 2
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_fallback_migratetype_tag 3
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_fallback_order_tag 4
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_page_tag 5
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_change_ownership_tag 6
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_pfn_tag 7
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_migratetype_tag 1
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_order_tag 2
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_page_tag 3
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_pfn_tag 4
#define perfetto_protos_MmPageFreeFtraceEvent_order_tag 1
#define perfetto_protos_MmPageFreeFtraceEvent_page_tag 2
#define perfetto_protos_MmPageFreeFtraceEvent_pfn_tag 3
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_cold_tag 1
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_page_tag 2
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_pfn_tag 3
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_migratetype_tag 1
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_order_tag 2
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_page_tag 3
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_pfn_tag 4
#define perfetto_protos_RssStatFtraceEvent_member_tag 1
#define perfetto_protos_RssStatFtraceEvent_size_tag 2
#define perfetto_protos_RssStatFtraceEvent_curr_tag 3
#define perfetto_protos_RssStatFtraceEvent_mm_id_tag 4
#define perfetto_protos_IonHeapShrinkFtraceEvent_heap_name_tag 1
#define perfetto_protos_IonHeapShrinkFtraceEvent_len_tag 2
#define perfetto_protos_IonHeapShrinkFtraceEvent_total_allocated_tag 3
#define perfetto_protos_IonHeapGrowFtraceEvent_heap_name_tag 1
#define perfetto_protos_IonHeapGrowFtraceEvent_len_tag 2
#define perfetto_protos_IonHeapGrowFtraceEvent_total_allocated_tag 3
#define perfetto_protos_IonBufferCreateFtraceEvent_addr_tag 1
#define perfetto_protos_IonBufferCreateFtraceEvent_len_tag 2
#define perfetto_protos_IonBufferDestroyFtraceEvent_addr_tag 1
#define perfetto_protos_IonBufferDestroyFtraceEvent_len_tag 2
#define perfetto_protos_KvmAccessFaultFtraceEvent_ipa_tag 1
#define perfetto_protos_KvmAckIrqFtraceEvent_irqchip_tag 1
#define perfetto_protos_KvmAckIrqFtraceEvent_pin_tag 2
#define perfetto_protos_KvmAgeHvaFtraceEvent_end_tag 1
#define perfetto_protos_KvmAgeHvaFtraceEvent_start_tag 2
#define perfetto_protos_KvmAgePageFtraceEvent_gfn_tag 1
#define perfetto_protos_KvmAgePageFtraceEvent_hva_tag 2
#define perfetto_protos_KvmAgePageFtraceEvent_level_tag 3
#define perfetto_protos_KvmAgePageFtraceEvent_referenced_tag 4
#define perfetto_protos_KvmArmClearDebugFtraceEvent_guest_debug_tag 1
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_name_tag 1
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_value_tag 2
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_len_tag 1
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_name_tag 2
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_guest_debug_tag 1
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_vcpu_tag 2
#define perfetto_protos_KvmEntryFtraceEvent_vcpu_pc_tag 1
#define perfetto_protos_KvmExitFtraceEvent_esr_ec_tag 1
#define perfetto_protos_KvmExitFtraceEvent_ret_tag 2
#define perfetto_protos_KvmExitFtraceEvent_vcpu_pc_tag 3
#define perfetto_protos_KvmFpuFtraceEvent_load_tag 1
#define perfetto_protos_KvmGetTimerMapFtraceEvent_direct_ptimer_tag 1
#define perfetto_protos_KvmGetTimerMapFtraceEvent_direct_vtimer_tag 2
#define perfetto_protos_KvmGetTimerMapFtraceEvent_emul_ptimer_tag 3
#define perfetto_protos_KvmGetTimerMapFtraceEvent_vcpu_id_tag 4
#define perfetto_protos_KvmGuestFaultFtraceEvent_hsr_tag 1
#define perfetto_protos_KvmGuestFaultFtraceEvent_hxfar_tag 2
#define perfetto_protos_KvmGuestFaultFtraceEvent_ipa_tag 3
#define perfetto_protos_KvmGuestFaultFtraceEvent_vcpu_pc_tag 4
#define perfetto_protos_KvmHandleSysRegFtraceEvent_hsr_tag 1
#define perfetto_protos_KvmHvcArm64FtraceEvent_imm_tag 1
#define perfetto_protos_KvmHvcArm64FtraceEvent_r0_tag 2
#define perfetto_protos_KvmHvcArm64FtraceEvent_vcpu_pc_tag 3
#define perfetto_protos_KvmIrqLineFtraceEvent_irq_num_tag 1
#define perfetto_protos_KvmIrqLineFtraceEvent_level_tag 2
#define perfetto_protos_KvmIrqLineFtraceEvent_type_tag 3
#define perfetto_protos_KvmIrqLineFtraceEvent_vcpu_idx_tag 4
#define perfetto_protos_KvmMmioFtraceEvent_gpa_tag 1
#define perfetto_protos_KvmMmioFtraceEvent_len_tag 2
#define perfetto_protos_KvmMmioFtraceEvent_type_tag 3
#define perfetto_protos_KvmMmioFtraceEvent_val_tag 4
#define perfetto_protos_KvmMmioEmulateFtraceEvent_cpsr_tag 1
#define perfetto_protos_KvmMmioEmulateFtraceEvent_instr_tag 2
#define perfetto_protos_KvmMmioEmulateFtraceEvent_vcpu_pc_tag 3
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_guest_debug_tag 1
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_vcpu_tag 2
#define perfetto_protos_KvmSetIrqFtraceEvent_gsi_tag 1
#define perfetto_protos_KvmSetIrqFtraceEvent_irq_source_id_tag 2
#define perfetto_protos_KvmSetIrqFtraceEvent_level_tag 3
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_hva_tag 1
#define perfetto_protos_KvmSetWayFlushFtraceEvent_cache_tag 1
#define perfetto_protos_KvmSetWayFlushFtraceEvent_vcpu_pc_tag 2
#define perfetto_protos_KvmSysAccessFtraceEvent_CRm_tag 1
#define perfetto_protos_KvmSysAccessFtraceEvent_CRn_tag 2
#define perfetto_protos_KvmSysAccessFtraceEvent_Op0_tag 3
#define perfetto_protos_KvmSysAccessFtraceEvent_Op1_tag 4
#define perfetto_protos_KvmSysAccessFtraceEvent_Op2_tag 5
#define perfetto_protos_KvmSysAccessFtraceEvent_is_write_tag 6
#define perfetto_protos_KvmSysAccessFtraceEvent_name_tag 7
#define perfetto_protos_KvmSysAccessFtraceEvent_vcpu_pc_tag 8
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_hva_tag 1
#define perfetto_protos_KvmTimerEmulateFtraceEvent_should_fire_tag 1
#define perfetto_protos_KvmTimerEmulateFtraceEvent_timer_idx_tag 2
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_timer_idx_tag 1
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_ctl_tag 1
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_cval_tag 2
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_timer_idx_tag 3
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_ctl_tag 1
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_cval_tag 2
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_timer_idx_tag 3
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_irq_tag 1
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_level_tag 2
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_vcpu_id_tag 3
#define perfetto_protos_KvmToggleCacheFtraceEvent_now_tag 1
#define perfetto_protos_KvmToggleCacheFtraceEvent_vcpu_pc_tag 2
#define perfetto_protos_KvmToggleCacheFtraceEvent_was_tag 3
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_end_tag 1
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_start_tag 2
#define perfetto_protos_KvmUserspaceExitFtraceEvent_reason_tag 1
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_ns_tag 1
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_valid_tag 2
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_waited_tag 3
#define perfetto_protos_KvmWfxArm64FtraceEvent_is_wfe_tag 1
#define perfetto_protos_KvmWfxArm64FtraceEvent_vcpu_pc_tag 2
#define perfetto_protos_TrapRegFtraceEvent_fn_tag 1
#define perfetto_protos_TrapRegFtraceEvent_is_write_tag 2
#define perfetto_protos_TrapRegFtraceEvent_reg_tag 3
#define perfetto_protos_TrapRegFtraceEvent_write_value_tag 4
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_irq_tag 1
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_level_tag 2
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_vcpu_id_tag 3
#define perfetto_protos_LowmemoryKillFtraceEvent_comm_tag 1
#define perfetto_protos_LowmemoryKillFtraceEvent_pid_tag 2
#define perfetto_protos_LowmemoryKillFtraceEvent_pagecache_size_tag 3
#define perfetto_protos_LowmemoryKillFtraceEvent_pagecache_limit_tag 4
#define perfetto_protos_LowmemoryKillFtraceEvent_free_tag 5
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_lwis_name_tag 1
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_type_tag 2
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_pid_tag 3
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_func_name_tag 4
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_value_tag 5
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_name_tag 1
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_pid_tag 2
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_type_tag 3
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_value_tag 4
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_id_tag 1
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_info_val1_tag 2
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_info_val2_tag 3
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_kctx_tgid_tag 5
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_id_tag 1
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_info_val1_tag 2
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_info_val2_tag 3
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_kctx_tgid_tag 5
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_id_tag 1
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_info_val1_tag 2
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_info_val2_tag 3
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_kctx_tgid_tag 5
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_info_val1_tag 1
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_info_val2_tag 2
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_kctx_tgid_tag 3
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_id_tag 5
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_info_val1_tag 1
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_info_val2_tag 2
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_kctx_tgid_tag 3
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_id_tag 5
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_info_val1_tag 1
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_info_val2_tag 2
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_kctx_tgid_tag 3
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_kctx_id_tag 4
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_id_tag 5
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_kctx_tgid_tag 1
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_kctx_id_tag 2
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_info_val_tag 3
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_change_ns_tag 1
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_from_state_tag 2
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_to_state_tag 3
#define perfetto_protos_MdpCmdKickoffFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpCmdKickoffFtraceEvent_kickoff_cnt_tag 2
#define perfetto_protos_MdpCommitFtraceEvent_num_tag 1
#define perfetto_protos_MdpCommitFtraceEvent_play_cnt_tag 2
#define perfetto_protos_MdpCommitFtraceEvent_clk_rate_tag 3
#define perfetto_protos_MdpCommitFtraceEvent_bandwidth_tag 4
#define perfetto_protos_MdpPerfSetOtFtraceEvent_pnum_tag 1
#define perfetto_protos_MdpPerfSetOtFtraceEvent_xin_id_tag 2
#define perfetto_protos_MdpPerfSetOtFtraceEvent_rd_lim_tag 3
#define perfetto_protos_MdpPerfSetOtFtraceEvent_is_vbif_rt_tag 4
#define perfetto_protos_MdpSsppChangeFtraceEvent_num_tag 1
#define perfetto_protos_MdpSsppChangeFtraceEvent_play_cnt_tag 2
#define perfetto_protos_MdpSsppChangeFtraceEvent_mixer_tag 3
#define perfetto_protos_MdpSsppChangeFtraceEvent_stage_tag 4
#define perfetto_protos_MdpSsppChangeFtraceEvent_flags_tag 5
#define perfetto_protos_MdpSsppChangeFtraceEvent_format_tag 6
#define perfetto_protos_MdpSsppChangeFtraceEvent_img_w_tag 7
#define perfetto_protos_MdpSsppChangeFtraceEvent_img_h_tag 8
#define perfetto_protos_MdpSsppChangeFtraceEvent_src_x_tag 9
#define perfetto_protos_MdpSsppChangeFtraceEvent_src_y_tag 10
#define perfetto_protos_MdpSsppChangeFtraceEvent_src_w_tag 11
#define perfetto_protos_MdpSsppChangeFtraceEvent_src_h_tag 12
#define perfetto_protos_MdpSsppChangeFtraceEvent_dst_x_tag 13
#define perfetto_protos_MdpSsppChangeFtraceEvent_dst_y_tag 14
#define perfetto_protos_MdpSsppChangeFtraceEvent_dst_w_tag 15
#define perfetto_protos_MdpSsppChangeFtraceEvent_dst_h_tag 16
#define perfetto_protos_TracingMarkWriteFtraceEvent_pid_tag 1
#define perfetto_protos_TracingMarkWriteFtraceEvent_trace_name_tag 2
#define perfetto_protos_TracingMarkWriteFtraceEvent_trace_begin_tag 3
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_intf_num_tag 2
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_pp_num_tag 3
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_koff_cnt_tag 4
#define perfetto_protos_MdpCompareBwFtraceEvent_new_ab_tag 1
#define perfetto_protos_MdpCompareBwFtraceEvent_new_ib_tag 2
#define perfetto_protos_MdpCompareBwFtraceEvent_new_wb_tag 3
#define perfetto_protos_MdpCompareBwFtraceEvent_old_ab_tag 4
#define perfetto_protos_MdpCompareBwFtraceEvent_old_ib_tag 5
#define perfetto_protos_MdpCompareBwFtraceEvent_old_wb_tag 6
#define perfetto_protos_MdpCompareBwFtraceEvent_params_changed_tag 7
#define perfetto_protos_MdpCompareBwFtraceEvent_update_bw_tag 8
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_pnum_tag 1
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_fmt_tag 2
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_mode_tag 3
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_panic_lut_tag 4
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_robust_lut_tag 5
#define perfetto_protos_MdpSsppSetFtraceEvent_num_tag 1
#define perfetto_protos_MdpSsppSetFtraceEvent_play_cnt_tag 2
#define perfetto_protos_MdpSsppSetFtraceEvent_mixer_tag 3
#define perfetto_protos_MdpSsppSetFtraceEvent_stage_tag 4
#define perfetto_protos_MdpSsppSetFtraceEvent_flags_tag 5
#define perfetto_protos_MdpSsppSetFtraceEvent_format_tag 6
#define perfetto_protos_MdpSsppSetFtraceEvent_img_w_tag 7
#define perfetto_protos_MdpSsppSetFtraceEvent_img_h_tag 8
#define perfetto_protos_MdpSsppSetFtraceEvent_src_x_tag 9
#define perfetto_protos_MdpSsppSetFtraceEvent_src_y_tag 10
#define perfetto_protos_MdpSsppSetFtraceEvent_src_w_tag 11
#define perfetto_protos_MdpSsppSetFtraceEvent_src_h_tag 12
#define perfetto_protos_MdpSsppSetFtraceEvent_dst_x_tag 13
#define perfetto_protos_MdpSsppSetFtraceEvent_dst_y_tag 14
#define perfetto_protos_MdpSsppSetFtraceEvent_dst_w_tag 15
#define perfetto_protos_MdpSsppSetFtraceEvent_dst_h_tag 16
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_koff_cnt_tag 2
#define perfetto_protos_MdpMisrCrcFtraceEvent_block_id_tag 1
#define perfetto_protos_MdpMisrCrcFtraceEvent_vsync_cnt_tag 2
#define perfetto_protos_MdpMisrCrcFtraceEvent_crc_tag 3
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_pnum_tag 1
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_fmt_tag 2
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_intf_tag 3
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_rot_tag 4
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_fl_tag 5
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_lut_tag 6
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_linear_tag 7
#define perfetto_protos_MdpTraceCounterFtraceEvent_pid_tag 1
#define perfetto_protos_MdpTraceCounterFtraceEvent_counter_name_tag 2
#define perfetto_protos_MdpTraceCounterFtraceEvent_value_tag 3
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpMixerUpdateFtraceEvent_mixer_num_tag 1
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_pnum_tag 1
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_use_space_tag 2
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_priority_bytes_tag 3
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_wm0_tag 4
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_wm1_tag 5
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_wm2_tag 6
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_mb_cnt_tag 7
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_mb_size_tag 8
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_underrun_cnt_tag 2
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_ctl_num_tag 1
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_kickoff_cnt_tag 2
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_pnum_tag 1
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_latency_buf_tag 2
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_ot_tag 3
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_y_buf_tag 4
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_y_scaler_tag 5
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_pp_lines_tag 6
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_pp_bytes_tag 7
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_post_sc_tag 8
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_fbc_bytes_tag 9
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_prefill_bytes_tag 10
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_client_tag 1
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_ab_quota_tag 2
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_ib_quota_tag 3
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_state_tag 1
#define perfetto_protos_MmEventRecordFtraceEvent_avg_lat_tag 1
#define perfetto_protos_MmEventRecordFtraceEvent_count_tag 2
#define perfetto_protos_MmEventRecordFtraceEvent_max_lat_tag 3
#define perfetto_protos_MmEventRecordFtraceEvent_type_tag 4
#define perfetto_protos_NetifReceiveSkbFtraceEvent_len_tag 1
#define perfetto_protos_NetifReceiveSkbFtraceEvent_name_tag 2
#define perfetto_protos_NetifReceiveSkbFtraceEvent_skbaddr_tag 3
#define perfetto_protos_NetDevXmitFtraceEvent_len_tag 1
#define perfetto_protos_NetDevXmitFtraceEvent_name_tag 2
#define perfetto_protos_NetDevXmitFtraceEvent_rc_tag 3
#define perfetto_protos_NetDevXmitFtraceEvent_skbaddr_tag 4
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_data_len_tag 1
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_gso_size_tag 2
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_gso_type_tag 3
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_hash_tag 4
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_ip_summed_tag 5
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_l4_hash_tag 6
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_len_tag 7
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_mac_header_tag 8
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_mac_header_valid_tag 9
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_name_tag 10
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_napi_id_tag 11
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_nr_frags_tag 12
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_protocol_tag 13
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_queue_mapping_tag 14
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_skbaddr_tag 15
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_truesize_tag 16
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_vlan_proto_tag 17
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_vlan_tagged_tag 18
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_vlan_tci_tag 19
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_ret_tag 1
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_comm_tag 1
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_oom_score_adj_tag 2
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_pid_tag 3
#define perfetto_protos_MarkVictimFtraceEvent_pid_tag 1
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_header_tag 1
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_payload_tag 2
#define perfetto_protos_DsiRxFtraceEvent_cmd_tag 1
#define perfetto_protos_DsiRxFtraceEvent_rx_buf_tag 2
#define perfetto_protos_DsiTxFtraceEvent_last_tag 1
#define perfetto_protos_DsiTxFtraceEvent_tx_buf_tag 2
#define perfetto_protos_DsiTxFtraceEvent_type_tag 3
#define perfetto_protos_PanelWriteGenericFtraceEvent_pid_tag 1
#define perfetto_protos_PanelWriteGenericFtraceEvent_trace_name_tag 2
#define perfetto_protos_PanelWriteGenericFtraceEvent_trace_begin_tag 3
#define perfetto_protos_PanelWriteGenericFtraceEvent_name_tag 4
#define perfetto_protos_PanelWriteGenericFtraceEvent_type_tag 5
#define perfetto_protos_PanelWriteGenericFtraceEvent_value_tag 6
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_old_pid_tag 1
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_new_pid_tag 2
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_cctr_tag 3
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr0_tag 4
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr1_tag 5
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr2_tag 6
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr3_tag 7
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_lctr0_tag 8
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_lctr1_tag 9
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr4_tag 10
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_ctr5_tag 11
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_prev_comm_tag 12
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_prev_pid_tag 13
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_cyc_tag 14
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_inst_tag 15
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_stallbm_tag 16
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_l3dm_tag 17
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_next_pid_tag 18
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_next_comm_tag 19
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_prev_state_tag 20
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_amu0_tag 21
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_amu1_tag 22
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_amu2_tag 23
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_whatever_tag 1
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_delta_nr_scanned_tag 1
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_delta_nr_reclaimed_tag 2
#define perfetto_protos_CpuFrequencyFtraceEvent_state_tag 1
#define perfetto_protos_CpuFrequencyFtraceEvent_cpu_id_tag 2
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_min_freq_tag 1
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_max_freq_tag 2
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_cpu_id_tag 3
#define perfetto_protos_CpuIdleFtraceEvent_state_tag 1
#define perfetto_protos_CpuIdleFtraceEvent_cpu_id_tag 2
#define perfetto_protos_ClockEnableFtraceEvent_name_tag 1
#define perfetto_protos_ClockEnableFtraceEvent_state_tag 2
#define perfetto_protos_ClockEnableFtraceEvent_cpu_id_tag 3
#define perfetto_protos_ClockDisableFtraceEvent_name_tag 1
#define perfetto_protos_ClockDisableFtraceEvent_state_tag 2
#define perfetto_protos_ClockDisableFtraceEvent_cpu_id_tag 3
#define perfetto_protos_ClockSetRateFtraceEvent_name_tag 1
#define perfetto_protos_ClockSetRateFtraceEvent_state_tag 2
#define perfetto_protos_ClockSetRateFtraceEvent_cpu_id_tag 3
#define perfetto_protos_SuspendResumeFtraceEvent_action_tag 1
#define perfetto_protos_SuspendResumeFtraceEvent_val_tag 2
#define perfetto_protos_SuspendResumeFtraceEvent_start_tag 3
#define perfetto_protos_GpuFrequencyFtraceEvent_gpu_id_tag 1
#define perfetto_protos_GpuFrequencyFtraceEvent_state_tag 2
#define perfetto_protos_WakeupSourceActivateFtraceEvent_name_tag 1
#define perfetto_protos_WakeupSourceActivateFtraceEvent_state_tag 2
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_name_tag 1
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_state_tag 2
#define perfetto_protos_GpuWorkPeriodFtraceEvent_gpu_id_tag 1
#define perfetto_protos_GpuWorkPeriodFtraceEvent_uid_tag 2
#define perfetto_protos_GpuWorkPeriodFtraceEvent_start_time_ns_tag 3
#define perfetto_protos_GpuWorkPeriodFtraceEvent_end_time_ns_tag 4
#define perfetto_protos_GpuWorkPeriodFtraceEvent_total_active_duration_ns_tag 5
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_device_tag 1
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_driver_tag 2
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_parent_tag 3
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_pm_ops_tag 4
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_event_tag 5
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_device_tag 1
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_driver_tag 2
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_error_tag 3
#define perfetto_protos_ConsoleFtraceEvent_msg_tag 1
#define perfetto_protos_SysEnterFtraceEvent_id_tag 1
#define perfetto_protos_SysEnterFtraceEvent_args_tag 2
#define perfetto_protos_SysExitFtraceEvent_id_tag 1
#define perfetto_protos_SysExitFtraceEvent_ret_tag 2
#define perfetto_protos_RegulatorDisableFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorEnableFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_min_tag 2
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_max_tag 3
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_name_tag 1
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_val_tag 2
#define perfetto_protos_RpmStatusFtraceEvent_name_tag 1
#define perfetto_protos_RpmStatusFtraceEvent_status_tag 2
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_pid_tag 1
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_trace_name_tag 2
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_trace_begin_tag 3
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_trace_type_tag 4
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_value_tag 5
#define perfetto_protos_SchedSwitchFtraceEvent_prev_comm_tag 1
#define perfetto_protos_SchedSwitchFtraceEvent_prev_pid_tag 2
#define perfetto_protos_SchedSwitchFtraceEvent_prev_prio_tag 3
#define perfetto_protos_SchedSwitchFtraceEvent_prev_state_tag 4
#define perfetto_protos_SchedSwitchFtraceEvent_next_comm_tag 5
#define perfetto_protos_SchedSwitchFtraceEvent_next_pid_tag 6
#define perfetto_protos_SchedSwitchFtraceEvent_next_prio_tag 7
#define perfetto_protos_SchedWakeupFtraceEvent_comm_tag 1
#define perfetto_protos_SchedWakeupFtraceEvent_pid_tag 2
#define perfetto_protos_SchedWakeupFtraceEvent_prio_tag 3
#define perfetto_protos_SchedWakeupFtraceEvent_success_tag 4
#define perfetto_protos_SchedWakeupFtraceEvent_target_cpu_tag 5
#define perfetto_protos_SchedBlockedReasonFtraceEvent_pid_tag 1
#define perfetto_protos_SchedBlockedReasonFtraceEvent_caller_tag 2
#define perfetto_protos_SchedBlockedReasonFtraceEvent_io_wait_tag 3
#define perfetto_protos_SchedCpuHotplugFtraceEvent_affected_cpu_tag 1
#define perfetto_protos_SchedCpuHotplugFtraceEvent_error_tag 2
#define perfetto_protos_SchedCpuHotplugFtraceEvent_status_tag 3
#define perfetto_protos_SchedWakingFtraceEvent_comm_tag 1
#define perfetto_protos_SchedWakingFtraceEvent_pid_tag 2
#define perfetto_protos_SchedWakingFtraceEvent_prio_tag 3
#define perfetto_protos_SchedWakingFtraceEvent_success_tag 4
#define perfetto_protos_SchedWakingFtraceEvent_target_cpu_tag 5
#define perfetto_protos_SchedWakeupNewFtraceEvent_comm_tag 1
#define perfetto_protos_SchedWakeupNewFtraceEvent_pid_tag 2
#define perfetto_protos_SchedWakeupNewFtraceEvent_prio_tag 3
#define perfetto_protos_SchedWakeupNewFtraceEvent_success_tag 4
#define perfetto_protos_SchedWakeupNewFtraceEvent_target_cpu_tag 5
#define perfetto_protos_SchedProcessExecFtraceEvent_filename_tag 1
#define perfetto_protos_SchedProcessExecFtraceEvent_pid_tag 2
#define perfetto_protos_SchedProcessExecFtraceEvent_old_pid_tag 3
#define perfetto_protos_SchedProcessExitFtraceEvent_comm_tag 1
#define perfetto_protos_SchedProcessExitFtraceEvent_pid_tag 2
#define perfetto_protos_SchedProcessExitFtraceEvent_tgid_tag 3
#define perfetto_protos_SchedProcessExitFtraceEvent_prio_tag 4
#define perfetto_protos_SchedProcessForkFtraceEvent_parent_comm_tag 1
#define perfetto_protos_SchedProcessForkFtraceEvent_parent_pid_tag 2
#define perfetto_protos_SchedProcessForkFtraceEvent_child_comm_tag 3
#define perfetto_protos_SchedProcessForkFtraceEvent_child_pid_tag 4
#define perfetto_protos_SchedProcessFreeFtraceEvent_comm_tag 1
#define perfetto_protos_SchedProcessFreeFtraceEvent_pid_tag 2
#define perfetto_protos_SchedProcessFreeFtraceEvent_prio_tag 3
#define perfetto_protos_SchedProcessHangFtraceEvent_comm_tag 1
#define perfetto_protos_SchedProcessHangFtraceEvent_pid_tag 2
#define perfetto_protos_SchedProcessWaitFtraceEvent_comm_tag 1
#define perfetto_protos_SchedProcessWaitFtraceEvent_pid_tag 2
#define perfetto_protos_SchedProcessWaitFtraceEvent_prio_tag 3
#define perfetto_protos_SchedPiSetprioFtraceEvent_comm_tag 1
#define perfetto_protos_SchedPiSetprioFtraceEvent_newprio_tag 2
#define perfetto_protos_SchedPiSetprioFtraceEvent_oldprio_tag 3
#define perfetto_protos_SchedPiSetprioFtraceEvent_pid_tag 4
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_active_tag 1
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_capacity_tag 2
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_capacity_orig_tag 3
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_cpu_tag 4
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_cpu_importance_tag 5
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_cpu_util_tag 6
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_exit_lat_tag 7
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_group_capacity_tag 8
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_grp_overutilized_tag 9
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_idle_cpu_tag 10
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_nr_running_tag 11
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_spare_cap_tag 12
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_task_fits_tag 13
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_wake_group_util_tag 14
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_wake_util_tag 15
#define perfetto_protos_SchedMigrateTaskFtraceEvent_comm_tag 1
#define perfetto_protos_SchedMigrateTaskFtraceEvent_pid_tag 2
#define perfetto_protos_SchedMigrateTaskFtraceEvent_prio_tag 3
#define perfetto_protos_SchedMigrateTaskFtraceEvent_orig_cpu_tag 4
#define perfetto_protos_SchedMigrateTaskFtraceEvent_dest_cpu_tag 5
#define perfetto_protos_SchedMigrateTaskFtraceEvent_running_tag 6
#define perfetto_protos_SchedMigrateTaskFtraceEvent_load_tag 7
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_pid_tag 1
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_cpu_affinity_tag 2
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_task_util_tag 3
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_uclamp_min_tag 4
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_vruntime_tag 5
#define perfetto_protos_ScmCallStartFtraceEvent_arginfo_tag 1
#define perfetto_protos_ScmCallStartFtraceEvent_x0_tag 2
#define perfetto_protos_ScmCallStartFtraceEvent_x5_tag 3
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_pid_tag 1
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_trace_name_tag 2
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_trace_type_tag 3
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_value_tag 4
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_trace_begin_tag 5
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_evtlog_tag_tag 1
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_pid_tag 2
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_tag_id_tag 3
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_bw_ctl_ebi_tag 1
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_bw_ctl_llcc_tag 2
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_bw_ctl_mnoc_tag 3
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_core_clk_rate_tag 4
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_crtc_tag 5
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_ib_ebi_tag 6
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_ib_llcc_tag 7
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_ib_mnoc_tag 8
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_bw_ctl_ebi_tag 1
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_bw_ctl_llcc_tag 2
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_bw_ctl_mnoc_tag 3
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_core_clk_rate_tag 4
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_crtc_tag 5
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_params_tag 6
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_per_pipe_ib_ebi_tag 7
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_per_pipe_ib_llcc_tag 8
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_per_pipe_ib_mnoc_tag 9
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_stop_req_tag 10
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_update_bus_tag 11
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_update_clk_tag 12
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_fl_tag 1
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_fmt_tag 2
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_lut_tag 3
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_lut_usage_tag 4
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_pnum_tag 5
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_rt_tag 6
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_ab_quota_tag 1
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_bus_id_tag 2
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_client_tag 3
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_ib_quota_tag 4
#define perfetto_protos_SignalDeliverFtraceEvent_code_tag 1
#define perfetto_protos_SignalDeliverFtraceEvent_sa_flags_tag 2
#define perfetto_protos_SignalDeliverFtraceEvent_sig_tag 3
#define perfetto_protos_SignalGenerateFtraceEvent_code_tag 1
#define perfetto_protos_SignalGenerateFtraceEvent_comm_tag 2
#define perfetto_protos_SignalGenerateFtraceEvent_group_tag 3
#define perfetto_protos_SignalGenerateFtraceEvent_pid_tag 4
#define perfetto_protos_SignalGenerateFtraceEvent_result_tag 5
#define perfetto_protos_SignalGenerateFtraceEvent_sig_tag 6
#define perfetto_protos_KfreeSkbFtraceEvent_location_tag 1
#define perfetto_protos_KfreeSkbFtraceEvent_protocol_tag 2
#define perfetto_protos_KfreeSkbFtraceEvent_skbaddr_tag 3
#define perfetto_protos_InetSockSetStateFtraceEvent_daddr_tag 1
#define perfetto_protos_InetSockSetStateFtraceEvent_dport_tag 2
#define perfetto_protos_InetSockSetStateFtraceEvent_family_tag 3
#define perfetto_protos_InetSockSetStateFtraceEvent_newstate_tag 4
#define perfetto_protos_InetSockSetStateFtraceEvent_oldstate_tag 5
#define perfetto_protos_InetSockSetStateFtraceEvent_protocol_tag 6
#define perfetto_protos_InetSockSetStateFtraceEvent_saddr_tag 7
#define perfetto_protos_InetSockSetStateFtraceEvent_skaddr_tag 8
#define perfetto_protos_InetSockSetStateFtraceEvent_sport_tag 9
#define perfetto_protos_SyncPtFtraceEvent_timeline_tag 1
#define perfetto_protos_SyncPtFtraceEvent_value_tag 2
#define perfetto_protos_SyncTimelineFtraceEvent_name_tag 1
#define perfetto_protos_SyncTimelineFtraceEvent_value_tag 2
#define perfetto_protos_SyncWaitFtraceEvent_name_tag 1
#define perfetto_protos_SyncWaitFtraceEvent_status_tag 2
#define perfetto_protos_SyncWaitFtraceEvent_begin_tag 3
#define perfetto_protos_RssStatThrottledFtraceEvent_curr_tag 1
#define perfetto_protos_RssStatThrottledFtraceEvent_member_tag 2
#define perfetto_protos_RssStatThrottledFtraceEvent_mm_id_tag 3
#define perfetto_protos_RssStatThrottledFtraceEvent_size_tag 4
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_start_tag 1
#define perfetto_protos_ZeroFtraceEvent_flag_tag 1
#define perfetto_protos_ZeroFtraceEvent_name_tag 2
#define perfetto_protos_ZeroFtraceEvent_pid_tag  3
#define perfetto_protos_ZeroFtraceEvent_value_tag 4
#define perfetto_protos_TaskNewtaskFtraceEvent_pid_tag 1
#define perfetto_protos_TaskNewtaskFtraceEvent_comm_tag 2
#define perfetto_protos_TaskNewtaskFtraceEvent_clone_flags_tag 3
#define perfetto_protos_TaskNewtaskFtraceEvent_oom_score_adj_tag 4
#define perfetto_protos_TaskRenameFtraceEvent_pid_tag 1
#define perfetto_protos_TaskRenameFtraceEvent_oldcomm_tag 2
#define perfetto_protos_TaskRenameFtraceEvent_newcomm_tag 3
#define perfetto_protos_TaskRenameFtraceEvent_oom_score_adj_tag 4
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_daddr_tag 1
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_dport_tag 2
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_saddr_tag 3
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_skaddr_tag 4
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_skbaddr_tag 5
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_sport_tag 6
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_state_tag 7
#define perfetto_protos_ThermalTemperatureFtraceEvent_id_tag 1
#define perfetto_protos_ThermalTemperatureFtraceEvent_temp_tag 2
#define perfetto_protos_ThermalTemperatureFtraceEvent_temp_prev_tag 3
#define perfetto_protos_ThermalTemperatureFtraceEvent_thermal_zone_tag 4
#define perfetto_protos_CdevUpdateFtraceEvent_target_tag 1
#define perfetto_protos_CdevUpdateFtraceEvent_type_tag 2
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_tz_id_tag 1
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_current_temp_tag 2
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_ctrl_temp_tag 3
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_cdev_state_tag 4
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_pid_et_p_tag 5
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_pid_power_range_tag 6
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_pid_p_tag 7
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_pid_i_tag 8
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_k_p_tag 9
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_k_i_tag 10
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_timestamp_tag 11
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_tz_id_tag 1
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_current_temp_tag 2
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_ctrl_temp_tag 3
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_cdev_state_tag 4
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_pid_et_p_tag 5
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_k_p_tag 6
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_k_i_tag 7
#define perfetto_protos_TrustySmcFtraceEvent_r0_tag 1
#define perfetto_protos_TrustySmcFtraceEvent_r1_tag 2
#define perfetto_protos_TrustySmcFtraceEvent_r2_tag 3
#define perfetto_protos_TrustySmcFtraceEvent_r3_tag 4
#define perfetto_protos_TrustySmcDoneFtraceEvent_ret_tag 1
#define perfetto_protos_TrustyStdCall32FtraceEvent_r0_tag 1
#define perfetto_protos_TrustyStdCall32FtraceEvent_r1_tag 2
#define perfetto_protos_TrustyStdCall32FtraceEvent_r2_tag 3
#define perfetto_protos_TrustyStdCall32FtraceEvent_r3_tag 4
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_ret_tag 1
#define perfetto_protos_TrustyShareMemoryFtraceEvent_len_tag 1
#define perfetto_protos_TrustyShareMemoryFtraceEvent_lend_tag 2
#define perfetto_protos_TrustyShareMemoryFtraceEvent_nents_tag 3
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_handle_tag 1
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_len_tag 2
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_lend_tag 3
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_nents_tag 4
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_ret_tag 5
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_id_tag 1
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_id_tag 1
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_ret_tag 2
#define perfetto_protos_TrustyIrqFtraceEvent_irq_tag 1
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_chan_tag 1
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_event_id_tag 2
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_srv_name_tag 3
#define perfetto_protos_TrustyIpcConnectFtraceEvent_chan_tag 1
#define perfetto_protos_TrustyIpcConnectFtraceEvent_port_tag 2
#define perfetto_protos_TrustyIpcConnectFtraceEvent_state_tag 3
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_chan_tag 1
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_err_tag 2
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_state_tag 3
#define perfetto_protos_TrustyIpcWriteFtraceEvent_buf_id_tag 1
#define perfetto_protos_TrustyIpcWriteFtraceEvent_chan_tag 2
#define perfetto_protos_TrustyIpcWriteFtraceEvent_kind_shm_tag 3
#define perfetto_protos_TrustyIpcWriteFtraceEvent_len_or_err_tag 4
#define perfetto_protos_TrustyIpcWriteFtraceEvent_shm_cnt_tag 5
#define perfetto_protos_TrustyIpcWriteFtraceEvent_srv_name_tag 6
#define perfetto_protos_TrustyIpcPollFtraceEvent_chan_tag 1
#define perfetto_protos_TrustyIpcPollFtraceEvent_poll_mask_tag 2
#define perfetto_protos_TrustyIpcPollFtraceEvent_srv_name_tag 3
#define perfetto_protos_TrustyIpcReadFtraceEvent_chan_tag 1
#define perfetto_protos_TrustyIpcReadFtraceEvent_srv_name_tag 2
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_buf_id_tag 1
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_chan_tag 2
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_len_or_err_tag 3
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_shm_cnt_tag 4
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_srv_name_tag 5
#define perfetto_protos_TrustyIpcRxFtraceEvent_buf_id_tag 1
#define perfetto_protos_TrustyIpcRxFtraceEvent_chan_tag 2
#define perfetto_protos_TrustyIpcRxFtraceEvent_srv_name_tag 3
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_arg1_tag 1
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_arg2_tag 2
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_arg3_tag 3
#define perfetto_protos_UfshcdCommandFtraceEvent_dev_name_tag 1
#define perfetto_protos_UfshcdCommandFtraceEvent_doorbell_tag 2
#define perfetto_protos_UfshcdCommandFtraceEvent_intr_tag 3
#define perfetto_protos_UfshcdCommandFtraceEvent_lba_tag 4
#define perfetto_protos_UfshcdCommandFtraceEvent_opcode_tag 5
#define perfetto_protos_UfshcdCommandFtraceEvent_str_tag 6
#define perfetto_protos_UfshcdCommandFtraceEvent_tag_tag 7
#define perfetto_protos_UfshcdCommandFtraceEvent_transfer_len_tag 8
#define perfetto_protos_UfshcdCommandFtraceEvent_group_id_tag 9
#define perfetto_protos_UfshcdCommandFtraceEvent_str_t_tag 10
#define perfetto_protos_UfshcdClkGatingFtraceEvent_dev_name_tag 1
#define perfetto_protos_UfshcdClkGatingFtraceEvent_state_tag 2
#define perfetto_protos_V4l2QbufFtraceEvent_bytesused_tag 1
#define perfetto_protos_V4l2QbufFtraceEvent_field_tag 2
#define perfetto_protos_V4l2QbufFtraceEvent_flags_tag 3
#define perfetto_protos_V4l2QbufFtraceEvent_index_tag 4
#define perfetto_protos_V4l2QbufFtraceEvent_minor_tag 5
#define perfetto_protos_V4l2QbufFtraceEvent_sequence_tag 6
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_flags_tag 7
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_frames_tag 8
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_hours_tag 9
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_minutes_tag 10
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_seconds_tag 11
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_type_tag 12
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_userbits0_tag 13
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_userbits1_tag 14
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_userbits2_tag 15
#define perfetto_protos_V4l2QbufFtraceEvent_timecode_userbits3_tag 16
#define perfetto_protos_V4l2QbufFtraceEvent_timestamp_tag 17
#define perfetto_protos_V4l2QbufFtraceEvent_type_tag 18
#define perfetto_protos_V4l2DqbufFtraceEvent_bytesused_tag 1
#define perfetto_protos_V4l2DqbufFtraceEvent_field_tag 2
#define perfetto_protos_V4l2DqbufFtraceEvent_flags_tag 3
#define perfetto_protos_V4l2DqbufFtraceEvent_index_tag 4
#define perfetto_protos_V4l2DqbufFtraceEvent_minor_tag 5
#define perfetto_protos_V4l2DqbufFtraceEvent_sequence_tag 6
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_flags_tag 7
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_frames_tag 8
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_hours_tag 9
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_minutes_tag 10
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_seconds_tag 11
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_type_tag 12
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_userbits0_tag 13
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_userbits1_tag 14
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_userbits2_tag 15
#define perfetto_protos_V4l2DqbufFtraceEvent_timecode_userbits3_tag 16
#define perfetto_protos_V4l2DqbufFtraceEvent_timestamp_tag 17
#define perfetto_protos_V4l2DqbufFtraceEvent_type_tag 18
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_field_tag 1
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_flags_tag 2
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_minor_tag 3
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_sequence_tag 4
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_flags_tag 5
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_frames_tag 6
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_hours_tag 7
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_minutes_tag 8
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_seconds_tag 9
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_type_tag 10
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_userbits0_tag 11
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_userbits1_tag 12
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_userbits2_tag 13
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timecode_userbits3_tag 14
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_timestamp_tag 15
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_field_tag 1
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_flags_tag 2
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_minor_tag 3
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_sequence_tag 4
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_flags_tag 5
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_frames_tag 6
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_hours_tag 7
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_minutes_tag 8
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_seconds_tag 9
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_type_tag 10
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_userbits0_tag 11
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_userbits1_tag 12
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_userbits2_tag 13
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timecode_userbits3_tag 14
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_timestamp_tag 15
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_field_tag 1
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_flags_tag 2
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_minor_tag 3
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_sequence_tag 4
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_flags_tag 5
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_frames_tag 6
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_hours_tag 7
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_minutes_tag 8
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_seconds_tag 9
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_type_tag 10
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_userbits0_tag 11
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_userbits1_tag 12
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_userbits2_tag 13
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timecode_userbits3_tag 14
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_timestamp_tag 15
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_field_tag 1
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_flags_tag 2
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_minor_tag 3
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_sequence_tag 4
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_flags_tag 5
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_frames_tag 6
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_hours_tag 7
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_minutes_tag 8
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_seconds_tag 9
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_type_tag 10
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_userbits0_tag 11
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_userbits1_tag 12
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_userbits2_tag 13
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timecode_userbits3_tag 14
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_timestamp_tag 15
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_ctx_id_tag 1
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_dev_tag 2
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_fence_id_tag 3
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_flags_tag 4
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_name_tag 5
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_num_free_tag 6
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_seqno_tag 7
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_type_tag 8
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_vq_tag 9
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_ctx_id_tag 1
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_dev_tag 2
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_fence_id_tag 3
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_flags_tag 4
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_name_tag 5
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_num_free_tag 6
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_seqno_tag 7
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_type_tag 8
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_vq_tag 9
#define perfetto_protos_VirtioVideoCmdFtraceEvent_stream_id_tag 1
#define perfetto_protos_VirtioVideoCmdFtraceEvent_type_tag 2
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_stream_id_tag 1
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_type_tag 2
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_data_size0_tag 1
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_data_size1_tag 2
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_data_size2_tag 3
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_data_size3_tag 4
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_queue_type_tag 5
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_resource_id_tag 6
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_stream_id_tag 7
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_timestamp_tag 8
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_data_size0_tag 1
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_data_size1_tag 2
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_data_size2_tag 3
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_data_size3_tag 4
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_queue_type_tag 5
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_resource_id_tag 6
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_stream_id_tag 7
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_timestamp_tag 8
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_order_tag 1
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_may_writepage_tag 2
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_gfp_flags_tag 3
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_nr_reclaimed_tag 1
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_nid_tag 1
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_order_tag 2
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_zid_tag 3
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_nid_tag 1
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_cache_items_tag 1
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_delta_tag 2
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_gfp_flags_tag 3
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_lru_pgs_tag 4
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_nr_objects_to_shrink_tag 5
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_pgs_scanned_tag 6
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_shr_tag 7
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_shrink_tag 8
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_total_scan_tag 9
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_nid_tag 10
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_priority_tag 11
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_new_scan_tag 1
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_retval_tag 2
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_shr_tag 3
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_shrink_tag 4
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_total_scan_tag 5
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_unused_scan_tag 6
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_nid_tag 7
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_work_tag 1
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_work_tag 1
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_function_tag 2
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_work_tag 1
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_function_tag 2
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_work_tag 1
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_function_tag 2
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_workqueue_tag 3
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_req_cpu_tag 4
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_cpu_tag 5
#define perfetto_protos_FtraceEvent_timestamp_tag 1
#define perfetto_protos_FtraceEvent_pid_tag      2
#define perfetto_protos_FtraceEvent_print_tag    3
#define perfetto_protos_FtraceEvent_sched_switch_tag 4
#define perfetto_protos_FtraceEvent_cpu_frequency_tag 11
#define perfetto_protos_FtraceEvent_cpu_frequency_limits_tag 12
#define perfetto_protos_FtraceEvent_cpu_idle_tag 13
#define perfetto_protos_FtraceEvent_clock_enable_tag 14
#define perfetto_protos_FtraceEvent_clock_disable_tag 15
#define perfetto_protos_FtraceEvent_clock_set_rate_tag 16
#define perfetto_protos_FtraceEvent_sched_wakeup_tag 17
#define perfetto_protos_FtraceEvent_sched_blocked_reason_tag 18
#define perfetto_protos_FtraceEvent_sched_cpu_hotplug_tag 19
#define perfetto_protos_FtraceEvent_sched_waking_tag 20
#define perfetto_protos_FtraceEvent_ipi_entry_tag 21
#define perfetto_protos_FtraceEvent_ipi_exit_tag 22
#define perfetto_protos_FtraceEvent_ipi_raise_tag 23
#define perfetto_protos_FtraceEvent_softirq_entry_tag 24
#define perfetto_protos_FtraceEvent_softirq_exit_tag 25
#define perfetto_protos_FtraceEvent_softirq_raise_tag 26
#define perfetto_protos_FtraceEvent_i2c_read_tag 27
#define perfetto_protos_FtraceEvent_i2c_write_tag 28
#define perfetto_protos_FtraceEvent_i2c_result_tag 29
#define perfetto_protos_FtraceEvent_i2c_reply_tag 30
#define perfetto_protos_FtraceEvent_smbus_read_tag 31
#define perfetto_protos_FtraceEvent_smbus_write_tag 32
#define perfetto_protos_FtraceEvent_smbus_result_tag 33
#define perfetto_protos_FtraceEvent_smbus_reply_tag 34
#define perfetto_protos_FtraceEvent_lowmemory_kill_tag 35
#define perfetto_protos_FtraceEvent_irq_handler_entry_tag 36
#define perfetto_protos_FtraceEvent_irq_handler_exit_tag 37
#define perfetto_protos_FtraceEvent_sync_pt_tag  38
#define perfetto_protos_FtraceEvent_sync_timeline_tag 39
#define perfetto_protos_FtraceEvent_sync_wait_tag 40
#define perfetto_protos_FtraceEvent_ext4_da_write_begin_tag 41
#define perfetto_protos_FtraceEvent_ext4_da_write_end_tag 42
#define perfetto_protos_FtraceEvent_ext4_sync_file_enter_tag 43
#define perfetto_protos_FtraceEvent_ext4_sync_file_exit_tag 44
#define perfetto_protos_FtraceEvent_block_rq_issue_tag 45
#define perfetto_protos_FtraceEvent_mm_vmscan_direct_reclaim_begin_tag 46
#define perfetto_protos_FtraceEvent_mm_vmscan_direct_reclaim_end_tag 47
#define perfetto_protos_FtraceEvent_mm_vmscan_kswapd_wake_tag 48
#define perfetto_protos_FtraceEvent_mm_vmscan_kswapd_sleep_tag 49
#define perfetto_protos_FtraceEvent_binder_transaction_tag 50
#define perfetto_protos_FtraceEvent_binder_transaction_received_tag 51
#define perfetto_protos_FtraceEvent_binder_set_priority_tag 52
#define perfetto_protos_FtraceEvent_binder_lock_tag 53
#define perfetto_protos_FtraceEvent_binder_locked_tag 54
#define perfetto_protos_FtraceEvent_binder_unlock_tag 55
#define perfetto_protos_FtraceEvent_workqueue_activate_work_tag 56
#define perfetto_protos_FtraceEvent_workqueue_execute_end_tag 57
#define perfetto_protos_FtraceEvent_workqueue_execute_start_tag 58
#define perfetto_protos_FtraceEvent_workqueue_queue_work_tag 59
#define perfetto_protos_FtraceEvent_regulator_disable_tag 60
#define perfetto_protos_FtraceEvent_regulator_disable_complete_tag 61
#define perfetto_protos_FtraceEvent_regulator_enable_tag 62
#define perfetto_protos_FtraceEvent_regulator_enable_complete_tag 63
#define perfetto_protos_FtraceEvent_regulator_enable_delay_tag 64
#define perfetto_protos_FtraceEvent_regulator_set_voltage_tag 65
#define perfetto_protos_FtraceEvent_regulator_set_voltage_complete_tag 66
#define perfetto_protos_FtraceEvent_cgroup_attach_task_tag 67
#define perfetto_protos_FtraceEvent_cgroup_mkdir_tag 68
#define perfetto_protos_FtraceEvent_cgroup_remount_tag 69
#define perfetto_protos_FtraceEvent_cgroup_rmdir_tag 70
#define perfetto_protos_FtraceEvent_cgroup_transfer_tasks_tag 71
#define perfetto_protos_FtraceEvent_cgroup_destroy_root_tag 72
#define perfetto_protos_FtraceEvent_cgroup_release_tag 73
#define perfetto_protos_FtraceEvent_cgroup_rename_tag 74
#define perfetto_protos_FtraceEvent_cgroup_setup_root_tag 75
#define perfetto_protos_FtraceEvent_mdp_cmd_kickoff_tag 76
#define perfetto_protos_FtraceEvent_mdp_commit_tag 77
#define perfetto_protos_FtraceEvent_mdp_perf_set_ot_tag 78
#define perfetto_protos_FtraceEvent_mdp_sspp_change_tag 79
#define perfetto_protos_FtraceEvent_tracing_mark_write_tag 80
#define perfetto_protos_FtraceEvent_mdp_cmd_pingpong_done_tag 81
#define perfetto_protos_FtraceEvent_mdp_compare_bw_tag 82
#define perfetto_protos_FtraceEvent_mdp_perf_set_panic_luts_tag 83
#define perfetto_protos_FtraceEvent_mdp_sspp_set_tag 84
#define perfetto_protos_FtraceEvent_mdp_cmd_readptr_done_tag 85
#define perfetto_protos_FtraceEvent_mdp_misr_crc_tag 86
#define perfetto_protos_FtraceEvent_mdp_perf_set_qos_luts_tag 87
#define perfetto_protos_FtraceEvent_mdp_trace_counter_tag 88
#define perfetto_protos_FtraceEvent_mdp_cmd_release_bw_tag 89
#define perfetto_protos_FtraceEvent_mdp_mixer_update_tag 90
#define perfetto_protos_FtraceEvent_mdp_perf_set_wm_levels_tag 91
#define perfetto_protos_FtraceEvent_mdp_video_underrun_done_tag 92
#define perfetto_protos_FtraceEvent_mdp_cmd_wait_pingpong_tag 93
#define perfetto_protos_FtraceEvent_mdp_perf_prefill_calc_tag 94
#define perfetto_protos_FtraceEvent_mdp_perf_update_bus_tag 95
#define perfetto_protos_FtraceEvent_rotator_bw_ao_as_context_tag 96
#define perfetto_protos_FtraceEvent_mm_filemap_add_to_page_cache_tag 97
#define perfetto_protos_FtraceEvent_mm_filemap_delete_from_page_cache_tag 98
#define perfetto_protos_FtraceEvent_mm_compaction_begin_tag 99
#define perfetto_protos_FtraceEvent_mm_compaction_defer_compaction_tag 100
#define perfetto_protos_FtraceEvent_mm_compaction_deferred_tag 101
#define perfetto_protos_FtraceEvent_mm_compaction_defer_reset_tag 102
#define perfetto_protos_FtraceEvent_mm_compaction_end_tag 103
#define perfetto_protos_FtraceEvent_mm_compaction_finished_tag 104
#define perfetto_protos_FtraceEvent_mm_compaction_isolate_freepages_tag 105
#define perfetto_protos_FtraceEvent_mm_compaction_isolate_migratepages_tag 106
#define perfetto_protos_FtraceEvent_mm_compaction_kcompactd_sleep_tag 107
#define perfetto_protos_FtraceEvent_mm_compaction_kcompactd_wake_tag 108
#define perfetto_protos_FtraceEvent_mm_compaction_migratepages_tag 109
#define perfetto_protos_FtraceEvent_mm_compaction_suitable_tag 110
#define perfetto_protos_FtraceEvent_mm_compaction_try_to_compact_pages_tag 111
#define perfetto_protos_FtraceEvent_mm_compaction_wakeup_kcompactd_tag 112
#define perfetto_protos_FtraceEvent_suspend_resume_tag 113
#define perfetto_protos_FtraceEvent_sched_wakeup_new_tag 114
#define perfetto_protos_FtraceEvent_block_bio_backmerge_tag 115
#define perfetto_protos_FtraceEvent_block_bio_bounce_tag 116
#define perfetto_protos_FtraceEvent_block_bio_complete_tag 117
#define perfetto_protos_FtraceEvent_block_bio_frontmerge_tag 118
#define perfetto_protos_FtraceEvent_block_bio_queue_tag 119
#define perfetto_protos_FtraceEvent_block_bio_remap_tag 120
#define perfetto_protos_FtraceEvent_block_dirty_buffer_tag 121
#define perfetto_protos_FtraceEvent_block_getrq_tag 122
#define perfetto_protos_FtraceEvent_block_plug_tag 123
#define perfetto_protos_FtraceEvent_block_rq_abort_tag 124
#define perfetto_protos_FtraceEvent_block_rq_complete_tag 125
#define perfetto_protos_FtraceEvent_block_rq_insert_tag 126
#define perfetto_protos_FtraceEvent_block_rq_remap_tag 128
#define perfetto_protos_FtraceEvent_block_rq_requeue_tag 129
#define perfetto_protos_FtraceEvent_block_sleeprq_tag 130
#define perfetto_protos_FtraceEvent_block_split_tag 131
#define perfetto_protos_FtraceEvent_block_touch_buffer_tag 132
#define perfetto_protos_FtraceEvent_block_unplug_tag 133
#define perfetto_protos_FtraceEvent_ext4_alloc_da_blocks_tag 134
#define perfetto_protos_FtraceEvent_ext4_allocate_blocks_tag 135
#define perfetto_protos_FtraceEvent_ext4_allocate_inode_tag 136
#define perfetto_protos_FtraceEvent_ext4_begin_ordered_truncate_tag 137
#define perfetto_protos_FtraceEvent_ext4_collapse_range_tag 138
#define perfetto_protos_FtraceEvent_ext4_da_release_space_tag 139
#define perfetto_protos_FtraceEvent_ext4_da_reserve_space_tag 140
#define perfetto_protos_FtraceEvent_ext4_da_update_reserve_space_tag 141
#define perfetto_protos_FtraceEvent_ext4_da_write_pages_tag 142
#define perfetto_protos_FtraceEvent_ext4_da_write_pages_extent_tag 143
#define perfetto_protos_FtraceEvent_ext4_direct_IO_enter_tag 144
#define perfetto_protos_FtraceEvent_ext4_direct_IO_exit_tag 145
#define perfetto_protos_FtraceEvent_ext4_discard_blocks_tag 146
#define perfetto_protos_FtraceEvent_ext4_discard_preallocations_tag 147
#define perfetto_protos_FtraceEvent_ext4_drop_inode_tag 148
#define perfetto_protos_FtraceEvent_ext4_es_cache_extent_tag 149
#define perfetto_protos_FtraceEvent_ext4_es_find_delayed_extent_range_enter_tag 150
#define perfetto_protos_FtraceEvent_ext4_es_find_delayed_extent_range_exit_tag 151
#define perfetto_protos_FtraceEvent_ext4_es_insert_extent_tag 152
#define perfetto_protos_FtraceEvent_ext4_es_lookup_extent_enter_tag 153
#define perfetto_protos_FtraceEvent_ext4_es_lookup_extent_exit_tag 154
#define perfetto_protos_FtraceEvent_ext4_es_remove_extent_tag 155
#define perfetto_protos_FtraceEvent_ext4_es_shrink_tag 156
#define perfetto_protos_FtraceEvent_ext4_es_shrink_count_tag 157
#define perfetto_protos_FtraceEvent_ext4_es_shrink_scan_enter_tag 158
#define perfetto_protos_FtraceEvent_ext4_es_shrink_scan_exit_tag 159
#define perfetto_protos_FtraceEvent_ext4_evict_inode_tag 160
#define perfetto_protos_FtraceEvent_ext4_ext_convert_to_initialized_enter_tag 161
#define perfetto_protos_FtraceEvent_ext4_ext_convert_to_initialized_fastpath_tag 162
#define perfetto_protos_FtraceEvent_ext4_ext_handle_unwritten_extents_tag 163
#define perfetto_protos_FtraceEvent_ext4_ext_in_cache_tag 164
#define perfetto_protos_FtraceEvent_ext4_ext_load_extent_tag 165
#define perfetto_protos_FtraceEvent_ext4_ext_map_blocks_enter_tag 166
#define perfetto_protos_FtraceEvent_ext4_ext_map_blocks_exit_tag 167
#define perfetto_protos_FtraceEvent_ext4_ext_put_in_cache_tag 168
#define perfetto_protos_FtraceEvent_ext4_ext_remove_space_tag 169
#define perfetto_protos_FtraceEvent_ext4_ext_remove_space_done_tag 170
#define perfetto_protos_FtraceEvent_ext4_ext_rm_idx_tag 171
#define perfetto_protos_FtraceEvent_ext4_ext_rm_leaf_tag 172
#define perfetto_protos_FtraceEvent_ext4_ext_show_extent_tag 173
#define perfetto_protos_FtraceEvent_ext4_fallocate_enter_tag 174
#define perfetto_protos_FtraceEvent_ext4_fallocate_exit_tag 175
#define perfetto_protos_FtraceEvent_ext4_find_delalloc_range_tag 176
#define perfetto_protos_FtraceEvent_ext4_forget_tag 177
#define perfetto_protos_FtraceEvent_ext4_free_blocks_tag 178
#define perfetto_protos_FtraceEvent_ext4_free_inode_tag 179
#define perfetto_protos_FtraceEvent_ext4_get_implied_cluster_alloc_exit_tag 180
#define perfetto_protos_FtraceEvent_ext4_get_reserved_cluster_alloc_tag 181
#define perfetto_protos_FtraceEvent_ext4_ind_map_blocks_enter_tag 182
#define perfetto_protos_FtraceEvent_ext4_ind_map_blocks_exit_tag 183
#define perfetto_protos_FtraceEvent_ext4_insert_range_tag 184
#define perfetto_protos_FtraceEvent_ext4_invalidatepage_tag 185
#define perfetto_protos_FtraceEvent_ext4_journal_start_tag 186
#define perfetto_protos_FtraceEvent_ext4_journal_start_reserved_tag 187
#define perfetto_protos_FtraceEvent_ext4_journalled_invalidatepage_tag 188
#define perfetto_protos_FtraceEvent_ext4_journalled_write_end_tag 189
#define perfetto_protos_FtraceEvent_ext4_load_inode_tag 190
#define perfetto_protos_FtraceEvent_ext4_load_inode_bitmap_tag 191
#define perfetto_protos_FtraceEvent_ext4_mark_inode_dirty_tag 192
#define perfetto_protos_FtraceEvent_ext4_mb_bitmap_load_tag 193
#define perfetto_protos_FtraceEvent_ext4_mb_buddy_bitmap_load_tag 194
#define perfetto_protos_FtraceEvent_ext4_mb_discard_preallocations_tag 195
#define perfetto_protos_FtraceEvent_ext4_mb_new_group_pa_tag 196
#define perfetto_protos_FtraceEvent_ext4_mb_new_inode_pa_tag 197
#define perfetto_protos_FtraceEvent_ext4_mb_release_group_pa_tag 198
#define perfetto_protos_FtraceEvent_ext4_mb_release_inode_pa_tag 199
#define perfetto_protos_FtraceEvent_ext4_mballoc_alloc_tag 200
#define perfetto_protos_FtraceEvent_ext4_mballoc_discard_tag 201
#define perfetto_protos_FtraceEvent_ext4_mballoc_free_tag 202
#define perfetto_protos_FtraceEvent_ext4_mballoc_prealloc_tag 203
#define perfetto_protos_FtraceEvent_ext4_other_inode_update_time_tag 204
#define perfetto_protos_FtraceEvent_ext4_punch_hole_tag 205
#define perfetto_protos_FtraceEvent_ext4_read_block_bitmap_load_tag 206
#define perfetto_protos_FtraceEvent_ext4_readpage_tag 207
#define perfetto_protos_FtraceEvent_ext4_releasepage_tag 208
#define perfetto_protos_FtraceEvent_ext4_remove_blocks_tag 209
#define perfetto_protos_FtraceEvent_ext4_request_blocks_tag 210
#define perfetto_protos_FtraceEvent_ext4_request_inode_tag 211
#define perfetto_protos_FtraceEvent_ext4_sync_fs_tag 212
#define perfetto_protos_FtraceEvent_ext4_trim_all_free_tag 213
#define perfetto_protos_FtraceEvent_ext4_trim_extent_tag 214
#define perfetto_protos_FtraceEvent_ext4_truncate_enter_tag 215
#define perfetto_protos_FtraceEvent_ext4_truncate_exit_tag 216
#define perfetto_protos_FtraceEvent_ext4_unlink_enter_tag 217
#define perfetto_protos_FtraceEvent_ext4_unlink_exit_tag 218
#define perfetto_protos_FtraceEvent_ext4_write_begin_tag 219
#define perfetto_protos_FtraceEvent_ext4_write_end_tag 230
#define perfetto_protos_FtraceEvent_ext4_writepage_tag 231
#define perfetto_protos_FtraceEvent_ext4_writepages_tag 232
#define perfetto_protos_FtraceEvent_ext4_writepages_result_tag 233
#define perfetto_protos_FtraceEvent_ext4_zero_range_tag 234
#define perfetto_protos_FtraceEvent_task_newtask_tag 235
#define perfetto_protos_FtraceEvent_task_rename_tag 236
#define perfetto_protos_FtraceEvent_sched_process_exec_tag 237
#define perfetto_protos_FtraceEvent_sched_process_exit_tag 238
#define perfetto_protos_FtraceEvent_sched_process_fork_tag 239
#define perfetto_protos_FtraceEvent_sched_process_free_tag 240
#define perfetto_protos_FtraceEvent_sched_process_hang_tag 241
#define perfetto_protos_FtraceEvent_sched_process_wait_tag 242
#define perfetto_protos_FtraceEvent_f2fs_do_submit_bio_tag 243
#define perfetto_protos_FtraceEvent_f2fs_evict_inode_tag 244
#define perfetto_protos_FtraceEvent_f2fs_fallocate_tag 245
#define perfetto_protos_FtraceEvent_f2fs_get_data_block_tag 246
#define perfetto_protos_FtraceEvent_f2fs_get_victim_tag 247
#define perfetto_protos_FtraceEvent_f2fs_iget_tag 248
#define perfetto_protos_FtraceEvent_f2fs_iget_exit_tag 249
#define perfetto_protos_FtraceEvent_f2fs_new_inode_tag 250
#define perfetto_protos_FtraceEvent_f2fs_readpage_tag 251
#define perfetto_protos_FtraceEvent_f2fs_reserve_new_block_tag 252
#define perfetto_protos_FtraceEvent_f2fs_set_page_dirty_tag 253
#define perfetto_protos_FtraceEvent_f2fs_submit_write_page_tag 254
#define perfetto_protos_FtraceEvent_f2fs_sync_file_enter_tag 255
#define perfetto_protos_FtraceEvent_f2fs_sync_file_exit_tag 256
#define perfetto_protos_FtraceEvent_f2fs_sync_fs_tag 257
#define perfetto_protos_FtraceEvent_f2fs_truncate_tag 258
#define perfetto_protos_FtraceEvent_f2fs_truncate_blocks_enter_tag 259
#define perfetto_protos_FtraceEvent_f2fs_truncate_blocks_exit_tag 260
#define perfetto_protos_FtraceEvent_f2fs_truncate_data_blocks_range_tag 261
#define perfetto_protos_FtraceEvent_f2fs_truncate_inode_blocks_enter_tag 262
#define perfetto_protos_FtraceEvent_f2fs_truncate_inode_blocks_exit_tag 263
#define perfetto_protos_FtraceEvent_f2fs_truncate_node_tag 264
#define perfetto_protos_FtraceEvent_f2fs_truncate_nodes_enter_tag 265
#define perfetto_protos_FtraceEvent_f2fs_truncate_nodes_exit_tag 266
#define perfetto_protos_FtraceEvent_f2fs_truncate_partial_nodes_tag 267
#define perfetto_protos_FtraceEvent_f2fs_unlink_enter_tag 268
#define perfetto_protos_FtraceEvent_f2fs_unlink_exit_tag 269
#define perfetto_protos_FtraceEvent_f2fs_vm_page_mkwrite_tag 270
#define perfetto_protos_FtraceEvent_f2fs_write_begin_tag 271
#define perfetto_protos_FtraceEvent_f2fs_write_checkpoint_tag 272
#define perfetto_protos_FtraceEvent_f2fs_write_end_tag 273
#define perfetto_protos_FtraceEvent_alloc_pages_iommu_end_tag 274
#define perfetto_protos_FtraceEvent_alloc_pages_iommu_fail_tag 275
#define perfetto_protos_FtraceEvent_alloc_pages_iommu_start_tag 276
#define perfetto_protos_FtraceEvent_alloc_pages_sys_end_tag 277
#define perfetto_protos_FtraceEvent_alloc_pages_sys_fail_tag 278
#define perfetto_protos_FtraceEvent_alloc_pages_sys_start_tag 279
#define perfetto_protos_FtraceEvent_dma_alloc_contiguous_retry_tag 280
#define perfetto_protos_FtraceEvent_iommu_map_range_tag 281
#define perfetto_protos_FtraceEvent_iommu_sec_ptbl_map_range_end_tag 282
#define perfetto_protos_FtraceEvent_iommu_sec_ptbl_map_range_start_tag 283
#define perfetto_protos_FtraceEvent_ion_alloc_buffer_end_tag 284
#define perfetto_protos_FtraceEvent_ion_alloc_buffer_fail_tag 285
#define perfetto_protos_FtraceEvent_ion_alloc_buffer_fallback_tag 286
#define perfetto_protos_FtraceEvent_ion_alloc_buffer_start_tag 287
#define perfetto_protos_FtraceEvent_ion_cp_alloc_retry_tag 288
#define perfetto_protos_FtraceEvent_ion_cp_secure_buffer_end_tag 289
#define perfetto_protos_FtraceEvent_ion_cp_secure_buffer_start_tag 290
#define perfetto_protos_FtraceEvent_ion_prefetching_tag 291
#define perfetto_protos_FtraceEvent_ion_secure_cma_add_to_pool_end_tag 292
#define perfetto_protos_FtraceEvent_ion_secure_cma_add_to_pool_start_tag 293
#define perfetto_protos_FtraceEvent_ion_secure_cma_allocate_end_tag 294
#define perfetto_protos_FtraceEvent_ion_secure_cma_allocate_start_tag 295
#define perfetto_protos_FtraceEvent_ion_secure_cma_shrink_pool_end_tag 296
#define perfetto_protos_FtraceEvent_ion_secure_cma_shrink_pool_start_tag 297
#define perfetto_protos_FtraceEvent_kfree_tag    298
#define perfetto_protos_FtraceEvent_kmalloc_tag  299
#define perfetto_protos_FtraceEvent_kmalloc_node_tag 300
#define perfetto_protos_FtraceEvent_kmem_cache_alloc_tag 301
#define perfetto_protos_FtraceEvent_kmem_cache_alloc_node_tag 302
#define perfetto_protos_FtraceEvent_kmem_cache_free_tag 303
#define perfetto_protos_FtraceEvent_migrate_pages_end_tag 304
#define perfetto_protos_FtraceEvent_migrate_pages_start_tag 305
#define perfetto_protos_FtraceEvent_migrate_retry_tag 306
#define perfetto_protos_FtraceEvent_mm_page_alloc_tag 307
#define perfetto_protos_FtraceEvent_mm_page_alloc_extfrag_tag 308
#define perfetto_protos_FtraceEvent_mm_page_alloc_zone_locked_tag 309
#define perfetto_protos_FtraceEvent_mm_page_free_tag 310
#define perfetto_protos_FtraceEvent_mm_page_free_batched_tag 311
#define perfetto_protos_FtraceEvent_mm_page_pcpu_drain_tag 312
#define perfetto_protos_FtraceEvent_rss_stat_tag 313
#define perfetto_protos_FtraceEvent_ion_heap_shrink_tag 314
#define perfetto_protos_FtraceEvent_ion_heap_grow_tag 315
#define perfetto_protos_FtraceEvent_fence_init_tag 316
#define perfetto_protos_FtraceEvent_fence_destroy_tag 317
#define perfetto_protos_FtraceEvent_fence_enable_signal_tag 318
#define perfetto_protos_FtraceEvent_fence_signaled_tag 319
#define perfetto_protos_FtraceEvent_clk_enable_tag 320
#define perfetto_protos_FtraceEvent_clk_disable_tag 321
#define perfetto_protos_FtraceEvent_clk_set_rate_tag 322
#define perfetto_protos_FtraceEvent_binder_transaction_alloc_buf_tag 323
#define perfetto_protos_FtraceEvent_signal_deliver_tag 324
#define perfetto_protos_FtraceEvent_signal_generate_tag 325
#define perfetto_protos_FtraceEvent_oom_score_adj_update_tag 326
#define perfetto_protos_FtraceEvent_generic_tag  327
#define perfetto_protos_FtraceEvent_mm_event_record_tag 328
#define perfetto_protos_FtraceEvent_sys_enter_tag 329
#define perfetto_protos_FtraceEvent_sys_exit_tag 330
#define perfetto_protos_FtraceEvent_zero_tag     331
#define perfetto_protos_FtraceEvent_gpu_frequency_tag 332
#define perfetto_protos_FtraceEvent_sde_tracing_mark_write_tag 333
#define perfetto_protos_FtraceEvent_mark_victim_tag 334
#define perfetto_protos_FtraceEvent_ion_stat_tag 335
#define perfetto_protos_FtraceEvent_ion_buffer_create_tag 336
#define perfetto_protos_FtraceEvent_ion_buffer_destroy_tag 337
#define perfetto_protos_FtraceEvent_scm_call_start_tag 338
#define perfetto_protos_FtraceEvent_scm_call_end_tag 339
#define perfetto_protos_FtraceEvent_gpu_mem_total_tag 340
#define perfetto_protos_FtraceEvent_thermal_temperature_tag 341
#define perfetto_protos_FtraceEvent_cdev_update_tag 342
#define perfetto_protos_FtraceEvent_cpuhp_exit_tag 343
#define perfetto_protos_FtraceEvent_cpuhp_multi_enter_tag 344
#define perfetto_protos_FtraceEvent_cpuhp_enter_tag 345
#define perfetto_protos_FtraceEvent_cpuhp_latency_tag 346
#define perfetto_protos_FtraceEvent_fastrpc_dma_stat_tag 347
#define perfetto_protos_FtraceEvent_dpu_tracing_mark_write_tag 348
#define perfetto_protos_FtraceEvent_g2d_tracing_mark_write_tag 349
#define perfetto_protos_FtraceEvent_mali_tracing_mark_write_tag 350
#define perfetto_protos_FtraceEvent_dma_heap_stat_tag 351
#define perfetto_protos_FtraceEvent_cpuhp_pause_tag 352
#define perfetto_protos_FtraceEvent_sched_pi_setprio_tag 353
#define perfetto_protos_FtraceEvent_sde_sde_evtlog_tag 354
#define perfetto_protos_FtraceEvent_sde_sde_perf_calc_crtc_tag 355
#define perfetto_protos_FtraceEvent_sde_sde_perf_crtc_update_tag 356
#define perfetto_protos_FtraceEvent_sde_sde_perf_set_qos_luts_tag 357
#define perfetto_protos_FtraceEvent_sde_sde_perf_update_bus_tag 358
#define perfetto_protos_FtraceEvent_rss_stat_throttled_tag 359
#define perfetto_protos_FtraceEvent_netif_receive_skb_tag 360
#define perfetto_protos_FtraceEvent_net_dev_xmit_tag 361
#define perfetto_protos_FtraceEvent_inet_sock_set_state_tag 362
#define perfetto_protos_FtraceEvent_tcp_retransmit_skb_tag 363
#define perfetto_protos_FtraceEvent_cros_ec_sensorhub_data_tag 364
#define perfetto_protos_FtraceEvent_napi_gro_receive_entry_tag 365
#define perfetto_protos_FtraceEvent_napi_gro_receive_exit_tag 366
#define perfetto_protos_FtraceEvent_kfree_skb_tag 367
#define perfetto_protos_FtraceEvent_kvm_access_fault_tag 368
#define perfetto_protos_FtraceEvent_kvm_ack_irq_tag 369
#define perfetto_protos_FtraceEvent_kvm_age_hva_tag 370
#define perfetto_protos_FtraceEvent_kvm_age_page_tag 371
#define perfetto_protos_FtraceEvent_kvm_arm_clear_debug_tag 372
#define perfetto_protos_FtraceEvent_kvm_arm_set_dreg32_tag 373
#define perfetto_protos_FtraceEvent_kvm_arm_set_regset_tag 374
#define perfetto_protos_FtraceEvent_kvm_arm_setup_debug_tag 375
#define perfetto_protos_FtraceEvent_kvm_entry_tag 376
#define perfetto_protos_FtraceEvent_kvm_exit_tag 377
#define perfetto_protos_FtraceEvent_kvm_fpu_tag  378
#define perfetto_protos_FtraceEvent_kvm_get_timer_map_tag 379
#define perfetto_protos_FtraceEvent_kvm_guest_fault_tag 380
#define perfetto_protos_FtraceEvent_kvm_handle_sys_reg_tag 381
#define perfetto_protos_FtraceEvent_kvm_hvc_arm64_tag 382
#define perfetto_protos_FtraceEvent_kvm_irq_line_tag 383
#define perfetto_protos_FtraceEvent_kvm_mmio_tag 384
#define perfetto_protos_FtraceEvent_kvm_mmio_emulate_tag 385
#define perfetto_protos_FtraceEvent_kvm_set_guest_debug_tag 386
#define perfetto_protos_FtraceEvent_kvm_set_irq_tag 387
#define perfetto_protos_FtraceEvent_kvm_set_spte_hva_tag 388
#define perfetto_protos_FtraceEvent_kvm_set_way_flush_tag 389
#define perfetto_protos_FtraceEvent_kvm_sys_access_tag 390
#define perfetto_protos_FtraceEvent_kvm_test_age_hva_tag 391
#define perfetto_protos_FtraceEvent_kvm_timer_emulate_tag 392
#define perfetto_protos_FtraceEvent_kvm_timer_hrtimer_expire_tag 393
#define perfetto_protos_FtraceEvent_kvm_timer_restore_state_tag 394
#define perfetto_protos_FtraceEvent_kvm_timer_save_state_tag 395
#define perfetto_protos_FtraceEvent_kvm_timer_update_irq_tag 396
#define perfetto_protos_FtraceEvent_kvm_toggle_cache_tag 397
#define perfetto_protos_FtraceEvent_kvm_unmap_hva_range_tag 398
#define perfetto_protos_FtraceEvent_kvm_userspace_exit_tag 399
#define perfetto_protos_FtraceEvent_kvm_vcpu_wakeup_tag 400
#define perfetto_protos_FtraceEvent_kvm_wfx_arm64_tag 401
#define perfetto_protos_FtraceEvent_trap_reg_tag 402
#define perfetto_protos_FtraceEvent_vgic_update_irq_pending_tag 403
#define perfetto_protos_FtraceEvent_wakeup_source_activate_tag 404
#define perfetto_protos_FtraceEvent_wakeup_source_deactivate_tag 405
#define perfetto_protos_FtraceEvent_ufshcd_command_tag 406
#define perfetto_protos_FtraceEvent_ufshcd_clk_gating_tag 407
#define perfetto_protos_FtraceEvent_console_tag  408
#define perfetto_protos_FtraceEvent_drm_vblank_event_tag 409
#define perfetto_protos_FtraceEvent_drm_vblank_event_delivered_tag 410
#define perfetto_protos_FtraceEvent_drm_sched_job_tag 411
#define perfetto_protos_FtraceEvent_drm_run_job_tag 412
#define perfetto_protos_FtraceEvent_drm_sched_process_job_tag 413
#define perfetto_protos_FtraceEvent_dma_fence_init_tag 414
#define perfetto_protos_FtraceEvent_dma_fence_emit_tag 415
#define perfetto_protos_FtraceEvent_dma_fence_signaled_tag 416
#define perfetto_protos_FtraceEvent_dma_fence_wait_start_tag 417
#define perfetto_protos_FtraceEvent_dma_fence_wait_end_tag 418
#define perfetto_protos_FtraceEvent_f2fs_iostat_tag 419
#define perfetto_protos_FtraceEvent_f2fs_iostat_latency_tag 420
#define perfetto_protos_FtraceEvent_sched_cpu_util_cfs_tag 421
#define perfetto_protos_FtraceEvent_v4l2_qbuf_tag 422
#define perfetto_protos_FtraceEvent_v4l2_dqbuf_tag 423
#define perfetto_protos_FtraceEvent_vb2_v4l2_buf_queue_tag 424
#define perfetto_protos_FtraceEvent_vb2_v4l2_buf_done_tag 425
#define perfetto_protos_FtraceEvent_vb2_v4l2_qbuf_tag 426
#define perfetto_protos_FtraceEvent_vb2_v4l2_dqbuf_tag 427
#define perfetto_protos_FtraceEvent_dsi_cmd_fifo_status_tag 428
#define perfetto_protos_FtraceEvent_dsi_rx_tag   429
#define perfetto_protos_FtraceEvent_dsi_tx_tag   430
#define perfetto_protos_FtraceEvent_android_fs_dataread_end_tag 431
#define perfetto_protos_FtraceEvent_android_fs_dataread_start_tag 432
#define perfetto_protos_FtraceEvent_android_fs_datawrite_end_tag 433
#define perfetto_protos_FtraceEvent_android_fs_datawrite_start_tag 434
#define perfetto_protos_FtraceEvent_android_fs_fsync_end_tag 435
#define perfetto_protos_FtraceEvent_android_fs_fsync_start_tag 436
#define perfetto_protos_FtraceEvent_funcgraph_entry_tag 437
#define perfetto_protos_FtraceEvent_funcgraph_exit_tag 438
#define perfetto_protos_FtraceEvent_virtio_video_cmd_tag 439
#define perfetto_protos_FtraceEvent_virtio_video_cmd_done_tag 440
#define perfetto_protos_FtraceEvent_virtio_video_resource_queue_tag 441
#define perfetto_protos_FtraceEvent_virtio_video_resource_queue_done_tag 442
#define perfetto_protos_FtraceEvent_mm_shrink_slab_start_tag 443
#define perfetto_protos_FtraceEvent_mm_shrink_slab_end_tag 444
#define perfetto_protos_FtraceEvent_trusty_smc_tag 445
#define perfetto_protos_FtraceEvent_trusty_smc_done_tag 446
#define perfetto_protos_FtraceEvent_trusty_std_call32_tag 447
#define perfetto_protos_FtraceEvent_trusty_std_call32_done_tag 448
#define perfetto_protos_FtraceEvent_trusty_share_memory_tag 449
#define perfetto_protos_FtraceEvent_trusty_share_memory_done_tag 450
#define perfetto_protos_FtraceEvent_trusty_reclaim_memory_tag 451
#define perfetto_protos_FtraceEvent_trusty_reclaim_memory_done_tag 452
#define perfetto_protos_FtraceEvent_trusty_irq_tag 453
#define perfetto_protos_FtraceEvent_trusty_ipc_handle_event_tag 454
#define perfetto_protos_FtraceEvent_trusty_ipc_connect_tag 455
#define perfetto_protos_FtraceEvent_trusty_ipc_connect_end_tag 456
#define perfetto_protos_FtraceEvent_trusty_ipc_write_tag 457
#define perfetto_protos_FtraceEvent_trusty_ipc_poll_tag 458
#define perfetto_protos_FtraceEvent_trusty_ipc_read_tag 460
#define perfetto_protos_FtraceEvent_trusty_ipc_read_end_tag 461
#define perfetto_protos_FtraceEvent_trusty_ipc_rx_tag 462
#define perfetto_protos_FtraceEvent_trusty_enqueue_nop_tag 464
#define perfetto_protos_FtraceEvent_cma_alloc_start_tag 465
#define perfetto_protos_FtraceEvent_cma_alloc_info_tag 466
#define perfetto_protos_FtraceEvent_lwis_tracing_mark_write_tag 467
#define perfetto_protos_FtraceEvent_virtio_gpu_cmd_queue_tag 468
#define perfetto_protos_FtraceEvent_virtio_gpu_cmd_response_tag 469
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_CQS_SET_tag 470
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_CQS_WAIT_START_tag 471
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_CQS_WAIT_END_tag 472
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_FENCE_SIGNAL_tag 473
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_FENCE_WAIT_START_tag 474
#define perfetto_protos_FtraceEvent_mali_mali_KCPU_FENCE_WAIT_END_tag 475
#define perfetto_protos_FtraceEvent_hyp_enter_tag 476
#define perfetto_protos_FtraceEvent_hyp_exit_tag 477
#define perfetto_protos_FtraceEvent_host_hcall_tag 478
#define perfetto_protos_FtraceEvent_host_smc_tag 479
#define perfetto_protos_FtraceEvent_host_mem_abort_tag 480
#define perfetto_protos_FtraceEvent_suspend_resume_minimal_tag 481
#define perfetto_protos_FtraceEvent_mali_mali_CSF_INTERRUPT_START_tag 482
#define perfetto_protos_FtraceEvent_mali_mali_CSF_INTERRUPT_END_tag 483
#define perfetto_protos_FtraceEvent_samsung_tracing_mark_write_tag 484
#define perfetto_protos_FtraceEvent_binder_command_tag 485
#define perfetto_protos_FtraceEvent_binder_return_tag 486
#define perfetto_protos_FtraceEvent_sched_switch_with_ctrs_tag 487
#define perfetto_protos_FtraceEvent_gpu_work_period_tag 488
#define perfetto_protos_FtraceEvent_rpm_status_tag 489
#define perfetto_protos_FtraceEvent_panel_write_generic_tag 490
#define perfetto_protos_FtraceEvent_sched_migrate_task_tag 491
#define perfetto_protos_FtraceEvent_dpu_dsi_cmd_fifo_status_tag 492
#define perfetto_protos_FtraceEvent_dpu_dsi_rx_tag 493
#define perfetto_protos_FtraceEvent_dpu_dsi_tx_tag 494
#define perfetto_protos_FtraceEvent_f2fs_background_gc_tag 495
#define perfetto_protos_FtraceEvent_f2fs_gc_begin_tag 496
#define perfetto_protos_FtraceEvent_f2fs_gc_end_tag 497
#define perfetto_protos_FtraceEvent_fastrpc_dma_free_tag 498
#define perfetto_protos_FtraceEvent_fastrpc_dma_alloc_tag 499
#define perfetto_protos_FtraceEvent_fastrpc_dma_unmap_tag 500
#define perfetto_protos_FtraceEvent_fastrpc_dma_map_tag 501
#define perfetto_protos_FtraceEvent_google_icc_event_tag 502
#define perfetto_protos_FtraceEvent_google_irm_event_tag 503
#define perfetto_protos_FtraceEvent_device_pm_callback_start_tag 504
#define perfetto_protos_FtraceEvent_device_pm_callback_end_tag 505
#define perfetto_protos_FtraceEvent_thermal_exynos_acpm_bulk_tag 506
#define perfetto_protos_FtraceEvent_thermal_exynos_acpm_high_overhead_tag 507
#define perfetto_protos_FtraceEvent_dcvsh_freq_tag 508
#define perfetto_protos_FtraceEvent_kgsl_gpu_frequency_tag 509
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_CORES_DOWN_SCALE_NOTIFY_PEND_tag 510
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_CORES_NOTIFY_PEND_tag 511
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_CORE_INACTIVE_PEND_tag 512
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_MCU_ON_RECHECK_tag 513
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_SHADERS_CORE_OFF_PEND_tag 514
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_SHADERS_PEND_OFF_tag 515
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_SHADERS_PEND_ON_tag 516
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_HCTL_SHADERS_READY_OFF_tag 517
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_IN_SLEEP_tag 518
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_OFF_tag 519
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_tag 520
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_CORE_ATTR_UPDATE_PEND_tag 521
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_GLB_REINIT_PEND_tag 522
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_HALT_tag 523
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_HWCNT_DISABLE_tag 524
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_HWCNT_ENABLE_tag 525
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_PEND_HALT_tag 526
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_PEND_SLEEP_tag 527
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_ON_SLEEP_INITIATE_tag 528
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_PEND_OFF_tag 529
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_PEND_ON_RELOAD_tag 530
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_POWER_DOWN_tag 531
#define perfetto_protos_FtraceEvent_mali_mali_PM_MCU_RESET_WAIT_tag 532
#define perfetto_protos_FtraceEvent_bcl_irq_trigger_tag 533
#define perfetto_protos_FtraceEvent_kgsl_adreno_cmdbatch_queued_tag 534
#define perfetto_protos_FtraceEvent_kgsl_adreno_cmdbatch_submitted_tag 535
#define perfetto_protos_FtraceEvent_kgsl_adreno_cmdbatch_sync_tag 536
#define perfetto_protos_FtraceEvent_kgsl_adreno_cmdbatch_retired_tag 537
#define perfetto_protos_FtraceEvent_pixel_mm_kswapd_wake_tag 538
#define perfetto_protos_FtraceEvent_pixel_mm_kswapd_done_tag 539
#define perfetto_protos_FtraceEvent_sched_wakeup_task_attr_tag 540
#define perfetto_protos_FtraceEvent_devfreq_frequency_tag 541
#define perfetto_protos_FtraceEvent_kprobe_event_tag 542
#define perfetto_protos_FtraceEvent_param_set_value_cpm_tag 543
#define perfetto_protos_FtraceEvent_do_sys_open_tag 544
#define perfetto_protos_FtraceEvent_open_exec_tag 545
#define perfetto_protos_FtraceEvent_block_io_start_tag 546
#define perfetto_protos_FtraceEvent_block_io_done_tag 547
#define perfetto_protos_FtraceEvent_mali_gpu_power_state_tag 548
#define perfetto_protos_FtraceEvent_dpu_disp_dpu_underrun_tag 549
#define perfetto_protos_FtraceEvent_dpu_disp_vblank_irq_enable_tag 550
#define perfetto_protos_FtraceEvent_common_flags_tag 5
#define perfetto_protos_FtraceCpuStats_cpu_tag   1
#define perfetto_protos_FtraceCpuStats_entries_tag 2
#define perfetto_protos_FtraceCpuStats_overrun_tag 3
#define perfetto_protos_FtraceCpuStats_commit_overrun_tag 4
#define perfetto_protos_FtraceCpuStats_bytes_read_tag 5
#define perfetto_protos_FtraceCpuStats_oldest_event_ts_tag 6
#define perfetto_protos_FtraceCpuStats_now_ts_tag 7
#define perfetto_protos_FtraceCpuStats_dropped_events_tag 8
#define perfetto_protos_FtraceCpuStats_read_events_tag 9
#define perfetto_protos_FtraceKprobeStats_hits_tag 1
#define perfetto_protos_FtraceKprobeStats_misses_tag 2
#define perfetto_protos_FtraceStats_phase_tag    1
#define perfetto_protos_FtraceStats_cpu_stats_tag 2
#define perfetto_protos_FtraceStats_kernel_symbols_parsed_tag 3
#define perfetto_protos_FtraceStats_kernel_symbols_mem_kb_tag 4
#define perfetto_protos_FtraceStats_atrace_errors_tag 5
#define perfetto_protos_FtraceStats_unknown_ftrace_events_tag 6
#define perfetto_protos_FtraceStats_failed_ftrace_events_tag 7
#define perfetto_protos_FtraceStats_preserve_ftrace_buffer_tag 8
#define perfetto_protos_FtraceStats_ftrace_parse_errors_tag 9
#define perfetto_protos_FtraceStats_kprobe_stats_tag 10
#define perfetto_protos_FtraceEventBundle_CompactSched_switch_timestamp_tag 1
#define perfetto_protos_FtraceEventBundle_CompactSched_switch_prev_state_tag 2
#define perfetto_protos_FtraceEventBundle_CompactSched_switch_next_pid_tag 3
#define perfetto_protos_FtraceEventBundle_CompactSched_switch_next_prio_tag 4
#define perfetto_protos_FtraceEventBundle_CompactSched_intern_table_tag 5
#define perfetto_protos_FtraceEventBundle_CompactSched_switch_next_comm_index_tag 6
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_timestamp_tag 7
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_pid_tag 8
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_target_cpu_tag 9
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_prio_tag 10
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_comm_index_tag 11
#define perfetto_protos_FtraceEventBundle_CompactSched_waking_common_flags_tag 12
#define perfetto_protos_FtraceEventBundle_cpu_tag 1
#define perfetto_protos_FtraceEventBundle_event_tag 2
#define perfetto_protos_FtraceEventBundle_lost_events_tag 3
#define perfetto_protos_FtraceEventBundle_compact_sched_tag 4
#define perfetto_protos_FtraceEventBundle_ftrace_clock_tag 5
#define perfetto_protos_FtraceEventBundle_ftrace_timestamp_tag 6
#define perfetto_protos_FtraceEventBundle_boot_timestamp_tag 7
#define perfetto_protos_FtraceEventBundle_error_tag 8
#define perfetto_protos_FtraceEventBundle_last_read_event_timestamp_tag 9
#define perfetto_protos_FtraceEventBundle_previous_bundle_end_timestamp_tag 10
#define perfetto_protos_FtraceEventBundle_broken_abi_trace_page_tag 512
#define perfetto_protos_FtraceEventBundle_FtraceError_timestamp_tag 1
#define perfetto_protos_FtraceEventBundle_FtraceError_status_tag 2
#define perfetto_protos_GpuCounterEvent_counter_descriptor_tag 1
#define perfetto_protos_GpuCounterEvent_counters_tag 2
#define perfetto_protos_GpuCounterEvent_gpu_id_tag 3
#define perfetto_protos_GpuCounterEvent_GpuCounter_counter_id_tag 1
#define perfetto_protos_GpuCounterEvent_GpuCounter_int_value_tag 2
#define perfetto_protos_GpuCounterEvent_GpuCounter_double_value_tag 3
#define perfetto_protos_GpuLog_severity_tag      1
#define perfetto_protos_GpuLog_tag_tag           2
#define perfetto_protos_GpuLog_log_message_tag   3
#define perfetto_protos_GpuRenderStageEvent_ExtraData_name_tag 1
#define perfetto_protos_GpuRenderStageEvent_ExtraData_value_tag 2
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_context_tag 1
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_pid_tag 2
#define perfetto_protos_GpuRenderStageEvent_Specifications_context_spec_tag 1
#define perfetto_protos_GpuRenderStageEvent_Specifications_hw_queue_tag 2
#define perfetto_protos_GpuRenderStageEvent_Specifications_stage_tag 3
#define perfetto_protos_GpuRenderStageEvent_event_id_tag 1
#define perfetto_protos_GpuRenderStageEvent_duration_tag 2
#define perfetto_protos_GpuRenderStageEvent_hw_queue_id_tag 3
#define perfetto_protos_GpuRenderStageEvent_stage_id_tag 4
#define perfetto_protos_GpuRenderStageEvent_context_tag 5
#define perfetto_protos_GpuRenderStageEvent_extra_data_tag 6
#define perfetto_protos_GpuRenderStageEvent_specifications_tag 7
#define perfetto_protos_GpuRenderStageEvent_render_target_handle_tag 8
#define perfetto_protos_GpuRenderStageEvent_render_pass_handle_tag 9
#define perfetto_protos_GpuRenderStageEvent_submission_id_tag 10
#define perfetto_protos_GpuRenderStageEvent_gpu_id_tag 11
#define perfetto_protos_GpuRenderStageEvent_command_buffer_handle_tag 12
#define perfetto_protos_GpuRenderStageEvent_hw_queue_iid_tag 13
#define perfetto_protos_GpuRenderStageEvent_stage_iid_tag 14
#define perfetto_protos_GpuRenderStageEvent_render_subpass_index_mask_tag 15
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_name_tag 1
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_description_tag 2
#define perfetto_protos_InternedGraphicsContext_iid_tag 1
#define perfetto_protos_InternedGraphicsContext_pid_tag 2
#define perfetto_protos_InternedGraphicsContext_api_tag 3
#define perfetto_protos_InternedGpuRenderStageSpecification_iid_tag 1
#define perfetto_protos_InternedGpuRenderStageSpecification_name_tag 2
#define perfetto_protos_InternedGpuRenderStageSpecification_description_tag 3
#define perfetto_protos_InternedGpuRenderStageSpecification_category_tag 4
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_pid_tag 1
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_vk_device_tag 2
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_object_type_tag 3
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_object_tag 4
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_object_name_tag 5
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_duration_ns_tag 1
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_pid_tag 2
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_tid_tag 3
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_vk_queue_tag 4
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_vk_command_buffers_tag 5
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_submission_id_tag 6
#define perfetto_protos_VulkanApiEvent_vk_debug_utils_object_name_tag 1
#define perfetto_protos_VulkanApiEvent_vk_queue_submit_tag 2
#define perfetto_protos_VulkanMemoryEventAnnotation_key_iid_tag 1
#define perfetto_protos_VulkanMemoryEventAnnotation_int_value_tag 2
#define perfetto_protos_VulkanMemoryEventAnnotation_double_value_tag 3
#define perfetto_protos_VulkanMemoryEventAnnotation_string_iid_tag 4
#define perfetto_protos_VulkanMemoryEvent_source_tag 1
#define perfetto_protos_VulkanMemoryEvent_operation_tag 2
#define perfetto_protos_VulkanMemoryEvent_timestamp_tag 3
#define perfetto_protos_VulkanMemoryEvent_pid_tag 4
#define perfetto_protos_VulkanMemoryEvent_memory_address_tag 5
#define perfetto_protos_VulkanMemoryEvent_memory_size_tag 6
#define perfetto_protos_VulkanMemoryEvent_caller_iid_tag 7
#define perfetto_protos_VulkanMemoryEvent_allocation_scope_tag 8
#define perfetto_protos_VulkanMemoryEvent_annotations_tag 9
#define perfetto_protos_VulkanMemoryEvent_device_tag 16
#define perfetto_protos_VulkanMemoryEvent_device_memory_tag 17
#define perfetto_protos_VulkanMemoryEvent_memory_type_tag 18
#define perfetto_protos_VulkanMemoryEvent_heap_tag 19
#define perfetto_protos_VulkanMemoryEvent_object_handle_tag 20
#define perfetto_protos_InternedString_iid_tag   1
#define perfetto_protos_InternedString_str_tag   2
#define perfetto_protos_Line_function_name_tag   1
#define perfetto_protos_Line_source_file_name_tag 2
#define perfetto_protos_Line_line_number_tag     3
#define perfetto_protos_AddressSymbols_address_tag 1
#define perfetto_protos_AddressSymbols_lines_tag 2
#define perfetto_protos_ModuleSymbols_path_tag   1
#define perfetto_protos_ModuleSymbols_build_id_tag 2
#define perfetto_protos_ModuleSymbols_address_symbols_tag 3
#define perfetto_protos_Mapping_iid_tag          1
#define perfetto_protos_Mapping_build_id_tag     2
#define perfetto_protos_Mapping_start_offset_tag 3
#define perfetto_protos_Mapping_start_tag        4
#define perfetto_protos_Mapping_end_tag          5
#define perfetto_protos_Mapping_load_bias_tag    6
#define perfetto_protos_Mapping_path_string_ids_tag 7
#define perfetto_protos_Mapping_exact_offset_tag 8
#define perfetto_protos_Frame_iid_tag            1
#define perfetto_protos_Frame_function_name_id_tag 2
#define perfetto_protos_Frame_mapping_id_tag     3
#define perfetto_protos_Frame_rel_pc_tag         4
#define perfetto_protos_Callstack_iid_tag        1
#define perfetto_protos_Callstack_frame_ids_tag  2
#define perfetto_protos_HistogramName_iid_tag    1
#define perfetto_protos_HistogramName_name_tag   2
#define perfetto_protos_ChromeHistogramSample_name_hash_tag 1
#define perfetto_protos_ChromeHistogramSample_name_tag 2
#define perfetto_protos_ChromeHistogramSample_sample_tag 3
#define perfetto_protos_ChromeHistogramSample_name_iid_tag 4
#define perfetto_protos_DebugAnnotation_NestedValue_nested_type_tag 1
#define perfetto_protos_DebugAnnotation_NestedValue_dict_keys_tag 2
#define perfetto_protos_DebugAnnotation_NestedValue_dict_values_tag 3
#define perfetto_protos_DebugAnnotation_NestedValue_array_values_tag 4
#define perfetto_protos_DebugAnnotation_NestedValue_int_value_tag 5
#define perfetto_protos_DebugAnnotation_NestedValue_double_value_tag 6
#define perfetto_protos_DebugAnnotation_NestedValue_bool_value_tag 7
#define perfetto_protos_DebugAnnotation_NestedValue_string_value_tag 8
#define perfetto_protos_DebugAnnotation_name_iid_tag 1
#define perfetto_protos_DebugAnnotation_name_tag 10
#define perfetto_protos_DebugAnnotation_bool_value_tag 2
#define perfetto_protos_DebugAnnotation_uint_value_tag 3
#define perfetto_protos_DebugAnnotation_int_value_tag 4
#define perfetto_protos_DebugAnnotation_double_value_tag 5
#define perfetto_protos_DebugAnnotation_string_value_tag 6
#define perfetto_protos_DebugAnnotation_pointer_value_tag 7
#define perfetto_protos_DebugAnnotation_nested_value_tag 8
#define perfetto_protos_DebugAnnotation_legacy_json_value_tag 9
#define perfetto_protos_DebugAnnotation_string_value_iid_tag 17
#define perfetto_protos_DebugAnnotation_dict_entries_tag 11
#define perfetto_protos_DebugAnnotation_array_values_tag 12
#define perfetto_protos_DebugAnnotation_proto_type_name_iid_tag 13
#define perfetto_protos_DebugAnnotation_proto_type_name_tag 16
#define perfetto_protos_DebugAnnotation_proto_value_tag 14
#define perfetto_protos_DebugAnnotationName_iid_tag 1
#define perfetto_protos_DebugAnnotationName_name_tag 2
#define perfetto_protos_DebugAnnotationValueTypeName_iid_tag 1
#define perfetto_protos_DebugAnnotationValueTypeName_name_tag 2
#define perfetto_protos_LogMessage_source_location_iid_tag 1
#define perfetto_protos_LogMessage_body_iid_tag  2
#define perfetto_protos_LogMessage_prio_tag      3
#define perfetto_protos_LogMessageBody_iid_tag   1
#define perfetto_protos_LogMessageBody_body_tag  2
#define perfetto_protos_UnsymbolizedSourceLocation_iid_tag 1
#define perfetto_protos_UnsymbolizedSourceLocation_mapping_id_tag 2
#define perfetto_protos_UnsymbolizedSourceLocation_rel_pc_tag 3
#define perfetto_protos_SourceLocation_iid_tag   1
#define perfetto_protos_SourceLocation_file_name_tag 2
#define perfetto_protos_SourceLocation_function_name_tag 3
#define perfetto_protos_SourceLocation_line_number_tag 4
#define perfetto_protos_ChromeActiveProcesses_pid_tag 1
#define perfetto_protos_ChromeApplicationStateInfo_application_state_tag 1
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_next_action_tag 1
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_begin_impl_frame_state_tag 2
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_begin_main_frame_state_tag 3
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_layer_tree_frame_sink_state_tag 4
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_forced_redraw_state_tag 5
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_commit_count_tag 1
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_current_frame_number_tag 2
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_last_frame_number_submit_performed_tag 3
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_last_frame_number_draw_performed_tag 4
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_last_frame_number_begin_main_frame_sent_tag 5
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_draw_tag 6
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_send_begin_main_frame_for_current_frame_tag 7
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_notify_begin_main_frame_not_expected_until_tag 8
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_notify_begin_main_frame_not_expected_soon_tag 9
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_wants_begin_main_frame_not_expected_tag 10
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_commit_during_frame_tag 11
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_invalidate_layer_tree_frame_sink_tag 12
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_perform_impl_side_invalidaion_tag 13
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_prepare_tiles_tag 14
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_consecutive_checkerboard_animations_tag 15
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_pending_submit_frames_tag 16
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_submit_frames_with_current_layer_tree_frame_sink_tag 17
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_needs_redraw_tag 18
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_needs_prepare_tiles_tag 19
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_needs_begin_main_frame_tag 20
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_needs_one_begin_impl_frame_tag 21
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_visible_tag 22
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_begin_frame_source_paused_tag 23
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_can_draw_tag 24
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_resourceless_draw_tag 25
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_has_pending_tree_tag 26
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_pending_tree_is_ready_for_activation_tag 27
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_active_tree_needs_first_draw_tag 28
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_active_tree_is_ready_to_draw_tag 29
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_create_and_initialize_first_layer_tree_frame_sink_tag 30
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_tree_priority_tag 31
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_scroll_handler_state_tag 32
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_critical_begin_main_frame_to_activate_is_fast_tag 33
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_main_thread_missed_last_deadline_tag 34
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_video_needs_begin_frames_tag 36
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_defer_begin_main_frame_tag 37
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_last_commit_had_no_updates_tag 38
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_draw_in_last_frame_tag 39
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_did_submit_in_last_frame_tag 40
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_needs_impl_side_invalidation_tag 41
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_current_pending_tree_is_impl_side_tag 42
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_previous_pending_tree_was_impl_side_tag 43
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_processing_animation_worklets_for_active_tree_tag 44
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_processing_animation_worklets_for_pending_tree_tag 45
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_processing_paint_worklets_for_pending_tree_tag 46
#define perfetto_protos_ChromeCompositorStateMachine_major_state_tag 1
#define perfetto_protos_ChromeCompositorStateMachine_minor_state_tag 2
#define perfetto_protos_BeginFrameArgs_type_tag  1
#define perfetto_protos_BeginFrameArgs_source_id_tag 2
#define perfetto_protos_BeginFrameArgs_sequence_number_tag 3
#define perfetto_protos_BeginFrameArgs_frame_time_us_tag 4
#define perfetto_protos_BeginFrameArgs_deadline_us_tag 5
#define perfetto_protos_BeginFrameArgs_interval_delta_us_tag 6
#define perfetto_protos_BeginFrameArgs_on_critical_path_tag 7
#define perfetto_protos_BeginFrameArgs_animate_only_tag 8
#define perfetto_protos_BeginFrameArgs_source_location_iid_tag 9
#define perfetto_protos_BeginFrameArgs_source_location_tag 10
#define perfetto_protos_BeginFrameArgs_frames_throttled_since_last_tag 12
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_interval_delta_tag 1
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_now_to_deadline_delta_tag 2
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_frame_time_to_now_delta_tag 3
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_frame_time_to_deadline_delta_tag 4
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_now_tag 5
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_frame_time_tag 6
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_deadline_tag 7
#define perfetto_protos_BeginImplFrameArgs_updated_at_us_tag 1
#define perfetto_protos_BeginImplFrameArgs_finished_at_us_tag 2
#define perfetto_protos_BeginImplFrameArgs_state_tag 3
#define perfetto_protos_BeginImplFrameArgs_current_args_tag 4
#define perfetto_protos_BeginImplFrameArgs_last_args_tag 5
#define perfetto_protos_BeginImplFrameArgs_timestamps_in_us_tag 6
#define perfetto_protos_BeginFrameObserverState_dropped_begin_frame_args_tag 1
#define perfetto_protos_BeginFrameObserverState_last_begin_frame_args_tag 2
#define perfetto_protos_BeginFrameSourceState_source_id_tag 1
#define perfetto_protos_BeginFrameSourceState_paused_tag 2
#define perfetto_protos_BeginFrameSourceState_num_observers_tag 3
#define perfetto_protos_BeginFrameSourceState_last_begin_frame_args_tag 4
#define perfetto_protos_CompositorTimingHistory_begin_main_frame_queue_critical_estimate_delta_us_tag 1
#define perfetto_protos_CompositorTimingHistory_begin_main_frame_queue_not_critical_estimate_delta_us_tag 2
#define perfetto_protos_CompositorTimingHistory_begin_main_frame_start_to_ready_to_commit_estimate_delta_us_tag 3
#define perfetto_protos_CompositorTimingHistory_commit_to_ready_to_activate_estimate_delta_us_tag 4
#define perfetto_protos_CompositorTimingHistory_prepare_tiles_estimate_delta_us_tag 5
#define perfetto_protos_CompositorTimingHistory_activate_estimate_delta_us_tag 6
#define perfetto_protos_CompositorTimingHistory_draw_estimate_delta_us_tag 7
#define perfetto_protos_ChromeCompositorSchedulerState_state_machine_tag 1
#define perfetto_protos_ChromeCompositorSchedulerState_observing_begin_frame_source_tag 2
#define perfetto_protos_ChromeCompositorSchedulerState_begin_impl_frame_deadline_task_tag 3
#define perfetto_protos_ChromeCompositorSchedulerState_pending_begin_frame_task_tag 4
#define perfetto_protos_ChromeCompositorSchedulerState_skipped_last_frame_missed_exceeded_deadline_tag 5
#define perfetto_protos_ChromeCompositorSchedulerState_inside_action_tag 7
#define perfetto_protos_ChromeCompositorSchedulerState_deadline_mode_tag 8
#define perfetto_protos_ChromeCompositorSchedulerState_deadline_us_tag 9
#define perfetto_protos_ChromeCompositorSchedulerState_deadline_scheduled_at_us_tag 10
#define perfetto_protos_ChromeCompositorSchedulerState_now_us_tag 11
#define perfetto_protos_ChromeCompositorSchedulerState_now_to_deadline_delta_us_tag 12
#define perfetto_protos_ChromeCompositorSchedulerState_now_to_deadline_scheduled_at_delta_us_tag 13
#define perfetto_protos_ChromeCompositorSchedulerState_begin_impl_frame_args_tag 14
#define perfetto_protos_ChromeCompositorSchedulerState_begin_frame_observer_state_tag 15
#define perfetto_protos_ChromeCompositorSchedulerState_begin_frame_source_state_tag 16
#define perfetto_protos_ChromeCompositorSchedulerState_compositor_timing_history_tag 17
#define perfetto_protos_ChromeContentSettingsEventInfo_number_of_exceptions_tag 1
#define perfetto_protos_ChromeFrameReporter_state_tag 1
#define perfetto_protos_ChromeFrameReporter_reason_tag 2
#define perfetto_protos_ChromeFrameReporter_frame_source_tag 3
#define perfetto_protos_ChromeFrameReporter_frame_sequence_tag 4
#define perfetto_protos_ChromeFrameReporter_affects_smoothness_tag 5
#define perfetto_protos_ChromeFrameReporter_scroll_state_tag 6
#define perfetto_protos_ChromeFrameReporter_has_main_animation_tag 7
#define perfetto_protos_ChromeFrameReporter_has_compositor_animation_tag 8
#define perfetto_protos_ChromeFrameReporter_has_smooth_input_main_tag 9
#define perfetto_protos_ChromeFrameReporter_has_missing_content_tag 10
#define perfetto_protos_ChromeFrameReporter_layer_tree_host_id_tag 11
#define perfetto_protos_ChromeFrameReporter_has_high_latency_tag 12
#define perfetto_protos_ChromeFrameReporter_frame_type_tag 13
#define perfetto_protos_ChromeFrameReporter_high_latency_contribution_stage_tag 14
#define perfetto_protos_ChromeFrameReporter_checkerboarded_needs_raster_tag 15
#define perfetto_protos_ChromeFrameReporter_checkerboarded_needs_record_tag 16
#define perfetto_protos_ChromeFrameReporter_surface_frame_trace_id_tag 17
#define perfetto_protos_ChromeFrameReporter_display_trace_id_tag 18
#define perfetto_protos_ChromeKeyedService_name_tag 1
#define perfetto_protos_ChromeLatencyInfo_trace_id_tag 1
#define perfetto_protos_ChromeLatencyInfo_step_tag 2
#define perfetto_protos_ChromeLatencyInfo_frame_tree_node_id_tag 3
#define perfetto_protos_ChromeLatencyInfo_component_info_tag 4
#define perfetto_protos_ChromeLatencyInfo_is_coalesced_tag 5
#define perfetto_protos_ChromeLatencyInfo_gesture_scroll_id_tag 6
#define perfetto_protos_ChromeLatencyInfo_touch_id_tag 7
#define perfetto_protos_ChromeLatencyInfo_input_type_tag 8
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_component_type_tag 1
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_time_us_tag 2
#define perfetto_protos_ChromeLegacyIpc_message_class_tag 1
#define perfetto_protos_ChromeLegacyIpc_message_line_tag 2
#define perfetto_protos_ChromeMessagePump_sent_messages_in_queue_tag 1
#define perfetto_protos_ChromeMessagePump_io_handler_location_iid_tag 2
#define perfetto_protos_ChromeMojoEventInfo_watcher_notify_interface_tag_tag 1
#define perfetto_protos_ChromeMojoEventInfo_ipc_hash_tag 2
#define perfetto_protos_ChromeMojoEventInfo_mojo_interface_tag_tag 3
#define perfetto_protos_ChromeMojoEventInfo_mojo_interface_method_iid_tag 4
#define perfetto_protos_ChromeMojoEventInfo_is_reply_tag 5
#define perfetto_protos_ChromeMojoEventInfo_payload_size_tag 6
#define perfetto_protos_ChromeMojoEventInfo_data_num_bytes_tag 7
#define perfetto_protos_ChromeRendererSchedulerState_rail_mode_tag 1
#define perfetto_protos_ChromeRendererSchedulerState_is_backgrounded_tag 2
#define perfetto_protos_ChromeRendererSchedulerState_is_hidden_tag 3
#define perfetto_protos_ChromeUserEvent_action_tag 1
#define perfetto_protos_ChromeUserEvent_action_hash_tag 2
#define perfetto_protos_ChromeWindowHandleEventInfo_dpi_tag 1
#define perfetto_protos_ChromeWindowHandleEventInfo_message_id_tag 2
#define perfetto_protos_ChromeWindowHandleEventInfo_hwnd_ptr_tag 3
#define perfetto_protos_Screenshot_jpg_image_tag 1
#define perfetto_protos_TaskExecution_posted_from_iid_tag 1
#define perfetto_protos_TrackEvent_LegacyEvent_name_iid_tag 1
#define perfetto_protos_TrackEvent_LegacyEvent_phase_tag 2
#define perfetto_protos_TrackEvent_LegacyEvent_duration_us_tag 3
#define perfetto_protos_TrackEvent_LegacyEvent_thread_duration_us_tag 4
#define perfetto_protos_TrackEvent_LegacyEvent_unscoped_id_tag 6
#define perfetto_protos_TrackEvent_LegacyEvent_local_id_tag 10
#define perfetto_protos_TrackEvent_LegacyEvent_global_id_tag 11
#define perfetto_protos_TrackEvent_LegacyEvent_id_scope_tag 7
#define perfetto_protos_TrackEvent_LegacyEvent_bind_id_tag 8
#define perfetto_protos_TrackEvent_LegacyEvent_use_async_tts_tag 9
#define perfetto_protos_TrackEvent_LegacyEvent_bind_to_enclosing_tag 12
#define perfetto_protos_TrackEvent_LegacyEvent_flow_direction_tag 13
#define perfetto_protos_TrackEvent_LegacyEvent_instant_event_scope_tag 14
#define perfetto_protos_TrackEvent_LegacyEvent_thread_instruction_delta_tag 15
#define perfetto_protos_TrackEvent_LegacyEvent_pid_override_tag 18
#define perfetto_protos_TrackEvent_LegacyEvent_tid_override_tag 19
#define perfetto_protos_TrackEvent_timestamp_delta_us_tag 1
#define perfetto_protos_TrackEvent_timestamp_absolute_us_tag 16
#define perfetto_protos_TrackEvent_thread_time_delta_us_tag 2
#define perfetto_protos_TrackEvent_thread_time_absolute_us_tag 17
#define perfetto_protos_TrackEvent_category_iids_tag 3
#define perfetto_protos_TrackEvent_debug_annotations_tag 4
#define perfetto_protos_TrackEvent_task_execution_tag 5
#define perfetto_protos_TrackEvent_legacy_event_tag 6
#define perfetto_protos_TrackEvent_thread_instruction_count_delta_tag 8
#define perfetto_protos_TrackEvent_thread_instruction_count_absolute_tag 20
#define perfetto_protos_TrackEvent_type_tag      9
#define perfetto_protos_TrackEvent_name_iid_tag  10
#define perfetto_protos_TrackEvent_name_tag      23
#define perfetto_protos_TrackEvent_track_uuid_tag 11
#define perfetto_protos_TrackEvent_extra_counter_values_tag 12
#define perfetto_protos_TrackEvent_log_message_tag 21
#define perfetto_protos_TrackEvent_categories_tag 22
#define perfetto_protos_TrackEvent_cc_scheduler_state_tag 24
#define perfetto_protos_TrackEvent_chrome_user_event_tag 25
#define perfetto_protos_TrackEvent_chrome_keyed_service_tag 26
#define perfetto_protos_TrackEvent_chrome_legacy_ipc_tag 27
#define perfetto_protos_TrackEvent_chrome_histogram_sample_tag 28
#define perfetto_protos_TrackEvent_chrome_latency_info_tag 29
#define perfetto_protos_TrackEvent_counter_value_tag 30
#define perfetto_protos_TrackEvent_double_counter_value_tag 44
#define perfetto_protos_TrackEvent_extra_counter_track_uuids_tag 31
#define perfetto_protos_TrackEvent_chrome_frame_reporter_tag 32
#define perfetto_protos_TrackEvent_source_location_tag 33
#define perfetto_protos_TrackEvent_source_location_iid_tag 34
#define perfetto_protos_TrackEvent_chrome_message_pump_tag 35
#define perfetto_protos_TrackEvent_flow_ids_old_tag 36
#define perfetto_protos_TrackEvent_chrome_mojo_event_info_tag 38
#define perfetto_protos_TrackEvent_chrome_application_state_info_tag 39
#define perfetto_protos_TrackEvent_chrome_renderer_scheduler_state_tag 40
#define perfetto_protos_TrackEvent_chrome_window_handle_event_info_tag 41
#define perfetto_protos_TrackEvent_terminating_flow_ids_old_tag 42
#define perfetto_protos_TrackEvent_chrome_content_settings_event_info_tag 43
#define perfetto_protos_TrackEvent_extra_double_counter_track_uuids_tag 45
#define perfetto_protos_TrackEvent_extra_double_counter_values_tag 46
#define perfetto_protos_TrackEvent_flow_ids_tag  47
#define perfetto_protos_TrackEvent_terminating_flow_ids_tag 48
#define perfetto_protos_TrackEvent_chrome_active_processes_tag 49
#define perfetto_protos_TrackEvent_screenshot_tag 50
#define perfetto_protos_TrackEventDefaults_track_uuid_tag 11
#define perfetto_protos_TrackEventDefaults_extra_counter_track_uuids_tag 31
#define perfetto_protos_TrackEventDefaults_extra_double_counter_track_uuids_tag 45
#define perfetto_protos_EventCategory_iid_tag    1
#define perfetto_protos_EventCategory_name_tag   2
#define perfetto_protos_EventName_iid_tag        1
#define perfetto_protos_EventName_name_tag       2
#define perfetto_protos_InternedData_event_categories_tag 1
#define perfetto_protos_InternedData_event_names_tag 2
#define perfetto_protos_InternedData_debug_annotation_names_tag 3
#define perfetto_protos_InternedData_source_locations_tag 4
#define perfetto_protos_InternedData_function_names_tag 5
#define perfetto_protos_InternedData_frames_tag  6
#define perfetto_protos_InternedData_callstacks_tag 7
#define perfetto_protos_InternedData_build_ids_tag 16
#define perfetto_protos_InternedData_mapping_paths_tag 17
#define perfetto_protos_InternedData_source_paths_tag 18
#define perfetto_protos_InternedData_mappings_tag 19
#define perfetto_protos_InternedData_log_message_body_tag 20
#define perfetto_protos_InternedData_vulkan_memory_keys_tag 22
#define perfetto_protos_InternedData_graphics_contexts_tag 23
#define perfetto_protos_InternedData_gpu_specifications_tag 24
#define perfetto_protos_InternedData_histogram_names_tag 25
#define perfetto_protos_InternedData_kernel_symbols_tag 26
#define perfetto_protos_InternedData_debug_annotation_value_type_names_tag 27
#define perfetto_protos_InternedData_unsymbolized_source_locations_tag 28
#define perfetto_protos_InternedData_debug_annotation_string_values_tag 29
#define perfetto_protos_InternedData_packet_context_tag 30
#define perfetto_protos_InternedData_v8_js_function_name_tag 31
#define perfetto_protos_InternedData_v8_js_function_tag 32
#define perfetto_protos_InternedData_v8_js_script_tag 33
#define perfetto_protos_InternedData_v8_wasm_script_tag 34
#define perfetto_protos_InternedData_v8_isolate_tag 35
#define perfetto_protos_InternedData_protolog_string_args_tag 36
#define perfetto_protos_InternedData_protolog_stacktrace_tag 37
#define perfetto_protos_InternedData_viewcapture_package_name_tag 38
#define perfetto_protos_InternedData_viewcapture_window_name_tag 39
#define perfetto_protos_InternedData_viewcapture_view_id_tag 40
#define perfetto_protos_InternedData_viewcapture_class_name_tag 41
#define perfetto_protos_InternedData_app_wakelock_info_tag 42
#define perfetto_protos_MemoryTrackerSnapshot_global_dump_id_tag 1
#define perfetto_protos_MemoryTrackerSnapshot_level_of_detail_tag 2
#define perfetto_protos_MemoryTrackerSnapshot_process_memory_dumps_tag 3
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_pid_tag 1
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_allocator_dumps_tag 2
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_memory_edges_tag 3
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_id_tag 1
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_absolute_name_tag 2
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_weak_tag 3
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_size_bytes_tag 4
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_entries_tag 5
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_name_tag 1
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_units_tag 2
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_value_uint64_tag 3
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_value_string_tag 4
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_source_id_tag 1
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_target_id_tag 2
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_importance_tag 3
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_overridable_tag 4
#define perfetto_protos_PerfettoMetatrace_event_id_tag 1
#define perfetto_protos_PerfettoMetatrace_counter_id_tag 2
#define perfetto_protos_PerfettoMetatrace_event_name_tag 8
#define perfetto_protos_PerfettoMetatrace_counter_name_tag 9
#define perfetto_protos_PerfettoMetatrace_event_name_iid_tag 11
#define perfetto_protos_PerfettoMetatrace_event_duration_ns_tag 3
#define perfetto_protos_PerfettoMetatrace_counter_value_tag 4
#define perfetto_protos_PerfettoMetatrace_thread_id_tag 5
#define perfetto_protos_PerfettoMetatrace_has_overruns_tag 6
#define perfetto_protos_PerfettoMetatrace_args_tag 7
#define perfetto_protos_PerfettoMetatrace_interned_strings_tag 10
#define perfetto_protos_PerfettoMetatrace_Arg_key_tag 1
#define perfetto_protos_PerfettoMetatrace_Arg_key_iid_tag 3
#define perfetto_protos_PerfettoMetatrace_Arg_value_tag 2
#define perfetto_protos_PerfettoMetatrace_Arg_value_iid_tag 4
#define perfetto_protos_PerfettoMetatrace_InternedString_iid_tag 1
#define perfetto_protos_PerfettoMetatrace_InternedString_value_tag 2
#define perfetto_protos_TracingServiceEvent_DataSources_data_source_tag 1
#define perfetto_protos_TracingServiceEvent_all_data_sources_started_tag 1
#define perfetto_protos_TracingServiceEvent_tracing_started_tag 2
#define perfetto_protos_TracingServiceEvent_all_data_sources_flushed_tag 3
#define perfetto_protos_TracingServiceEvent_read_tracing_buffers_completed_tag 4
#define perfetto_protos_TracingServiceEvent_tracing_disabled_tag 5
#define perfetto_protos_TracingServiceEvent_seized_for_bugreport_tag 6
#define perfetto_protos_TracingServiceEvent_slow_starting_data_sources_tag 7
#define perfetto_protos_TracingServiceEvent_last_flush_slow_data_sources_tag 8
#define perfetto_protos_TracingServiceEvent_flush_started_tag 9
#define perfetto_protos_TracingServiceEvent_clone_started_tag 10
#define perfetto_protos_TracingServiceEvent_buffer_cloned_tag 11
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_producer_name_tag 1
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_data_source_name_tag 2
#define perfetto_protos_AndroidEnergyConsumer_energy_consumer_id_tag 1
#define perfetto_protos_AndroidEnergyConsumer_ordinal_tag 2
#define perfetto_protos_AndroidEnergyConsumer_type_tag 3
#define perfetto_protos_AndroidEnergyConsumer_name_tag 4
#define perfetto_protos_AndroidEnergyConsumerDescriptor_energy_consumers_tag 1
#define perfetto_protos_AndroidEnergyEstimationBreakdown_energy_consumer_descriptor_tag 1
#define perfetto_protos_AndroidEnergyEstimationBreakdown_energy_consumer_id_tag 2
#define perfetto_protos_AndroidEnergyEstimationBreakdown_energy_uws_tag 3
#define perfetto_protos_AndroidEnergyEstimationBreakdown_per_uid_breakdown_tag 4
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_uid_tag 1
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_energy_uws_tag 2
#define perfetto_protos_EntityStateResidency_power_entity_state_tag 1
#define perfetto_protos_EntityStateResidency_residency_tag 2
#define perfetto_protos_EntityStateResidency_PowerEntityState_entity_index_tag 1
#define perfetto_protos_EntityStateResidency_PowerEntityState_state_index_tag 2
#define perfetto_protos_EntityStateResidency_PowerEntityState_entity_name_tag 3
#define perfetto_protos_EntityStateResidency_PowerEntityState_state_name_tag 4
#define perfetto_protos_EntityStateResidency_StateResidency_entity_index_tag 1
#define perfetto_protos_EntityStateResidency_StateResidency_state_index_tag 2
#define perfetto_protos_EntityStateResidency_StateResidency_total_time_in_state_ms_tag 3
#define perfetto_protos_EntityStateResidency_StateResidency_total_state_entry_count_tag 4
#define perfetto_protos_EntityStateResidency_StateResidency_last_entry_timestamp_ms_tag 5
#define perfetto_protos_BatteryCounters_charge_counter_uah_tag 1
#define perfetto_protos_BatteryCounters_capacity_percent_tag 2
#define perfetto_protos_BatteryCounters_current_ua_tag 3
#define perfetto_protos_BatteryCounters_current_avg_ua_tag 4
#define perfetto_protos_BatteryCounters_name_tag 5
#define perfetto_protos_BatteryCounters_energy_counter_uwh_tag 6
#define perfetto_protos_BatteryCounters_voltage_uv_tag 7
#define perfetto_protos_PowerRails_rail_descriptor_tag 1
#define perfetto_protos_PowerRails_energy_data_tag 2
#define perfetto_protos_PowerRails_RailDescriptor_index_tag 1
#define perfetto_protos_PowerRails_RailDescriptor_rail_name_tag 2
#define perfetto_protos_PowerRails_RailDescriptor_subsys_name_tag 3
#define perfetto_protos_PowerRails_RailDescriptor_sampling_rate_tag 4
#define perfetto_protos_PowerRails_EnergyData_index_tag 1
#define perfetto_protos_PowerRails_EnergyData_timestamp_ms_tag 2
#define perfetto_protos_PowerRails_EnergyData_energy_tag 3
#define perfetto_protos_ObfuscatedMember_obfuscated_name_tag 1
#define perfetto_protos_ObfuscatedMember_deobfuscated_name_tag 2
#define perfetto_protos_ObfuscatedClass_obfuscated_name_tag 1
#define perfetto_protos_ObfuscatedClass_deobfuscated_name_tag 2
#define perfetto_protos_ObfuscatedClass_obfuscated_members_tag 3
#define perfetto_protos_ObfuscatedClass_obfuscated_methods_tag 4
#define perfetto_protos_DeobfuscationMapping_package_name_tag 1
#define perfetto_protos_DeobfuscationMapping_version_code_tag 2
#define perfetto_protos_DeobfuscationMapping_obfuscated_classes_tag 3
#define perfetto_protos_HeapGraphRoot_object_ids_tag 1
#define perfetto_protos_HeapGraphRoot_root_type_tag 2
#define perfetto_protos_HeapGraphType_id_tag     1
#define perfetto_protos_HeapGraphType_location_id_tag 2
#define perfetto_protos_HeapGraphType_class_name_tag 3
#define perfetto_protos_HeapGraphType_object_size_tag 4
#define perfetto_protos_HeapGraphType_superclass_id_tag 5
#define perfetto_protos_HeapGraphType_reference_field_id_tag 6
#define perfetto_protos_HeapGraphType_kind_tag   7
#define perfetto_protos_HeapGraphType_classloader_id_tag 8
#define perfetto_protos_HeapGraphObject_id_tag   1
#define perfetto_protos_HeapGraphObject_id_delta_tag 7
#define perfetto_protos_HeapGraphObject_type_id_tag 2
#define perfetto_protos_HeapGraphObject_self_size_tag 3
#define perfetto_protos_HeapGraphObject_reference_field_id_tag 4
#define perfetto_protos_HeapGraphObject_reference_object_id_tag 5
#define perfetto_protos_HeapGraphObject_reference_field_id_base_tag 6
#define perfetto_protos_HeapGraphObject_native_allocation_registry_size_field_tag 8
#define perfetto_protos_HeapGraphObject_heap_type_delta_tag 9
#define perfetto_protos_HeapGraph_pid_tag        1
#define perfetto_protos_HeapGraph_objects_tag    2
#define perfetto_protos_HeapGraph_field_names_tag 4
#define perfetto_protos_HeapGraph_continued_tag  5
#define perfetto_protos_HeapGraph_index_tag      6
#define perfetto_protos_HeapGraph_roots_tag      7
#define perfetto_protos_HeapGraph_location_names_tag 8
#define perfetto_protos_HeapGraph_types_tag      9
#define perfetto_protos_ProfilePacket_strings_tag 1
#define perfetto_protos_ProfilePacket_frames_tag 2
#define perfetto_protos_ProfilePacket_callstacks_tag 3
#define perfetto_protos_ProfilePacket_mappings_tag 4
#define perfetto_protos_ProfilePacket_process_dumps_tag 5
#define perfetto_protos_ProfilePacket_continued_tag 6
#define perfetto_protos_ProfilePacket_index_tag  7
#define perfetto_protos_ProfilePacket_HeapSample_callstack_id_tag 1
#define perfetto_protos_ProfilePacket_HeapSample_self_allocated_tag 2
#define perfetto_protos_ProfilePacket_HeapSample_self_freed_tag 3
#define perfetto_protos_ProfilePacket_HeapSample_timestamp_tag 4
#define perfetto_protos_ProfilePacket_HeapSample_alloc_count_tag 5
#define perfetto_protos_ProfilePacket_HeapSample_free_count_tag 6
#define perfetto_protos_ProfilePacket_HeapSample_self_max_tag 8
#define perfetto_protos_ProfilePacket_HeapSample_self_max_count_tag 9
#define perfetto_protos_ProfilePacket_Histogram_buckets_tag 1
#define perfetto_protos_ProfilePacket_Histogram_Bucket_upper_limit_tag 1
#define perfetto_protos_ProfilePacket_Histogram_Bucket_max_bucket_tag 2
#define perfetto_protos_ProfilePacket_Histogram_Bucket_count_tag 3
#define perfetto_protos_ProfilePacket_ProcessStats_unwinding_errors_tag 1
#define perfetto_protos_ProfilePacket_ProcessStats_heap_samples_tag 2
#define perfetto_protos_ProfilePacket_ProcessStats_map_reparses_tag 3
#define perfetto_protos_ProfilePacket_ProcessStats_unwinding_time_us_tag 4
#define perfetto_protos_ProfilePacket_ProcessStats_total_unwinding_time_us_tag 5
#define perfetto_protos_ProfilePacket_ProcessStats_client_spinlock_blocked_us_tag 6
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_pid_tag 1
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_samples_tag 2
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_from_startup_tag 3
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_rejected_concurrent_tag 4
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_stats_tag 5
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_disconnected_tag 6
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_buffer_overran_tag 7
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_buffer_corrupted_tag 8
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_timestamp_tag 9
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_hit_guardrail_tag 10
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_heap_name_tag 11
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_sampling_interval_bytes_tag 12
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_orig_sampling_interval_bytes_tag 13
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_client_error_tag 14
#define perfetto_protos_StreamingAllocation_address_tag 1
#define perfetto_protos_StreamingAllocation_size_tag 2
#define perfetto_protos_StreamingAllocation_sample_size_tag 3
#define perfetto_protos_StreamingAllocation_clock_monotonic_coarse_timestamp_tag 4
#define perfetto_protos_StreamingAllocation_heap_id_tag 5
#define perfetto_protos_StreamingAllocation_sequence_number_tag 6
#define perfetto_protos_StreamingFree_address_tag 1
#define perfetto_protos_StreamingFree_heap_id_tag 2
#define perfetto_protos_StreamingFree_sequence_number_tag 3
#define perfetto_protos_StreamingProfilePacket_callstack_iid_tag 1
#define perfetto_protos_StreamingProfilePacket_timestamp_delta_us_tag 2
#define perfetto_protos_StreamingProfilePacket_process_priority_tag 3
#define perfetto_protos_PerfSample_ProducerEvent_source_stop_reason_tag 1
#define perfetto_protos_PerfSample_cpu_tag       1
#define perfetto_protos_PerfSample_pid_tag       2
#define perfetto_protos_PerfSample_tid_tag       3
#define perfetto_protos_PerfSample_callstack_iid_tag 4
#define perfetto_protos_PerfSample_cpu_mode_tag  5
#define perfetto_protos_PerfSample_timebase_count_tag 6
#define perfetto_protos_PerfSample_follower_counts_tag 7
#define perfetto_protos_PerfSample_unwind_error_tag 16
#define perfetto_protos_PerfSample_kernel_records_lost_tag 17
#define perfetto_protos_PerfSample_sample_skipped_reason_tag 18
#define perfetto_protos_PerfSample_producer_event_tag 19
#define perfetto_protos_PerfSampleDefaults_timebase_tag 1
#define perfetto_protos_PerfSampleDefaults_process_shard_count_tag 2
#define perfetto_protos_PerfSampleDefaults_chosen_process_shard_tag 3
#define perfetto_protos_PerfSampleDefaults_followers_tag 4
#define perfetto_protos_SmapsEntry_path_tag      1
#define perfetto_protos_SmapsEntry_size_kb_tag   2
#define perfetto_protos_SmapsEntry_private_dirty_kb_tag 3
#define perfetto_protos_SmapsEntry_swap_kb_tag   4
#define perfetto_protos_SmapsEntry_file_name_tag 5
#define perfetto_protos_SmapsEntry_start_address_tag 6
#define perfetto_protos_SmapsEntry_module_timestamp_tag 7
#define perfetto_protos_SmapsEntry_module_debugid_tag 8
#define perfetto_protos_SmapsEntry_module_debug_path_tag 9
#define perfetto_protos_SmapsEntry_protection_flags_tag 10
#define perfetto_protos_SmapsEntry_private_clean_resident_kb_tag 11
#define perfetto_protos_SmapsEntry_shared_dirty_resident_kb_tag 12
#define perfetto_protos_SmapsEntry_shared_clean_resident_kb_tag 13
#define perfetto_protos_SmapsEntry_locked_kb_tag 14
#define perfetto_protos_SmapsEntry_proportional_resident_kb_tag 15
#define perfetto_protos_SmapsPacket_pid_tag      1
#define perfetto_protos_SmapsPacket_entries_tag  2
#define perfetto_protos_ProcessStats_processes_tag 1
#define perfetto_protos_ProcessStats_collection_end_timestamp_tag 2
#define perfetto_protos_ProcessStats_Thread_tid_tag 1
#define perfetto_protos_ProcessStats_FDInfo_fd_tag 1
#define perfetto_protos_ProcessStats_FDInfo_path_tag 2
#define perfetto_protos_ProcessStats_Process_pid_tag 1
#define perfetto_protos_ProcessStats_Process_vm_size_kb_tag 2
#define perfetto_protos_ProcessStats_Process_vm_rss_kb_tag 3
#define perfetto_protos_ProcessStats_Process_rss_anon_kb_tag 4
#define perfetto_protos_ProcessStats_Process_rss_file_kb_tag 5
#define perfetto_protos_ProcessStats_Process_rss_shmem_kb_tag 6
#define perfetto_protos_ProcessStats_Process_vm_swap_kb_tag 7
#define perfetto_protos_ProcessStats_Process_vm_locked_kb_tag 8
#define perfetto_protos_ProcessStats_Process_vm_hwm_kb_tag 9
#define perfetto_protos_ProcessStats_Process_oom_score_adj_tag 10
#define perfetto_protos_ProcessStats_Process_threads_tag 11
#define perfetto_protos_ProcessStats_Process_is_peak_rss_resettable_tag 12
#define perfetto_protos_ProcessStats_Process_chrome_private_footprint_kb_tag 13
#define perfetto_protos_ProcessStats_Process_chrome_peak_resident_set_kb_tag 14
#define perfetto_protos_ProcessStats_Process_fds_tag 15
#define perfetto_protos_ProcessStats_Process_smr_rss_kb_tag 16
#define perfetto_protos_ProcessStats_Process_smr_pss_kb_tag 17
#define perfetto_protos_ProcessStats_Process_smr_pss_anon_kb_tag 18
#define perfetto_protos_ProcessStats_Process_smr_pss_file_kb_tag 19
#define perfetto_protos_ProcessStats_Process_smr_pss_shmem_kb_tag 20
#define perfetto_protos_ProcessStats_Process_runtime_user_mode_tag 21
#define perfetto_protos_ProcessStats_Process_runtime_kernel_mode_tag 22
#define perfetto_protos_ProcessStats_Process_smr_swap_pss_kb_tag 23
#define perfetto_protos_ProcessTree_processes_tag 1
#define perfetto_protos_ProcessTree_threads_tag  2
#define perfetto_protos_ProcessTree_collection_end_timestamp_tag 3
#define perfetto_protos_ProcessTree_Thread_tid_tag 1
#define perfetto_protos_ProcessTree_Thread_name_tag 2
#define perfetto_protos_ProcessTree_Thread_tgid_tag 3
#define perfetto_protos_ProcessTree_Thread_nstid_tag 4
#define perfetto_protos_ProcessTree_Process_pid_tag 1
#define perfetto_protos_ProcessTree_Process_ppid_tag 2
#define perfetto_protos_ProcessTree_Process_cmdline_tag 3
#define perfetto_protos_ProcessTree_Process_uid_tag 5
#define perfetto_protos_ProcessTree_Process_nspid_tag 6
#define perfetto_protos_ProcessTree_Process_process_start_from_boot_tag 7
#define perfetto_protos_ProcessTree_Process_is_kthread_tag 8
#define perfetto_protos_ProcessTree_Process_cmdline_is_comm_tag 9
#define perfetto_protos_RemoteClockSync_synced_clocks_tag 1
#define perfetto_protos_RemoteClockSync_SyncedClocks_client_clocks_tag 2
#define perfetto_protos_RemoteClockSync_SyncedClocks_host_clocks_tag 3
#define perfetto_protos_StatsdAtom_atom_tag      1
#define perfetto_protos_StatsdAtom_timestamp_nanos_tag 2
#define perfetto_protos_SysStats_meminfo_tag     1
#define perfetto_protos_SysStats_vmstat_tag      2
#define perfetto_protos_SysStats_cpu_stat_tag    3
#define perfetto_protos_SysStats_num_forks_tag   4
#define perfetto_protos_SysStats_num_irq_total_tag 5
#define perfetto_protos_SysStats_num_irq_tag     6
#define perfetto_protos_SysStats_num_softirq_total_tag 7
#define perfetto_protos_SysStats_num_softirq_tag 8
#define perfetto_protos_SysStats_collection_end_timestamp_tag 9
#define perfetto_protos_SysStats_devfreq_tag     10
#define perfetto_protos_SysStats_cpufreq_khz_tag 11
#define perfetto_protos_SysStats_buddy_info_tag  12
#define perfetto_protos_SysStats_disk_stat_tag   13
#define perfetto_protos_SysStats_psi_tag         14
#define perfetto_protos_SysStats_thermal_zone_tag 15
#define perfetto_protos_SysStats_cpuidle_state_tag 16
#define perfetto_protos_SysStats_gpufreq_mhz_tag 17
#define perfetto_protos_SysStats_MeminfoValue_key_tag 1
#define perfetto_protos_SysStats_MeminfoValue_value_tag 2
#define perfetto_protos_SysStats_VmstatValue_key_tag 1
#define perfetto_protos_SysStats_VmstatValue_value_tag 2
#define perfetto_protos_SysStats_CpuTimes_cpu_id_tag 1
#define perfetto_protos_SysStats_CpuTimes_user_ns_tag 2
#define perfetto_protos_SysStats_CpuTimes_user_nice_ns_tag 3
#define perfetto_protos_SysStats_CpuTimes_system_mode_ns_tag 4
#define perfetto_protos_SysStats_CpuTimes_idle_ns_tag 5
#define perfetto_protos_SysStats_CpuTimes_io_wait_ns_tag 6
#define perfetto_protos_SysStats_CpuTimes_irq_ns_tag 7
#define perfetto_protos_SysStats_CpuTimes_softirq_ns_tag 8
#define perfetto_protos_SysStats_InterruptCount_irq_tag 1
#define perfetto_protos_SysStats_InterruptCount_count_tag 2
#define perfetto_protos_SysStats_DevfreqValue_key_tag 1
#define perfetto_protos_SysStats_DevfreqValue_value_tag 2
#define perfetto_protos_SysStats_BuddyInfo_node_tag 1
#define perfetto_protos_SysStats_BuddyInfo_zone_tag 2
#define perfetto_protos_SysStats_BuddyInfo_order_pages_tag 3
#define perfetto_protos_SysStats_DiskStat_device_name_tag 1
#define perfetto_protos_SysStats_DiskStat_read_sectors_tag 2
#define perfetto_protos_SysStats_DiskStat_read_time_ms_tag 3
#define perfetto_protos_SysStats_DiskStat_write_sectors_tag 4
#define perfetto_protos_SysStats_DiskStat_write_time_ms_tag 5
#define perfetto_protos_SysStats_DiskStat_discard_sectors_tag 6
#define perfetto_protos_SysStats_DiskStat_discard_time_ms_tag 7
#define perfetto_protos_SysStats_DiskStat_flush_count_tag 8
#define perfetto_protos_SysStats_DiskStat_flush_time_ms_tag 9
#define perfetto_protos_SysStats_PsiSample_resource_tag 1
#define perfetto_protos_SysStats_PsiSample_total_ns_tag 2
#define perfetto_protos_SysStats_ThermalZone_name_tag 1
#define perfetto_protos_SysStats_ThermalZone_temp_tag 2
#define perfetto_protos_SysStats_ThermalZone_type_tag 3
#define perfetto_protos_SysStats_CpuIdleStateEntry_state_tag 1
#define perfetto_protos_SysStats_CpuIdleStateEntry_duration_us_tag 2
#define perfetto_protos_SysStats_CpuIdleState_cpu_id_tag 1
#define perfetto_protos_SysStats_CpuIdleState_cpuidle_state_entry_tag 2
#define perfetto_protos_Utsname_sysname_tag      1
#define perfetto_protos_Utsname_version_tag      2
#define perfetto_protos_Utsname_release_tag      3
#define perfetto_protos_Utsname_machine_tag      4
#define perfetto_protos_SystemInfo_utsname_tag   1
#define perfetto_protos_SystemInfo_android_build_fingerprint_tag 2
#define perfetto_protos_SystemInfo_hz_tag        3
#define perfetto_protos_SystemInfo_tracing_service_version_tag 4
#define perfetto_protos_SystemInfo_android_sdk_version_tag 5
#define perfetto_protos_SystemInfo_page_size_tag 6
#define perfetto_protos_SystemInfo_timezone_off_mins_tag 7
#define perfetto_protos_SystemInfo_num_cpus_tag  8
#define perfetto_protos_SystemInfo_android_soc_model_tag 9
#define perfetto_protos_SystemInfo_android_hardware_revision_tag 10
#define perfetto_protos_SystemInfo_android_storage_model_tag 11
#define perfetto_protos_SystemInfo_android_ram_model_tag 12
#define perfetto_protos_SystemInfo_android_guest_soc_model_tag 13
#define perfetto_protos_SystemInfo_android_device_manufacturer_tag 14
#define perfetto_protos_CpuInfo_cpus_tag         1
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_implementer_tag 1
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_architecture_tag 2
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_variant_tag 3
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_part_tag 4
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_revision_tag 5
#define perfetto_protos_CpuInfo_Cpu_processor_tag 1
#define perfetto_protos_CpuInfo_Cpu_frequencies_tag 2
#define perfetto_protos_CpuInfo_Cpu_capacity_tag 3
#define perfetto_protos_CpuInfo_Cpu_arm_identifier_tag 4
#define perfetto_protos_CpuInfo_Cpu_features_tag 5
#define perfetto_protos_TestEvent_TestPayload_str_tag 1
#define perfetto_protos_TestEvent_TestPayload_nested_tag 2
#define perfetto_protos_TestEvent_TestPayload_remaining_nesting_depth_tag 3
#define perfetto_protos_TestEvent_TestPayload_single_string_tag 4
#define perfetto_protos_TestEvent_TestPayload_single_int_tag 5
#define perfetto_protos_TestEvent_TestPayload_repeated_ints_tag 6
#define perfetto_protos_TestEvent_TestPayload_debug_annotations_tag 7
#define perfetto_protos_TestEvent_str_tag        1
#define perfetto_protos_TestEvent_seq_value_tag  2
#define perfetto_protos_TestEvent_counter_tag    3
#define perfetto_protos_TestEvent_is_last_tag    4
#define perfetto_protos_TestEvent_payload_tag    5
#define perfetto_protos_TracePacketDefaults_track_event_defaults_tag 11
#define perfetto_protos_TracePacketDefaults_perf_sample_defaults_tag 12
#define perfetto_protos_TracePacketDefaults_timestamp_clock_id_tag 58
#define perfetto_protos_TracePacketDefaults_v8_code_defaults_tag 99
#define perfetto_protos_TraceUuid_msb_tag        1
#define perfetto_protos_TraceUuid_lsb_tag        2
#define perfetto_protos_ProcessDescriptor_pid_tag 1
#define perfetto_protos_ProcessDescriptor_cmdline_tag 2
#define perfetto_protos_ProcessDescriptor_legacy_sort_index_tag 3
#define perfetto_protos_ProcessDescriptor_chrome_process_type_tag 4
#define perfetto_protos_ProcessDescriptor_process_priority_tag 5
#define perfetto_protos_ProcessDescriptor_process_name_tag 6
#define perfetto_protos_ProcessDescriptor_start_timestamp_ns_tag 7
#define perfetto_protos_ProcessDescriptor_process_labels_tag 8
#define perfetto_protos_TrackEventRangeOfInterest_start_us_tag 1
#define perfetto_protos_ThreadDescriptor_pid_tag 1
#define perfetto_protos_ThreadDescriptor_tid_tag 2
#define perfetto_protos_ThreadDescriptor_legacy_sort_index_tag 3
#define perfetto_protos_ThreadDescriptor_chrome_thread_type_tag 4
#define perfetto_protos_ThreadDescriptor_thread_name_tag 5
#define perfetto_protos_ThreadDescriptor_reference_timestamp_us_tag 6
#define perfetto_protos_ThreadDescriptor_reference_thread_time_us_tag 7
#define perfetto_protos_ThreadDescriptor_reference_thread_instruction_count_tag 8
#define perfetto_protos_ChromeProcessDescriptor_process_type_tag 1
#define perfetto_protos_ChromeProcessDescriptor_process_priority_tag 2
#define perfetto_protos_ChromeProcessDescriptor_legacy_sort_index_tag 3
#define perfetto_protos_ChromeProcessDescriptor_host_app_package_name_tag 4
#define perfetto_protos_ChromeProcessDescriptor_crash_trace_id_tag 5
#define perfetto_protos_ChromeThreadDescriptor_thread_type_tag 1
#define perfetto_protos_ChromeThreadDescriptor_legacy_sort_index_tag 2
#define perfetto_protos_CounterDescriptor_type_tag 1
#define perfetto_protos_CounterDescriptor_categories_tag 2
#define perfetto_protos_CounterDescriptor_unit_tag 3
#define perfetto_protos_CounterDescriptor_unit_multiplier_tag 4
#define perfetto_protos_CounterDescriptor_is_incremental_tag 5
#define perfetto_protos_CounterDescriptor_unit_name_tag 6
#define perfetto_protos_TrackDescriptor_uuid_tag 1
#define perfetto_protos_TrackDescriptor_name_tag 2
#define perfetto_protos_TrackDescriptor_static_name_tag 10
#define perfetto_protos_TrackDescriptor_atrace_name_tag 13
#define perfetto_protos_TrackDescriptor_process_tag 3
#define perfetto_protos_TrackDescriptor_thread_tag 4
#define perfetto_protos_TrackDescriptor_parent_uuid_tag 5
#define perfetto_protos_TrackDescriptor_chrome_process_tag 6
#define perfetto_protos_TrackDescriptor_chrome_thread_tag 7
#define perfetto_protos_TrackDescriptor_counter_tag 8
#define perfetto_protos_TrackDescriptor_disallow_merging_with_system_tracks_tag 9
#define perfetto_protos_TrackDescriptor_child_ordering_tag 11
#define perfetto_protos_TrackDescriptor_sibling_order_rank_tag 12
#define perfetto_protos_ChromeHistorgramTranslationTable_hash_to_name_tag 1
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_key_tag 1
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_value_tag 2
#define perfetto_protos_ChromeUserEventTranslationTable_action_hash_to_name_tag 1
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_key_tag 1
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_value_tag 2
#define perfetto_protos_ChromePerformanceMarkTranslationTable_site_hash_to_name_tag 1
#define perfetto_protos_ChromePerformanceMarkTranslationTable_mark_hash_to_name_tag 2
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_key_tag 1
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_value_tag 2
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_key_tag 1
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_value_tag 2
#define perfetto_protos_SliceNameTranslationTable_raw_to_deobfuscated_name_tag 1
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_key_tag 1
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_value_tag 2
#define perfetto_protos_ProcessTrackNameTranslationTable_raw_to_deobfuscated_name_tag 1
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_key_tag 1
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_value_tag 2
#define perfetto_protos_ChromeStudyTranslationTable_hash_to_name_tag 1
#define perfetto_protos_TranslationTable_chrome_histogram_tag 1
#define perfetto_protos_TranslationTable_chrome_user_event_tag 2
#define perfetto_protos_TranslationTable_chrome_performance_mark_tag 3
#define perfetto_protos_TranslationTable_slice_name_tag 4
#define perfetto_protos_TranslationTable_process_track_name_tag 5
#define perfetto_protos_TranslationTable_chrome_study_tag 6
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_key_tag 1
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_value_tag 2
#define perfetto_protos_Trigger_trigger_name_tag 1
#define perfetto_protos_Trigger_producer_name_tag 2
#define perfetto_protos_Trigger_trusted_producer_uid_tag 3
#define perfetto_protos_UiState_HighlightProcess_pid_tag 1
#define perfetto_protos_UiState_HighlightProcess_cmdline_tag 2
#define perfetto_protos_UiState_timeline_start_ts_tag 1
#define perfetto_protos_UiState_timeline_end_ts_tag 2
#define perfetto_protos_UiState_highlight_process_tag 3
#define perfetto_protos_TracePacket_ftrace_events_tag 1
#define perfetto_protos_TracePacket_process_tree_tag 2
#define perfetto_protos_TracePacket_inode_file_map_tag 4
#define perfetto_protos_TracePacket_chrome_events_tag 5
#define perfetto_protos_TracePacket_clock_snapshot_tag 6
#define perfetto_protos_TracePacket_sys_stats_tag 7
#define perfetto_protos_TracePacket_process_stats_tag 9
#define perfetto_protos_TracePacket_track_event_tag 11
#define perfetto_protos_TracePacket_trace_config_tag 33
#define perfetto_protos_TracePacket_ftrace_stats_tag 34
#define perfetto_protos_TracePacket_trace_stats_tag 35
#define perfetto_protos_TracePacket_synchronization_marker_tag 36
#define perfetto_protos_TracePacket_profile_packet_tag 37
#define perfetto_protos_TracePacket_battery_tag  38
#define perfetto_protos_TracePacket_android_log_tag 39
#define perfetto_protos_TracePacket_power_rails_tag 40
#define perfetto_protos_TracePacket_process_descriptor_tag 43
#define perfetto_protos_TracePacket_thread_descriptor_tag 44
#define perfetto_protos_TracePacket_system_info_tag 45
#define perfetto_protos_TracePacket_trigger_tag  46
#define perfetto_protos_TracePacket_packages_list_tag 47
#define perfetto_protos_TracePacket_chrome_benchmark_metadata_tag 48
#define perfetto_protos_TracePacket_perfetto_metatrace_tag 49
#define perfetto_protos_TracePacket_compressed_packets_tag 50
#define perfetto_protos_TracePacket_chrome_metadata_tag 51
#define perfetto_protos_TracePacket_gpu_counter_event_tag 52
#define perfetto_protos_TracePacket_gpu_render_stage_event_tag 53
#define perfetto_protos_TracePacket_streaming_profile_packet_tag 54
#define perfetto_protos_TracePacket_heap_graph_tag 56
#define perfetto_protos_TracePacket_graphics_frame_event_tag 57
#define perfetto_protos_TracePacket_track_descriptor_tag 60
#define perfetto_protos_TracePacket_module_symbols_tag 61
#define perfetto_protos_TracePacket_vulkan_memory_event_tag 62
#define perfetto_protos_TracePacket_gpu_log_tag  63
#define perfetto_protos_TracePacket_deobfuscation_mapping_tag 64
#define perfetto_protos_TracePacket_vulkan_api_event_tag 65
#define perfetto_protos_TracePacket_perf_sample_tag 66
#define perfetto_protos_TracePacket_cpu_info_tag 67
#define perfetto_protos_TracePacket_smaps_packet_tag 68
#define perfetto_protos_TracePacket_service_event_tag 69
#define perfetto_protos_TracePacket_initial_display_state_tag 70
#define perfetto_protos_TracePacket_gpu_mem_total_event_tag 71
#define perfetto_protos_TracePacket_extension_descriptor_tag 72
#define perfetto_protos_TracePacket_memory_tracker_snapshot_tag 73
#define perfetto_protos_TracePacket_streaming_allocation_tag 74
#define perfetto_protos_TracePacket_streaming_free_tag 75
#define perfetto_protos_TracePacket_frame_timeline_event_tag 76
#define perfetto_protos_TracePacket_android_energy_estimation_breakdown_tag 77
#define perfetto_protos_TracePacket_ui_state_tag 78
#define perfetto_protos_TracePacket_android_camera_frame_event_tag 80
#define perfetto_protos_TracePacket_android_camera_session_stats_tag 81
#define perfetto_protos_TracePacket_translation_table_tag 82
#define perfetto_protos_TracePacket_android_game_intervention_list_tag 83
#define perfetto_protos_TracePacket_statsd_atom_tag 84
#define perfetto_protos_TracePacket_android_system_property_tag 86
#define perfetto_protos_TracePacket_network_packet_tag 88
#define perfetto_protos_TracePacket_trace_uuid_tag 89
#define perfetto_protos_TracePacket_track_event_range_of_interest_tag 90
#define perfetto_protos_TracePacket_entity_state_residency_tag 91
#define perfetto_protos_TracePacket_network_packet_bundle_tag 92
#define perfetto_protos_TracePacket_surfaceflinger_layers_snapshot_tag 93
#define perfetto_protos_TracePacket_surfaceflinger_transactions_tag 94
#define perfetto_protos_TracePacket_etw_events_tag 95
#define perfetto_protos_TracePacket_shell_transition_tag 96
#define perfetto_protos_TracePacket_shell_handler_mappings_tag 97
#define perfetto_protos_TracePacket_v8_js_code_tag 99
#define perfetto_protos_TracePacket_v8_internal_code_tag 100
#define perfetto_protos_TracePacket_v8_wasm_code_tag 101
#define perfetto_protos_TracePacket_v8_reg_exp_code_tag 102
#define perfetto_protos_TracePacket_v8_code_move_tag 103
#define perfetto_protos_TracePacket_protolog_message_tag 104
#define perfetto_protos_TracePacket_protolog_viewer_config_tag 105
#define perfetto_protos_TracePacket_remote_clock_sync_tag 107
#define perfetto_protos_TracePacket_chrome_trigger_tag 109
#define perfetto_protos_TracePacket_pixel_modem_events_tag 110
#define perfetto_protos_TracePacket_pixel_modem_token_database_tag 111
#define perfetto_protos_TracePacket_winscope_extensions_tag 112
#define perfetto_protos_TracePacket_clone_snapshot_trigger_tag 113
#define perfetto_protos_TracePacket_bluetooth_trace_event_tag 114
#define perfetto_protos_TracePacket_kernel_wakelock_data_tag 115
#define perfetto_protos_TracePacket_app_wakelock_bundle_tag 116
#define perfetto_protos_TracePacket_for_testing_tag 900
#define perfetto_protos_TracePacket_trusted_uid_tag 3
#define perfetto_protos_TracePacket_timestamp_tag 8
#define perfetto_protos_TracePacket_trusted_packet_sequence_id_tag 10
#define perfetto_protos_TracePacket_interned_data_tag 12
#define perfetto_protos_TracePacket_sequence_flags_tag 13
#define perfetto_protos_TracePacket_incremental_state_cleared_tag 41
#define perfetto_protos_TracePacket_previous_packet_dropped_tag 42
#define perfetto_protos_TracePacket_timestamp_clock_id_tag 58
#define perfetto_protos_TracePacket_trace_packet_defaults_tag 59
#define perfetto_protos_TracePacket_trusted_pid_tag 79
#define perfetto_protos_TracePacket_first_packet_on_sequence_tag 87
#define perfetto_protos_TracePacket_machine_id_tag 98
#define perfetto_protos_Trace_packet_tag         1

/* Struct field encoding specification for nanopb */
#define perfetto_protos_FtraceDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  atrace_categories,   1)
#define perfetto_protos_FtraceDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceDescriptor_DEFAULT NULL
#define perfetto_protos_FtraceDescriptor_atrace_categories_MSGTYPE perfetto_protos_FtraceDescriptor_AtraceCategory

#define perfetto_protos_FtraceDescriptor_AtraceCategory_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       2)
#define perfetto_protos_FtraceDescriptor_AtraceCategory_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceDescriptor_AtraceCategory_DEFAULT NULL

#define perfetto_protos_GpuCounterDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  specs,             1) \
X(a, CALLBACK, REPEATED, MESSAGE,  blocks,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   min_sampling_period_ns,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   max_sampling_period_ns,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     supports_instrumented_sampling,   5)
#define perfetto_protos_GpuCounterDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuCounterDescriptor_DEFAULT NULL
#define perfetto_protos_GpuCounterDescriptor_specs_MSGTYPE perfetto_protos_GpuCounterDescriptor_GpuCounterSpec
#define perfetto_protos_GpuCounterDescriptor_blocks_MSGTYPE perfetto_protos_GpuCounterDescriptor_GpuCounterBlock

#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   counter_id,        1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       3) \
X(a, STATIC,   ONEOF,    INT64,    (peak_value,int_peak_value,peak_value.int_peak_value),   5) \
X(a, STATIC,   ONEOF,    DOUBLE,   (peak_value,double_peak_value,peak_value.double_peak_value),   6) \
X(a, CALLBACK, REPEATED, UENUM,    numerator_units,   7) \
X(a, CALLBACK, REPEATED, UENUM,    denominator_units,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     select_by_default,   9) \
X(a, CALLBACK, REPEATED, UENUM,    groups,           10)
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_DEFAULT NULL

#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   block_id,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   block_capacity,    2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       4) \
X(a, CALLBACK, REPEATED, UINT32,   counter_ids,       5)
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_DEFAULT NULL

#define perfetto_protos_TrackEventCategory_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       2) \
X(a, CALLBACK, REPEATED, STRING,   tags,              3)
#define perfetto_protos_TrackEventCategory_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEventCategory_DEFAULT NULL

#define perfetto_protos_TrackEventDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  available_categories,   1)
#define perfetto_protos_TrackEventDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEventDescriptor_DEFAULT NULL
#define perfetto_protos_TrackEventDescriptor_available_categories_MSGTYPE perfetto_protos_TrackEventCategory

#define perfetto_protos_DataSourceDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, BOOL,     will_notify_on_stop,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     will_notify_on_start,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     handles_incremental_state_clear,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gpu_counter_descriptor,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  track_event_descriptor,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ftrace_descriptor,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     no_flush,          9)
#define perfetto_protos_DataSourceDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_DataSourceDescriptor_DEFAULT NULL
#define perfetto_protos_DataSourceDescriptor_gpu_counter_descriptor_MSGTYPE perfetto_protos_GpuCounterDescriptor
#define perfetto_protos_DataSourceDescriptor_track_event_descriptor_MSGTYPE perfetto_protos_TrackEventDescriptor
#define perfetto_protos_DataSourceDescriptor_ftrace_descriptor_MSGTYPE perfetto_protos_FtraceDescriptor

#define perfetto_protos_TracingServiceState_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  producers,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  data_sources,      2) \
X(a, STATIC,   OPTIONAL, INT32,    num_sessions,      3) \
X(a, STATIC,   OPTIONAL, INT32,    num_sessions_started,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   tracing_service_version,   5) \
X(a, CALLBACK, REPEATED, MESSAGE,  tracing_sessions,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     supports_tracing_sessions,   7)
#define perfetto_protos_TracingServiceState_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingServiceState_DEFAULT NULL
#define perfetto_protos_TracingServiceState_producers_MSGTYPE perfetto_protos_TracingServiceState_Producer
#define perfetto_protos_TracingServiceState_data_sources_MSGTYPE perfetto_protos_TracingServiceState_DataSource
#define perfetto_protos_TracingServiceState_tracing_sessions_MSGTYPE perfetto_protos_TracingServiceState_TracingSession

#define perfetto_protos_TracingServiceState_Producer_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, INT32,    uid,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   sdk_version,       4) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               5) \
X(a, STATIC,   OPTIONAL, BOOL,     frozen,            6)
#define perfetto_protos_TracingServiceState_Producer_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingServiceState_Producer_DEFAULT NULL

#define perfetto_protos_TracingServiceState_DataSource_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ds_descriptor,     1) \
X(a, STATIC,   OPTIONAL, INT32,    producer_id,       2)
#define perfetto_protos_TracingServiceState_DataSource_CALLBACK NULL
#define perfetto_protos_TracingServiceState_DataSource_DEFAULT NULL
#define perfetto_protos_TracingServiceState_DataSource_ds_descriptor_MSGTYPE perfetto_protos_DataSourceDescriptor

#define perfetto_protos_TracingServiceState_TracingSession_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    consumer_uid,      2) \
X(a, CALLBACK, OPTIONAL, STRING,   state,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   unique_session_name,   4) \
X(a, CALLBACK, REPEATED, UINT32,   buffer_size_kb,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   duration_ms,       6) \
X(a, STATIC,   OPTIONAL, UINT32,   num_data_sources,   7) \
X(a, STATIC,   OPTIONAL, INT64,    start_realtime_ns,   8) \
X(a, STATIC,   OPTIONAL, INT32,    bugreport_score,   9) \
X(a, CALLBACK, OPTIONAL, STRING,   bugreport_filename,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     is_started,       11)
#define perfetto_protos_TracingServiceState_TracingSession_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingServiceState_TracingSession_DEFAULT NULL

#define perfetto_protos_AndroidGameInterventionListConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   package_name_filter,   1)
#define perfetto_protos_AndroidGameInterventionListConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidGameInterventionListConfig_DEFAULT NULL

#define perfetto_protos_AndroidInputEventConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  rules,             2) \
X(a, STATIC,   OPTIONAL, BOOL,     trace_dispatcher_input_events,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     trace_dispatcher_window_dispatch,   4)
#define perfetto_protos_AndroidInputEventConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidInputEventConfig_DEFAULT NULL
#define perfetto_protos_AndroidInputEventConfig_rules_MSGTYPE perfetto_protos_AndroidInputEventConfig_TraceRule

#define perfetto_protos_AndroidInputEventConfig_TraceRule_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    trace_level,       1) \
X(a, CALLBACK, REPEATED, STRING,   match_all_packages,   2) \
X(a, CALLBACK, REPEATED, STRING,   match_any_packages,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     match_secure,      4) \
X(a, STATIC,   OPTIONAL, BOOL,     match_ime_connection_active,   5)
#define perfetto_protos_AndroidInputEventConfig_TraceRule_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidInputEventConfig_TraceRule_DEFAULT NULL

#define perfetto_protos_AndroidLogConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    log_ids,           1) \
X(a, STATIC,   OPTIONAL, UENUM,    min_prio,          3) \
X(a, CALLBACK, REPEATED, STRING,   filter_tags,       4)
#define perfetto_protos_AndroidLogConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidLogConfig_DEFAULT NULL

#define perfetto_protos_AndroidPolledStateConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   poll_ms,           1)
#define perfetto_protos_AndroidPolledStateConfig_CALLBACK NULL
#define perfetto_protos_AndroidPolledStateConfig_DEFAULT NULL

#define perfetto_protos_AndroidSdkSyspropGuardConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     surfaceflinger_skia_track_events,   1) \
X(a, STATIC,   OPTIONAL, BOOL,     hwui_skia_track_events,   2) \
X(a, CALLBACK, REPEATED, STRING,   hwui_package_name_filter,   3)
#define perfetto_protos_AndroidSdkSyspropGuardConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidSdkSyspropGuardConfig_DEFAULT NULL

#define perfetto_protos_AndroidSystemPropertyConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   poll_ms,           1) \
X(a, CALLBACK, REPEATED, STRING,   property_name,     2)
#define perfetto_protos_AndroidSystemPropertyConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidSystemPropertyConfig_DEFAULT NULL

#define perfetto_protos_AppWakelocksConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    write_delay_ms,    1) \
X(a, STATIC,   OPTIONAL, INT32,    filter_duration_below_ms,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     drop_owner_pid,    3)
#define perfetto_protos_AppWakelocksConfig_CALLBACK NULL
#define perfetto_protos_AppWakelocksConfig_DEFAULT NULL

#define perfetto_protos_KernelWakelocksConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   poll_ms,           1)
#define perfetto_protos_KernelWakelocksConfig_CALLBACK NULL
#define perfetto_protos_KernelWakelocksConfig_DEFAULT NULL

#define perfetto_protos_NetworkPacketTraceConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   poll_ms,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   aggregation_threshold,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   intern_limit,      3) \
X(a, STATIC,   OPTIONAL, BOOL,     drop_local_port,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     drop_remote_port,   5) \
X(a, STATIC,   OPTIONAL, BOOL,     drop_tcp_flags,    6)
#define perfetto_protos_NetworkPacketTraceConfig_CALLBACK NULL
#define perfetto_protos_NetworkPacketTraceConfig_DEFAULT NULL

#define perfetto_protos_PackagesListConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   package_name_filter,   1)
#define perfetto_protos_PackagesListConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_PackagesListConfig_DEFAULT NULL

#define perfetto_protos_PixelModemConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    event_group,       1) \
X(a, CALLBACK, REPEATED, INT64,    pigweed_hash_allow_list,   2) \
X(a, CALLBACK, REPEATED, INT64,    pigweed_hash_deny_list,   3)
#define perfetto_protos_PixelModemConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_PixelModemConfig_DEFAULT NULL

#define perfetto_protos_ProtoLogConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  group_overrides,   1) \
X(a, STATIC,   OPTIONAL, UENUM,    tracing_mode,      2) \
X(a, STATIC,   OPTIONAL, UENUM,    default_log_from_level,   3)
#define perfetto_protos_ProtoLogConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogConfig_DEFAULT NULL
#define perfetto_protos_ProtoLogConfig_group_overrides_MSGTYPE perfetto_protos_ProtoLogGroup

#define perfetto_protos_ProtoLogGroup_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   group_name,        1) \
X(a, STATIC,   OPTIONAL, UENUM,    log_from,          2) \
X(a, STATIC,   OPTIONAL, BOOL,     collect_stacktrace,   3)
#define perfetto_protos_ProtoLogGroup_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogGroup_DEFAULT NULL

#define perfetto_protos_SurfaceFlingerLayersConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,              1) \
X(a, CALLBACK, REPEATED, UENUM,    trace_flags,       2)
#define perfetto_protos_SurfaceFlingerLayersConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_SurfaceFlingerLayersConfig_DEFAULT NULL

#define perfetto_protos_SurfaceFlingerTransactionsConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,              1)
#define perfetto_protos_SurfaceFlingerTransactionsConfig_CALLBACK NULL
#define perfetto_protos_SurfaceFlingerTransactionsConfig_DEFAULT NULL

#define perfetto_protos_WindowManagerConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    log_frequency,     1) \
X(a, STATIC,   OPTIONAL, UENUM,    log_level,         2)
#define perfetto_protos_WindowManagerConfig_CALLBACK NULL
#define perfetto_protos_WindowManagerConfig_DEFAULT NULL

#define perfetto_protos_ChromeConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_config,      1) \
X(a, STATIC,   OPTIONAL, BOOL,     privacy_filtering_enabled,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     convert_to_legacy_json,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    client_priority,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   json_agent_label_filter,   5)
#define perfetto_protos_ChromeConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeConfig_DEFAULT NULL

#define perfetto_protos_ChromiumHistogramSamplesConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  histograms,        1) \
X(a, STATIC,   OPTIONAL, BOOL,     filter_histogram_names,   2)
#define perfetto_protos_ChromiumHistogramSamplesConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromiumHistogramSamplesConfig_DEFAULT NULL
#define perfetto_protos_ChromiumHistogramSamplesConfig_histograms_MSGTYPE perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample

#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   histogram_name,    1) \
X(a, STATIC,   OPTIONAL, INT64,    min_value,         2) \
X(a, STATIC,   OPTIONAL, INT64,    max_value,         3)
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_DEFAULT NULL

#define perfetto_protos_ChromiumSystemMetricsConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   sampling_interval_ms,   1)
#define perfetto_protos_ChromiumSystemMetricsConfig_CALLBACK NULL
#define perfetto_protos_ChromiumSystemMetricsConfig_DEFAULT NULL

#define perfetto_protos_V8Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     log_script_sources,   1) \
X(a, STATIC,   OPTIONAL, BOOL,     log_instructions,   2)
#define perfetto_protos_V8Config_CALLBACK NULL
#define perfetto_protos_V8Config_DEFAULT NULL

#define perfetto_protos_EtwConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    kernel_flags,      1)
#define perfetto_protos_EtwConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_EtwConfig_DEFAULT NULL

#define perfetto_protos_FtraceConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   ftrace_events,     1) \
X(a, CALLBACK, REPEATED, STRING,   atrace_categories,   2) \
X(a, CALLBACK, REPEATED, STRING,   atrace_apps,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   buffer_size_kb,   10) \
X(a, STATIC,   OPTIONAL, UINT32,   drain_period_ms,  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  compact_sched,    12) \
X(a, STATIC,   OPTIONAL, BOOL,     symbolize_ksyms,  13) \
X(a, STATIC,   OPTIONAL, BOOL,     initialize_ksyms_synchronously_for_testing,  14) \
X(a, STATIC,   OPTIONAL, BOOL,     throttle_rss_stat,  15) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_generic_events,  16) \
X(a, STATIC,   OPTIONAL, UENUM,    ksyms_mem_policy,  17) \
X(a, CALLBACK, REPEATED, STRING,   syscall_events,   18) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_function_graph,  19) \
X(a, CALLBACK, REPEATED, STRING,   function_filters,  20) \
X(a, CALLBACK, REPEATED, STRING,   function_graph_roots,  21) \
X(a, STATIC,   OPTIONAL, MESSAGE,  print_filter,     22) \
X(a, STATIC,   OPTIONAL, BOOL,     preserve_ftrace_buffer,  23) \
X(a, STATIC,   OPTIONAL, BOOL,     use_monotonic_raw_clock,  24) \
X(a, CALLBACK, OPTIONAL, STRING,   instance_name,    25) \
X(a, STATIC,   OPTIONAL, BOOL,     buffer_size_lower_bound,  27) \
X(a, CALLBACK, REPEATED, STRING,   atrace_categories_prefer_sdk,  28) \
X(a, STATIC,   OPTIONAL, UINT32,   drain_buffer_percent,  29) \
X(a, CALLBACK, REPEATED, MESSAGE,  kprobe_events,    30) \
X(a, STATIC,   OPTIONAL, BOOL,     debug_ftrace_abi,  31)
#define perfetto_protos_FtraceConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceConfig_DEFAULT NULL
#define perfetto_protos_FtraceConfig_compact_sched_MSGTYPE perfetto_protos_FtraceConfig_CompactSchedConfig
#define perfetto_protos_FtraceConfig_print_filter_MSGTYPE perfetto_protos_FtraceConfig_PrintFilter
#define perfetto_protos_FtraceConfig_kprobe_events_MSGTYPE perfetto_protos_FtraceConfig_KprobeEvent

#define perfetto_protos_FtraceConfig_KprobeEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   probe,             1) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              2)
#define perfetto_protos_FtraceConfig_KprobeEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceConfig_KprobeEvent_DEFAULT NULL

#define perfetto_protos_FtraceConfig_CompactSchedConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,           1)
#define perfetto_protos_FtraceConfig_CompactSchedConfig_CALLBACK NULL
#define perfetto_protos_FtraceConfig_CompactSchedConfig_DEFAULT NULL

#define perfetto_protos_FtraceConfig_PrintFilter_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  rules,             1)
#define perfetto_protos_FtraceConfig_PrintFilter_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceConfig_PrintFilter_DEFAULT NULL
#define perfetto_protos_FtraceConfig_PrintFilter_rules_MSGTYPE perfetto_protos_FtraceConfig_PrintFilter_Rule

#define perfetto_protos_FtraceConfig_PrintFilter_Rule_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    STRING,   (match,prefix,match.prefix),   1) \
X(a, STATIC,   OPTIONAL, BOOL,     allow,             2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (match,atrace_msg,match.atrace_msg),   3)
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_DEFAULT NULL
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_match_atrace_msg_MSGTYPE perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage

#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   prefix,            2)
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_DEFAULT NULL

#define perfetto_protos_GpuCounterConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   counter_period_ns,   1) \
X(a, CALLBACK, REPEATED, UINT32,   counter_ids,       2) \
X(a, STATIC,   OPTIONAL, BOOL,     instrumented_sampling,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     fix_gpu_clock,     4)
#define perfetto_protos_GpuCounterConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuCounterConfig_DEFAULT NULL

#define perfetto_protos_GpuRenderStagesConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     full_loadstore,    1) \
X(a, STATIC,   OPTIONAL, BOOL,     low_overhead,      2) \
X(a, CALLBACK, REPEATED, STRING,   trace_metrics,     3)
#define perfetto_protos_GpuRenderStagesConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuRenderStagesConfig_DEFAULT NULL

#define perfetto_protos_VulkanMemoryConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     track_driver_memory_usage,   1) \
X(a, STATIC,   OPTIONAL, BOOL,     track_device_memory_usage,   2)
#define perfetto_protos_VulkanMemoryConfig_CALLBACK NULL
#define perfetto_protos_VulkanMemoryConfig_DEFAULT NULL

#define perfetto_protos_InodeFileConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   scan_interval_ms,   1) \
X(a, STATIC,   OPTIONAL, UINT32,   scan_delay_ms,     2) \
X(a, STATIC,   OPTIONAL, UINT32,   scan_batch_size,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     do_not_scan,       4) \
X(a, CALLBACK, REPEATED, STRING,   scan_mount_points,   5) \
X(a, CALLBACK, REPEATED, MESSAGE,  mount_point_mapping,   6)
#define perfetto_protos_InodeFileConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_InodeFileConfig_DEFAULT NULL
#define perfetto_protos_InodeFileConfig_mount_point_mapping_MSGTYPE perfetto_protos_InodeFileConfig_MountPointMappingEntry

#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   mountpoint,        1) \
X(a, CALLBACK, REPEATED, STRING,   scan_roots,        2)
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_DEFAULT NULL

#define perfetto_protos_ConsoleConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    output,            1) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_colors,     2)
#define perfetto_protos_ConsoleConfig_CALLBACK NULL
#define perfetto_protos_ConsoleConfig_DEFAULT NULL

#define perfetto_protos_InterceptorConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  console_config,  100)
#define perfetto_protos_InterceptorConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_InterceptorConfig_DEFAULT NULL
#define perfetto_protos_InterceptorConfig_console_config_MSGTYPE perfetto_protos_ConsoleConfig

#define perfetto_protos_AndroidPowerConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_poll_ms,   1) \
X(a, CALLBACK, REPEATED, UENUM,    battery_counters,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     collect_power_rails,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     collect_energy_estimation_breakdown,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     collect_entity_state_residency,   5)
#define perfetto_protos_AndroidPowerConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidPowerConfig_DEFAULT NULL

#define perfetto_protos_ProcessStatsConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    quirks,            1) \
X(a, STATIC,   OPTIONAL, BOOL,     scan_all_processes_on_start,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     record_thread_names,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   proc_stats_poll_ms,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   proc_stats_cache_ttl_ms,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     resolve_process_fds,   9) \
X(a, STATIC,   OPTIONAL, BOOL,     scan_smaps_rollup,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     record_process_age,  11) \
X(a, STATIC,   OPTIONAL, BOOL,     record_process_runtime,  12)
#define perfetto_protos_ProcessStatsConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessStatsConfig_DEFAULT NULL

#define perfetto_protos_HeapprofdConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   sampling_interval_bytes,   1) \
X(a, CALLBACK, REPEATED, STRING,   process_cmdline,   2) \
X(a, CALLBACK, REPEATED, UINT64,   pid,               4) \
X(a, STATIC,   OPTIONAL, BOOL,     all,               5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  continuous_dump_config,   6) \
X(a, CALLBACK, REPEATED, STRING,   skip_symbol_prefix,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   shmem_size_bytes,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     block_client,      9) \
X(a, STATIC,   OPTIONAL, BOOL,     no_startup,       10) \
X(a, STATIC,   OPTIONAL, BOOL,     no_running,       11) \
X(a, STATIC,   OPTIONAL, BOOL,     dump_at_max,      13) \
X(a, STATIC,   OPTIONAL, UINT32,   block_client_timeout_us,  14) \
X(a, STATIC,   OPTIONAL, UINT32,   min_anonymous_memory_kb,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   max_heapprofd_memory_kb,  16) \
X(a, STATIC,   OPTIONAL, UINT64,   max_heapprofd_cpu_secs,  17) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_fork_teardown,  18) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_vfork_detection,  19) \
X(a, CALLBACK, REPEATED, STRING,   heaps,            20) \
X(a, STATIC,   OPTIONAL, BOOL,     all_heaps,        21) \
X(a, CALLBACK, REPEATED, UINT64,   heap_sampling_intervals,  22) \
X(a, STATIC,   OPTIONAL, BOOL,     stream_allocations,  23) \
X(a, STATIC,   OPTIONAL, UINT64,   adaptive_sampling_shmem_threshold,  24) \
X(a, STATIC,   OPTIONAL, UINT64,   adaptive_sampling_max_sampling_interval_bytes,  25) \
X(a, CALLBACK, REPEATED, STRING,   target_installed_by,  26) \
X(a, CALLBACK, REPEATED, STRING,   exclude_heaps,    27)
#define perfetto_protos_HeapprofdConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_HeapprofdConfig_DEFAULT NULL
#define perfetto_protos_HeapprofdConfig_continuous_dump_config_MSGTYPE perfetto_protos_HeapprofdConfig_ContinuousDumpConfig

#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   dump_phase_ms,     5) \
X(a, STATIC,   OPTIONAL, UINT32,   dump_interval_ms,   6)
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_CALLBACK NULL
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_DEFAULT NULL

#define perfetto_protos_JavaHprofConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   process_cmdline,   1) \
X(a, CALLBACK, REPEATED, UINT64,   pid,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  continuous_dump_config,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   min_anonymous_memory_kb,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     dump_smaps,        5) \
X(a, CALLBACK, REPEATED, STRING,   ignored_types,     6) \
X(a, CALLBACK, REPEATED, STRING,   target_installed_by,   7)
#define perfetto_protos_JavaHprofConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_JavaHprofConfig_DEFAULT NULL
#define perfetto_protos_JavaHprofConfig_continuous_dump_config_MSGTYPE perfetto_protos_JavaHprofConfig_ContinuousDumpConfig

#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   dump_phase_ms,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   dump_interval_ms,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     scan_pids_only_on_start,   3)
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_CALLBACK NULL
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_DEFAULT NULL

#define perfetto_protos_PerfEvents_FIELDLIST(X, a) \

#define perfetto_protos_PerfEvents_CALLBACK NULL
#define perfetto_protos_PerfEvents_DEFAULT NULL

#define perfetto_protos_PerfEvents_Timebase_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT64,   (interval,period,interval.period),   1) \
X(a, STATIC,   ONEOF,    UINT64,   (interval,frequency,interval.frequency),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,tracepoint,event.tracepoint),   3) \
X(a, STATIC,   ONEOF,    UENUM,    (event,counter,event.counter),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,raw_event,event.raw_event),   5) \
X(a, STATIC,   ONEOF,    UINT32,   (interval,poll_period_ms,interval.poll_period_ms),   6) \
X(a, CALLBACK, OPTIONAL, STRING,   name,             10) \
X(a, STATIC,   OPTIONAL, UENUM,    timestamp_clock,  11)
#define perfetto_protos_PerfEvents_Timebase_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfEvents_Timebase_DEFAULT NULL
#define perfetto_protos_PerfEvents_Timebase_event_tracepoint_MSGTYPE perfetto_protos_PerfEvents_Tracepoint
#define perfetto_protos_PerfEvents_Timebase_event_raw_event_MSGTYPE perfetto_protos_PerfEvents_RawEvent

#define perfetto_protos_PerfEvents_Tracepoint_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   filter,            2)
#define perfetto_protos_PerfEvents_Tracepoint_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfEvents_Tracepoint_DEFAULT NULL

#define perfetto_protos_PerfEvents_RawEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   config,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   config1,           3) \
X(a, STATIC,   OPTIONAL, UINT64,   config2,           4)
#define perfetto_protos_PerfEvents_RawEvent_CALLBACK NULL
#define perfetto_protos_PerfEvents_RawEvent_DEFAULT NULL

#define perfetto_protos_FollowerEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (event,counter,event.counter),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,tracepoint,event.tracepoint),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,raw_event,event.raw_event),   3) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              4)
#define perfetto_protos_FollowerEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FollowerEvent_DEFAULT NULL
#define perfetto_protos_FollowerEvent_event_tracepoint_MSGTYPE perfetto_protos_PerfEvents_Tracepoint
#define perfetto_protos_FollowerEvent_event_raw_event_MSGTYPE perfetto_protos_PerfEvents_RawEvent

#define perfetto_protos_PerfEventConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     all_cpus,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   sampling_frequency,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   ring_buffer_pages,   3) \
X(a, CALLBACK, REPEATED, INT32,    target_pid,        4) \
X(a, CALLBACK, REPEATED, STRING,   target_cmdline,    5) \
X(a, CALLBACK, REPEATED, INT32,    exclude_pid,       6) \
X(a, CALLBACK, REPEATED, STRING,   exclude_cmdline,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   ring_buffer_read_period_ms,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   remote_descriptor_timeout_ms,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   unwind_state_clear_period_ms,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   additional_cmdline_count,  11) \
X(a, STATIC,   OPTIONAL, BOOL,     kernel_frames,    12) \
X(a, STATIC,   OPTIONAL, UINT32,   max_daemon_memory_kb,  13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timebase,         15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  callstack_sampling,  16) \
X(a, STATIC,   OPTIONAL, UINT64,   max_enqueued_footprint_kb,  17) \
X(a, CALLBACK, REPEATED, STRING,   target_installed_by,  18) \
X(a, CALLBACK, REPEATED, MESSAGE,  followers,        19) \
X(a, CALLBACK, REPEATED, UINT32,   target_cpu,       20)
#define perfetto_protos_PerfEventConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfEventConfig_DEFAULT NULL
#define perfetto_protos_PerfEventConfig_timebase_MSGTYPE perfetto_protos_PerfEvents_Timebase
#define perfetto_protos_PerfEventConfig_callstack_sampling_MSGTYPE perfetto_protos_PerfEventConfig_CallstackSampling
#define perfetto_protos_PerfEventConfig_followers_MSGTYPE perfetto_protos_FollowerEvent

#define perfetto_protos_PerfEventConfig_CallstackSampling_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  scope,             1) \
X(a, STATIC,   OPTIONAL, BOOL,     kernel_frames,     2) \
X(a, STATIC,   OPTIONAL, UENUM,    user_frames,       3)
#define perfetto_protos_PerfEventConfig_CallstackSampling_CALLBACK NULL
#define perfetto_protos_PerfEventConfig_CallstackSampling_DEFAULT NULL
#define perfetto_protos_PerfEventConfig_CallstackSampling_scope_MSGTYPE perfetto_protos_PerfEventConfig_Scope

#define perfetto_protos_PerfEventConfig_Scope_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    target_pid,        1) \
X(a, CALLBACK, REPEATED, STRING,   target_cmdline,    2) \
X(a, CALLBACK, REPEATED, INT32,    exclude_pid,       3) \
X(a, CALLBACK, REPEATED, STRING,   exclude_cmdline,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   additional_cmdline_count,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   process_shard_count,   6)
#define perfetto_protos_PerfEventConfig_Scope_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfEventConfig_Scope_DEFAULT NULL

#define perfetto_protos_StatsdTracingConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    push_atom_id,      1) \
X(a, CALLBACK, REPEATED, INT32,    raw_push_atom_id,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  pull_config,       3)
#define perfetto_protos_StatsdTracingConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_StatsdTracingConfig_DEFAULT NULL
#define perfetto_protos_StatsdTracingConfig_pull_config_MSGTYPE perfetto_protos_StatsdPullAtomConfig

#define perfetto_protos_StatsdPullAtomConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UENUM,    pull_atom_id,      1) \
X(a, CALLBACK, REPEATED, INT32,    raw_pull_atom_id,   2) \
X(a, STATIC,   OPTIONAL, INT32,    pull_frequency_ms,   3) \
X(a, CALLBACK, REPEATED, STRING,   packages,          4)
#define perfetto_protos_StatsdPullAtomConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_StatsdPullAtomConfig_DEFAULT NULL

#define perfetto_protos_SysStatsConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   meminfo_period_ms,   1) \
X(a, CALLBACK, REPEATED, UENUM,    meminfo_counters,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   vmstat_period_ms,   3) \
X(a, CALLBACK, REPEATED, UENUM,    vmstat_counters,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   stat_period_ms,    5) \
X(a, CALLBACK, REPEATED, UENUM,    stat_counters,     6) \
X(a, STATIC,   OPTIONAL, UINT32,   devfreq_period_ms,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   cpufreq_period_ms,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   buddyinfo_period_ms,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   diskstat_period_ms,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   psi_period_ms,    11) \
X(a, STATIC,   OPTIONAL, UINT32,   thermal_period_ms,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   cpuidle_period_ms,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   gpufreq_period_ms,  14)
#define perfetto_protos_SysStatsConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStatsConfig_DEFAULT NULL

#define perfetto_protos_SystemInfoConfig_FIELDLIST(X, a) \

#define perfetto_protos_SystemInfoConfig_CALLBACK NULL
#define perfetto_protos_SystemInfoConfig_DEFAULT NULL

#define perfetto_protos_TestConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   message_count,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   max_messages_per_second,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   seed,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   message_size,      4) \
X(a, STATIC,   OPTIONAL, BOOL,     send_batch_on_register,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dummy_fields,      6)
#define perfetto_protos_TestConfig_CALLBACK NULL
#define perfetto_protos_TestConfig_DEFAULT NULL
#define perfetto_protos_TestConfig_dummy_fields_MSGTYPE perfetto_protos_TestConfig_DummyFields

#define perfetto_protos_TestConfig_DummyFields_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   field_uint32,      1) \
X(a, STATIC,   OPTIONAL, INT32,    field_int32,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   field_uint64,      3) \
X(a, STATIC,   OPTIONAL, INT64,    field_int64,       4) \
X(a, STATIC,   OPTIONAL, FIXED64,  field_fixed64,     5) \
X(a, STATIC,   OPTIONAL, SFIXED64, field_sfixed64,    6) \
X(a, STATIC,   OPTIONAL, FIXED32,  field_fixed32,     7) \
X(a, STATIC,   OPTIONAL, SFIXED32, field_sfixed32,    8) \
X(a, STATIC,   OPTIONAL, DOUBLE,   field_double,      9) \
X(a, STATIC,   OPTIONAL, FLOAT,    field_float,      10) \
X(a, STATIC,   OPTIONAL, SINT64,   field_sint64,     11) \
X(a, STATIC,   OPTIONAL, SINT32,   field_sint32,     12) \
X(a, CALLBACK, OPTIONAL, STRING,   field_string,     13) \
X(a, CALLBACK, OPTIONAL, BYTES,    field_bytes,      14)
#define perfetto_protos_TestConfig_DummyFields_CALLBACK pb_default_field_callback
#define perfetto_protos_TestConfig_DummyFields_DEFAULT NULL

#define perfetto_protos_TrackEventConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   disabled_categories,   1) \
X(a, CALLBACK, REPEATED, STRING,   enabled_categories,   2) \
X(a, CALLBACK, REPEATED, STRING,   disabled_tags,     3) \
X(a, CALLBACK, REPEATED, STRING,   enabled_tags,      4) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_incremental_timestamps,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp_unit_multiplier,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     filter_debug_annotations,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_thread_time_sampling,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     filter_dynamic_event_names,   9)
#define perfetto_protos_TrackEventConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEventConfig_DEFAULT NULL

#define perfetto_protos_DataSourceConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   target_buffer,     2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_duration_ms,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   tracing_session_id,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_extra_guardrails,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   stop_timeout_ms,   7) \
X(a, STATIC,   OPTIONAL, UENUM,    session_initiator,   8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ftrace_config,   100) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_config,   101) \
X(a, STATIC,   OPTIONAL, MESSAGE,  inode_file_config, 102) \
X(a, STATIC,   OPTIONAL, MESSAGE,  process_stats_config, 103) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sys_stats_config, 104) \
X(a, STATIC,   OPTIONAL, MESSAGE,  heapprofd_config, 105) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_power_config, 106) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_log_config, 107) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gpu_counter_config, 108) \
X(a, STATIC,   OPTIONAL, MESSAGE,  packages_list_config, 109) \
X(a, STATIC,   OPTIONAL, MESSAGE,  java_hprof_config, 110) \
X(a, STATIC,   OPTIONAL, MESSAGE,  perf_event_config, 111) \
X(a, STATIC,   OPTIONAL, MESSAGE,  vulkan_memory_config, 112) \
X(a, STATIC,   OPTIONAL, MESSAGE,  track_event_config, 113) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_polled_state_config, 114) \
X(a, STATIC,   OPTIONAL, MESSAGE,  interceptor_config, 115) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_game_intervention_list_config, 116) \
X(a, STATIC,   OPTIONAL, MESSAGE,  statsd_tracing_config, 117) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_system_property_config, 118) \
X(a, STATIC,   OPTIONAL, MESSAGE,  system_info_config, 119) \
X(a, STATIC,   OPTIONAL, MESSAGE,  network_packet_trace_config, 120) \
X(a, STATIC,   OPTIONAL, MESSAGE,  surfaceflinger_layers_config, 121) \
X(a, STATIC,   OPTIONAL, BOOL,     prefer_suspend_clock_for_duration, 122) \
X(a, STATIC,   OPTIONAL, MESSAGE,  surfaceflinger_transactions_config, 123) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_sdk_sysprop_guard_config, 124) \
X(a, STATIC,   OPTIONAL, MESSAGE,  etw_config,      125) \
X(a, STATIC,   OPTIONAL, MESSAGE,  protolog_config, 126) \
X(a, STATIC,   OPTIONAL, MESSAGE,  v8_config,       127) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_input_event_config, 128) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pixel_modem_config, 129) \
X(a, STATIC,   OPTIONAL, MESSAGE,  windowmanager_config, 130) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chromium_system_metrics, 131) \
X(a, STATIC,   OPTIONAL, MESSAGE,  kernel_wakelocks_config, 132) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gpu_renderstages_config, 133) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chromium_histogram_samples, 134) \
X(a, STATIC,   OPTIONAL, MESSAGE,  app_wakelocks_config, 135) \
X(a, CALLBACK, OPTIONAL, STRING,   legacy_config,   1000) \
X(a, STATIC,   OPTIONAL, MESSAGE,  for_testing,     1001)
#define perfetto_protos_DataSourceConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_DataSourceConfig_DEFAULT NULL
#define perfetto_protos_DataSourceConfig_ftrace_config_MSGTYPE perfetto_protos_FtraceConfig
#define perfetto_protos_DataSourceConfig_chrome_config_MSGTYPE perfetto_protos_ChromeConfig
#define perfetto_protos_DataSourceConfig_inode_file_config_MSGTYPE perfetto_protos_InodeFileConfig
#define perfetto_protos_DataSourceConfig_process_stats_config_MSGTYPE perfetto_protos_ProcessStatsConfig
#define perfetto_protos_DataSourceConfig_sys_stats_config_MSGTYPE perfetto_protos_SysStatsConfig
#define perfetto_protos_DataSourceConfig_heapprofd_config_MSGTYPE perfetto_protos_HeapprofdConfig
#define perfetto_protos_DataSourceConfig_android_power_config_MSGTYPE perfetto_protos_AndroidPowerConfig
#define perfetto_protos_DataSourceConfig_android_log_config_MSGTYPE perfetto_protos_AndroidLogConfig
#define perfetto_protos_DataSourceConfig_gpu_counter_config_MSGTYPE perfetto_protos_GpuCounterConfig
#define perfetto_protos_DataSourceConfig_packages_list_config_MSGTYPE perfetto_protos_PackagesListConfig
#define perfetto_protos_DataSourceConfig_java_hprof_config_MSGTYPE perfetto_protos_JavaHprofConfig
#define perfetto_protos_DataSourceConfig_perf_event_config_MSGTYPE perfetto_protos_PerfEventConfig
#define perfetto_protos_DataSourceConfig_vulkan_memory_config_MSGTYPE perfetto_protos_VulkanMemoryConfig
#define perfetto_protos_DataSourceConfig_track_event_config_MSGTYPE perfetto_protos_TrackEventConfig
#define perfetto_protos_DataSourceConfig_android_polled_state_config_MSGTYPE perfetto_protos_AndroidPolledStateConfig
#define perfetto_protos_DataSourceConfig_interceptor_config_MSGTYPE perfetto_protos_InterceptorConfig
#define perfetto_protos_DataSourceConfig_android_game_intervention_list_config_MSGTYPE perfetto_protos_AndroidGameInterventionListConfig
#define perfetto_protos_DataSourceConfig_statsd_tracing_config_MSGTYPE perfetto_protos_StatsdTracingConfig
#define perfetto_protos_DataSourceConfig_android_system_property_config_MSGTYPE perfetto_protos_AndroidSystemPropertyConfig
#define perfetto_protos_DataSourceConfig_system_info_config_MSGTYPE perfetto_protos_SystemInfoConfig
#define perfetto_protos_DataSourceConfig_network_packet_trace_config_MSGTYPE perfetto_protos_NetworkPacketTraceConfig
#define perfetto_protos_DataSourceConfig_surfaceflinger_layers_config_MSGTYPE perfetto_protos_SurfaceFlingerLayersConfig
#define perfetto_protos_DataSourceConfig_surfaceflinger_transactions_config_MSGTYPE perfetto_protos_SurfaceFlingerTransactionsConfig
#define perfetto_protos_DataSourceConfig_android_sdk_sysprop_guard_config_MSGTYPE perfetto_protos_AndroidSdkSyspropGuardConfig
#define perfetto_protos_DataSourceConfig_etw_config_MSGTYPE perfetto_protos_EtwConfig
#define perfetto_protos_DataSourceConfig_protolog_config_MSGTYPE perfetto_protos_ProtoLogConfig
#define perfetto_protos_DataSourceConfig_v8_config_MSGTYPE perfetto_protos_V8Config
#define perfetto_protos_DataSourceConfig_android_input_event_config_MSGTYPE perfetto_protos_AndroidInputEventConfig
#define perfetto_protos_DataSourceConfig_pixel_modem_config_MSGTYPE perfetto_protos_PixelModemConfig
#define perfetto_protos_DataSourceConfig_windowmanager_config_MSGTYPE perfetto_protos_WindowManagerConfig
#define perfetto_protos_DataSourceConfig_chromium_system_metrics_MSGTYPE perfetto_protos_ChromiumSystemMetricsConfig
#define perfetto_protos_DataSourceConfig_kernel_wakelocks_config_MSGTYPE perfetto_protos_KernelWakelocksConfig
#define perfetto_protos_DataSourceConfig_gpu_renderstages_config_MSGTYPE perfetto_protos_GpuRenderStagesConfig
#define perfetto_protos_DataSourceConfig_chromium_histogram_samples_MSGTYPE perfetto_protos_ChromiumHistogramSamplesConfig
#define perfetto_protos_DataSourceConfig_app_wakelocks_config_MSGTYPE perfetto_protos_AppWakelocksConfig
#define perfetto_protos_DataSourceConfig_for_testing_MSGTYPE perfetto_protos_TestConfig

#define perfetto_protos_TraceConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  buffers,           1) \
X(a, CALLBACK, REPEATED, MESSAGE,  data_sources,      2) \
X(a, STATIC,   OPTIONAL, UINT32,   duration_ms,       3) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_extra_guardrails,   4) \
X(a, STATIC,   OPTIONAL, UENUM,    lockdown_mode,     5) \
X(a, CALLBACK, REPEATED, MESSAGE,  producers,         6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  statsd_metadata,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     write_into_file,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   file_write_period_ms,   9) \
X(a, STATIC,   OPTIONAL, UINT64,   max_file_size_bytes,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  guardrail_overrides,  11) \
X(a, STATIC,   OPTIONAL, BOOL,     deferred_start,   12) \
X(a, STATIC,   OPTIONAL, UINT32,   flush_period_ms,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   flush_timeout_ms,  14) \
X(a, STATIC,   OPTIONAL, BOOL,     notify_traceur,   16) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trigger_config,   17) \
X(a, CALLBACK, REPEATED, STRING,   activate_triggers,  18) \
X(a, STATIC,   OPTIONAL, BOOL,     allow_user_build_tracing,  19) \
X(a, STATIC,   OPTIONAL, MESSAGE,  builtin_data_sources,  20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  incremental_state_config,  21) \
X(a, CALLBACK, OPTIONAL, STRING,   unique_session_name,  22) \
X(a, STATIC,   OPTIONAL, UINT32,   data_source_stop_timeout_ms,  23) \
X(a, STATIC,   OPTIONAL, UENUM,    compression_type,  24) \
X(a, STATIC,   OPTIONAL, MESSAGE,  incident_report_config,  25) \
X(a, STATIC,   OPTIONAL, INT64,    trace_uuid_msb,   27) \
X(a, STATIC,   OPTIONAL, INT64,    trace_uuid_lsb,   28) \
X(a, CALLBACK, OPTIONAL, STRING,   output_path,      29) \
X(a, STATIC,   OPTIONAL, INT32,    bugreport_score,  30) \
X(a, STATIC,   OPTIONAL, UENUM,    statsd_logging,   31) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trace_filter,     33) \
X(a, STATIC,   OPTIONAL, MESSAGE,  android_report_config,  34) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cmd_trace_start_delay,  35) \
X(a, STATIC,   OPTIONAL, BOOL,     prefer_suspend_clock_for_duration,  36) \
X(a, CALLBACK, OPTIONAL, STRING,   bugreport_filename,  38) \
X(a, CALLBACK, REPEATED, MESSAGE,  session_semaphores,  39)
#define perfetto_protos_TraceConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_DEFAULT NULL
#define perfetto_protos_TraceConfig_buffers_MSGTYPE perfetto_protos_TraceConfig_BufferConfig
#define perfetto_protos_TraceConfig_data_sources_MSGTYPE perfetto_protos_TraceConfig_DataSource
#define perfetto_protos_TraceConfig_producers_MSGTYPE perfetto_protos_TraceConfig_ProducerConfig
#define perfetto_protos_TraceConfig_statsd_metadata_MSGTYPE perfetto_protos_TraceConfig_StatsdMetadata
#define perfetto_protos_TraceConfig_guardrail_overrides_MSGTYPE perfetto_protos_TraceConfig_GuardrailOverrides
#define perfetto_protos_TraceConfig_trigger_config_MSGTYPE perfetto_protos_TraceConfig_TriggerConfig
#define perfetto_protos_TraceConfig_builtin_data_sources_MSGTYPE perfetto_protos_TraceConfig_BuiltinDataSource
#define perfetto_protos_TraceConfig_incremental_state_config_MSGTYPE perfetto_protos_TraceConfig_IncrementalStateConfig
#define perfetto_protos_TraceConfig_incident_report_config_MSGTYPE perfetto_protos_TraceConfig_IncidentReportConfig
#define perfetto_protos_TraceConfig_trace_filter_MSGTYPE perfetto_protos_TraceConfig_TraceFilter
#define perfetto_protos_TraceConfig_android_report_config_MSGTYPE perfetto_protos_TraceConfig_AndroidReportConfig
#define perfetto_protos_TraceConfig_cmd_trace_start_delay_MSGTYPE perfetto_protos_TraceConfig_CmdTraceStartDelay
#define perfetto_protos_TraceConfig_session_semaphores_MSGTYPE perfetto_protos_TraceConfig_SessionSemaphore

#define perfetto_protos_TraceConfig_BufferConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   size_kb,           1) \
X(a, STATIC,   OPTIONAL, UENUM,    fill_policy,       4) \
X(a, STATIC,   OPTIONAL, BOOL,     transfer_on_clone,   5) \
X(a, STATIC,   OPTIONAL, BOOL,     clear_before_clone,   6)
#define perfetto_protos_TraceConfig_BufferConfig_CALLBACK NULL
#define perfetto_protos_TraceConfig_BufferConfig_DEFAULT NULL

#define perfetto_protos_TraceConfig_DataSource_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  config,            1) \
X(a, CALLBACK, REPEATED, STRING,   producer_name_filter,   2) \
X(a, CALLBACK, REPEATED, STRING,   producer_name_regex_filter,   3)
#define perfetto_protos_TraceConfig_DataSource_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_DataSource_DEFAULT NULL
#define perfetto_protos_TraceConfig_DataSource_config_MSGTYPE perfetto_protos_DataSourceConfig

#define perfetto_protos_TraceConfig_BuiltinDataSource_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_clock_snapshotting,   1) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_trace_config,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_system_info,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_service_events,   4) \
X(a, STATIC,   OPTIONAL, UENUM,    primary_trace_clock,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   snapshot_interval_ms,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     prefer_suspend_clock_for_snapshot,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     disable_chunk_usage_histograms,   8)
#define perfetto_protos_TraceConfig_BuiltinDataSource_CALLBACK NULL
#define perfetto_protos_TraceConfig_BuiltinDataSource_DEFAULT NULL

#define perfetto_protos_TraceConfig_ProducerConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   producer_name,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   shm_size_kb,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   page_size_kb,      3)
#define perfetto_protos_TraceConfig_ProducerConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_ProducerConfig_DEFAULT NULL

#define perfetto_protos_TraceConfig_StatsdMetadata_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    triggering_alert_id,   1) \
X(a, STATIC,   OPTIONAL, INT32,    triggering_config_uid,   2) \
X(a, STATIC,   OPTIONAL, INT64,    triggering_config_id,   3) \
X(a, STATIC,   OPTIONAL, INT64,    triggering_subscription_id,   4)
#define perfetto_protos_TraceConfig_StatsdMetadata_CALLBACK NULL
#define perfetto_protos_TraceConfig_StatsdMetadata_DEFAULT NULL

#define perfetto_protos_TraceConfig_GuardrailOverrides_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   max_upload_per_day_bytes,   1) \
X(a, STATIC,   OPTIONAL, UINT32,   max_tracing_buffer_size_kb,   2)
#define perfetto_protos_TraceConfig_GuardrailOverrides_CALLBACK NULL
#define perfetto_protos_TraceConfig_GuardrailOverrides_DEFAULT NULL

#define perfetto_protos_TraceConfig_TriggerConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    trigger_mode,      1) \
X(a, CALLBACK, REPEATED, MESSAGE,  triggers,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   trigger_timeout_ms,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     use_clone_snapshot_if_available,   5)
#define perfetto_protos_TraceConfig_TriggerConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_TriggerConfig_DEFAULT NULL
#define perfetto_protos_TraceConfig_TriggerConfig_triggers_MSGTYPE perfetto_protos_TraceConfig_TriggerConfig_Trigger

#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   producer_name_regex,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   stop_delay_ms,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   max_per_24_h,      4) \
X(a, STATIC,   OPTIONAL, DOUBLE,   skip_probability,   5)
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_DEFAULT NULL

#define perfetto_protos_TraceConfig_IncrementalStateConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   clear_period_ms,   1)
#define perfetto_protos_TraceConfig_IncrementalStateConfig_CALLBACK NULL
#define perfetto_protos_TraceConfig_IncrementalStateConfig_DEFAULT NULL

#define perfetto_protos_TraceConfig_IncidentReportConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   destination_package,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   destination_class,   2) \
X(a, STATIC,   OPTIONAL, INT32,    privacy_level,     3) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_dropbox,      4) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_incidentd,    5)
#define perfetto_protos_TraceConfig_IncidentReportConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_IncidentReportConfig_DEFAULT NULL

#define perfetto_protos_TraceConfig_TraceFilter_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, BYTES,    bytecode,          1) \
X(a, CALLBACK, OPTIONAL, BYTES,    bytecode_v2,       2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  string_filter_chain,   3)
#define perfetto_protos_TraceConfig_TraceFilter_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_TraceFilter_DEFAULT NULL
#define perfetto_protos_TraceConfig_TraceFilter_string_filter_chain_MSGTYPE perfetto_protos_TraceConfig_TraceFilter_StringFilterChain

#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    policy,            1) \
X(a, CALLBACK, OPTIONAL, STRING,   regex_pattern,     2) \
X(a, CALLBACK, OPTIONAL, STRING,   atrace_payload_starts_with,   3)
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_DEFAULT NULL

#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  rules,             1)
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_DEFAULT NULL
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_rules_MSGTYPE perfetto_protos_TraceConfig_TraceFilter_StringFilterRule

#define perfetto_protos_TraceConfig_AndroidReportConfig_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   reporter_service_package,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   reporter_service_class,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_report,       3) \
X(a, STATIC,   OPTIONAL, BOOL,     use_pipe_in_framework_for_testing,   4)
#define perfetto_protos_TraceConfig_AndroidReportConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_AndroidReportConfig_DEFAULT NULL

#define perfetto_protos_TraceConfig_CmdTraceStartDelay_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   min_delay_ms,      1) \
X(a, STATIC,   OPTIONAL, UINT32,   max_delay_ms,      2)
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_CALLBACK NULL
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_DEFAULT NULL

#define perfetto_protos_TraceConfig_SessionSemaphore_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   max_other_session_count,   2)
#define perfetto_protos_TraceConfig_SessionSemaphore_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceConfig_SessionSemaphore_DEFAULT NULL

#define perfetto_protos_TraceStats_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  buffer_stats,      1) \
X(a, STATIC,   OPTIONAL, UINT32,   producers_connected,   2) \
X(a, STATIC,   OPTIONAL, UINT64,   producers_seen,    3) \
X(a, STATIC,   OPTIONAL, UINT32,   data_sources_registered,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   data_sources_seen,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   tracing_sessions,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   total_buffers,     7) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_discarded,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   patches_discarded,   9) \
X(a, STATIC,   OPTIONAL, UINT64,   invalid_packets,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  filter_stats,     11) \
X(a, STATIC,   OPTIONAL, UINT64,   flushes_requested,  12) \
X(a, STATIC,   OPTIONAL, UINT64,   flushes_succeeded,  13) \
X(a, STATIC,   OPTIONAL, UINT64,   flushes_failed,   14) \
X(a, STATIC,   OPTIONAL, UENUM,    final_flush_outcome,  15) \
X(a, CALLBACK, REPEATED, INT64,    chunk_payload_histogram_def,  17) \
X(a, CALLBACK, REPEATED, MESSAGE,  writer_stats,     18)
#define perfetto_protos_TraceStats_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceStats_DEFAULT NULL
#define perfetto_protos_TraceStats_buffer_stats_MSGTYPE perfetto_protos_TraceStats_BufferStats
#define perfetto_protos_TraceStats_filter_stats_MSGTYPE perfetto_protos_TraceStats_FilterStats
#define perfetto_protos_TraceStats_writer_stats_MSGTYPE perfetto_protos_TraceStats_WriterStats

#define perfetto_protos_TraceStats_BufferStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_written,     1) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_written,    2) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_overwritten,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   write_wrap_count,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   patches_succeeded,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   patches_failed,    6) \
X(a, STATIC,   OPTIONAL, UINT64,   readaheads_succeeded,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   readaheads_failed,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   abi_violations,    9) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_rewritten,  10) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_committed_out_of_order,  11) \
X(a, STATIC,   OPTIONAL, UINT64,   buffer_size,      12) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_overwritten,  13) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_read,       14) \
X(a, STATIC,   OPTIONAL, UINT64,   padding_bytes_written,  15) \
X(a, STATIC,   OPTIONAL, UINT64,   padding_bytes_cleared,  16) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_read,      17) \
X(a, STATIC,   OPTIONAL, UINT64,   chunks_discarded,  18) \
X(a, STATIC,   OPTIONAL, UINT64,   trace_writer_packet_loss,  19)
#define perfetto_protos_TraceStats_BufferStats_CALLBACK NULL
#define perfetto_protos_TraceStats_BufferStats_DEFAULT NULL

#define perfetto_protos_TraceStats_WriterStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   sequence_id,       1) \
X(a, CALLBACK, REPEATED, UINT64,   chunk_payload_histogram_counts,   2) \
X(a, CALLBACK, REPEATED, INT64,    chunk_payload_histogram_sum,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   buffer,            4)
#define perfetto_protos_TraceStats_WriterStats_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceStats_WriterStats_DEFAULT NULL

#define perfetto_protos_TraceStats_FilterStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   input_packets,     1) \
X(a, STATIC,   OPTIONAL, UINT64,   input_bytes,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   output_bytes,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   errors,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   time_taken_ns,     5) \
X(a, CALLBACK, REPEATED, UINT64,   bytes_discarded_per_buffer,  20)
#define perfetto_protos_TraceStats_FilterStats_CALLBACK pb_default_field_callback
#define perfetto_protos_TraceStats_FilterStats_DEFAULT NULL

#define perfetto_protos_AndroidGameInterventionList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  game_packages,     1) \
X(a, STATIC,   OPTIONAL, BOOL,     parse_error,       2) \
X(a, STATIC,   OPTIONAL, BOOL,     read_error,        3)
#define perfetto_protos_AndroidGameInterventionList_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidGameInterventionList_DEFAULT NULL
#define perfetto_protos_AndroidGameInterventionList_game_packages_MSGTYPE perfetto_protos_AndroidGameInterventionList_GamePackageInfo

#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              1) \
X(a, STATIC,   OPTIONAL, BOOL,     use_angle,         2) \
X(a, STATIC,   OPTIONAL, FLOAT,    resolution_downscale,   3) \
X(a, STATIC,   OPTIONAL, FLOAT,    fps,               4)
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_CALLBACK NULL
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_DEFAULT NULL

#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   uid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   current_mode,      3) \
X(a, CALLBACK, REPEATED, MESSAGE,  game_mode_info,    4)
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_DEFAULT NULL
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_game_mode_info_MSGTYPE perfetto_protos_AndroidGameInterventionList_GameModeInfo

#define perfetto_protos_AndroidLogPacket_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  events,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stats,             2)
#define perfetto_protos_AndroidLogPacket_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidLogPacket_DEFAULT NULL
#define perfetto_protos_AndroidLogPacket_events_MSGTYPE perfetto_protos_AndroidLogPacket_LogEvent
#define perfetto_protos_AndroidLogPacket_stats_MSGTYPE perfetto_protos_AndroidLogPacket_Stats

#define perfetto_protos_AndroidLogPacket_LogEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    log_id,            1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    tid,               3) \
X(a, STATIC,   OPTIONAL, INT32,    uid,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         5) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               6) \
X(a, STATIC,   OPTIONAL, UENUM,    prio,              7) \
X(a, CALLBACK, OPTIONAL, STRING,   message,           8) \
X(a, CALLBACK, REPEATED, MESSAGE,  args,              9)
#define perfetto_protos_AndroidLogPacket_LogEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidLogPacket_LogEvent_DEFAULT NULL
#define perfetto_protos_AndroidLogPacket_LogEvent_args_MSGTYPE perfetto_protos_AndroidLogPacket_LogEvent_Arg

#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   2) \
X(a, STATIC,   ONEOF,    FLOAT,    (value,float_value,value.float_value),   3) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),   4)
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_DEFAULT NULL

#define perfetto_protos_AndroidLogPacket_Stats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   num_total,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   num_failed,        2) \
X(a, STATIC,   OPTIONAL, UINT64,   num_skipped,       3)
#define perfetto_protos_AndroidLogPacket_Stats_CALLBACK NULL
#define perfetto_protos_AndroidLogPacket_Stats_DEFAULT NULL

#define perfetto_protos_AndroidSystemProperty_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  values,            1)
#define perfetto_protos_AndroidSystemProperty_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidSystemProperty_DEFAULT NULL
#define perfetto_protos_AndroidSystemProperty_values_MSGTYPE perfetto_protos_AndroidSystemProperty_PropertyValue

#define perfetto_protos_AndroidSystemProperty_PropertyValue_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_AndroidSystemProperty_PropertyValue_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidSystemProperty_PropertyValue_DEFAULT NULL

#define perfetto_protos_AppWakelockInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               2) \
X(a, STATIC,   OPTIONAL, INT32,    flags,             3) \
X(a, STATIC,   OPTIONAL, INT32,    owner_pid,         4) \
X(a, STATIC,   OPTIONAL, INT32,    owner_uid,         5) \
X(a, STATIC,   OPTIONAL, INT32,    work_uid,          6)
#define perfetto_protos_AppWakelockInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_AppWakelockInfo_DEFAULT NULL

#define perfetto_protos_AppWakelockBundle_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT32,   intern_id,         1) \
X(a, CALLBACK, REPEATED, UINT64,   encoded_ts,        2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  info,              3) \
X(a, STATIC,   OPTIONAL, BOOL,     acquired,          4)
#define perfetto_protos_AppWakelockBundle_CALLBACK pb_default_field_callback
#define perfetto_protos_AppWakelockBundle_DEFAULT NULL
#define perfetto_protos_AppWakelockBundle_info_MSGTYPE perfetto_protos_AppWakelockInfo

#define perfetto_protos_BluetoothTraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    packet_type,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   count,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   length,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   duration,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   op_code,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   event_code,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   subevent_code,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   connection_handle,   8)
#define perfetto_protos_BluetoothTraceEvent_CALLBACK NULL
#define perfetto_protos_BluetoothTraceEvent_DEFAULT (const pb_byte_t*)"\x08\x01\x00"

#define perfetto_protos_AndroidCameraFrameEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   session_id,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   camera_id,         2) \
X(a, STATIC,   OPTIONAL, INT64,    frame_number,      3) \
X(a, STATIC,   OPTIONAL, INT64,    request_id,        4) \
X(a, STATIC,   OPTIONAL, INT64,    request_received_ns,   5) \
X(a, STATIC,   OPTIONAL, INT64,    request_processing_started_ns,   6) \
X(a, STATIC,   OPTIONAL, INT64,    start_of_exposure_ns,   7) \
X(a, STATIC,   OPTIONAL, INT64,    start_of_frame_ns,   8) \
X(a, STATIC,   OPTIONAL, INT64,    responses_all_sent_ns,   9) \
X(a, STATIC,   OPTIONAL, UENUM,    capture_result_status,  10) \
X(a, STATIC,   OPTIONAL, INT32,    skipped_sensor_frames,  11) \
X(a, STATIC,   OPTIONAL, INT32,    capture_intent,   12) \
X(a, STATIC,   OPTIONAL, INT32,    num_streams,      13) \
X(a, CALLBACK, REPEATED, MESSAGE,  node_processing_details,  14) \
X(a, STATIC,   OPTIONAL, INT32,    vendor_data_version,  15) \
X(a, CALLBACK, OPTIONAL, BYTES,    vendor_data,      16)
#define perfetto_protos_AndroidCameraFrameEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidCameraFrameEvent_DEFAULT NULL
#define perfetto_protos_AndroidCameraFrameEvent_node_processing_details_MSGTYPE perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails

#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    node_id,           1) \
X(a, STATIC,   OPTIONAL, INT64,    start_processing_ns,   2) \
X(a, STATIC,   OPTIONAL, INT64,    end_processing_ns,   3) \
X(a, STATIC,   OPTIONAL, INT64,    scheduling_latency_ns,   4)
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_CALLBACK NULL
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_DEFAULT NULL

#define perfetto_protos_AndroidCameraSessionStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   session_id,        1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  graph,             2)
#define perfetto_protos_AndroidCameraSessionStats_CALLBACK NULL
#define perfetto_protos_AndroidCameraSessionStats_DEFAULT NULL
#define perfetto_protos_AndroidCameraSessionStats_graph_MSGTYPE perfetto_protos_AndroidCameraSessionStats_CameraGraph

#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  nodes,             1) \
X(a, CALLBACK, REPEATED, MESSAGE,  edges,             2)
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_DEFAULT NULL
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_nodes_MSGTYPE perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_edges_MSGTYPE perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge

#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    node_id,           1) \
X(a, CALLBACK, REPEATED, INT64,    input_ids,         2) \
X(a, CALLBACK, REPEATED, INT64,    output_ids,        3) \
X(a, STATIC,   OPTIONAL, INT32,    vendor_data_version,   4) \
X(a, CALLBACK, OPTIONAL, BYTES,    vendor_data,       5)
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_DEFAULT NULL

#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    output_node_id,    1) \
X(a, STATIC,   OPTIONAL, INT64,    output_id,         2) \
X(a, STATIC,   OPTIONAL, INT64,    input_node_id,     3) \
X(a, STATIC,   OPTIONAL, INT64,    input_id,          4) \
X(a, STATIC,   OPTIONAL, INT32,    vendor_data_version,   5) \
X(a, CALLBACK, OPTIONAL, BYTES,    vendor_data,       6)
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_DEFAULT NULL

#define perfetto_protos_FrameTimelineEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,expected_display_frame_start,event.expected_display_frame_start),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,actual_display_frame_start,event.actual_display_frame_start),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,expected_surface_frame_start,event.expected_surface_frame_start),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,actual_surface_frame_start,event.actual_surface_frame_start),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,frame_end,event.frame_end),   5)
#define perfetto_protos_FrameTimelineEvent_CALLBACK NULL
#define perfetto_protos_FrameTimelineEvent_DEFAULT NULL
#define perfetto_protos_FrameTimelineEvent_event_expected_display_frame_start_MSGTYPE perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart
#define perfetto_protos_FrameTimelineEvent_event_actual_display_frame_start_MSGTYPE perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart
#define perfetto_protos_FrameTimelineEvent_event_expected_surface_frame_start_MSGTYPE perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart
#define perfetto_protos_FrameTimelineEvent_event_actual_surface_frame_start_MSGTYPE perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart
#define perfetto_protos_FrameTimelineEvent_event_frame_end_MSGTYPE perfetto_protos_FrameTimelineEvent_FrameEnd

#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    cookie,            1) \
X(a, STATIC,   OPTIONAL, INT64,    token,             2) \
X(a, STATIC,   OPTIONAL, INT64,    display_frame_token,   3) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               4) \
X(a, CALLBACK, OPTIONAL, STRING,   layer_name,        5)
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_CALLBACK pb_default_field_callback
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_DEFAULT NULL

#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    cookie,            1) \
X(a, STATIC,   OPTIONAL, INT64,    token,             2) \
X(a, STATIC,   OPTIONAL, INT64,    display_frame_token,   3) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               4) \
X(a, CALLBACK, OPTIONAL, STRING,   layer_name,        5) \
X(a, STATIC,   OPTIONAL, UENUM,    present_type,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     on_time_finish,    7) \
X(a, STATIC,   OPTIONAL, BOOL,     gpu_composition,   8) \
X(a, STATIC,   OPTIONAL, INT32,    jank_type,         9) \
X(a, STATIC,   OPTIONAL, UENUM,    prediction_type,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     is_buffer,        11) \
X(a, STATIC,   OPTIONAL, UENUM,    jank_severity_type,  12)
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_CALLBACK pb_default_field_callback
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_DEFAULT NULL

#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    cookie,            1) \
X(a, STATIC,   OPTIONAL, INT64,    token,             2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3)
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_CALLBACK NULL
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_DEFAULT NULL

#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    cookie,            1) \
X(a, STATIC,   OPTIONAL, INT64,    token,             2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3) \
X(a, STATIC,   OPTIONAL, UENUM,    present_type,      4) \
X(a, STATIC,   OPTIONAL, BOOL,     on_time_finish,    5) \
X(a, STATIC,   OPTIONAL, BOOL,     gpu_composition,   6) \
X(a, STATIC,   OPTIONAL, INT32,    jank_type,         7) \
X(a, STATIC,   OPTIONAL, UENUM,    prediction_type,   8) \
X(a, STATIC,   OPTIONAL, UENUM,    jank_severity_type,   9)
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_CALLBACK NULL
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_DEFAULT NULL

#define perfetto_protos_FrameTimelineEvent_FrameEnd_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    cookie,            1)
#define perfetto_protos_FrameTimelineEvent_FrameEnd_CALLBACK NULL
#define perfetto_protos_FrameTimelineEvent_FrameEnd_DEFAULT NULL

#define perfetto_protos_GpuMemTotalEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_GpuMemTotalEvent_CALLBACK NULL
#define perfetto_protos_GpuMemTotalEvent_DEFAULT NULL

#define perfetto_protos_GraphicsFrameEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buffer_event,      1)
#define perfetto_protos_GraphicsFrameEvent_CALLBACK NULL
#define perfetto_protos_GraphicsFrameEvent_DEFAULT NULL
#define perfetto_protos_GraphicsFrameEvent_buffer_event_MSGTYPE perfetto_protos_GraphicsFrameEvent_BufferEvent

#define perfetto_protos_GraphicsFrameEvent_BufferEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   frame_number,      1) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   layer_name,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   duration_ns,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   buffer_id,         5)
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_DEFAULT NULL

#define perfetto_protos_InitialDisplayState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    display_state,     1) \
X(a, STATIC,   OPTIONAL, DOUBLE,   brightness,        2)
#define perfetto_protos_InitialDisplayState_CALLBACK NULL
#define perfetto_protos_InitialDisplayState_DEFAULT NULL

#define perfetto_protos_KernelWakelockData_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  wakelock,          1) \
X(a, CALLBACK, REPEATED, UINT32,   wakelock_id,       2) \
X(a, CALLBACK, REPEATED, UINT64,   time_held_millis,   3)
#define perfetto_protos_KernelWakelockData_CALLBACK pb_default_field_callback
#define perfetto_protos_KernelWakelockData_DEFAULT NULL
#define perfetto_protos_KernelWakelockData_wakelock_MSGTYPE perfetto_protos_KernelWakelockData_Wakelock

#define perfetto_protos_KernelWakelockData_Wakelock_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   wakelock_id,       1) \
X(a, CALLBACK, OPTIONAL, STRING,   wakelock_name,     2) \
X(a, STATIC,   OPTIONAL, UENUM,    wakelock_type,     3)
#define perfetto_protos_KernelWakelockData_Wakelock_CALLBACK pb_default_field_callback
#define perfetto_protos_KernelWakelockData_Wakelock_DEFAULT NULL

#define perfetto_protos_NetworkPacketEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    direction,         1) \
X(a, CALLBACK, OPTIONAL, STRING,   interface,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   length,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   uid,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   tag,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   ip_proto,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   tcp_flags,         7) \
X(a, STATIC,   OPTIONAL, UINT32,   local_port,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   remote_port,       9) \
X(a, STATIC,   OPTIONAL, UINT32,   icmp_type,        10) \
X(a, STATIC,   OPTIONAL, UINT32,   icmp_code,        11)
#define perfetto_protos_NetworkPacketEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_NetworkPacketEvent_DEFAULT NULL

#define perfetto_protos_NetworkPacketBundle_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT64,   (packet_context,iid,packet_context.iid),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (packet_context,ctx,packet_context.ctx),   2) \
X(a, CALLBACK, REPEATED, UINT64,   packet_timestamps,   3) \
X(a, CALLBACK, REPEATED, UINT32,   packet_lengths,    4) \
X(a, STATIC,   OPTIONAL, UINT32,   total_packets,     5) \
X(a, STATIC,   OPTIONAL, UINT64,   total_duration,    6) \
X(a, STATIC,   OPTIONAL, UINT64,   total_length,      7)
#define perfetto_protos_NetworkPacketBundle_CALLBACK pb_default_field_callback
#define perfetto_protos_NetworkPacketBundle_DEFAULT NULL
#define perfetto_protos_NetworkPacketBundle_packet_context_ctx_MSGTYPE perfetto_protos_NetworkPacketEvent

#define perfetto_protos_NetworkPacketContext_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ctx,               2)
#define perfetto_protos_NetworkPacketContext_CALLBACK NULL
#define perfetto_protos_NetworkPacketContext_DEFAULT NULL
#define perfetto_protos_NetworkPacketContext_ctx_MSGTYPE perfetto_protos_NetworkPacketEvent

#define perfetto_protos_PackagesList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  packages,          1) \
X(a, STATIC,   OPTIONAL, BOOL,     parse_error,       2) \
X(a, STATIC,   OPTIONAL, BOOL,     read_error,        3)
#define perfetto_protos_PackagesList_CALLBACK pb_default_field_callback
#define perfetto_protos_PackagesList_DEFAULT NULL
#define perfetto_protos_PackagesList_packages_MSGTYPE perfetto_protos_PackagesList_PackageInfo

#define perfetto_protos_PackagesList_PackageInfo_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   uid,               2) \
X(a, STATIC,   OPTIONAL, BOOL,     debuggable,        3) \
X(a, STATIC,   OPTIONAL, BOOL,     profileable_from_shell,   4) \
X(a, STATIC,   OPTIONAL, INT64,    version_code,      5)
#define perfetto_protos_PackagesList_PackageInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_PackagesList_PackageInfo_DEFAULT NULL

#define perfetto_protos_PixelModemEvents_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, BYTES,    events,            1) \
X(a, CALLBACK, REPEATED, UINT64,   event_time_nanos,   2)
#define perfetto_protos_PixelModemEvents_CALLBACK pb_default_field_callback
#define perfetto_protos_PixelModemEvents_DEFAULT NULL

#define perfetto_protos_PixelModemTokenDatabase_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, BYTES,    database,          1)
#define perfetto_protos_PixelModemTokenDatabase_CALLBACK pb_default_field_callback
#define perfetto_protos_PixelModemTokenDatabase_DEFAULT NULL

#define perfetto_protos_ProtoLogMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED64,  message_id,        1) \
X(a, CALLBACK, REPEATED, UINT32,   str_param_iids,    2) \
X(a, CALLBACK, REPEATED, SINT64,   sint64_params,     3) \
X(a, CALLBACK, REPEATED, DOUBLE,   double_params,     4) \
X(a, CALLBACK, REPEATED, INT32,    boolean_params,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   stacktrace_iid,    6)
#define perfetto_protos_ProtoLogMessage_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogMessage_DEFAULT NULL

#define perfetto_protos_ProtoLogViewerConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  messages,          1) \
X(a, CALLBACK, REPEATED, MESSAGE,  groups,            2)
#define perfetto_protos_ProtoLogViewerConfig_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogViewerConfig_DEFAULT NULL
#define perfetto_protos_ProtoLogViewerConfig_messages_MSGTYPE perfetto_protos_ProtoLogViewerConfig_MessageData
#define perfetto_protos_ProtoLogViewerConfig_groups_MSGTYPE perfetto_protos_ProtoLogViewerConfig_Group

#define perfetto_protos_ProtoLogViewerConfig_MessageData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED64,  message_id,        1) \
X(a, CALLBACK, OPTIONAL, STRING,   message,           2) \
X(a, STATIC,   OPTIONAL, UENUM,    level,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   group_id,          4) \
X(a, CALLBACK, OPTIONAL, STRING,   location,          5)
#define perfetto_protos_ProtoLogViewerConfig_MessageData_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogViewerConfig_MessageData_DEFAULT NULL

#define perfetto_protos_ProtoLogViewerConfig_Group_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               3)
#define perfetto_protos_ProtoLogViewerConfig_Group_CALLBACK pb_default_field_callback
#define perfetto_protos_ProtoLogViewerConfig_Group_DEFAULT NULL

#define perfetto_protos_ShellTransition_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, INT64,    create_time_ns,    2) \
X(a, STATIC,   OPTIONAL, INT64,    send_time_ns,      3) \
X(a, STATIC,   OPTIONAL, INT64,    dispatch_time_ns,   4) \
X(a, STATIC,   OPTIONAL, INT64,    merge_time_ns,     5) \
X(a, STATIC,   OPTIONAL, INT64,    merge_request_time_ns,   6) \
X(a, STATIC,   OPTIONAL, INT64,    shell_abort_time_ns,   7) \
X(a, STATIC,   OPTIONAL, INT64,    wm_abort_time_ns,   8) \
X(a, STATIC,   OPTIONAL, INT64,    finish_time_ns,    9) \
X(a, STATIC,   OPTIONAL, UINT64,   start_transaction_id,  10) \
X(a, STATIC,   OPTIONAL, UINT64,   finish_transaction_id,  11) \
X(a, STATIC,   OPTIONAL, INT32,    handler,          12) \
X(a, STATIC,   OPTIONAL, INT32,    type,             13) \
X(a, CALLBACK, REPEATED, MESSAGE,  targets,          14) \
X(a, STATIC,   OPTIONAL, INT32,    merge_target,     15) \
X(a, STATIC,   OPTIONAL, INT32,    flags,            16) \
X(a, STATIC,   OPTIONAL, INT64,    starting_window_remove_time_ns,  17)
#define perfetto_protos_ShellTransition_CALLBACK pb_default_field_callback
#define perfetto_protos_ShellTransition_DEFAULT NULL
#define perfetto_protos_ShellTransition_targets_MSGTYPE perfetto_protos_ShellTransition_Target

#define perfetto_protos_ShellTransition_Target_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              1) \
X(a, STATIC,   OPTIONAL, INT32,    layer_id,          2) \
X(a, STATIC,   OPTIONAL, INT32,    window_id,         3) \
X(a, STATIC,   OPTIONAL, INT32,    flags,             4)
#define perfetto_protos_ShellTransition_Target_CALLBACK NULL
#define perfetto_protos_ShellTransition_Target_DEFAULT NULL

#define perfetto_protos_ShellHandlerMappings_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  mapping,           1)
#define perfetto_protos_ShellHandlerMappings_CALLBACK pb_default_field_callback
#define perfetto_protos_ShellHandlerMappings_DEFAULT NULL
#define perfetto_protos_ShellHandlerMappings_mapping_MSGTYPE perfetto_protos_ShellHandlerMapping

#define perfetto_protos_ShellHandlerMapping_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_ShellHandlerMapping_CALLBACK pb_default_field_callback
#define perfetto_protos_ShellHandlerMapping_DEFAULT NULL

#define perfetto_protos_RectProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    left,              1) \
X(a, STATIC,   OPTIONAL, INT32,    top,               2) \
X(a, STATIC,   OPTIONAL, INT32,    right,             3) \
X(a, STATIC,   OPTIONAL, INT32,    bottom,            4)
#define perfetto_protos_RectProto_CALLBACK NULL
#define perfetto_protos_RectProto_DEFAULT NULL

#define perfetto_protos_RegionProto_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  rect,              2)
#define perfetto_protos_RegionProto_CALLBACK pb_default_field_callback
#define perfetto_protos_RegionProto_DEFAULT NULL
#define perfetto_protos_RegionProto_rect_MSGTYPE perfetto_protos_RectProto

#define perfetto_protos_SizeProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    w,                 1) \
X(a, STATIC,   OPTIONAL, INT32,    h,                 2)
#define perfetto_protos_SizeProto_CALLBACK NULL
#define perfetto_protos_SizeProto_DEFAULT NULL

#define perfetto_protos_TransformProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdx,              1) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdx,              2) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdy,              3) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdy,              4) \
X(a, STATIC,   OPTIONAL, INT32,    type,              5)
#define perfetto_protos_TransformProto_CALLBACK NULL
#define perfetto_protos_TransformProto_DEFAULT NULL

#define perfetto_protos_ColorProto_FIELDLIST(X, a_) \
X(a_, STATIC,   OPTIONAL, FLOAT,    r,                 1) \
X(a_, STATIC,   OPTIONAL, FLOAT,    g,                 2) \
X(a_, STATIC,   OPTIONAL, FLOAT,    b,                 3) \
X(a_, STATIC,   OPTIONAL, FLOAT,    a,                 4)
#define perfetto_protos_ColorProto_CALLBACK NULL
#define perfetto_protos_ColorProto_DEFAULT NULL

#define perfetto_protos_InputWindowInfoProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   layout_params_flags,   1) \
X(a, STATIC,   OPTIONAL, INT32,    layout_params_type,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  frame,             3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  touchable_region,   4) \
X(a, STATIC,   OPTIONAL, INT32,    surface_inset,     5) \
X(a, STATIC,   OPTIONAL, BOOL,     visible,           6) \
X(a, STATIC,   OPTIONAL, BOOL,     can_receive_keys,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     focusable,         8) \
X(a, STATIC,   OPTIONAL, BOOL,     has_wallpaper,     9) \
X(a, STATIC,   OPTIONAL, FLOAT,    global_scale_factor,  10) \
X(a, STATIC,   OPTIONAL, FLOAT,    window_x_scale,   11) \
X(a, STATIC,   OPTIONAL, FLOAT,    window_y_scale,   12) \
X(a, STATIC,   OPTIONAL, INT32,    crop_layer_id,    13) \
X(a, STATIC,   OPTIONAL, BOOL,     replace_touchable_region_with_crop,  14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  touchable_region_crop,  15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform,        16) \
X(a, STATIC,   OPTIONAL, UINT32,   input_config,     17)
#define perfetto_protos_InputWindowInfoProto_CALLBACK NULL
#define perfetto_protos_InputWindowInfoProto_DEFAULT NULL
#define perfetto_protos_InputWindowInfoProto_frame_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_InputWindowInfoProto_touchable_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_InputWindowInfoProto_touchable_region_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_InputWindowInfoProto_transform_MSGTYPE perfetto_protos_TransformProto

#define perfetto_protos_BlurRegion_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   blur_radius,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   corner_radius_tl,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   corner_radius_tr,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   corner_radius_bl,   4) \
X(a, STATIC,   OPTIONAL, FLOAT,    corner_radius_br,   5) \
X(a, STATIC,   OPTIONAL, FLOAT,    alpha,             6) \
X(a, STATIC,   OPTIONAL, INT32,    left,              7) \
X(a, STATIC,   OPTIONAL, INT32,    top,               8) \
X(a, STATIC,   OPTIONAL, INT32,    right,             9) \
X(a, STATIC,   OPTIONAL, INT32,    bottom,           10)
#define perfetto_protos_BlurRegion_CALLBACK NULL
#define perfetto_protos_BlurRegion_DEFAULT NULL

#define perfetto_protos_ColorTransformProto_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, FLOAT,    val,               1)
#define perfetto_protos_ColorTransformProto_CALLBACK pb_default_field_callback
#define perfetto_protos_ColorTransformProto_DEFAULT NULL

#define perfetto_protos_LayersTraceFileProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED64,  magic_number,      1) \
X(a, CALLBACK, REPEATED, MESSAGE,  entry,             2) \
X(a, STATIC,   OPTIONAL, FIXED64,  real_to_elapsed_time_offset_nanos,   3)
#define perfetto_protos_LayersTraceFileProto_CALLBACK pb_default_field_callback
#define perfetto_protos_LayersTraceFileProto_DEFAULT NULL
#define perfetto_protos_LayersTraceFileProto_entry_MSGTYPE perfetto_protos_LayersSnapshotProto

#define perfetto_protos_LayersSnapshotProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, SFIXED64, elapsed_realtime_nanos,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   where,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  layers,            3) \
X(a, CALLBACK, OPTIONAL, STRING,   hwc_blob,          4) \
X(a, STATIC,   OPTIONAL, BOOL,     excludes_composition_state,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   missed_entries,    6) \
X(a, CALLBACK, REPEATED, MESSAGE,  displays,          7) \
X(a, STATIC,   OPTIONAL, INT64,    vsync_id,          8)
#define perfetto_protos_LayersSnapshotProto_CALLBACK pb_default_field_callback
#define perfetto_protos_LayersSnapshotProto_DEFAULT NULL
#define perfetto_protos_LayersSnapshotProto_layers_MSGTYPE perfetto_protos_LayersProto
#define perfetto_protos_LayersSnapshotProto_displays_MSGTYPE perfetto_protos_DisplayProto

#define perfetto_protos_LayersProto_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  layers,            1)
#define perfetto_protos_LayersProto_CALLBACK pb_default_field_callback
#define perfetto_protos_LayersProto_DEFAULT NULL
#define perfetto_protos_LayersProto_layers_MSGTYPE perfetto_protos_LayerProto

#define perfetto_protos_DisplayProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  size,              4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  layer_stack_space_rect,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform,         6) \
X(a, STATIC,   OPTIONAL, BOOL,     is_virtual,        7) \
X(a, STATIC,   OPTIONAL, DOUBLE,   dpi_x,             8) \
X(a, STATIC,   OPTIONAL, DOUBLE,   dpi_y,             9)
#define perfetto_protos_DisplayProto_CALLBACK pb_default_field_callback
#define perfetto_protos_DisplayProto_DEFAULT NULL
#define perfetto_protos_DisplayProto_size_MSGTYPE perfetto_protos_SizeProto
#define perfetto_protos_DisplayProto_layer_stack_space_rect_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_DisplayProto_transform_MSGTYPE perfetto_protos_TransformProto

#define perfetto_protos_LayerProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, CALLBACK, REPEATED, INT32,    children,          3) \
X(a, CALLBACK, REPEATED, INT32,    relatives,         4) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transparent_region,   6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  visible_region,    7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  damage_region,     8) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack,       9) \
X(a, STATIC,   OPTIONAL, INT32,    z,                10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,         11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  requested_position,  12) \
X(a, STATIC,   OPTIONAL, MESSAGE,  size,             13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  crop,             14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  final_crop,       15) \
X(a, STATIC,   OPTIONAL, BOOL,     is_opaque,        16) \
X(a, STATIC,   OPTIONAL, BOOL,     invalidate,       17) \
X(a, CALLBACK, OPTIONAL, STRING,   dataspace,        18) \
X(a, CALLBACK, OPTIONAL, STRING,   pixel_format,     19) \
X(a, STATIC,   OPTIONAL, MESSAGE,  color,            20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  requested_color,  21) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,            22) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform,        23) \
X(a, STATIC,   OPTIONAL, MESSAGE,  requested_transform,  24) \
X(a, STATIC,   OPTIONAL, INT32,    parent,           25) \
X(a, STATIC,   OPTIONAL, INT32,    z_order_relative_of,  26) \
X(a, STATIC,   OPTIONAL, MESSAGE,  active_buffer,    27) \
X(a, STATIC,   OPTIONAL, INT32,    queued_frames,    28) \
X(a, STATIC,   OPTIONAL, BOOL,     refresh_pending,  29) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hwc_frame,        30) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hwc_crop,         31) \
X(a, STATIC,   OPTIONAL, INT32,    hwc_transform,    32) \
X(a, STATIC,   OPTIONAL, INT32,    window_type,      33) \
X(a, STATIC,   OPTIONAL, INT32,    app_id,           34) \
X(a, STATIC,   OPTIONAL, UENUM,    hwc_composition_type,  35) \
X(a, STATIC,   OPTIONAL, BOOL,     is_protected,     36) \
X(a, STATIC,   OPTIONAL, UINT64,   curr_frame,       37) \
X(a, CALLBACK, REPEATED, MESSAGE,  barrier_layer,    38) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buffer_transform,  39) \
X(a, STATIC,   OPTIONAL, INT32,    effective_scaling_mode,  40) \
X(a, STATIC,   OPTIONAL, FLOAT,    corner_radius,    41) \
X(a, CALLBACK, REPEATED, MESSAGE,  metadata,         42) \
X(a, STATIC,   OPTIONAL, MESSAGE,  effective_transform,  43) \
X(a, STATIC,   OPTIONAL, MESSAGE,  source_bounds,    44) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bounds,           45) \
X(a, STATIC,   OPTIONAL, MESSAGE,  screen_bounds,    46) \
X(a, STATIC,   OPTIONAL, MESSAGE,  input_window_info,  47) \
X(a, STATIC,   OPTIONAL, MESSAGE,  corner_radius_crop,  48) \
X(a, STATIC,   OPTIONAL, FLOAT,    shadow_radius,    49) \
X(a, STATIC,   OPTIONAL, MESSAGE,  color_transform,  50) \
X(a, STATIC,   OPTIONAL, BOOL,     is_relative_of,   51) \
X(a, STATIC,   OPTIONAL, INT32,    background_blur_radius,  52) \
X(a, STATIC,   OPTIONAL, UINT32,   owner_uid,        53) \
X(a, CALLBACK, REPEATED, MESSAGE,  blur_regions,     54) \
X(a, STATIC,   OPTIONAL, BOOL,     is_trusted_overlay,  55) \
X(a, STATIC,   OPTIONAL, FLOAT,    requested_corner_radius,  56) \
X(a, STATIC,   OPTIONAL, MESSAGE,  destination_frame,  57) \
X(a, STATIC,   OPTIONAL, UINT32,   original_id,      58) \
X(a, STATIC,   OPTIONAL, UENUM,    trusted_overlay,  59)
#define perfetto_protos_LayerProto_CALLBACK pb_default_field_callback
#define perfetto_protos_LayerProto_DEFAULT NULL
#define perfetto_protos_LayerProto_transparent_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_LayerProto_visible_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_LayerProto_damage_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_LayerProto_position_MSGTYPE perfetto_protos_PositionProto
#define perfetto_protos_LayerProto_requested_position_MSGTYPE perfetto_protos_PositionProto
#define perfetto_protos_LayerProto_size_MSGTYPE perfetto_protos_SizeProto
#define perfetto_protos_LayerProto_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerProto_final_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerProto_color_MSGTYPE perfetto_protos_ColorProto
#define perfetto_protos_LayerProto_requested_color_MSGTYPE perfetto_protos_ColorProto
#define perfetto_protos_LayerProto_transform_MSGTYPE perfetto_protos_TransformProto
#define perfetto_protos_LayerProto_requested_transform_MSGTYPE perfetto_protos_TransformProto
#define perfetto_protos_LayerProto_active_buffer_MSGTYPE perfetto_protos_ActiveBufferProto
#define perfetto_protos_LayerProto_hwc_frame_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerProto_hwc_crop_MSGTYPE perfetto_protos_FloatRectProto
#define perfetto_protos_LayerProto_barrier_layer_MSGTYPE perfetto_protos_BarrierLayerProto
#define perfetto_protos_LayerProto_buffer_transform_MSGTYPE perfetto_protos_TransformProto
#define perfetto_protos_LayerProto_metadata_MSGTYPE perfetto_protos_LayerProto_MetadataEntry
#define perfetto_protos_LayerProto_effective_transform_MSGTYPE perfetto_protos_TransformProto
#define perfetto_protos_LayerProto_source_bounds_MSGTYPE perfetto_protos_FloatRectProto
#define perfetto_protos_LayerProto_bounds_MSGTYPE perfetto_protos_FloatRectProto
#define perfetto_protos_LayerProto_screen_bounds_MSGTYPE perfetto_protos_FloatRectProto
#define perfetto_protos_LayerProto_input_window_info_MSGTYPE perfetto_protos_InputWindowInfoProto
#define perfetto_protos_LayerProto_corner_radius_crop_MSGTYPE perfetto_protos_FloatRectProto
#define perfetto_protos_LayerProto_color_transform_MSGTYPE perfetto_protos_ColorTransformProto
#define perfetto_protos_LayerProto_blur_regions_MSGTYPE perfetto_protos_BlurRegion
#define perfetto_protos_LayerProto_destination_frame_MSGTYPE perfetto_protos_RectProto

#define perfetto_protos_LayerProto_MetadataEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_LayerProto_MetadataEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_LayerProto_MetadataEntry_DEFAULT NULL

#define perfetto_protos_PositionProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    x,                 1) \
X(a, STATIC,   OPTIONAL, FLOAT,    y,                 2)
#define perfetto_protos_PositionProto_CALLBACK NULL
#define perfetto_protos_PositionProto_DEFAULT NULL

#define perfetto_protos_FloatRectProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    left,              1) \
X(a, STATIC,   OPTIONAL, FLOAT,    top,               2) \
X(a, STATIC,   OPTIONAL, FLOAT,    right,             3) \
X(a, STATIC,   OPTIONAL, FLOAT,    bottom,            4)
#define perfetto_protos_FloatRectProto_CALLBACK NULL
#define perfetto_protos_FloatRectProto_DEFAULT NULL

#define perfetto_protos_ActiveBufferProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   width,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   height,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   stride,            3) \
X(a, STATIC,   OPTIONAL, INT32,    format,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   usage,             5)
#define perfetto_protos_ActiveBufferProto_CALLBACK NULL
#define perfetto_protos_ActiveBufferProto_DEFAULT NULL

#define perfetto_protos_BarrierLayerProto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   frame_number,      2)
#define perfetto_protos_BarrierLayerProto_CALLBACK NULL
#define perfetto_protos_BarrierLayerProto_DEFAULT NULL

#define perfetto_protos_TransactionTraceFile_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED64,  magic_number,      1) \
X(a, CALLBACK, REPEATED, MESSAGE,  entry,             2) \
X(a, STATIC,   OPTIONAL, FIXED64,  real_to_elapsed_time_offset_nanos,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   version,           4)
#define perfetto_protos_TransactionTraceFile_CALLBACK pb_default_field_callback
#define perfetto_protos_TransactionTraceFile_DEFAULT NULL
#define perfetto_protos_TransactionTraceFile_entry_MSGTYPE perfetto_protos_TransactionTraceEntry

#define perfetto_protos_TransactionTraceEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    elapsed_realtime_nanos,   1) \
X(a, STATIC,   OPTIONAL, INT64,    vsync_id,          2) \
X(a, CALLBACK, REPEATED, MESSAGE,  transactions,      3) \
X(a, CALLBACK, REPEATED, MESSAGE,  added_layers,      4) \
X(a, CALLBACK, REPEATED, UINT32,   destroyed_layers,   5) \
X(a, CALLBACK, REPEATED, MESSAGE,  added_displays,    6) \
X(a, CALLBACK, REPEATED, INT32,    removed_displays,   7) \
X(a, CALLBACK, REPEATED, UINT32,   destroyed_layer_handles,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     displays_changed,   9) \
X(a, CALLBACK, REPEATED, MESSAGE,  displays,         10)
#define perfetto_protos_TransactionTraceEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_TransactionTraceEntry_DEFAULT NULL
#define perfetto_protos_TransactionTraceEntry_transactions_MSGTYPE perfetto_protos_TransactionState
#define perfetto_protos_TransactionTraceEntry_added_layers_MSGTYPE perfetto_protos_LayerCreationArgs
#define perfetto_protos_TransactionTraceEntry_added_displays_MSGTYPE perfetto_protos_DisplayState
#define perfetto_protos_TransactionTraceEntry_displays_MSGTYPE perfetto_protos_DisplayInfo

#define perfetto_protos_DisplayInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack,       1) \
X(a, STATIC,   OPTIONAL, INT32,    display_id,        2) \
X(a, STATIC,   OPTIONAL, INT32,    logical_width,     3) \
X(a, STATIC,   OPTIONAL, INT32,    logical_height,    4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform_inverse,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform,         6) \
X(a, STATIC,   OPTIONAL, BOOL,     receives_input,    7) \
X(a, STATIC,   OPTIONAL, BOOL,     is_secure,         8) \
X(a, STATIC,   OPTIONAL, BOOL,     is_primary,        9) \
X(a, STATIC,   OPTIONAL, BOOL,     is_virtual,       10) \
X(a, STATIC,   OPTIONAL, INT32,    rotation_flags,   11) \
X(a, STATIC,   OPTIONAL, INT32,    transform_hint,   12)
#define perfetto_protos_DisplayInfo_CALLBACK NULL
#define perfetto_protos_DisplayInfo_DEFAULT NULL
#define perfetto_protos_DisplayInfo_transform_inverse_MSGTYPE perfetto_protos_Transform
#define perfetto_protos_DisplayInfo_transform_MSGTYPE perfetto_protos_Transform

#define perfetto_protos_LayerCreationArgs_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_id,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   parent_id,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   mirror_from_id,    5) \
X(a, STATIC,   OPTIONAL, BOOL,     add_to_root,       6) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack_to_mirror,   7)
#define perfetto_protos_LayerCreationArgs_CALLBACK pb_default_field_callback
#define perfetto_protos_LayerCreationArgs_DEFAULT NULL

#define perfetto_protos_Transform_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdx,              1) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdx,              2) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdy,              3) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdy,              4) \
X(a, STATIC,   OPTIONAL, FLOAT,    tx,                5) \
X(a, STATIC,   OPTIONAL, FLOAT,    ty,                6)
#define perfetto_protos_Transform_CALLBACK NULL
#define perfetto_protos_Transform_DEFAULT NULL

#define perfetto_protos_TransactionState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    uid,               2) \
X(a, STATIC,   OPTIONAL, INT64,    vsync_id,          3) \
X(a, STATIC,   OPTIONAL, INT32,    input_event_id,    4) \
X(a, STATIC,   OPTIONAL, INT64,    post_time,         5) \
X(a, STATIC,   OPTIONAL, UINT64,   transaction_id,    6) \
X(a, CALLBACK, REPEATED, MESSAGE,  layer_changes,     7) \
X(a, CALLBACK, REPEATED, MESSAGE,  display_changes,   8) \
X(a, CALLBACK, REPEATED, UINT64,   merged_transaction_ids,   9)
#define perfetto_protos_TransactionState_CALLBACK pb_default_field_callback
#define perfetto_protos_TransactionState_DEFAULT NULL
#define perfetto_protos_TransactionState_layer_changes_MSGTYPE perfetto_protos_LayerState
#define perfetto_protos_TransactionState_display_changes_MSGTYPE perfetto_protos_DisplayState

#define perfetto_protos_LayerState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_id,          1) \
X(a, STATIC,   OPTIONAL, UINT64,   what,              2) \
X(a, STATIC,   OPTIONAL, FLOAT,    x,                 3) \
X(a, STATIC,   OPTIONAL, FLOAT,    y,                 4) \
X(a, STATIC,   OPTIONAL, INT32,    z,                 5) \
X(a, STATIC,   OPTIONAL, UINT32,   w,                 6) \
X(a, STATIC,   OPTIONAL, UINT32,   h,                 7) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack,       8) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             9) \
X(a, STATIC,   OPTIONAL, UINT32,   mask,             10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  matrix,           11) \
X(a, STATIC,   OPTIONAL, FLOAT,    corner_radius,    12) \
X(a, STATIC,   OPTIONAL, UINT32,   background_blur_radius,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   parent_id,        14) \
X(a, STATIC,   OPTIONAL, UINT32,   relative_parent_id,  15) \
X(a, STATIC,   OPTIONAL, FLOAT,    alpha,            16) \
X(a, STATIC,   OPTIONAL, MESSAGE,  color,            17) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transparent_region,  18) \
X(a, STATIC,   OPTIONAL, UINT32,   transform,        19) \
X(a, STATIC,   OPTIONAL, BOOL,     transform_to_display_inverse,  20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  crop,             21) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buffer_data,      22) \
X(a, STATIC,   OPTIONAL, INT32,    api,              23) \
X(a, STATIC,   OPTIONAL, BOOL,     has_sideband_stream,  24) \
X(a, STATIC,   OPTIONAL, MESSAGE,  color_transform,  25) \
X(a, CALLBACK, REPEATED, MESSAGE,  blur_regions,     26) \
X(a, STATIC,   OPTIONAL, MESSAGE,  window_info_handle,  27) \
X(a, STATIC,   OPTIONAL, FLOAT,    bg_color_alpha,   28) \
X(a, STATIC,   OPTIONAL, INT32,    bg_color_dataspace,  29) \
X(a, STATIC,   OPTIONAL, BOOL,     color_space_agnostic,  30) \
X(a, STATIC,   OPTIONAL, FLOAT,    shadow_radius,    31) \
X(a, STATIC,   OPTIONAL, INT32,    frame_rate_selection_priority,  32) \
X(a, STATIC,   OPTIONAL, FLOAT,    frame_rate,       33) \
X(a, STATIC,   OPTIONAL, INT32,    frame_rate_compatibility,  34) \
X(a, STATIC,   OPTIONAL, INT32,    change_frame_rate_strategy,  35) \
X(a, STATIC,   OPTIONAL, UINT32,   fixed_transform_hint,  36) \
X(a, STATIC,   OPTIONAL, UINT64,   frame_number,     37) \
X(a, STATIC,   OPTIONAL, BOOL,     auto_refresh,     38) \
X(a, STATIC,   OPTIONAL, BOOL,     is_trusted_overlay,  39) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buffer_crop,      40) \
X(a, STATIC,   OPTIONAL, MESSAGE,  destination_frame,  41) \
X(a, STATIC,   OPTIONAL, UENUM,    drop_input_mode,  42) \
X(a, STATIC,   OPTIONAL, UENUM,    trusted_overlay,  43)
#define perfetto_protos_LayerState_CALLBACK pb_default_field_callback
#define perfetto_protos_LayerState_DEFAULT NULL
#define perfetto_protos_LayerState_matrix_MSGTYPE perfetto_protos_LayerState_Matrix22
#define perfetto_protos_LayerState_color_MSGTYPE perfetto_protos_LayerState_Color3
#define perfetto_protos_LayerState_transparent_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_LayerState_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerState_buffer_data_MSGTYPE perfetto_protos_LayerState_BufferData
#define perfetto_protos_LayerState_color_transform_MSGTYPE perfetto_protos_ColorTransformProto
#define perfetto_protos_LayerState_blur_regions_MSGTYPE perfetto_protos_BlurRegion
#define perfetto_protos_LayerState_window_info_handle_MSGTYPE perfetto_protos_LayerState_WindowInfo
#define perfetto_protos_LayerState_buffer_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerState_destination_frame_MSGTYPE perfetto_protos_RectProto

#define perfetto_protos_LayerState_Matrix22_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdx,              1) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdx,              2) \
X(a, STATIC,   OPTIONAL, FLOAT,    dtdy,              3) \
X(a, STATIC,   OPTIONAL, FLOAT,    dsdy,              4)
#define perfetto_protos_LayerState_Matrix22_CALLBACK NULL
#define perfetto_protos_LayerState_Matrix22_DEFAULT NULL

#define perfetto_protos_LayerState_Color3_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    r,                 1) \
X(a, STATIC,   OPTIONAL, FLOAT,    g,                 2) \
X(a, STATIC,   OPTIONAL, FLOAT,    b,                 3)
#define perfetto_protos_LayerState_Color3_CALLBACK NULL
#define perfetto_protos_LayerState_Color3_DEFAULT NULL

#define perfetto_protos_LayerState_BufferData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   buffer_id,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   width,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   height,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   frame_number,      4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5) \
X(a, STATIC,   OPTIONAL, UINT64,   cached_buffer_id,   6) \
X(a, STATIC,   OPTIONAL, ENUM,     pixel_format,      7) \
X(a, STATIC,   OPTIONAL, UINT64,   usage,             8)
#define perfetto_protos_LayerState_BufferData_CALLBACK NULL
#define perfetto_protos_LayerState_BufferData_DEFAULT NULL

#define perfetto_protos_LayerState_WindowInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   layout_params_flags,   1) \
X(a, STATIC,   OPTIONAL, INT32,    layout_params_type,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  touchable_region,   3) \
X(a, STATIC,   OPTIONAL, INT32,    surface_inset,     4) \
X(a, STATIC,   OPTIONAL, BOOL,     focusable,         5) \
X(a, STATIC,   OPTIONAL, BOOL,     has_wallpaper,     6) \
X(a, STATIC,   OPTIONAL, FLOAT,    global_scale_factor,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   crop_layer_id,     8) \
X(a, STATIC,   OPTIONAL, BOOL,     replace_touchable_region_with_crop,   9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  touchable_region_crop,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  transform,        11) \
X(a, STATIC,   OPTIONAL, UINT32,   input_config,     12)
#define perfetto_protos_LayerState_WindowInfo_CALLBACK NULL
#define perfetto_protos_LayerState_WindowInfo_DEFAULT NULL
#define perfetto_protos_LayerState_WindowInfo_touchable_region_MSGTYPE perfetto_protos_RegionProto
#define perfetto_protos_LayerState_WindowInfo_touchable_region_crop_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_LayerState_WindowInfo_transform_MSGTYPE perfetto_protos_Transform

#define perfetto_protos_DisplayState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   what,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   layer_stack,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   orientation,       5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  layer_stack_space_rect,   6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  oriented_display_space_rect,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   width,             8) \
X(a, STATIC,   OPTIONAL, UINT32,   height,            9)
#define perfetto_protos_DisplayState_CALLBACK NULL
#define perfetto_protos_DisplayState_DEFAULT NULL
#define perfetto_protos_DisplayState_layer_stack_space_rect_MSGTYPE perfetto_protos_RectProto
#define perfetto_protos_DisplayState_oriented_display_space_rect_MSGTYPE perfetto_protos_RectProto

#define perfetto_protos_WinscopeExtensions_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,        1)
#define perfetto_protos_WinscopeExtensions_CALLBACK pb_default_field_callback
#define perfetto_protos_WinscopeExtensions_DEFAULT NULL

#define perfetto_protos_ChromeBenchmarkMetadata_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    benchmark_start_time_us,   1) \
X(a, STATIC,   OPTIONAL, INT64,    story_run_time_us,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   benchmark_name,    3) \
X(a, CALLBACK, OPTIONAL, STRING,   benchmark_description,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   label,             5) \
X(a, CALLBACK, OPTIONAL, STRING,   story_name,        6) \
X(a, CALLBACK, REPEATED, STRING,   story_tags,        7) \
X(a, STATIC,   OPTIONAL, INT32,    story_run_index,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     had_failures,      9)
#define perfetto_protos_ChromeBenchmarkMetadata_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeBenchmarkMetadata_DEFAULT NULL

#define perfetto_protos_ChromeMetadataPacket_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  background_tracing_metadata,   1) \
X(a, STATIC,   OPTIONAL, INT32,    chrome_version_code,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   enabled_categories,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  field_trial_hashes,   4)
#define perfetto_protos_ChromeMetadataPacket_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeMetadataPacket_DEFAULT NULL
#define perfetto_protos_ChromeMetadataPacket_background_tracing_metadata_MSGTYPE perfetto_protos_BackgroundTracingMetadata
#define perfetto_protos_ChromeMetadataPacket_field_trial_hashes_MSGTYPE perfetto_protos_ChromeMetadataPacket_FinchHash

#define perfetto_protos_ChromeMetadataPacket_FinchHash_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             2)
#define perfetto_protos_ChromeMetadataPacket_FinchHash_CALLBACK NULL
#define perfetto_protos_ChromeMetadataPacket_FinchHash_DEFAULT NULL

#define perfetto_protos_BackgroundTracingMetadata_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  triggered_rule,    1) \
X(a, CALLBACK, REPEATED, MESSAGE,  active_rules,      2) \
X(a, STATIC,   OPTIONAL, FIXED32,  scenario_name_hash,   3)
#define perfetto_protos_BackgroundTracingMetadata_CALLBACK pb_default_field_callback
#define perfetto_protos_BackgroundTracingMetadata_DEFAULT NULL
#define perfetto_protos_BackgroundTracingMetadata_triggered_rule_MSGTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule
#define perfetto_protos_BackgroundTracingMetadata_active_rules_MSGTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule

#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    trigger_type,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  histogram_rule,    2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  named_rule,        3) \
X(a, STATIC,   OPTIONAL, FIXED32,  name_hash,         4)
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_CALLBACK NULL
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_DEFAULT NULL
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_histogram_rule_MSGTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_named_rule_MSGTYPE perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule

#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED64,  histogram_name_hash,   1) \
X(a, STATIC,   OPTIONAL, INT64,    histogram_min_trigger,   2) \
X(a, STATIC,   OPTIONAL, INT64,    histogram_max_trigger,   3)
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_CALLBACK NULL
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_DEFAULT NULL

#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    event_type,        1) \
X(a, STATIC,   OPTIONAL, FIXED64,  content_trigger_name_hash,   2)
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_CALLBACK NULL
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_DEFAULT NULL

#define perfetto_protos_ChromeTracedValue_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    nested_type,       1) \
X(a, CALLBACK, REPEATED, STRING,   dict_keys,         2) \
X(a, CALLBACK, REPEATED, MESSAGE,  dict_values,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  array_values,      4) \
X(a, STATIC,   OPTIONAL, INT32,    int_value,         5) \
X(a, STATIC,   OPTIONAL, DOUBLE,   double_value,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     bool_value,        7) \
X(a, CALLBACK, OPTIONAL, STRING,   string_value,      8)
#define perfetto_protos_ChromeTracedValue_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeTracedValue_DEFAULT NULL
#define perfetto_protos_ChromeTracedValue_dict_values_MSGTYPE perfetto_protos_ChromeTracedValue
#define perfetto_protos_ChromeTracedValue_array_values_MSGTYPE perfetto_protos_ChromeTracedValue

#define perfetto_protos_ChromeStringTableEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             1) \
X(a, STATIC,   OPTIONAL, INT32,    index,             2)
#define perfetto_protos_ChromeStringTableEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeStringTableEntry_DEFAULT NULL

#define perfetto_protos_ChromeTraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,         2) \
X(a, STATIC,   OPTIONAL, INT32,    phase,             3) \
X(a, STATIC,   OPTIONAL, INT32,    thread_id,         4) \
X(a, STATIC,   OPTIONAL, INT64,    duration,          5) \
X(a, STATIC,   OPTIONAL, INT64,    thread_duration,   6) \
X(a, CALLBACK, OPTIONAL, STRING,   scope,             7) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                8) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             9) \
X(a, CALLBACK, OPTIONAL, STRING,   category_group_name,  10) \
X(a, STATIC,   OPTIONAL, INT32,    process_id,       11) \
X(a, STATIC,   OPTIONAL, INT64,    thread_timestamp,  12) \
X(a, STATIC,   OPTIONAL, UINT64,   bind_id,          13) \
X(a, CALLBACK, REPEATED, MESSAGE,  args,             14) \
X(a, STATIC,   OPTIONAL, UINT32,   name_index,       15) \
X(a, STATIC,   OPTIONAL, UINT32,   category_group_name_index,  16)
#define perfetto_protos_ChromeTraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeTraceEvent_DEFAULT NULL
#define perfetto_protos_ChromeTraceEvent_args_MSGTYPE perfetto_protos_ChromeTraceEvent_Arg

#define perfetto_protos_ChromeTraceEvent_Arg_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   2) \
X(a, STATIC,   ONEOF,    UINT64,   (value,uint_value,value.uint_value),   3) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   4) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),   5) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),   6) \
X(a, STATIC,   ONEOF,    UINT64,   (value,pointer_value,value.pointer_value),   7) \
X(a, CALLBACK, ONEOF,    STRING,   (value,json_value,value.json_value),   8) \
X(a, STATIC,   OPTIONAL, UINT32,   name_index,        9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,traced_value,value.traced_value),  10)
#define perfetto_protos_ChromeTraceEvent_Arg_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeTraceEvent_Arg_DEFAULT NULL
#define perfetto_protos_ChromeTraceEvent_Arg_value_traced_value_MSGTYPE perfetto_protos_ChromeTracedValue

#define perfetto_protos_ChromeMetadata_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),   2) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   3) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   4) \
X(a, CALLBACK, ONEOF,    STRING,   (value,json_value,value.json_value),   5)
#define perfetto_protos_ChromeMetadata_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeMetadata_DEFAULT NULL

#define perfetto_protos_ChromeLegacyJsonTrace_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   data,              2)
#define perfetto_protos_ChromeLegacyJsonTrace_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeLegacyJsonTrace_DEFAULT NULL

#define perfetto_protos_ChromeEventBundle_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  trace_events,      1) \
X(a, CALLBACK, REPEATED, MESSAGE,  metadata,          2) \
X(a, CALLBACK, REPEATED, MESSAGE,  string_table,      3) \
X(a, CALLBACK, REPEATED, STRING,   legacy_ftrace_output,   4) \
X(a, CALLBACK, REPEATED, MESSAGE,  legacy_json_trace,   5)
#define perfetto_protos_ChromeEventBundle_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeEventBundle_DEFAULT NULL
#define perfetto_protos_ChromeEventBundle_trace_events_MSGTYPE perfetto_protos_ChromeTraceEvent
#define perfetto_protos_ChromeEventBundle_metadata_MSGTYPE perfetto_protos_ChromeMetadata
#define perfetto_protos_ChromeEventBundle_string_table_MSGTYPE perfetto_protos_ChromeStringTableEntry
#define perfetto_protos_ChromeEventBundle_legacy_json_trace_MSGTYPE perfetto_protos_ChromeLegacyJsonTrace

#define perfetto_protos_ChromeTrigger_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   trigger_name,      1) \
X(a, STATIC,   OPTIONAL, FIXED32,  trigger_name_hash,   2) \
X(a, STATIC,   OPTIONAL, FIXED64,  flow_id,           3)
#define perfetto_protos_ChromeTrigger_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeTrigger_DEFAULT NULL

#define perfetto_protos_V8String_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,latin1,encoded_string.latin1),   1) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,utf16_le,encoded_string.utf16_le),   2) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,utf16_be,encoded_string.utf16_be),   3)
#define perfetto_protos_V8String_CALLBACK pb_default_field_callback
#define perfetto_protos_V8String_DEFAULT NULL

#define perfetto_protos_InternedV8String_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,latin1,encoded_string.latin1),   2) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,utf16_le,encoded_string.utf16_le),   3) \
X(a, CALLBACK, ONEOF,    BYTES,    (encoded_string,utf16_be,encoded_string.utf16_be),   4)
#define perfetto_protos_InternedV8String_CALLBACK pb_default_field_callback
#define perfetto_protos_InternedV8String_DEFAULT NULL

#define perfetto_protos_InternedV8JsScript_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    script_id,         2) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  name,              4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  source,            5)
#define perfetto_protos_InternedV8JsScript_CALLBACK NULL
#define perfetto_protos_InternedV8JsScript_DEFAULT NULL
#define perfetto_protos_InternedV8JsScript_name_MSGTYPE perfetto_protos_V8String
#define perfetto_protos_InternedV8JsScript_source_MSGTYPE perfetto_protos_V8String

#define perfetto_protos_InternedV8WasmScript_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    script_id,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   url,               3) \
X(a, CALLBACK, OPTIONAL, BYTES,    wire_bytes,        4)
#define perfetto_protos_InternedV8WasmScript_CALLBACK pb_default_field_callback
#define perfetto_protos_InternedV8WasmScript_DEFAULT NULL

#define perfetto_protos_InternedV8JsFunction_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_js_function_name_iid,   2) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_js_script_iid,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     is_toplevel,       4) \
X(a, STATIC,   OPTIONAL, UENUM,    kind,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   byte_offset,       6) \
X(a, STATIC,   OPTIONAL, UINT32,   line,              7) \
X(a, STATIC,   OPTIONAL, UINT32,   column,            8)
#define perfetto_protos_InternedV8JsFunction_CALLBACK NULL
#define perfetto_protos_InternedV8JsFunction_DEFAULT NULL

#define perfetto_protos_InternedV8Isolate_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    isolate_id,        3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  code_range,        4) \
X(a, STATIC,   OPTIONAL, UINT64,   embedded_blob_code_start_address,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   embedded_blob_code_size,   6)
#define perfetto_protos_InternedV8Isolate_CALLBACK NULL
#define perfetto_protos_InternedV8Isolate_DEFAULT NULL
#define perfetto_protos_InternedV8Isolate_code_range_MSGTYPE perfetto_protos_InternedV8Isolate_CodeRange

#define perfetto_protos_InternedV8Isolate_CodeRange_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   base_address,      1) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   embedded_blob_code_copy_start_address,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     is_process_wide,   4)
#define perfetto_protos_InternedV8Isolate_CodeRange_CALLBACK NULL
#define perfetto_protos_InternedV8Isolate_CodeRange_DEFAULT NULL

#define perfetto_protos_V8JsCode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_isolate_iid,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_js_function_iid,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    tier,              4) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_start,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_size_bytes,   6) \
X(a, CALLBACK, ONEOF,    BYTES,    (instructions,machine_code,instructions.machine_code),   7) \
X(a, CALLBACK, ONEOF,    BYTES,    (instructions,bytecode,instructions.bytecode),   8)
#define perfetto_protos_V8JsCode_CALLBACK pb_default_field_callback
#define perfetto_protos_V8JsCode_DEFAULT NULL

#define perfetto_protos_V8InternalCode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_isolate_iid,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              4) \
X(a, STATIC,   OPTIONAL, INT32,    builtin_id,        5) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_start,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_size_bytes,   7) \
X(a, CALLBACK, OPTIONAL, BYTES,    machine_code,      8)
#define perfetto_protos_V8InternalCode_CALLBACK pb_default_field_callback
#define perfetto_protos_V8InternalCode_DEFAULT NULL

#define perfetto_protos_V8WasmCode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_isolate_iid,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_wasm_script_iid,   3) \
X(a, CALLBACK, OPTIONAL, STRING,   function_name,     4) \
X(a, STATIC,   OPTIONAL, UENUM,    tier,              5) \
X(a, STATIC,   OPTIONAL, INT32,    code_offset_in_module,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_start,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_size_bytes,   8) \
X(a, CALLBACK, OPTIONAL, BYTES,    machine_code,      9)
#define perfetto_protos_V8WasmCode_CALLBACK pb_default_field_callback
#define perfetto_protos_V8WasmCode_DEFAULT NULL

#define perfetto_protos_V8RegExpCode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   v8_isolate_iid,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pattern,           3) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_start,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_size_bytes,   5) \
X(a, CALLBACK, OPTIONAL, BYTES,    machine_code,      6)
#define perfetto_protos_V8RegExpCode_CALLBACK pb_default_field_callback
#define perfetto_protos_V8RegExpCode_DEFAULT NULL
#define perfetto_protos_V8RegExpCode_pattern_MSGTYPE perfetto_protos_V8String

#define perfetto_protos_V8CodeMove_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   isolate_iid,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   from_instruction_start_address,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   to_instruction_start_address,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   instruction_size_bytes,   5) \
X(a, CALLBACK, ONEOF,    BYTES,    (to_instructions,to_machine_code,to_instructions.to_machine_code),   6) \
X(a, CALLBACK, ONEOF,    BYTES,    (to_instructions,to_bytecode,to_instructions.to_bytecode),   7)
#define perfetto_protos_V8CodeMove_CALLBACK pb_default_field_callback
#define perfetto_protos_V8CodeMove_DEFAULT NULL

#define perfetto_protos_V8CodeDefaults_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               1)
#define perfetto_protos_V8CodeDefaults_CALLBACK NULL
#define perfetto_protos_V8CodeDefaults_DEFAULT NULL

#define perfetto_protos_ClockSnapshot_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  clocks,            1) \
X(a, STATIC,   OPTIONAL, UENUM,    primary_trace_clock,   2)
#define perfetto_protos_ClockSnapshot_CALLBACK pb_default_field_callback
#define perfetto_protos_ClockSnapshot_DEFAULT NULL
#define perfetto_protos_ClockSnapshot_clocks_MSGTYPE perfetto_protos_ClockSnapshot_Clock

#define perfetto_protos_ClockSnapshot_Clock_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   clock_id,          1) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         2) \
X(a, STATIC,   OPTIONAL, BOOL,     is_incremental,    3) \
X(a, STATIC,   OPTIONAL, UINT64,   unit_multiplier_ns,   4)
#define perfetto_protos_ClockSnapshot_Clock_CALLBACK NULL
#define perfetto_protos_ClockSnapshot_Clock_DEFAULT NULL

#define perfetto_protos_CSwitchEtwEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   new_thread_id,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   old_thread_id,     2) \
X(a, STATIC,   OPTIONAL, SINT32,   new_thread_priority,   3) \
X(a, STATIC,   OPTIONAL, SINT32,   old_thread_priority,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   previous_c_state,   5) \
X(a, STATIC,   OPTIONAL, UENUM,    old_thread_wait_reason,   6) \
X(a, STATIC,   OPTIONAL, UENUM,    old_thread_wait_mode,   7) \
X(a, STATIC,   OPTIONAL, UENUM,    old_thread_state,   8) \
X(a, STATIC,   OPTIONAL, SINT32,   old_thread_wait_ideal_processor,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   new_thread_wait_time,  10)
#define perfetto_protos_CSwitchEtwEvent_CALLBACK NULL
#define perfetto_protos_CSwitchEtwEvent_DEFAULT NULL

#define perfetto_protos_ReadyThreadEtwEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   t_thread_id,       1) \
X(a, STATIC,   OPTIONAL, UENUM,    adjust_reason,     2) \
X(a, STATIC,   OPTIONAL, SINT32,   adjust_increment,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    flag,              4)
#define perfetto_protos_ReadyThreadEtwEvent_CALLBACK NULL
#define perfetto_protos_ReadyThreadEtwEvent_DEFAULT NULL

#define perfetto_protos_EtwTraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,c_switch,event.c_switch),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ready_thread,event.ready_thread),   3) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               4)
#define perfetto_protos_EtwTraceEvent_CALLBACK NULL
#define perfetto_protos_EtwTraceEvent_DEFAULT NULL
#define perfetto_protos_EtwTraceEvent_event_c_switch_MSGTYPE perfetto_protos_CSwitchEtwEvent
#define perfetto_protos_EtwTraceEvent_event_ready_thread_MSGTYPE perfetto_protos_ReadyThreadEtwEvent

#define perfetto_protos_EtwTraceEventBundle_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  event,             2)
#define perfetto_protos_EtwTraceEventBundle_CALLBACK pb_default_field_callback
#define perfetto_protos_EtwTraceEventBundle_DEFAULT NULL
#define perfetto_protos_EtwTraceEventBundle_event_MSGTYPE perfetto_protos_EtwTraceEvent

#define perfetto_protos_FileDescriptorSet_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  file,              1)
#define perfetto_protos_FileDescriptorSet_CALLBACK pb_default_field_callback
#define perfetto_protos_FileDescriptorSet_DEFAULT NULL
#define perfetto_protos_FileDescriptorSet_file_MSGTYPE perfetto_protos_FileDescriptorProto

#define perfetto_protos_FileDescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   package,           2) \
X(a, CALLBACK, REPEATED, STRING,   dependency,        3) \
X(a, CALLBACK, REPEATED, MESSAGE,  message_type,      4) \
X(a, CALLBACK, REPEATED, MESSAGE,  enum_type,         5) \
X(a, CALLBACK, REPEATED, MESSAGE,  extension,         7) \
X(a, CALLBACK, REPEATED, INT32,    public_dependency,  10) \
X(a, CALLBACK, REPEATED, INT32,    weak_dependency,  11)
#define perfetto_protos_FileDescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_FileDescriptorProto_DEFAULT NULL
#define perfetto_protos_FileDescriptorProto_message_type_MSGTYPE perfetto_protos_DescriptorProto
#define perfetto_protos_FileDescriptorProto_enum_type_MSGTYPE perfetto_protos_EnumDescriptorProto
#define perfetto_protos_FileDescriptorProto_extension_MSGTYPE perfetto_protos_FieldDescriptorProto

#define perfetto_protos_DescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  field,             2) \
X(a, CALLBACK, REPEATED, MESSAGE,  nested_type,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  enum_type,         4) \
X(a, CALLBACK, REPEATED, MESSAGE,  extension,         6) \
X(a, CALLBACK, REPEATED, MESSAGE,  oneof_decl,        8) \
X(a, CALLBACK, REPEATED, MESSAGE,  reserved_range,    9) \
X(a, CALLBACK, REPEATED, STRING,   reserved_name,    10)
#define perfetto_protos_DescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_DescriptorProto_DEFAULT NULL
#define perfetto_protos_DescriptorProto_field_MSGTYPE perfetto_protos_FieldDescriptorProto
#define perfetto_protos_DescriptorProto_nested_type_MSGTYPE perfetto_protos_DescriptorProto
#define perfetto_protos_DescriptorProto_enum_type_MSGTYPE perfetto_protos_EnumDescriptorProto
#define perfetto_protos_DescriptorProto_extension_MSGTYPE perfetto_protos_FieldDescriptorProto
#define perfetto_protos_DescriptorProto_oneof_decl_MSGTYPE perfetto_protos_OneofDescriptorProto
#define perfetto_protos_DescriptorProto_reserved_range_MSGTYPE perfetto_protos_DescriptorProto_ReservedRange

#define perfetto_protos_DescriptorProto_ReservedRange_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    start,             1) \
X(a, STATIC,   OPTIONAL, INT32,    end,               2)
#define perfetto_protos_DescriptorProto_ReservedRange_CALLBACK NULL
#define perfetto_protos_DescriptorProto_ReservedRange_DEFAULT NULL

#define perfetto_protos_UninterpretedOption_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  name,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   identifier_value,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   positive_int_value,   4) \
X(a, STATIC,   OPTIONAL, INT64,    negative_int_value,   5) \
X(a, STATIC,   OPTIONAL, DOUBLE,   double_value,      6) \
X(a, CALLBACK, OPTIONAL, BYTES,    string_value,      7) \
X(a, CALLBACK, OPTIONAL, STRING,   aggregate_value,   8)
#define perfetto_protos_UninterpretedOption_CALLBACK pb_default_field_callback
#define perfetto_protos_UninterpretedOption_DEFAULT NULL
#define perfetto_protos_UninterpretedOption_name_MSGTYPE perfetto_protos_UninterpretedOption_NamePart

#define perfetto_protos_UninterpretedOption_NamePart_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name_part,         1) \
X(a, STATIC,   OPTIONAL, BOOL,     is_extension,      2)
#define perfetto_protos_UninterpretedOption_NamePart_CALLBACK pb_default_field_callback
#define perfetto_protos_UninterpretedOption_NamePart_DEFAULT NULL

#define perfetto_protos_FieldOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     packed,            2) \
X(a, CALLBACK, REPEATED, MESSAGE,  uninterpreted_option, 999)
#define perfetto_protos_FieldOptions_CALLBACK pb_default_field_callback
#define perfetto_protos_FieldOptions_DEFAULT NULL
#define perfetto_protos_FieldOptions_uninterpreted_option_MSGTYPE perfetto_protos_UninterpretedOption

#define perfetto_protos_FieldDescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   extendee,          2) \
X(a, STATIC,   OPTIONAL, INT32,    number,            3) \
X(a, STATIC,   OPTIONAL, UENUM,    label,             4) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   type_name,         6) \
X(a, CALLBACK, OPTIONAL, STRING,   default_value,     7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  options,           8) \
X(a, STATIC,   OPTIONAL, INT32,    oneof_index,       9)
#define perfetto_protos_FieldDescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_FieldDescriptorProto_DEFAULT (const pb_byte_t*)"\x20\x01\x28\x01\x00"
#define perfetto_protos_FieldDescriptorProto_options_MSGTYPE perfetto_protos_FieldOptions

#define perfetto_protos_OneofDescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  options,           2)
#define perfetto_protos_OneofDescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_OneofDescriptorProto_DEFAULT NULL
#define perfetto_protos_OneofDescriptorProto_options_MSGTYPE perfetto_protos_OneofOptions

#define perfetto_protos_EnumDescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  value,             2) \
X(a, CALLBACK, REPEATED, STRING,   reserved_name,     5)
#define perfetto_protos_EnumDescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_EnumDescriptorProto_DEFAULT NULL
#define perfetto_protos_EnumDescriptorProto_value_MSGTYPE perfetto_protos_EnumValueDescriptorProto

#define perfetto_protos_EnumValueDescriptorProto_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT32,    number,            2)
#define perfetto_protos_EnumValueDescriptorProto_CALLBACK pb_default_field_callback
#define perfetto_protos_EnumValueDescriptorProto_DEFAULT NULL

#define perfetto_protos_OneofOptions_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define perfetto_protos_OneofOptions_CALLBACK pb_default_field_callback
#define perfetto_protos_OneofOptions_DEFAULT NULL

#define perfetto_protos_ExtensionDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  extension_set,     1)
#define perfetto_protos_ExtensionDescriptor_CALLBACK NULL
#define perfetto_protos_ExtensionDescriptor_DEFAULT NULL
#define perfetto_protos_ExtensionDescriptor_extension_set_MSGTYPE perfetto_protos_FileDescriptorSet

#define perfetto_protos_InodeFileMap_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   block_device_id,   1) \
X(a, CALLBACK, REPEATED, STRING,   mount_points,      2) \
X(a, CALLBACK, REPEATED, MESSAGE,  entries,           3)
#define perfetto_protos_InodeFileMap_CALLBACK pb_default_field_callback
#define perfetto_protos_InodeFileMap_DEFAULT NULL
#define perfetto_protos_InodeFileMap_entries_MSGTYPE perfetto_protos_InodeFileMap_Entry

#define perfetto_protos_InodeFileMap_Entry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   inode_number,      1) \
X(a, CALLBACK, REPEATED, STRING,   paths,             2) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              3)
#define perfetto_protos_InodeFileMap_Entry_CALLBACK pb_default_field_callback
#define perfetto_protos_InodeFileMap_Entry_DEFAULT NULL

#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    bytes,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3)
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    bytes,             1) \
X(a, CALLBACK, OPTIONAL, STRING,   cmdline,           2) \
X(a, STATIC,   OPTIONAL, INT64,    i_size,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               4) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            5) \
X(a, CALLBACK, OPTIONAL, STRING,   pathbuf,           6) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               7)
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    bytes,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3)
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    bytes,             1) \
X(a, CALLBACK, OPTIONAL, STRING,   cmdline,           2) \
X(a, STATIC,   OPTIONAL, INT64,    i_size,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               4) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            5) \
X(a, CALLBACK, OPTIONAL, STRING,   pathbuf,           6) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               7)
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    bytes,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3)
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   cmdline,           1) \
X(a, STATIC,   OPTIONAL, INT64,    i_size,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   pathbuf,           4) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               5)
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_BclIrqTriggerFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    throttle,          2) \
X(a, STATIC,   OPTIONAL, INT32,    cpu0_limit,        3) \
X(a, STATIC,   OPTIONAL, INT32,    cpu1_limit,        4) \
X(a, STATIC,   OPTIONAL, INT32,    cpu2_limit,        5) \
X(a, STATIC,   OPTIONAL, INT32,    tpu_limit,         6) \
X(a, STATIC,   OPTIONAL, INT32,    gpu_limit,         7) \
X(a, STATIC,   OPTIONAL, INT32,    voltage,           8) \
X(a, STATIC,   OPTIONAL, INT32,    capacity,          9)
#define perfetto_protos_BclIrqTriggerFtraceEvent_CALLBACK NULL
#define perfetto_protos_BclIrqTriggerFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderTransactionFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    debug_id,          1) \
X(a, STATIC,   OPTIONAL, INT32,    target_node,       2) \
X(a, STATIC,   OPTIONAL, INT32,    to_proc,           3) \
X(a, STATIC,   OPTIONAL, INT32,    to_thread,         4) \
X(a, STATIC,   OPTIONAL, INT32,    reply,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   code,              6) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             7)
#define perfetto_protos_BinderTransactionFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderTransactionFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderTransactionReceivedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    debug_id,          1)
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderSetPriorityFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    proc,              1) \
X(a, STATIC,   OPTIONAL, INT32,    thread,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   old_prio,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   new_prio,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   desired_prio,      5)
#define perfetto_protos_BinderSetPriorityFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderSetPriorityFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderLockFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               1)
#define perfetto_protos_BinderLockFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BinderLockFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderLockedFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               1)
#define perfetto_protos_BinderLockedFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BinderLockedFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderUnlockFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               1)
#define perfetto_protos_BinderUnlockFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BinderUnlockFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   data_size,         1) \
X(a, STATIC,   OPTIONAL, INT32,    debug_id,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   offsets_size,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   extra_buffers_size,   4)
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderCommandFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cmd,               1)
#define perfetto_protos_BinderCommandFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderCommandFtraceEvent_DEFAULT NULL

#define perfetto_protos_BinderReturnFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cmd,               1)
#define perfetto_protos_BinderReturnFtraceEvent_CALLBACK NULL
#define perfetto_protos_BinderReturnFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqIssueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   bytes,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              6) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               7)
#define perfetto_protos_BlockRqIssueFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqIssueFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioBackmergeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockBioBackmergeFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioBackmergeFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioBounceFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockBioBounceFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioBounceFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioCompleteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, INT32,    error,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5)
#define perfetto_protos_BlockBioCompleteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioCompleteFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioFrontmergeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioQueueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockBioQueueFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioQueueFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockBioRemapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   old_dev,           4) \
X(a, STATIC,   OPTIONAL, UINT64,   old_sector,        5) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              6)
#define perfetto_protos_BlockBioRemapFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockBioRemapFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockDirtyBufferFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_BlockDirtyBufferFtraceEvent_CALLBACK NULL
#define perfetto_protos_BlockDirtyBufferFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockGetrqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockGetrqFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockGetrqFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockPlugFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1)
#define perfetto_protos_BlockPlugFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockPlugFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqAbortFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, INT32,    errors,            4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               6)
#define perfetto_protos_BlockRqAbortFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqAbortFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqCompleteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, INT32,    errors,            4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               6) \
X(a, STATIC,   OPTIONAL, INT32,    error,             7)
#define perfetto_protos_BlockRqCompleteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqCompleteFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqInsertFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   bytes,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              6) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               7)
#define perfetto_protos_BlockRqInsertFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqInsertFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqRemapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   old_dev,           4) \
X(a, STATIC,   OPTIONAL, UINT64,   old_sector,        5) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_bios,           6) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              7)
#define perfetto_protos_BlockRqRemapFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqRemapFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockRqRequeueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, INT32,    errors,            4) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              5) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               6)
#define perfetto_protos_BlockRqRequeueFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockRqRequeueFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockSleeprqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockSleeprqFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockSleeprqFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockSplitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   new_sector,        3) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              5)
#define perfetto_protos_BlockSplitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockSplitFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockTouchBufferFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_BlockTouchBufferFtraceEvent_CALLBACK NULL
#define perfetto_protos_BlockTouchBufferFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockUnplugFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nr_rq,             1) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              2)
#define perfetto_protos_BlockUnplugFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockUnplugFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockIoStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   bytes,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   ioprio,            5) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              6) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              7) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               8)
#define perfetto_protos_BlockIoStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockIoStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_BlockIoDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_sector,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   bytes,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   ioprio,            5) \
X(a, CALLBACK, OPTIONAL, STRING,   rwbs,              6) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              7) \
X(a, CALLBACK, OPTIONAL, STRING,   cmd,               8)
#define perfetto_protos_BlockIoDoneFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_BlockIoDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupAttachTaskFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    dst_root,          1) \
X(a, STATIC,   OPTIONAL, INT32,    dst_id,            2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             5) \
X(a, STATIC,   OPTIONAL, INT32,    dst_level,         6) \
X(a, CALLBACK, OPTIONAL, STRING,   dst_path,          7)
#define perfetto_protos_CgroupAttachTaskFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupAttachTaskFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupMkdirFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, INT32,    id,                2) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             3) \
X(a, STATIC,   OPTIONAL, INT32,    level,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              5)
#define perfetto_protos_CgroupMkdirFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupMkdirFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupRemountFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   ss_mask,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3)
#define perfetto_protos_CgroupRemountFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupRemountFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupRmdirFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, INT32,    id,                2) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             3) \
X(a, STATIC,   OPTIONAL, INT32,    level,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              5)
#define perfetto_protos_CgroupRmdirFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupRmdirFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupTransferTasksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    dst_root,          1) \
X(a, STATIC,   OPTIONAL, INT32,    dst_id,            2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             5) \
X(a, STATIC,   OPTIONAL, INT32,    dst_level,         6) \
X(a, CALLBACK, OPTIONAL, STRING,   dst_path,          7)
#define perfetto_protos_CgroupTransferTasksFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupTransferTasksFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupDestroyRootFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   ss_mask,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3)
#define perfetto_protos_CgroupDestroyRootFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupDestroyRootFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupReleaseFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, INT32,    id,                2) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             3) \
X(a, STATIC,   OPTIONAL, INT32,    level,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              5)
#define perfetto_protos_CgroupReleaseFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupReleaseFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupRenameFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, INT32,    id,                2) \
X(a, CALLBACK, OPTIONAL, STRING,   cname,             3) \
X(a, STATIC,   OPTIONAL, INT32,    level,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              5)
#define perfetto_protos_CgroupRenameFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupRenameFtraceEvent_DEFAULT NULL

#define perfetto_protos_CgroupSetupRootFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    root,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   ss_mask,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3)
#define perfetto_protos_CgroupSetupRootFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CgroupSetupRootFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClkEnableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_ClkEnableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClkEnableFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClkDisableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_ClkDisableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClkDisableFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClkSetRateFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   rate,              2)
#define perfetto_protos_ClkSetRateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClkSetRateFtraceEvent_DEFAULT NULL

#define perfetto_protos_CmaAllocStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   count,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              3)
#define perfetto_protos_CmaAllocStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CmaAllocStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_CmaAllocInfoFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   count,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   err_iso,           3) \
X(a, STATIC,   OPTIONAL, UINT32,   err_mig,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   err_test,          5) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              6) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_mapped,         7) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_migrated,       8) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_reclaimed,      9) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,              10)
#define perfetto_protos_CmaAllocInfoFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CmaAllocInfoFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   zone_start,        1) \
X(a, STATIC,   OPTIONAL, UINT64,   migrate_pfn,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   free_pfn,          3) \
X(a, STATIC,   OPTIONAL, UINT64,   zone_end,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   sync,              5)
#define perfetto_protos_MmCompactionBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    order,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   considered,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   defer_shift,       5) \
X(a, STATIC,   OPTIONAL, INT32,    order_failed,      6)
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionDeferredFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    order,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   considered,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   defer_shift,       5) \
X(a, STATIC,   OPTIONAL, INT32,    order_failed,      6)
#define perfetto_protos_MmCompactionDeferredFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionDeferredFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionDeferResetFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    order,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   considered,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   defer_shift,       5) \
X(a, STATIC,   OPTIONAL, INT32,    order_failed,      6)
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   zone_start,        1) \
X(a, STATIC,   OPTIONAL, UINT64,   migrate_pfn,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   free_pfn,          3) \
X(a, STATIC,   OPTIONAL, UINT64,   zone_end,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   sync,              5) \
X(a, STATIC,   OPTIONAL, INT32,    status,            6)
#define perfetto_protos_MmCompactionEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionFinishedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    order,             3) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               4)
#define perfetto_protos_MmCompactionFinishedFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionFinishedFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   start_pfn,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   end_pfn,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_scanned,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_taken,          4)
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   start_pfn,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   end_pfn,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_scanned,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_taken,          4)
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1)
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    order,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   classzone_idx,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   highest_zoneidx,   4)
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_migrated,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_failed,         2)
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionSuitableFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    order,             3) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               4)
#define perfetto_protos_MmCompactionSuitableFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionSuitableFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    order,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_mask,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              3) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              4)
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    order,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   classzone_idx,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   highest_zoneidx,   4)
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_DEFAULT NULL

#define perfetto_protos_ParamSetValueCpmFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   body,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   value,             2) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,         3)
#define perfetto_protos_ParamSetValueCpmFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ParamSetValueCpmFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuhpExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, STATIC,   OPTIONAL, INT32,    idx,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3) \
X(a, STATIC,   OPTIONAL, INT32,    state,             4)
#define perfetto_protos_CpuhpExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuhpExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuhpMultiEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   fun,               2) \
X(a, STATIC,   OPTIONAL, INT32,    idx,               3) \
X(a, STATIC,   OPTIONAL, INT32,    target,            4)
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuhpEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   fun,               2) \
X(a, STATIC,   OPTIONAL, INT32,    idx,               3) \
X(a, STATIC,   OPTIONAL, INT32,    target,            4)
#define perfetto_protos_CpuhpEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuhpEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuhpLatencyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   time,              4)
#define perfetto_protos_CpuhpLatencyFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuhpLatencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuhpPauseFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   active_cpus,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   cpus,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   pause,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   time,              4)
#define perfetto_protos_CpuhpPauseFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuhpPauseFtraceEvent_DEFAULT NULL

#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    current_time,      1) \
X(a, STATIC,   OPTIONAL, INT64,    current_timestamp,   2) \
X(a, STATIC,   OPTIONAL, INT64,    delta,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   ec_fifo_timestamp,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   ec_sensor_num,     5) \
X(a, STATIC,   OPTIONAL, INT64,    fifo_timestamp,    6)
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_CALLBACK NULL
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_DEFAULT NULL

#define perfetto_protos_DcvshFreqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   freq,              2)
#define perfetto_protos_DcvshFreqFtraceEvent_CALLBACK NULL
#define perfetto_protos_DcvshFreqFtraceEvent_DEFAULT NULL

#define perfetto_protos_DevfreqFrequencyFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   dev_name,          1) \
X(a, STATIC,   OPTIONAL, UINT64,   freq,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   prev_freq,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   busy_time,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   total_time,        5)
#define perfetto_protos_DevfreqFrequencyFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DevfreqFrequencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaFenceInitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_DmaFenceInitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DmaFenceInitFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaFenceEmitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_DmaFenceEmitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DmaFenceEmitFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaFenceSignaledFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_DmaFenceSignaledFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DmaFenceSignaledFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaFenceWaitStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaFenceWaitEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaHeapStatFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   inode,             1) \
X(a, STATIC,   OPTIONAL, INT64,    len,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   total_allocated,   3)
#define perfetto_protos_DmaHeapStatFtraceEvent_CALLBACK NULL
#define perfetto_protos_DmaHeapStatFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_name,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_begin,       3) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              5) \
X(a, STATIC,   OPTIONAL, INT32,    value,             6)
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   header,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   payload,           2)
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_CALLBACK NULL
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuDsiRxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cmd,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   rx_buf,            2)
#define perfetto_protos_DpuDsiRxFtraceEvent_CALLBACK NULL
#define perfetto_protos_DpuDsiRxFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuDsiTxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   tx_buf,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   last,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   delay_ms,          4)
#define perfetto_protos_DpuDsiTxFtraceEvent_CALLBACK NULL
#define perfetto_protos_DpuDsiTxFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    frames_pending,    2) \
X(a, STATIC,   OPTIONAL, INT32,    vsync_count,       3)
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_CALLBACK NULL
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_DEFAULT NULL

#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    output_id,         2) \
X(a, STATIC,   OPTIONAL, INT32,    enable,            3)
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_CALLBACK NULL
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_DEFAULT NULL

#define perfetto_protos_DrmVblankEventFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    crtc,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   high_prec,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   seq,               3) \
X(a, STATIC,   OPTIONAL, INT64,    time,              4)
#define perfetto_protos_DrmVblankEventFtraceEvent_CALLBACK NULL
#define perfetto_protos_DrmVblankEventFtraceEvent_DEFAULT NULL

#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    crtc,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   file,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   seq,               3)
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_CALLBACK NULL
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaWriteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   copied,            5)
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   parent,            3) \
X(a, STATIC,   OPTIONAL, INT32,    datasync,          4)
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4SyncFileExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   data_blocks,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   meta_blocks,       4)
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   block,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   logical,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   lleft,             6) \
X(a, STATIC,   OPTIONAL, UINT32,   lright,            7) \
X(a, STATIC,   OPTIONAL, UINT64,   goal,              8) \
X(a, STATIC,   OPTIONAL, UINT64,   pleft,             9) \
X(a, STATIC,   OPTIONAL, UINT64,   pright,           10) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,            11)
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4AllocateInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   dir,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              4)
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    new_size,          3)
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4CollapseRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4)
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   i_blocks,          3) \
X(a, STATIC,   OPTIONAL, INT32,    freed_blocks,      4) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_data_blocks,   5) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_meta_blocks,   6) \
X(a, STATIC,   OPTIONAL, INT32,    allocated_meta_blocks,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              8)
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   i_blocks,          3) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_data_blocks,   4) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_meta_blocks,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              6) \
X(a, STATIC,   OPTIONAL, INT32,    md_needed,         7)
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   i_blocks,          3) \
X(a, STATIC,   OPTIONAL, INT32,    used_blocks,       4) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_data_blocks,   5) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_meta_blocks,   6) \
X(a, STATIC,   OPTIONAL, INT32,    allocated_meta_blocks,   7) \
X(a, STATIC,   OPTIONAL, INT32,    quota_claim,       8) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              9)
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaWritePagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   first_page,        3) \
X(a, STATIC,   OPTIONAL, INT64,    nr_to_write,       4) \
X(a, STATIC,   OPTIONAL, INT32,    sync_mode,         5) \
X(a, STATIC,   OPTIONAL, UINT64,   b_blocknr,         6) \
X(a, STATIC,   OPTIONAL, UINT32,   b_size,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   b_state,           8) \
X(a, STATIC,   OPTIONAL, INT32,    io_done,           9) \
X(a, STATIC,   OPTIONAL, INT32,    pages_written,    10)
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4) \
X(a, STATIC,   OPTIONAL, INT32,    rw,                5)
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DirectIOExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4) \
X(a, STATIC,   OPTIONAL, INT32,    rw,                5) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               6)
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   blk,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   count,             3)
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   needed,            4)
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4DropInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    drop,              3)
#define perfetto_protos_Ext4DropInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4DropInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   status,            6)
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3)
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   status,            6)
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   status,            6)
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3)
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   status,            6) \
X(a, STATIC,   OPTIONAL, INT32,    found,             7)
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    lblk,              3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4)
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsShrinkFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    nr_shrunk,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   scan_time,         3) \
X(a, STATIC,   OPTIONAL, INT32,    nr_skipped,        4) \
X(a, STATIC,   OPTIONAL, INT32,    retried,           5)
#define perfetto_protos_Ext4EsShrinkFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsShrinkFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    nr_to_scan,        2) \
X(a, STATIC,   OPTIONAL, INT32,    cache_cnt,         3)
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    nr_to_scan,        2) \
X(a, STATIC,   OPTIONAL, INT32,    cache_cnt,         3)
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    nr_shrunk,         2) \
X(a, STATIC,   OPTIONAL, INT32,    cache_cnt,         3)
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4EvictInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    nlink,             3)
#define perfetto_protos_Ext4EvictInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4EvictInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   m_lblk,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   m_len,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   u_lblk,            5) \
X(a, STATIC,   OPTIONAL, UINT32,   u_len,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   u_pblk,            7)
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   m_lblk,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   m_len,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   u_lblk,            5) \
X(a, STATIC,   OPTIONAL, UINT32,   u_len,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   u_pblk,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   i_lblk,            8) \
X(a, STATIC,   OPTIONAL, UINT32,   i_len,             9) \
X(a, STATIC,   OPTIONAL, UINT64,   i_pblk,           10)
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              4) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   allocated,         7) \
X(a, STATIC,   OPTIONAL, UINT64,   newblk,            8)
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtInCacheFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               4)
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              4)
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   mflags,            7) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               8)
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             5)
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   start,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   end,               4) \
X(a, STATIC,   OPTIONAL, INT32,    depth,             5)
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   start,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   end,               4) \
X(a, STATIC,   OPTIONAL, INT32,    depth,             5) \
X(a, STATIC,   OPTIONAL, INT64,    partial,           6) \
X(a, STATIC,   OPTIONAL, UINT32,   eh_entries,        7) \
X(a, STATIC,   OPTIONAL, UINT32,   pc_lblk,           8) \
X(a, STATIC,   OPTIONAL, UINT64,   pc_pclu,           9) \
X(a, STATIC,   OPTIONAL, INT32,    pc_state,         10)
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              3)
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    partial,           3) \
X(a, STATIC,   OPTIONAL, UINT32,   start,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   ee_lblk,           5) \
X(a, STATIC,   OPTIONAL, UINT64,   ee_pblk,           6) \
X(a, STATIC,   OPTIONAL, INT32,    ee_len,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   pc_lblk,           8) \
X(a, STATIC,   OPTIONAL, UINT64,   pc_pclu,           9) \
X(a, STATIC,   OPTIONAL, INT32,    pc_state,         10)
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5)
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4FallocateEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              5) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               6)
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4FallocateExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   blocks,            4) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               5)
#define perfetto_protos_Ext4FallocateExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4FallocateExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   from,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   to,                4) \
X(a, STATIC,   OPTIONAL, INT32,    reverse,           5) \
X(a, STATIC,   OPTIONAL, INT32,    found,             6) \
X(a, STATIC,   OPTIONAL, UINT32,   found_blk,         7)
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ForgetFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   block,             3) \
X(a, STATIC,   OPTIONAL, INT32,    is_metadata,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              5)
#define perfetto_protos_Ext4ForgetFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ForgetFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4FreeBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   block,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   count,             4) \
X(a, STATIC,   OPTIONAL, INT32,    flags,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              6)
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4FreeInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   uid,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   gid,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            5) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              6)
#define perfetto_protos_Ext4FreeInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4FreeInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               6)
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4)
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   pblk,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   lblk,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   mflags,            7) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               8)
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4InsertRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4)
#define perfetto_protos_Ext4InsertRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4InsertRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4InvalidatepageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   offset,            4) \
X(a, STATIC,   OPTIONAL, UINT32,   length,            5)
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4JournalStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ip,                2) \
X(a, STATIC,   OPTIONAL, INT32,    blocks,            3) \
X(a, STATIC,   OPTIONAL, INT32,    rsv_blocks,        4) \
X(a, STATIC,   OPTIONAL, INT32,    nblocks,           5) \
X(a, STATIC,   OPTIONAL, INT32,    revoke_creds,      6)
#define perfetto_protos_Ext4JournalStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4JournalStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ip,                2) \
X(a, STATIC,   OPTIONAL, INT32,    blocks,            3)
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   offset,            4) \
X(a, STATIC,   OPTIONAL, UINT32,   length,            5)
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   copied,            5)
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4LoadInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2)
#define perfetto_protos_Ext4LoadInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4LoadInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             2)
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   ip,                3)
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             2)
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             2)
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    needed,            2)
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pa_pstart,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   pa_lstart,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   pa_len,            5)
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pa_pstart,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   pa_lstart,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   pa_len,            5)
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   pa_pstart,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   pa_len,            3)
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   block,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   count,             4)
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MballocAllocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   orig_logical,      3) \
X(a, STATIC,   OPTIONAL, INT32,    orig_start,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   orig_group,        5) \
X(a, STATIC,   OPTIONAL, INT32,    orig_len,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   goal_logical,      7) \
X(a, STATIC,   OPTIONAL, INT32,    goal_start,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   goal_group,        9) \
X(a, STATIC,   OPTIONAL, INT32,    goal_len,         10) \
X(a, STATIC,   OPTIONAL, UINT32,   result_logical,   11) \
X(a, STATIC,   OPTIONAL, INT32,    result_start,     12) \
X(a, STATIC,   OPTIONAL, UINT32,   result_group,     13) \
X(a, STATIC,   OPTIONAL, INT32,    result_len,       14) \
X(a, STATIC,   OPTIONAL, UINT32,   found,            15) \
X(a, STATIC,   OPTIONAL, UINT32,   groups,           16) \
X(a, STATIC,   OPTIONAL, UINT32,   buddy,            17) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,            18) \
X(a, STATIC,   OPTIONAL, UINT32,   tail,             19) \
X(a, STATIC,   OPTIONAL, UINT32,   cr,               20)
#define perfetto_protos_Ext4MballocAllocFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MballocAllocFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MballocDiscardFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    result_start,      3) \
X(a, STATIC,   OPTIONAL, UINT32,   result_group,      4) \
X(a, STATIC,   OPTIONAL, INT32,    result_len,        5)
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MballocFreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    result_start,      3) \
X(a, STATIC,   OPTIONAL, UINT32,   result_group,      4) \
X(a, STATIC,   OPTIONAL, INT32,    result_len,        5)
#define perfetto_protos_Ext4MballocFreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MballocFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4MballocPreallocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   orig_logical,      3) \
X(a, STATIC,   OPTIONAL, INT32,    orig_start,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   orig_group,        5) \
X(a, STATIC,   OPTIONAL, INT32,    orig_len,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   result_logical,    7) \
X(a, STATIC,   OPTIONAL, INT32,    result_start,      8) \
X(a, STATIC,   OPTIONAL, UINT32,   result_group,      9) \
X(a, STATIC,   OPTIONAL, INT32,    result_len,       10)
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   orig_ino,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   uid,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   gid,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              6)
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4PunchHoleFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              5)
#define perfetto_protos_Ext4PunchHoleFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4PunchHoleFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   prefetch,          3)
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ReadpageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3)
#define perfetto_protos_Ext4ReadpageFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ReadpageFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ReleasepageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3)
#define perfetto_protos_Ext4ReleasepageFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ReleasepageFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   from,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   to,                4) \
X(a, STATIC,   OPTIONAL, INT64,    partial,           5) \
X(a, STATIC,   OPTIONAL, UINT64,   ee_pblk,           6) \
X(a, STATIC,   OPTIONAL, UINT32,   ee_lblk,           7) \
X(a, STATIC,   OPTIONAL, UINT32,   ee_len,            8) \
X(a, STATIC,   OPTIONAL, UINT32,   pc_lblk,           9) \
X(a, STATIC,   OPTIONAL, UINT64,   pc_pclu,          10) \
X(a, STATIC,   OPTIONAL, INT32,    pc_state,         11)
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4RequestBlocksFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   logical,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   lleft,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   lright,            6) \
X(a, STATIC,   OPTIONAL, UINT64,   goal,              7) \
X(a, STATIC,   OPTIONAL, UINT64,   pleft,             8) \
X(a, STATIC,   OPTIONAL, UINT64,   pright,            9) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,            10)
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4RequestInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   dir,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              3)
#define perfetto_protos_Ext4RequestInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4RequestInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4SyncFsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    wait,              2)
#define perfetto_protos_Ext4SyncFsFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4SyncFsFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    dev_major,         1) \
X(a, STATIC,   OPTIONAL, INT32,    dev_minor,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             3) \
X(a, STATIC,   OPTIONAL, INT32,    start,             4) \
X(a, STATIC,   OPTIONAL, INT32,    len,               5)
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4TrimExtentFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    dev_major,         1) \
X(a, STATIC,   OPTIONAL, INT32,    dev_minor,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   group,             3) \
X(a, STATIC,   OPTIONAL, INT32,    start,             4) \
X(a, STATIC,   OPTIONAL, INT32,    len,               5)
#define perfetto_protos_Ext4TrimExtentFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4TrimExtentFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4TruncateEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            3)
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4TruncateExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            3)
#define perfetto_protos_Ext4TruncateExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4TruncateExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   parent,            3) \
X(a, STATIC,   OPTIONAL, INT64,    size,              4)
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4UnlinkExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4WriteBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_Ext4WriteBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4WriteBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4WriteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   copied,            5)
#define perfetto_protos_Ext4WriteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4WriteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4WritepageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3)
#define perfetto_protos_Ext4WritepageFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4WritepageFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4WritepagesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    nr_to_write,       3) \
X(a, STATIC,   OPTIONAL, INT64,    pages_skipped,     4) \
X(a, STATIC,   OPTIONAL, INT64,    range_start,       5) \
X(a, STATIC,   OPTIONAL, INT64,    range_end,         6) \
X(a, STATIC,   OPTIONAL, UINT64,   writeback_index,   7) \
X(a, STATIC,   OPTIONAL, INT32,    sync_mode,         8) \
X(a, STATIC,   OPTIONAL, UINT32,   for_kupdate,       9) \
X(a, STATIC,   OPTIONAL, UINT32,   range_cyclic,     10)
#define perfetto_protos_Ext4WritepagesFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4WritepagesFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4WritepagesResultFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3) \
X(a, STATIC,   OPTIONAL, INT32,    pages_written,     4) \
X(a, STATIC,   OPTIONAL, INT64,    pages_skipped,     5) \
X(a, STATIC,   OPTIONAL, UINT64,   writeback_index,   6) \
X(a, STATIC,   OPTIONAL, INT32,    sync_mode,         7)
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_DEFAULT NULL

#define perfetto_protos_Ext4ZeroRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            3) \
X(a, STATIC,   OPTIONAL, INT64,    len,               4) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              5)
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    btype,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   sync,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   sector,            4) \
X(a, STATIC,   OPTIONAL, UINT32,   size,              5)
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsEvictInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pino,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              4) \
X(a, STATIC,   OPTIONAL, INT64,    size,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   nlink,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   advise,            8)
#define perfetto_protos_F2fsEvictInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsEvictInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsFallocateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              3) \
X(a, STATIC,   OPTIONAL, INT64,    offset,            4) \
X(a, STATIC,   OPTIONAL, INT64,    len,               5) \
X(a, STATIC,   OPTIONAL, INT64,    size,              6) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            7) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               8)
#define perfetto_protos_F2fsFallocateFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsFallocateFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsGetDataBlockFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   iblock,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   bh_start,          4) \
X(a, STATIC,   OPTIONAL, UINT64,   bh_size,           5) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               6)
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsGetVictimFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    type,              2) \
X(a, STATIC,   OPTIONAL, INT32,    gc_type,           3) \
X(a, STATIC,   OPTIONAL, INT32,    alloc_mode,        4) \
X(a, STATIC,   OPTIONAL, INT32,    gc_mode,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   victim,            6) \
X(a, STATIC,   OPTIONAL, UINT32,   ofs_unit,          7) \
X(a, STATIC,   OPTIONAL, UINT32,   pre_victim,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   prefree,           9) \
X(a, STATIC,   OPTIONAL, UINT32,   free,             10) \
X(a, STATIC,   OPTIONAL, UINT32,   cost,             11)
#define perfetto_protos_F2fsGetVictimFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsGetVictimFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsIgetFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pino,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              4) \
X(a, STATIC,   OPTIONAL, INT64,    size,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   nlink,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   advise,            8)
#define perfetto_protos_F2fsIgetFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsIgetFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsIgetExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsIgetExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsIgetExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsNewInodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsNewInodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsNewInodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsReadpageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   blkaddr,           4) \
X(a, STATIC,   OPTIONAL, INT32,    type,              5) \
X(a, STATIC,   OPTIONAL, INT32,    dir,               6) \
X(a, STATIC,   OPTIONAL, INT32,    dirty,             7) \
X(a, STATIC,   OPTIONAL, INT32,    uptodate,          8)
#define perfetto_protos_F2fsReadpageFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsReadpageFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   nid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   ofs_in_node,       3)
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    type,              3) \
X(a, STATIC,   OPTIONAL, INT32,    dir,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             5) \
X(a, STATIC,   OPTIONAL, INT32,    dirty,             6) \
X(a, STATIC,   OPTIONAL, INT32,    uptodate,          7)
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    type,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   block,             5)
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pino,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              4) \
X(a, STATIC,   OPTIONAL, INT64,    size,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   nlink,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   advise,            8)
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsSyncFileExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   need_cp,           3) \
X(a, STATIC,   OPTIONAL, INT32,    datasync,          4) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               5) \
X(a, STATIC,   OPTIONAL, INT32,    cp_reason,         6)
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsSyncFsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    dirty,             2) \
X(a, STATIC,   OPTIONAL, INT32,    wait,              3)
#define perfetto_protos_F2fsSyncFsFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsSyncFsFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pino,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              4) \
X(a, STATIC,   OPTIONAL, INT64,    size,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   nlink,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   advise,            8)
#define perfetto_protos_F2fsTruncateFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    size,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   from,              5)
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   nid,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   ofs,               4) \
X(a, STATIC,   OPTIONAL, INT32,    free,              5)
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    size,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   from,              5)
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateNodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   nid,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   blk_addr,          4)
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   nid,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   blk_addr,          4)
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   nid,               3) \
X(a, STATIC,   OPTIONAL, INT32,    depth,             4) \
X(a, STATIC,   OPTIONAL, INT32,    err,               5)
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    size,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   blocks,            4) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              5)
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsUnlinkExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT32,    type,              3) \
X(a, STATIC,   OPTIONAL, INT32,    dir,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             5) \
X(a, STATIC,   OPTIONAL, INT32,    dirty,             6) \
X(a, STATIC,   OPTIONAL, INT32,    uptodate,          7)
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsWriteBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5)
#define perfetto_protos_F2fsWriteBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsWriteBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   is_umount,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   msg,               3) \
X(a, STATIC,   OPTIONAL, INT32,    reason,            4)
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsWriteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   ino,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pos,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   copied,            5)
#define perfetto_protos_F2fsWriteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsWriteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsIostatFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   app_bio,           1) \
X(a, STATIC,   OPTIONAL, UINT64,   app_brio,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   app_dio,           3) \
X(a, STATIC,   OPTIONAL, UINT64,   app_drio,          4) \
X(a, STATIC,   OPTIONAL, UINT64,   app_mio,           5) \
X(a, STATIC,   OPTIONAL, UINT64,   app_mrio,          6) \
X(a, STATIC,   OPTIONAL, UINT64,   app_rio,           7) \
X(a, STATIC,   OPTIONAL, UINT64,   app_wio,           8) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               9) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_cdrio,         10) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_cp_dio,        11) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_cp_mio,        12) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_cp_nio,        13) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_dio,           14) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_discard,       15) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_drio,          16) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_gc_dio,        17) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_gc_nio,        18) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_gdrio,         19) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_mio,           20) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_mrio,          21) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_nio,           22) \
X(a, STATIC,   OPTIONAL, UINT64,   fs_nrio,          23)
#define perfetto_protos_F2fsIostatFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsIostatFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsIostatLatencyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   d_rd_avg,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   d_rd_cnt,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   d_rd_peak,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_as_avg,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_as_cnt,       5) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_as_peak,      6) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_s_avg,        7) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_s_cnt,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   d_wr_s_peak,       9) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,              10) \
X(a, STATIC,   OPTIONAL, UINT32,   m_rd_avg,         11) \
X(a, STATIC,   OPTIONAL, UINT32,   m_rd_cnt,         12) \
X(a, STATIC,   OPTIONAL, UINT32,   m_rd_peak,        13) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_as_avg,      14) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_as_cnt,      15) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_as_peak,     16) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_s_avg,       17) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_s_cnt,       18) \
X(a, STATIC,   OPTIONAL, UINT32,   m_wr_s_peak,      19) \
X(a, STATIC,   OPTIONAL, UINT32,   n_rd_avg,         20) \
X(a, STATIC,   OPTIONAL, UINT32,   n_rd_cnt,         21) \
X(a, STATIC,   OPTIONAL, UINT32,   n_rd_peak,        22) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_as_avg,      23) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_as_cnt,      24) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_as_peak,     25) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_s_avg,       26) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_s_cnt,       27) \
X(a, STATIC,   OPTIONAL, UINT32,   n_wr_s_peak,      28)
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsBackgroundGcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   wait_ms,           2) \
X(a, STATIC,   OPTIONAL, UINT32,   prefree,           3) \
X(a, STATIC,   OPTIONAL, UINT32,   free,              4)
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsGcBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   sync,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   background,        3) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_nodes,       4) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_dents,       5) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_imeta,       6) \
X(a, STATIC,   OPTIONAL, UINT32,   free_sec,          7) \
X(a, STATIC,   OPTIONAL, UINT32,   free_seg,          8) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_seg,      9) \
X(a, STATIC,   OPTIONAL, UINT32,   prefree_seg,      10) \
X(a, STATIC,   OPTIONAL, INT32,    gc_type,          11) \
X(a, STATIC,   OPTIONAL, UINT32,   no_bg_gc,         12) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_free_secs,     13)
#define perfetto_protos_F2fsGcBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsGcBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_F2fsGcEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   dev,               1) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               2) \
X(a, STATIC,   OPTIONAL, INT32,    seg_freed,         3) \
X(a, STATIC,   OPTIONAL, INT32,    sec_freed,         4) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_nodes,       5) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_dents,       6) \
X(a, STATIC,   OPTIONAL, INT64,    dirty_imeta,       7) \
X(a, STATIC,   OPTIONAL, UINT32,   free_sec,          8) \
X(a, STATIC,   OPTIONAL, UINT32,   free_seg,          9) \
X(a, STATIC,   OPTIONAL, INT32,    reserved_seg,     10) \
X(a, STATIC,   OPTIONAL, UINT32,   prefree_seg,      11)
#define perfetto_protos_F2fsGcEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_F2fsGcEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_FastrpcDmaStatFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cid,               1) \
X(a, STATIC,   OPTIONAL, INT64,    len,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   total_allocated,   3)
#define perfetto_protos_FastrpcDmaStatFtraceEvent_CALLBACK NULL
#define perfetto_protos_FastrpcDmaStatFtraceEvent_DEFAULT NULL

#define perfetto_protos_FastrpcDmaFreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   phys,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_FastrpcDmaAllocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   phys,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   attr,              4) \
X(a, STATIC,   OPTIONAL, INT32,    mflags,            5)
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_CALLBACK NULL
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_DEFAULT NULL

#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   phys,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_CALLBACK NULL
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_DEFAULT NULL

#define perfetto_protos_FastrpcDmaMapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    fd,                2) \
X(a, STATIC,   OPTIONAL, UINT64,   phys,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              4) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   attr,              6) \
X(a, STATIC,   OPTIONAL, INT32,    mflags,            7)
#define perfetto_protos_FastrpcDmaMapFtraceEvent_CALLBACK NULL
#define perfetto_protos_FastrpcDmaMapFtraceEvent_DEFAULT NULL

#define perfetto_protos_FenceInitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_FenceInitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FenceInitFtraceEvent_DEFAULT NULL

#define perfetto_protos_FenceDestroyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_FenceDestroyFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FenceDestroyFtraceEvent_DEFAULT NULL

#define perfetto_protos_FenceEnableSignalFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_FenceEnableSignalFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FenceEnableSignalFtraceEvent_DEFAULT NULL

#define perfetto_protos_FenceSignaledFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   context,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          4)
#define perfetto_protos_FenceSignaledFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_FenceSignaledFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   i_ino,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   s_dev,             4) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              5)
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   i_ino,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   s_dev,             4) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              5)
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_DEFAULT NULL

#define perfetto_protos_DoSysOpenFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   filename,          1) \
X(a, STATIC,   OPTIONAL, INT32,    flags,             2) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              3)
#define perfetto_protos_DoSysOpenFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DoSysOpenFtraceEvent_DEFAULT NULL

#define perfetto_protos_OpenExecFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   filename,          1)
#define perfetto_protos_OpenExecFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_OpenExecFtraceEvent_DEFAULT NULL

#define perfetto_protos_PrintFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ip,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   buf,               2)
#define perfetto_protos_PrintFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_PrintFtraceEvent_DEFAULT NULL

#define perfetto_protos_FuncgraphEntryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    depth,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   func,              2)
#define perfetto_protos_FuncgraphEntryFtraceEvent_CALLBACK NULL
#define perfetto_protos_FuncgraphEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_FuncgraphExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   calltime,          1) \
X(a, STATIC,   OPTIONAL, INT32,    depth,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   func,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   overrun,           4) \
X(a, STATIC,   OPTIONAL, UINT64,   rettime,           5)
#define perfetto_protos_FuncgraphExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_FuncgraphExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              5) \
X(a, STATIC,   OPTIONAL, INT32,    value,             6)
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_GenericFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   event_name,        1) \
X(a, CALLBACK, REPEATED, MESSAGE,  field,             2)
#define perfetto_protos_GenericFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GenericFtraceEvent_DEFAULT NULL
#define perfetto_protos_GenericFtraceEvent_field_MSGTYPE perfetto_protos_GenericFtraceEvent_Field

#define perfetto_protos_GenericFtraceEvent_Field_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, ONEOF,    STRING,   (value,str_value,value.str_value),   3) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   4) \
X(a, STATIC,   ONEOF,    UINT64,   (value,uint_value,value.uint_value),   5)
#define perfetto_protos_GenericFtraceEvent_Field_CALLBACK pb_default_field_callback
#define perfetto_protos_GenericFtraceEvent_Field_DEFAULT NULL

#define perfetto_protos_KprobeEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              2)
#define perfetto_protos_KprobeEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_KprobeEvent_DEFAULT NULL

#define perfetto_protos_GoogleIccEventFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   event,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         2)
#define perfetto_protos_GoogleIccEventFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GoogleIccEventFtraceEvent_DEFAULT NULL

#define perfetto_protos_GoogleIrmEventFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   event,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         2)
#define perfetto_protos_GoogleIrmEventFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GoogleIrmEventFtraceEvent_DEFAULT NULL

#define perfetto_protos_GpuMemTotalFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   size,              3)
#define perfetto_protos_GpuMemTotalFtraceEvent_CALLBACK NULL
#define perfetto_protos_GpuMemTotalFtraceEvent_DEFAULT NULL

#define perfetto_protos_DrmSchedJobFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   entity,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   fence,             2) \
X(a, STATIC,   OPTIONAL, INT32,    hw_job_count,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                4) \
X(a, STATIC,   OPTIONAL, UINT32,   job_count,         5) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              6)
#define perfetto_protos_DrmSchedJobFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DrmSchedJobFtraceEvent_DEFAULT NULL

#define perfetto_protos_DrmRunJobFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   entity,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   fence,             2) \
X(a, STATIC,   OPTIONAL, INT32,    hw_job_count,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                4) \
X(a, STATIC,   OPTIONAL, UINT32,   job_count,         5) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              6)
#define perfetto_protos_DrmRunJobFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DrmRunJobFtraceEvent_DEFAULT NULL

#define perfetto_protos_DrmSchedProcessJobFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   fence,             1)
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_CALLBACK NULL
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_DEFAULT NULL

#define perfetto_protos_HypEnterFtraceEvent_FIELDLIST(X, a) \

#define perfetto_protos_HypEnterFtraceEvent_CALLBACK NULL
#define perfetto_protos_HypEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_HypExitFtraceEvent_FIELDLIST(X, a) \

#define perfetto_protos_HypExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_HypExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_HostHcallFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   invalid,           2)
#define perfetto_protos_HostHcallFtraceEvent_CALLBACK NULL
#define perfetto_protos_HostHcallFtraceEvent_DEFAULT NULL

#define perfetto_protos_HostSmcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   forwarded,         2)
#define perfetto_protos_HostSmcFtraceEvent_CALLBACK NULL
#define perfetto_protos_HostSmcFtraceEvent_DEFAULT NULL

#define perfetto_protos_HostMemAbortFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   esr,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   addr,              2)
#define perfetto_protos_HostMemAbortFtraceEvent_CALLBACK NULL
#define perfetto_protos_HostMemAbortFtraceEvent_DEFAULT NULL

#define perfetto_protos_I2cReadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   msg_nr,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5)
#define perfetto_protos_I2cReadFtraceEvent_CALLBACK NULL
#define perfetto_protos_I2cReadFtraceEvent_DEFAULT NULL

#define perfetto_protos_I2cWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   msg_nr,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   buf,               6)
#define perfetto_protos_I2cWriteFtraceEvent_CALLBACK NULL
#define perfetto_protos_I2cWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_I2cResultFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_msgs,           2) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               3)
#define perfetto_protos_I2cResultFtraceEvent_CALLBACK NULL
#define perfetto_protos_I2cResultFtraceEvent_DEFAULT NULL

#define perfetto_protos_I2cReplyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   msg_nr,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   buf,               6)
#define perfetto_protos_I2cReplyFtraceEvent_CALLBACK NULL
#define perfetto_protos_I2cReplyFtraceEvent_DEFAULT NULL

#define perfetto_protos_SmbusReadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   command,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          5)
#define perfetto_protos_SmbusReadFtraceEvent_CALLBACK NULL
#define perfetto_protos_SmbusReadFtraceEvent_DEFAULT NULL

#define perfetto_protos_SmbusWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   command,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          6)
#define perfetto_protos_SmbusWriteFtraceEvent_CALLBACK NULL
#define perfetto_protos_SmbusWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_SmbusResultFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   read_write,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   command,           5) \
X(a, STATIC,   OPTIONAL, INT32,    res,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          7)
#define perfetto_protos_SmbusResultFtraceEvent_CALLBACK NULL
#define perfetto_protos_SmbusResultFtraceEvent_DEFAULT NULL

#define perfetto_protos_SmbusReplyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    adapter_nr,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   addr,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   command,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          6)
#define perfetto_protos_SmbusReplyFtraceEvent_CALLBACK NULL
#define perfetto_protos_SmbusReplyFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonStatFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   buffer_id,         1) \
X(a, STATIC,   OPTIONAL, INT64,    len,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   total_allocated,   3)
#define perfetto_protos_IonStatFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonStatFtraceEvent_DEFAULT NULL

#define perfetto_protos_IpiEntryFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   reason,            1)
#define perfetto_protos_IpiEntryFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IpiEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_IpiExitFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   reason,            1)
#define perfetto_protos_IpiExitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IpiExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_IpiRaiseFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   target_cpus,       1) \
X(a, CALLBACK, OPTIONAL, STRING,   reason,            2)
#define perfetto_protos_IpiRaiseFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IpiRaiseFtraceEvent_DEFAULT NULL

#define perfetto_protos_SoftirqEntryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   vec,               1)
#define perfetto_protos_SoftirqEntryFtraceEvent_CALLBACK NULL
#define perfetto_protos_SoftirqEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_SoftirqExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   vec,               1)
#define perfetto_protos_SoftirqExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_SoftirqExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_SoftirqRaiseFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   vec,               1)
#define perfetto_protos_SoftirqRaiseFtraceEvent_CALLBACK NULL
#define perfetto_protos_SoftirqRaiseFtraceEvent_DEFAULT NULL

#define perfetto_protos_IrqHandlerEntryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    irq,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   handler,           3)
#define perfetto_protos_IrqHandlerEntryFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IrqHandlerEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_IrqHandlerExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    irq,               1) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               2)
#define perfetto_protos_IrqHandlerExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_IrqHandlerExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_KgslGpuFrequencyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_freq,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_id,            2)
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_CALLBACK NULL
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   queued,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   prio,              5)
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_CALLBACK NULL
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_DEFAULT NULL

#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         2) \
X(a, STATIC,   OPTIONAL, INT64,    inflight,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, STATIC,   OPTIONAL, UINT64,   ticks,             5) \
X(a, STATIC,   OPTIONAL, UINT64,   secs,              6) \
X(a, STATIC,   OPTIONAL, UINT64,   usecs,             7) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              8) \
X(a, STATIC,   OPTIONAL, INT32,    rb_id,             9) \
X(a, STATIC,   OPTIONAL, UINT32,   rptr,             10) \
X(a, STATIC,   OPTIONAL, UINT32,   wptr,             11) \
X(a, STATIC,   OPTIONAL, INT32,    q_inflight,       12) \
X(a, STATIC,   OPTIONAL, INT32,    dispatch_queue,   13)
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_CALLBACK NULL
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_DEFAULT NULL

#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   ticks,             3) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              4)
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_CALLBACK NULL
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_DEFAULT NULL

#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         2) \
X(a, STATIC,   OPTIONAL, INT64,    inflight,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   recovery,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   retire,            7) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              8) \
X(a, STATIC,   OPTIONAL, INT32,    rb_id,             9) \
X(a, STATIC,   OPTIONAL, UINT32,   rptr,             10) \
X(a, STATIC,   OPTIONAL, UINT32,   wptr,             11) \
X(a, STATIC,   OPTIONAL, INT32,    q_inflight,       12) \
X(a, STATIC,   OPTIONAL, UINT64,   fault_recovery,   13) \
X(a, STATIC,   OPTIONAL, UINT32,   dispatch_queue,   14) \
X(a, STATIC,   OPTIONAL, UINT64,   submitted_to_rb,  15) \
X(a, STATIC,   OPTIONAL, UINT64,   retired_on_gmu,   16) \
X(a, STATIC,   OPTIONAL, UINT64,   active,           17)
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_CALLBACK NULL
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesIommuEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesIommuFailFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesIommuStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesSysEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesSysEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesSysEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesSysFailFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesSysFailFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesSysFailFtraceEvent_DEFAULT NULL

#define perfetto_protos_AllocPagesSysStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2)
#define perfetto_protos_AllocPagesSysStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_AllocPagesSysStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tries,             1)
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_CALLBACK NULL
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_DEFAULT NULL

#define perfetto_protos_IommuMapRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   chunk_size,        1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   pa,                3) \
X(a, STATIC,   OPTIONAL, UINT64,   va,                4)
#define perfetto_protos_IommuMapRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_IommuMapRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               1) \
X(a, STATIC,   OPTIONAL, INT32,    num,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   pa,                3) \
X(a, STATIC,   OPTIONAL, INT32,    sec_id,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   va,                5)
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               1) \
X(a, STATIC,   OPTIONAL, INT32,    num,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   pa,                3) \
X(a, STATIC,   OPTIONAL, INT32,    sec_id,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   va,                5)
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonAllocBufferEndFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   client_name,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   mask,              5)
#define perfetto_protos_IonAllocBufferEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonAllocBufferEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonAllocBufferFailFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   client_name,       1) \
X(a, STATIC,   OPTIONAL, INT64,    error,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   mask,              6)
#define perfetto_protos_IonAllocBufferFailFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonAllocBufferFailFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   client_name,       1) \
X(a, STATIC,   OPTIONAL, INT64,    error,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   mask,              6)
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonAllocBufferStartFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   client_name,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   mask,              5)
#define perfetto_protos_IonAllocBufferStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonAllocBufferStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonCpAllocRetryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tries,             1)
#define perfetto_protos_IonCpAllocRetryFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonCpAllocRetryFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4)
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4)
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonPrefetchingFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               1)
#define perfetto_protos_IonPrefetchingFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonPrefetchingFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   is_prefetch,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, INT32,    pool_total,        3)
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   is_prefetch,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, INT32,    pool_total,        3)
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4)
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   align,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   flags,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               4)
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   drained_size,      1) \
X(a, STATIC,   OPTIONAL, UINT64,   skipped_size,      2)
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   drained_size,      1) \
X(a, STATIC,   OPTIONAL, UINT64,   skipped_size,      2)
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_KfreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               2)
#define perfetto_protos_KfreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_KfreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_KmallocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_alloc,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_req,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               5)
#define perfetto_protos_KmallocFtraceEvent_CALLBACK NULL
#define perfetto_protos_KmallocFtraceEvent_DEFAULT NULL

#define perfetto_protos_KmallocNodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_alloc,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_req,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         4) \
X(a, STATIC,   OPTIONAL, INT32,    node,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               6)
#define perfetto_protos_KmallocNodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_KmallocNodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_KmemCacheAllocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_alloc,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_req,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               5)
#define perfetto_protos_KmemCacheAllocFtraceEvent_CALLBACK NULL
#define perfetto_protos_KmemCacheAllocFtraceEvent_DEFAULT NULL

#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_alloc,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_req,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         4) \
X(a, STATIC,   OPTIONAL, INT32,    node,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               6)
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_CALLBACK NULL
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_DEFAULT NULL

#define perfetto_protos_KmemCacheFreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   call_site,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   ptr,               2)
#define perfetto_protos_KmemCacheFreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_KmemCacheFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_MigratePagesEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              1)
#define perfetto_protos_MigratePagesEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_MigratePagesEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_MigratePagesStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    mode,              1)
#define perfetto_protos_MigratePagesStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_MigratePagesStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_MigrateRetryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tries,             1)
#define perfetto_protos_MigrateRetryFtraceEvent_CALLBACK NULL
#define perfetto_protos_MigrateRetryFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPageAllocFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         1) \
X(a, STATIC,   OPTIONAL, INT32,    migratetype,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              4) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               5)
#define perfetto_protos_MmPageAllocFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPageAllocFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPageAllocExtfragFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    alloc_migratetype,   1) \
X(a, STATIC,   OPTIONAL, INT32,    alloc_order,       2) \
X(a, STATIC,   OPTIONAL, INT32,    fallback_migratetype,   3) \
X(a, STATIC,   OPTIONAL, INT32,    fallback_order,    4) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              5) \
X(a, STATIC,   OPTIONAL, INT32,    change_ownership,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               7)
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    migratetype,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               4)
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPageFreeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               3)
#define perfetto_protos_MmPageFreeFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPageFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPageFreeBatchedFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    cold,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               3)
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmPagePcpuDrainFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    migratetype,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   order,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   page,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   pfn,               4)
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_DEFAULT NULL

#define perfetto_protos_RssStatFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    member,            1) \
X(a, STATIC,   OPTIONAL, INT64,    size,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   curr,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   mm_id,             4)
#define perfetto_protos_RssStatFtraceEvent_CALLBACK NULL
#define perfetto_protos_RssStatFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonHeapShrinkFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, INT64,    total_allocated,   3)
#define perfetto_protos_IonHeapShrinkFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonHeapShrinkFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonHeapGrowFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, INT64,    total_allocated,   3)
#define perfetto_protos_IonHeapGrowFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_IonHeapGrowFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonBufferCreateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   addr,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2)
#define perfetto_protos_IonBufferCreateFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonBufferCreateFtraceEvent_DEFAULT NULL

#define perfetto_protos_IonBufferDestroyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   addr,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2)
#define perfetto_protos_IonBufferDestroyFtraceEvent_CALLBACK NULL
#define perfetto_protos_IonBufferDestroyFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmAccessFaultFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ipa,               1)
#define perfetto_protos_KvmAccessFaultFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmAccessFaultFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmAckIrqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   irqchip,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   pin,               2)
#define perfetto_protos_KvmAckIrqFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmAckIrqFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmAgeHvaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   end,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             2)
#define perfetto_protos_KvmAgeHvaFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmAgeHvaFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmAgePageFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   gfn,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   hva,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   level,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   referenced,        4)
#define perfetto_protos_KvmAgePageFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmAgePageFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmArmClearDebugFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   guest_debug,       1)
#define perfetto_protos_KvmArmClearDebugFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmArmClearDebugFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmArmSetDreg32FtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   value,             2)
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmArmSetRegsetFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    len,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmArmSetupDebugFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   guest_debug,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu,              2)
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmEntryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           1)
#define perfetto_protos_KvmEntryFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   esr_ec,            1) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           3)
#define perfetto_protos_KvmExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmFpuFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   load,              1)
#define perfetto_protos_KvmFpuFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmFpuFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmGetTimerMapFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    direct_ptimer,     1) \
X(a, STATIC,   OPTIONAL, INT32,    direct_vtimer,     2) \
X(a, STATIC,   OPTIONAL, INT32,    emul_ptimer,       3) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_id,           4)
#define perfetto_protos_KvmGetTimerMapFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmGetTimerMapFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmGuestFaultFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   hsr,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   hxfar,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   ipa,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           4)
#define perfetto_protos_KvmGuestFaultFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmGuestFaultFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmHandleSysRegFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   hsr,               1)
#define perfetto_protos_KvmHandleSysRegFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmHandleSysRegFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmHvcArm64FtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   imm,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   r0,                2) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           3)
#define perfetto_protos_KvmHvcArm64FtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmHvcArm64FtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmIrqLineFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    irq_num,           1) \
X(a, STATIC,   OPTIONAL, INT32,    level,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              3) \
X(a, STATIC,   OPTIONAL, INT32,    vcpu_idx,          4)
#define perfetto_protos_KvmIrqLineFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmIrqLineFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmMmioFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   gpa,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   val,               4)
#define perfetto_protos_KvmMmioFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmMmioFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmMmioEmulateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   cpsr,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   instr,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           3)
#define perfetto_protos_KvmMmioEmulateFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmMmioEmulateFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmSetGuestDebugFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   guest_debug,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu,              2)
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmSetIrqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gsi,               1) \
X(a, STATIC,   OPTIONAL, INT32,    irq_source_id,     2) \
X(a, STATIC,   OPTIONAL, INT32,    level,             3)
#define perfetto_protos_KvmSetIrqFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmSetIrqFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmSetSpteHvaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   hva,               1)
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmSetWayFlushFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cache,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           2)
#define perfetto_protos_KvmSetWayFlushFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmSetWayFlushFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmSysAccessFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   CRm,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   CRn,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   Op0,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   Op1,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   Op2,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   is_write,          6) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              7) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           8)
#define perfetto_protos_KvmSysAccessFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_KvmSysAccessFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTestAgeHvaFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   hva,               1)
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTimerEmulateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   should_fire,       1) \
X(a, STATIC,   OPTIONAL, INT32,    timer_idx,         2)
#define perfetto_protos_KvmTimerEmulateFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTimerEmulateFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    timer_idx,         1)
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ctl,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   cval,              2) \
X(a, STATIC,   OPTIONAL, INT32,    timer_idx,         3)
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTimerSaveStateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ctl,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   cval,              2) \
X(a, STATIC,   OPTIONAL, INT32,    timer_idx,         3)
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   irq,               1) \
X(a, STATIC,   OPTIONAL, INT32,    level,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_id,           3)
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmToggleCacheFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   now,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           2) \
X(a, STATIC,   OPTIONAL, UINT32,   was,               3)
#define perfetto_protos_KvmToggleCacheFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmToggleCacheFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   end,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             2)
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmUserspaceExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   reason,            1)
#define perfetto_protos_KvmUserspaceExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmUserspaceExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmVcpuWakeupFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ns,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   valid,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   waited,            3)
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_DEFAULT NULL

#define perfetto_protos_KvmWfxArm64FtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   is_wfe,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_pc,           2)
#define perfetto_protos_KvmWfxArm64FtraceEvent_CALLBACK NULL
#define perfetto_protos_KvmWfxArm64FtraceEvent_DEFAULT NULL

#define perfetto_protos_TrapRegFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   fn,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   is_write,          2) \
X(a, STATIC,   OPTIONAL, INT32,    reg,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   write_value,       4)
#define perfetto_protos_TrapRegFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrapRegFtraceEvent_DEFAULT NULL

#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   irq,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   level,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   vcpu_id,           3)
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_CALLBACK NULL
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_DEFAULT NULL

#define perfetto_protos_LowmemoryKillFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT64,    pagecache_size,    3) \
X(a, STATIC,   OPTIONAL, INT64,    pagecache_limit,   4) \
X(a, STATIC,   OPTIONAL, INT64,    free,              5)
#define perfetto_protos_LowmemoryKillFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_LowmemoryKillFtraceEvent_DEFAULT NULL

#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   lwis_name,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   func_name,         4) \
X(a, STATIC,   OPTIONAL, INT64,    value,             5)
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              3) \
X(a, STATIC,   OPTIONAL, INT32,    value,             4)
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         5)
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         5)
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         5)
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         2) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                5)
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         2) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                5)
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val1,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val2,         2) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   id,                5)
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    kctx_tgid,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   kctx_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   info_val,          3)
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_DEFAULT NULL

#define perfetto_protos_MaliGpuPowerStateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   change_ns,         1) \
X(a, STATIC,   OPTIONAL, INT32,    from_state,        2) \
X(a, STATIC,   OPTIONAL, INT32,    to_state,          3)
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_CALLBACK NULL
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCmdKickoffFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1) \
X(a, STATIC,   OPTIONAL, INT32,    kickoff_cnt,       2)
#define perfetto_protos_MdpCmdKickoffFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCmdKickoffFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCommitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   num,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   play_cnt,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   clk_rate,          3) \
X(a, STATIC,   OPTIONAL, UINT64,   bandwidth,         4)
#define perfetto_protos_MdpCommitFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCommitFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfSetOtFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   xin_id,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   rd_lim,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   is_vbif_rt,        4)
#define perfetto_protos_MdpPerfSetOtFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfSetOtFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpSsppChangeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   num,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   play_cnt,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   mixer,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   stage,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   format,            6) \
X(a, STATIC,   OPTIONAL, UINT32,   img_w,             7) \
X(a, STATIC,   OPTIONAL, UINT32,   img_h,             8) \
X(a, STATIC,   OPTIONAL, UINT32,   src_x,             9) \
X(a, STATIC,   OPTIONAL, UINT32,   src_y,            10) \
X(a, STATIC,   OPTIONAL, UINT32,   src_w,            11) \
X(a, STATIC,   OPTIONAL, UINT32,   src_h,            12) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_x,            13) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_y,            14) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_w,            15) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_h,            16)
#define perfetto_protos_MdpSsppChangeFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpSsppChangeFtraceEvent_DEFAULT NULL

#define perfetto_protos_TracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_name,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_begin,       3)
#define perfetto_protos_TracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   intf_num,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   pp_num,            3) \
X(a, STATIC,   OPTIONAL, INT32,    koff_cnt,          4)
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCompareBwFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   new_ab,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   new_ib,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   new_wb,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   old_ab,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   old_ib,            5) \
X(a, STATIC,   OPTIONAL, UINT64,   old_wb,            6) \
X(a, STATIC,   OPTIONAL, UINT32,   params_changed,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   update_bw,         8)
#define perfetto_protos_MdpCompareBwFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCompareBwFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   fmt,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   mode,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   panic_lut,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   robust_lut,        5)
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpSsppSetFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   num,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   play_cnt,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   mixer,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   stage,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   format,            6) \
X(a, STATIC,   OPTIONAL, UINT32,   img_w,             7) \
X(a, STATIC,   OPTIONAL, UINT32,   img_h,             8) \
X(a, STATIC,   OPTIONAL, UINT32,   src_x,             9) \
X(a, STATIC,   OPTIONAL, UINT32,   src_y,            10) \
X(a, STATIC,   OPTIONAL, UINT32,   src_w,            11) \
X(a, STATIC,   OPTIONAL, UINT32,   src_h,            12) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_x,            13) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_y,            14) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_w,            15) \
X(a, STATIC,   OPTIONAL, UINT32,   dst_h,            16)
#define perfetto_protos_MdpSsppSetFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpSsppSetFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1) \
X(a, STATIC,   OPTIONAL, INT32,    koff_cnt,          2)
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpMisrCrcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   block_id,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   vsync_cnt,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   crc,               3)
#define perfetto_protos_MdpMisrCrcFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpMisrCrcFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   fmt,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   intf,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   rot,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   fl,                5) \
X(a, STATIC,   OPTIONAL, UINT32,   lut,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   linear,            7)
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpTraceCounterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   counter_name,      2) \
X(a, STATIC,   OPTIONAL, INT32,    value,             3)
#define perfetto_protos_MdpTraceCounterFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_MdpTraceCounterFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1)
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpMixerUpdateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   mixer_num,         1)
#define perfetto_protos_MdpMixerUpdateFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpMixerUpdateFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   use_space,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   priority_bytes,    3) \
X(a, STATIC,   OPTIONAL, UINT32,   wm0,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   wm1,               5) \
X(a, STATIC,   OPTIONAL, UINT32,   wm2,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   mb_cnt,            7) \
X(a, STATIC,   OPTIONAL, UINT32,   mb_size,           8)
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   underrun_cnt,      2)
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctl_num,           1) \
X(a, STATIC,   OPTIONAL, INT32,    kickoff_cnt,       2)
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   latency_buf,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   ot,                3) \
X(a, STATIC,   OPTIONAL, UINT32,   y_buf,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   y_scaler,          5) \
X(a, STATIC,   OPTIONAL, UINT32,   pp_lines,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   pp_bytes,          7) \
X(a, STATIC,   OPTIONAL, UINT32,   post_sc,           8) \
X(a, STATIC,   OPTIONAL, UINT32,   fbc_bytes,         9) \
X(a, STATIC,   OPTIONAL, UINT32,   prefill_bytes,    10)
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_DEFAULT NULL

#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    client,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   ab_quota,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   ib_quota,          3)
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_CALLBACK NULL
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_DEFAULT NULL

#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             1)
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_CALLBACK NULL
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmEventRecordFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   avg_lat,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   count,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   max_lat,           3) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              4)
#define perfetto_protos_MmEventRecordFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmEventRecordFtraceEvent_DEFAULT NULL

#define perfetto_protos_NetifReceiveSkbFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   skbaddr,           3)
#define perfetto_protos_NetifReceiveSkbFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_NetifReceiveSkbFtraceEvent_DEFAULT NULL

#define perfetto_protos_NetDevXmitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, INT32,    rc,                3) \
X(a, STATIC,   OPTIONAL, UINT64,   skbaddr,           4)
#define perfetto_protos_NetDevXmitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_NetDevXmitFtraceEvent_DEFAULT NULL

#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   data_len,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   gso_size,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   gso_type,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   hash,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   ip_summed,         5) \
X(a, STATIC,   OPTIONAL, UINT32,   l4_hash,           6) \
X(a, STATIC,   OPTIONAL, UINT32,   len,               7) \
X(a, STATIC,   OPTIONAL, INT32,    mac_header,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   mac_header_valid,   9) \
X(a, CALLBACK, OPTIONAL, STRING,   name,             10) \
X(a, STATIC,   OPTIONAL, UINT32,   napi_id,          11) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_frags,         12) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,         13) \
X(a, STATIC,   OPTIONAL, UINT32,   queue_mapping,    14) \
X(a, STATIC,   OPTIONAL, UINT64,   skbaddr,          15) \
X(a, STATIC,   OPTIONAL, UINT32,   truesize,         16) \
X(a, STATIC,   OPTIONAL, UINT32,   vlan_proto,       17) \
X(a, STATIC,   OPTIONAL, UINT32,   vlan_tagged,      18) \
X(a, STATIC,   OPTIONAL, UINT32,   vlan_tci,         19)
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_DEFAULT NULL

#define perfetto_protos_NapiGroReceiveExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               1)
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    oom_score_adj,     2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3)
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_DEFAULT NULL

#define perfetto_protos_MarkVictimFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1)
#define perfetto_protos_MarkVictimFtraceEvent_CALLBACK NULL
#define perfetto_protos_MarkVictimFtraceEvent_DEFAULT NULL

#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   header,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   payload,           2)
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_CALLBACK NULL
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_DEFAULT NULL

#define perfetto_protos_DsiRxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cmd,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   rx_buf,            2)
#define perfetto_protos_DsiRxFtraceEvent_CALLBACK NULL
#define perfetto_protos_DsiRxFtraceEvent_DEFAULT NULL

#define perfetto_protos_DsiTxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   last,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   tx_buf,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              3)
#define perfetto_protos_DsiTxFtraceEvent_CALLBACK NULL
#define perfetto_protos_DsiTxFtraceEvent_DEFAULT NULL

#define perfetto_protos_PanelWriteGenericFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_name,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_begin,       3) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              5) \
X(a, STATIC,   OPTIONAL, INT32,    value,             6)
#define perfetto_protos_PanelWriteGenericFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_PanelWriteGenericFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    old_pid,           1) \
X(a, STATIC,   OPTIONAL, INT32,    new_pid,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   cctr,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr0,              4) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr1,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr2,              6) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr3,              7) \
X(a, STATIC,   OPTIONAL, UINT32,   lctr0,             8) \
X(a, STATIC,   OPTIONAL, UINT32,   lctr1,             9) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr4,             10) \
X(a, STATIC,   OPTIONAL, UINT64,   ctr5,             11) \
X(a, CALLBACK, OPTIONAL, STRING,   prev_comm,        12) \
X(a, STATIC,   OPTIONAL, INT32,    prev_pid,         13) \
X(a, STATIC,   OPTIONAL, UINT32,   cyc,              14) \
X(a, STATIC,   OPTIONAL, UINT32,   inst,             15) \
X(a, STATIC,   OPTIONAL, UINT32,   stallbm,          16) \
X(a, STATIC,   OPTIONAL, UINT32,   l3dm,             17) \
X(a, STATIC,   OPTIONAL, INT32,    next_pid,         18) \
X(a, CALLBACK, OPTIONAL, STRING,   next_comm,        19) \
X(a, STATIC,   OPTIONAL, INT64,    prev_state,       20) \
X(a, STATIC,   OPTIONAL, UINT64,   amu0,             21) \
X(a, STATIC,   OPTIONAL, UINT64,   amu1,             22) \
X(a, STATIC,   OPTIONAL, UINT64,   amu2,             23)
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_DEFAULT NULL

#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    whatever,          1)
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_CALLBACK NULL
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_DEFAULT NULL

#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   delta_nr_scanned,   1) \
X(a, STATIC,   OPTIONAL, UINT64,   delta_nr_reclaimed,   2)
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuFrequencyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_id,            2)
#define perfetto_protos_CpuFrequencyFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuFrequencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   min_freq,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   max_freq,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_id,            3)
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_DEFAULT NULL

#define perfetto_protos_CpuIdleFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_id,            2)
#define perfetto_protos_CpuIdleFtraceEvent_CALLBACK NULL
#define perfetto_protos_CpuIdleFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClockEnableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   state,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_id,            3)
#define perfetto_protos_ClockEnableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClockEnableFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClockDisableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   state,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_id,            3)
#define perfetto_protos_ClockDisableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClockDisableFtraceEvent_DEFAULT NULL

#define perfetto_protos_ClockSetRateFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   state,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_id,            3)
#define perfetto_protos_ClockSetRateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ClockSetRateFtraceEvent_DEFAULT NULL

#define perfetto_protos_SuspendResumeFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   action,            1) \
X(a, STATIC,   OPTIONAL, INT32,    val,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   start,             3)
#define perfetto_protos_SuspendResumeFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SuspendResumeFtraceEvent_DEFAULT NULL

#define perfetto_protos_GpuFrequencyFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             2)
#define perfetto_protos_GpuFrequencyFtraceEvent_CALLBACK NULL
#define perfetto_protos_GpuFrequencyFtraceEvent_DEFAULT NULL

#define perfetto_protos_WakeupSourceActivateFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   state,             2)
#define perfetto_protos_WakeupSourceActivateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_WakeupSourceActivateFtraceEvent_DEFAULT NULL

#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   state,             2)
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_DEFAULT NULL

#define perfetto_protos_GpuWorkPeriodFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   gpu_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   uid,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   start_time_ns,     3) \
X(a, STATIC,   OPTIONAL, UINT64,   end_time_ns,       4) \
X(a, STATIC,   OPTIONAL, UINT64,   total_active_duration_ns,   5)
#define perfetto_protos_GpuWorkPeriodFtraceEvent_CALLBACK NULL
#define perfetto_protos_GpuWorkPeriodFtraceEvent_DEFAULT NULL

#define perfetto_protos_DevicePmCallbackStartFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   device,            1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   parent,            3) \
X(a, CALLBACK, OPTIONAL, STRING,   pm_ops,            4) \
X(a, STATIC,   OPTIONAL, INT32,    event,             5)
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_DevicePmCallbackEndFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   device,            1) \
X(a, CALLBACK, OPTIONAL, STRING,   driver,            2) \
X(a, STATIC,   OPTIONAL, INT32,    error,             3)
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_ConsoleFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   msg,               1)
#define perfetto_protos_ConsoleFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ConsoleFtraceEvent_DEFAULT NULL

#define perfetto_protos_SysEnterFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    id,                1) \
X(a, CALLBACK, REPEATED, UINT64,   args,              2)
#define perfetto_protos_SysEnterFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SysEnterFtraceEvent_DEFAULT NULL

#define perfetto_protos_SysExitFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    id,                1) \
X(a, STATIC,   OPTIONAL, INT64,    ret,               2)
#define perfetto_protos_SysExitFtraceEvent_CALLBACK NULL
#define perfetto_protos_SysExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorDisableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_RegulatorDisableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorDisableFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorEnableFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_RegulatorEnableFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorEnableFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorEnableDelayFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorSetVoltageFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT32,    min,               2) \
X(a, STATIC,   OPTIONAL, INT32,    max,               3)
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_DEFAULT NULL

#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   val,               2)
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_DEFAULT NULL

#define perfetto_protos_RpmStatusFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT32,    status,            2)
#define perfetto_protos_RpmStatusFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_RpmStatusFtraceEvent_DEFAULT NULL

#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_name,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_begin,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_type,        4) \
X(a, STATIC,   OPTIONAL, INT32,    value,             5)
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedSwitchFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   prev_comm,         1) \
X(a, STATIC,   OPTIONAL, INT32,    prev_pid,          2) \
X(a, STATIC,   OPTIONAL, INT32,    prev_prio,         3) \
X(a, STATIC,   OPTIONAL, INT64,    prev_state,        4) \
X(a, CALLBACK, OPTIONAL, STRING,   next_comm,         5) \
X(a, STATIC,   OPTIONAL, INT32,    next_pid,          6) \
X(a, STATIC,   OPTIONAL, INT32,    next_prio,         7)
#define perfetto_protos_SchedSwitchFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedSwitchFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedWakeupFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3) \
X(a, STATIC,   OPTIONAL, INT32,    success,           4) \
X(a, STATIC,   OPTIONAL, INT32,    target_cpu,        5)
#define perfetto_protos_SchedWakeupFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedWakeupFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedBlockedReasonFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   caller,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   io_wait,           3)
#define perfetto_protos_SchedBlockedReasonFtraceEvent_CALLBACK NULL
#define perfetto_protos_SchedBlockedReasonFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedCpuHotplugFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    affected_cpu,      1) \
X(a, STATIC,   OPTIONAL, INT32,    error,             2) \
X(a, STATIC,   OPTIONAL, INT32,    status,            3)
#define perfetto_protos_SchedCpuHotplugFtraceEvent_CALLBACK NULL
#define perfetto_protos_SchedCpuHotplugFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedWakingFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3) \
X(a, STATIC,   OPTIONAL, INT32,    success,           4) \
X(a, STATIC,   OPTIONAL, INT32,    target_cpu,        5)
#define perfetto_protos_SchedWakingFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedWakingFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedWakeupNewFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3) \
X(a, STATIC,   OPTIONAL, INT32,    success,           4) \
X(a, STATIC,   OPTIONAL, INT32,    target_cpu,        5)
#define perfetto_protos_SchedWakeupNewFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedWakeupNewFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessExecFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   filename,          1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    old_pid,           3)
#define perfetto_protos_SchedProcessExecFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessExecFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessExitFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    tgid,              3) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              4)
#define perfetto_protos_SchedProcessExitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessExitFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessForkFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   parent_comm,       1) \
X(a, STATIC,   OPTIONAL, INT32,    parent_pid,        2) \
X(a, CALLBACK, OPTIONAL, STRING,   child_comm,        3) \
X(a, STATIC,   OPTIONAL, INT32,    child_pid,         4)
#define perfetto_protos_SchedProcessForkFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessForkFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessFreeFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3)
#define perfetto_protos_SchedProcessFreeFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessFreeFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessHangFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2)
#define perfetto_protos_SchedProcessHangFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessHangFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedProcessWaitFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3)
#define perfetto_protos_SchedProcessWaitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedProcessWaitFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedPiSetprioFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    newprio,           2) \
X(a, STATIC,   OPTIONAL, INT32,    oldprio,           3) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               4)
#define perfetto_protos_SchedPiSetprioFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedPiSetprioFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    active,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   capacity,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   capacity_orig,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_importance,    5) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_util,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   exit_lat,          7) \
X(a, STATIC,   OPTIONAL, UINT64,   group_capacity,    8) \
X(a, STATIC,   OPTIONAL, UINT32,   grp_overutilized,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   idle_cpu,         10) \
X(a, STATIC,   OPTIONAL, UINT32,   nr_running,       11) \
X(a, STATIC,   OPTIONAL, INT64,    spare_cap,        12) \
X(a, STATIC,   OPTIONAL, UINT32,   task_fits,        13) \
X(a, STATIC,   OPTIONAL, UINT64,   wake_group_util,  14) \
X(a, STATIC,   OPTIONAL, UINT64,   wake_util,        15)
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_CALLBACK NULL
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedMigrateTaskFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    prio,              3) \
X(a, STATIC,   OPTIONAL, INT32,    orig_cpu,          4) \
X(a, STATIC,   OPTIONAL, INT32,    dest_cpu,          5) \
X(a, STATIC,   OPTIONAL, INT32,    running,           6) \
X(a, STATIC,   OPTIONAL, UINT32,   load,              7)
#define perfetto_protos_SchedMigrateTaskFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SchedMigrateTaskFtraceEvent_DEFAULT NULL

#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu_affinity,      2) \
X(a, STATIC,   OPTIONAL, UINT64,   task_util,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   uclamp_min,        4) \
X(a, STATIC,   OPTIONAL, UINT64,   vruntime,          5)
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_CALLBACK NULL
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_DEFAULT NULL

#define perfetto_protos_ScmCallStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   arginfo,           1) \
X(a, STATIC,   OPTIONAL, UINT64,   x0,                2) \
X(a, STATIC,   OPTIONAL, UINT64,   x5,                3)
#define perfetto_protos_ScmCallStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_ScmCallStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_ScmCallEndFtraceEvent_FIELDLIST(X, a) \

#define perfetto_protos_ScmCallEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_ScmCallEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   trace_name,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_type,        3) \
X(a, STATIC,   OPTIONAL, INT32,    value,             4) \
X(a, STATIC,   OPTIONAL, UINT32,   trace_begin,       5)
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeSdeEvtlogFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   evtlog_tag,        1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   tag_id,            3)
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_ebi,        1) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_llcc,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_mnoc,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   core_clk_rate,     4) \
X(a, STATIC,   OPTIONAL, UINT32,   crtc,              5) \
X(a, STATIC,   OPTIONAL, UINT64,   ib_ebi,            6) \
X(a, STATIC,   OPTIONAL, UINT64,   ib_llcc,           7) \
X(a, STATIC,   OPTIONAL, UINT64,   ib_mnoc,           8)
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_CALLBACK NULL
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_ebi,        1) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_llcc,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   bw_ctl_mnoc,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   core_clk_rate,     4) \
X(a, STATIC,   OPTIONAL, UINT32,   crtc,              5) \
X(a, STATIC,   OPTIONAL, INT32,    params,            6) \
X(a, STATIC,   OPTIONAL, UINT64,   per_pipe_ib_ebi,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   per_pipe_ib_llcc,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   per_pipe_ib_mnoc,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   stop_req,         10) \
X(a, STATIC,   OPTIONAL, UINT32,   update_bus,       11) \
X(a, STATIC,   OPTIONAL, UINT32,   update_clk,       12)
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_CALLBACK NULL
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   fl,                1) \
X(a, STATIC,   OPTIONAL, UINT32,   fmt,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   lut,               3) \
X(a, STATIC,   OPTIONAL, UINT32,   lut_usage,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   pnum,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   rt,                6)
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_CALLBACK NULL
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_DEFAULT NULL

#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ab_quota,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   bus_id,            2) \
X(a, STATIC,   OPTIONAL, INT32,    client,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   ib_quota,          4)
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_CALLBACK NULL
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_DEFAULT NULL

#define perfetto_protos_SignalDeliverFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    code,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   sa_flags,          2) \
X(a, STATIC,   OPTIONAL, INT32,    sig,               3)
#define perfetto_protos_SignalDeliverFtraceEvent_CALLBACK NULL
#define perfetto_protos_SignalDeliverFtraceEvent_DEFAULT NULL

#define perfetto_protos_SignalGenerateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    code,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              2) \
X(a, STATIC,   OPTIONAL, INT32,    group,             3) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               4) \
X(a, STATIC,   OPTIONAL, INT32,    result,            5) \
X(a, STATIC,   OPTIONAL, INT32,    sig,               6)
#define perfetto_protos_SignalGenerateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SignalGenerateFtraceEvent_DEFAULT NULL

#define perfetto_protos_KfreeSkbFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   location,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   skbaddr,           3)
#define perfetto_protos_KfreeSkbFtraceEvent_CALLBACK NULL
#define perfetto_protos_KfreeSkbFtraceEvent_DEFAULT NULL

#define perfetto_protos_InetSockSetStateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   daddr,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   dport,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   family,            3) \
X(a, STATIC,   OPTIONAL, INT32,    newstate,          4) \
X(a, STATIC,   OPTIONAL, INT32,    oldstate,          5) \
X(a, STATIC,   OPTIONAL, UINT32,   protocol,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   saddr,             7) \
X(a, STATIC,   OPTIONAL, UINT64,   skaddr,            8) \
X(a, STATIC,   OPTIONAL, UINT32,   sport,             9)
#define perfetto_protos_InetSockSetStateFtraceEvent_CALLBACK NULL
#define perfetto_protos_InetSockSetStateFtraceEvent_DEFAULT NULL

#define perfetto_protos_SyncPtFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   timeline,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_SyncPtFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SyncPtFtraceEvent_DEFAULT NULL

#define perfetto_protos_SyncTimelineFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_SyncTimelineFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SyncTimelineFtraceEvent_DEFAULT NULL

#define perfetto_protos_SyncWaitFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, INT32,    status,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   begin,             3)
#define perfetto_protos_SyncWaitFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_SyncWaitFtraceEvent_DEFAULT NULL

#define perfetto_protos_RssStatThrottledFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   curr,              1) \
X(a, STATIC,   OPTIONAL, INT32,    member,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   mm_id,             3) \
X(a, STATIC,   OPTIONAL, INT64,    size,              4)
#define perfetto_protos_RssStatThrottledFtraceEvent_CALLBACK NULL
#define perfetto_protos_RssStatThrottledFtraceEvent_DEFAULT NULL

#define perfetto_protos_SuspendResumeMinimalFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   start,             1)
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_CALLBACK NULL
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_DEFAULT NULL

#define perfetto_protos_ZeroFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    flag,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               3) \
X(a, STATIC,   OPTIONAL, INT64,    value,             4)
#define perfetto_protos_ZeroFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ZeroFtraceEvent_DEFAULT NULL

#define perfetto_protos_TaskNewtaskFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   comm,              2) \
X(a, STATIC,   OPTIONAL, UINT64,   clone_flags,       3) \
X(a, STATIC,   OPTIONAL, INT32,    oom_score_adj,     4)
#define perfetto_protos_TaskNewtaskFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TaskNewtaskFtraceEvent_DEFAULT NULL

#define perfetto_protos_TaskRenameFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   oldcomm,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   newcomm,           3) \
X(a, STATIC,   OPTIONAL, INT32,    oom_score_adj,     4)
#define perfetto_protos_TaskRenameFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TaskRenameFtraceEvent_DEFAULT NULL

#define perfetto_protos_TcpRetransmitSkbFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   daddr,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   dport,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   saddr,             3) \
X(a, STATIC,   OPTIONAL, UINT64,   skaddr,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   skbaddr,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   sport,             6) \
X(a, STATIC,   OPTIONAL, INT32,    state,             7)
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_CALLBACK NULL
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_DEFAULT NULL

#define perfetto_protos_ThermalTemperatureFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    temp,              2) \
X(a, STATIC,   OPTIONAL, INT32,    temp_prev,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   thermal_zone,      4)
#define perfetto_protos_ThermalTemperatureFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ThermalTemperatureFtraceEvent_DEFAULT NULL

#define perfetto_protos_CdevUpdateFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   target,            1) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              2)
#define perfetto_protos_CdevUpdateFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_CdevUpdateFtraceEvent_DEFAULT NULL

#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   tz_id,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   current_temp,      2) \
X(a, STATIC,   OPTIONAL, UINT32,   ctrl_temp,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   cdev_state,        4) \
X(a, STATIC,   OPTIONAL, INT32,    pid_et_p,          5) \
X(a, STATIC,   OPTIONAL, INT32,    pid_power_range,   6) \
X(a, STATIC,   OPTIONAL, INT32,    pid_p,             7) \
X(a, STATIC,   OPTIONAL, INT32,    pid_i,             8) \
X(a, STATIC,   OPTIONAL, INT32,    k_p,               9) \
X(a, STATIC,   OPTIONAL, INT32,    k_i,              10) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,        11)
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_CALLBACK NULL
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_DEFAULT NULL

#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tz_id,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   current_temp,      2) \
X(a, STATIC,   OPTIONAL, UINT32,   ctrl_temp,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   cdev_state,        4) \
X(a, STATIC,   OPTIONAL, INT32,    pid_et_p,          5) \
X(a, STATIC,   OPTIONAL, INT32,    k_p,               6) \
X(a, STATIC,   OPTIONAL, INT32,    k_i,               7)
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_CALLBACK NULL
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustySmcFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   r0,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   r1,                2) \
X(a, STATIC,   OPTIONAL, UINT64,   r2,                3) \
X(a, STATIC,   OPTIONAL, UINT64,   r3,                4)
#define perfetto_protos_TrustySmcFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustySmcFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustySmcDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   ret,               1)
#define perfetto_protos_TrustySmcDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustySmcDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyStdCall32FtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   r0,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   r1,                2) \
X(a, STATIC,   OPTIONAL, UINT64,   r2,                3) \
X(a, STATIC,   OPTIONAL, UINT64,   r3,                4)
#define perfetto_protos_TrustyStdCall32FtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyStdCall32FtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    ret,               1)
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyShareMemoryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   lend,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   nents,             3)
#define perfetto_protos_TrustyShareMemoryFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyShareMemoryFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   handle,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   len,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   lend,              3) \
X(a, STATIC,   OPTIONAL, UINT32,   nents,             4) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               5)
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1)
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, STATIC,   OPTIONAL, INT32,    ret,               2)
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIrqFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    irq,               1)
#define perfetto_protos_TrustyIrqFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyIrqFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   event_id,          2) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          3)
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcConnectFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   port,              2) \
X(a, STATIC,   OPTIONAL, INT32,    state,             3)
#define perfetto_protos_TrustyIpcConnectFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcConnectFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              1) \
X(a, STATIC,   OPTIONAL, INT32,    err,               2) \
X(a, STATIC,   OPTIONAL, INT32,    state,             3)
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcWriteFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   buf_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              2) \
X(a, STATIC,   OPTIONAL, INT32,    kind_shm,          3) \
X(a, STATIC,   OPTIONAL, INT32,    len_or_err,        4) \
X(a, STATIC,   OPTIONAL, UINT64,   shm_cnt,           5) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          6)
#define perfetto_protos_TrustyIpcWriteFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcWriteFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcPollFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   poll_mask,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          3)
#define perfetto_protos_TrustyIpcPollFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcPollFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcReadFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          2)
#define perfetto_protos_TrustyIpcReadFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcReadFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcReadEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   buf_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              2) \
X(a, STATIC,   OPTIONAL, INT32,    len_or_err,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   shm_cnt,           4) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          5)
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyIpcRxFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   buf_id,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   chan,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   srv_name,          3)
#define perfetto_protos_TrustyIpcRxFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrustyIpcRxFtraceEvent_DEFAULT NULL

#define perfetto_protos_TrustyEnqueueNopFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   arg1,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   arg2,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   arg3,              3)
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_CALLBACK NULL
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_DEFAULT NULL

#define perfetto_protos_UfshcdCommandFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   dev_name,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   doorbell,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   intr,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   lba,               4) \
X(a, STATIC,   OPTIONAL, UINT32,   opcode,            5) \
X(a, CALLBACK, OPTIONAL, STRING,   str,               6) \
X(a, STATIC,   OPTIONAL, UINT32,   tag,               7) \
X(a, STATIC,   OPTIONAL, INT32,    transfer_len,      8) \
X(a, STATIC,   OPTIONAL, UINT32,   group_id,          9) \
X(a, STATIC,   OPTIONAL, UINT32,   str_t,            10)
#define perfetto_protos_UfshcdCommandFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_UfshcdCommandFtraceEvent_DEFAULT NULL

#define perfetto_protos_UfshcdClkGatingFtraceEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   dev_name,          1) \
X(a, STATIC,   OPTIONAL, INT32,    state,             2)
#define perfetto_protos_UfshcdClkGatingFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_UfshcdClkGatingFtraceEvent_DEFAULT NULL

#define perfetto_protos_V4l2QbufFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   bytesused,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   index,             4) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  14) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  16) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        17) \
X(a, STATIC,   OPTIONAL, UINT32,   type,             18)
#define perfetto_protos_V4l2QbufFtraceEvent_CALLBACK NULL
#define perfetto_protos_V4l2QbufFtraceEvent_DEFAULT NULL

#define perfetto_protos_V4l2DqbufFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   bytesused,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   index,             4) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             5) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  14) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  16) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        17) \
X(a, STATIC,   OPTIONAL, UINT32,   type,             18)
#define perfetto_protos_V4l2DqbufFtraceEvent_CALLBACK NULL
#define perfetto_protos_V4l2DqbufFtraceEvent_DEFAULT NULL

#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  14) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        15)
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_CALLBACK NULL
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_DEFAULT NULL

#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  14) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        15)
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_Vb2V4l2QbufFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  14) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        15)
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_CALLBACK NULL
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_DEFAULT NULL

#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   field,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             2) \
X(a, STATIC,   OPTIONAL, INT32,    minor,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence,          4) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_flags,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_frames,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_hours,    7) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_minutes,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_seconds,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_type,    10) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits0,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits1,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits2,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   timecode_userbits3,  14) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,        15)
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_CALLBACK NULL
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctx_id,            1) \
X(a, STATIC,   OPTIONAL, INT32,    dev,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   fence_id,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   num_free,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             7) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              8) \
X(a, STATIC,   OPTIONAL, UINT32,   vq,                9)
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   ctx_id,            1) \
X(a, STATIC,   OPTIONAL, INT32,    dev,               2) \
X(a, STATIC,   OPTIONAL, UINT64,   fence_id,          3) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             4) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              5) \
X(a, STATIC,   OPTIONAL, UINT32,   num_free,          6) \
X(a, STATIC,   OPTIONAL, UINT32,   seqno,             7) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              8) \
X(a, STATIC,   OPTIONAL, UINT32,   vq,                9)
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioVideoCmdFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   stream_id,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              2)
#define perfetto_protos_VirtioVideoCmdFtraceEvent_CALLBACK NULL
#define perfetto_protos_VirtioVideoCmdFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   stream_id,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   type,              2)
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size0,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size1,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size2,        3) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size3,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   queue_type,        5) \
X(a, STATIC,   OPTIONAL, INT32,    resource_id,       6) \
X(a, STATIC,   OPTIONAL, INT32,    stream_id,         7) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         8)
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_CALLBACK NULL
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_DEFAULT NULL

#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size0,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size1,        2) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size2,        3) \
X(a, STATIC,   OPTIONAL, UINT32,   data_size3,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   queue_type,        5) \
X(a, STATIC,   OPTIONAL, INT32,    resource_id,       6) \
X(a, STATIC,   OPTIONAL, INT32,    stream_id,         7) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         8)
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_CALLBACK NULL
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    order,             1) \
X(a, STATIC,   OPTIONAL, INT32,    may_writepage,     2) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         3)
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   nr_reclaimed,      1)
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    order,             2) \
X(a, STATIC,   OPTIONAL, INT32,    zid,               3)
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               1)
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmShrinkSlabStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   cache_items,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   delta,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   gfp_flags,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   lru_pgs,           4) \
X(a, STATIC,   OPTIONAL, INT64,    nr_objects_to_shrink,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   pgs_scanned,       6) \
X(a, STATIC,   OPTIONAL, UINT64,   shr,               7) \
X(a, STATIC,   OPTIONAL, UINT64,   shrink,            8) \
X(a, STATIC,   OPTIONAL, UINT64,   total_scan,        9) \
X(a, STATIC,   OPTIONAL, INT32,    nid,              10) \
X(a, STATIC,   OPTIONAL, INT32,    priority,         11)
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_MmShrinkSlabEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    new_scan,          1) \
X(a, STATIC,   OPTIONAL, INT32,    retval,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   shr,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   shrink,            4) \
X(a, STATIC,   OPTIONAL, INT64,    total_scan,        5) \
X(a, STATIC,   OPTIONAL, INT64,    unused_scan,       6) \
X(a, STATIC,   OPTIONAL, INT32,    nid,               7)
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   work,              1)
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_CALLBACK NULL
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_DEFAULT NULL

#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   work,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   function,          2)
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_CALLBACK NULL
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_DEFAULT NULL

#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   work,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   function,          2)
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_CALLBACK NULL
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_DEFAULT NULL

#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   work,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   function,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   workqueue,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   req_cpu,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               5)
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_CALLBACK NULL
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_DEFAULT NULL

#define perfetto_protos_FtraceEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,print,event.print),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_switch,event.sched_switch),   4) \
X(a, STATIC,   OPTIONAL, UINT32,   common_flags,      5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpu_frequency,event.cpu_frequency),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpu_frequency_limits,event.cpu_frequency_limits),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpu_idle,event.cpu_idle),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clock_enable,event.clock_enable),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clock_disable,event.clock_disable),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clock_set_rate,event.clock_set_rate),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_wakeup,event.sched_wakeup),  17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_blocked_reason,event.sched_blocked_reason),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_cpu_hotplug,event.sched_cpu_hotplug),  19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_waking,event.sched_waking),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ipi_entry,event.ipi_entry),  21) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ipi_exit,event.ipi_exit),  22) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ipi_raise,event.ipi_raise),  23) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,softirq_entry,event.softirq_entry),  24) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,softirq_exit,event.softirq_exit),  25) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,softirq_raise,event.softirq_raise),  26) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,i2c_read,event.i2c_read),  27) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,i2c_write,event.i2c_write),  28) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,i2c_result,event.i2c_result),  29) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,i2c_reply,event.i2c_reply),  30) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,smbus_read,event.smbus_read),  31) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,smbus_write,event.smbus_write),  32) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,smbus_result,event.smbus_result),  33) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,smbus_reply,event.smbus_reply),  34) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,lowmemory_kill,event.lowmemory_kill),  35) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,irq_handler_entry,event.irq_handler_entry),  36) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,irq_handler_exit,event.irq_handler_exit),  37) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sync_pt,event.sync_pt),  38) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sync_timeline,event.sync_timeline),  39) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sync_wait,event.sync_wait),  40) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_write_begin,event.ext4_da_write_begin),  41) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_write_end,event.ext4_da_write_end),  42) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_sync_file_enter,event.ext4_sync_file_enter),  43) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_sync_file_exit,event.ext4_sync_file_exit),  44) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_issue,event.block_rq_issue),  45) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_vmscan_direct_reclaim_begin,event.mm_vmscan_direct_reclaim_begin),  46) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_vmscan_direct_reclaim_end,event.mm_vmscan_direct_reclaim_end),  47) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_vmscan_kswapd_wake,event.mm_vmscan_kswapd_wake),  48) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_vmscan_kswapd_sleep,event.mm_vmscan_kswapd_sleep),  49) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_transaction,event.binder_transaction),  50) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_transaction_received,event.binder_transaction_received),  51) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_set_priority,event.binder_set_priority),  52) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_lock,event.binder_lock),  53) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_locked,event.binder_locked),  54) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_unlock,event.binder_unlock),  55) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,workqueue_activate_work,event.workqueue_activate_work),  56) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,workqueue_execute_end,event.workqueue_execute_end),  57) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,workqueue_execute_start,event.workqueue_execute_start),  58) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,workqueue_queue_work,event.workqueue_queue_work),  59) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_disable,event.regulator_disable),  60) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_disable_complete,event.regulator_disable_complete),  61) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_enable,event.regulator_enable),  62) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_enable_complete,event.regulator_enable_complete),  63) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_enable_delay,event.regulator_enable_delay),  64) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_set_voltage,event.regulator_set_voltage),  65) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,regulator_set_voltage_complete,event.regulator_set_voltage_complete),  66) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_attach_task,event.cgroup_attach_task),  67) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_mkdir,event.cgroup_mkdir),  68) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_remount,event.cgroup_remount),  69) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_rmdir,event.cgroup_rmdir),  70) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_transfer_tasks,event.cgroup_transfer_tasks),  71) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_destroy_root,event.cgroup_destroy_root),  72) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_release,event.cgroup_release),  73) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_rename,event.cgroup_rename),  74) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cgroup_setup_root,event.cgroup_setup_root),  75) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_cmd_kickoff,event.mdp_cmd_kickoff),  76) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_commit,event.mdp_commit),  77) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_set_ot,event.mdp_perf_set_ot),  78) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_sspp_change,event.mdp_sspp_change),  79) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,tracing_mark_write,event.tracing_mark_write),  80) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_cmd_pingpong_done,event.mdp_cmd_pingpong_done),  81) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_compare_bw,event.mdp_compare_bw),  82) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_set_panic_luts,event.mdp_perf_set_panic_luts),  83) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_sspp_set,event.mdp_sspp_set),  84) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_cmd_readptr_done,event.mdp_cmd_readptr_done),  85) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_misr_crc,event.mdp_misr_crc),  86) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_set_qos_luts,event.mdp_perf_set_qos_luts),  87) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_trace_counter,event.mdp_trace_counter),  88) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_cmd_release_bw,event.mdp_cmd_release_bw),  89) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_mixer_update,event.mdp_mixer_update),  90) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_set_wm_levels,event.mdp_perf_set_wm_levels),  91) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_video_underrun_done,event.mdp_video_underrun_done),  92) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_cmd_wait_pingpong,event.mdp_cmd_wait_pingpong),  93) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_prefill_calc,event.mdp_perf_prefill_calc),  94) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mdp_perf_update_bus,event.mdp_perf_update_bus),  95) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,rotator_bw_ao_as_context,event.rotator_bw_ao_as_context),  96) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_filemap_add_to_page_cache,event.mm_filemap_add_to_page_cache),  97) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_filemap_delete_from_page_cache,event.mm_filemap_delete_from_page_cache),  98) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_begin,event.mm_compaction_begin),  99) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_defer_compaction,event.mm_compaction_defer_compaction), 100) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_deferred,event.mm_compaction_deferred), 101) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_defer_reset,event.mm_compaction_defer_reset), 102) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_end,event.mm_compaction_end), 103) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_finished,event.mm_compaction_finished), 104) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_isolate_freepages,event.mm_compaction_isolate_freepages), 105) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_isolate_migratepages,event.mm_compaction_isolate_migratepages), 106) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_kcompactd_sleep,event.mm_compaction_kcompactd_sleep), 107) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_kcompactd_wake,event.mm_compaction_kcompactd_wake), 108) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_migratepages,event.mm_compaction_migratepages), 109) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_suitable,event.mm_compaction_suitable), 110) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_try_to_compact_pages,event.mm_compaction_try_to_compact_pages), 111) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_compaction_wakeup_kcompactd,event.mm_compaction_wakeup_kcompactd), 112) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,suspend_resume,event.suspend_resume), 113) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_wakeup_new,event.sched_wakeup_new), 114) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_backmerge,event.block_bio_backmerge), 115) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_bounce,event.block_bio_bounce), 116) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_complete,event.block_bio_complete), 117) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_frontmerge,event.block_bio_frontmerge), 118) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_queue,event.block_bio_queue), 119) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_bio_remap,event.block_bio_remap), 120) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_dirty_buffer,event.block_dirty_buffer), 121) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_getrq,event.block_getrq), 122) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_plug,event.block_plug), 123) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_abort,event.block_rq_abort), 124) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_complete,event.block_rq_complete), 125) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_insert,event.block_rq_insert), 126) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_remap,event.block_rq_remap), 128) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_rq_requeue,event.block_rq_requeue), 129) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_sleeprq,event.block_sleeprq), 130) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_split,event.block_split), 131) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_touch_buffer,event.block_touch_buffer), 132) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_unplug,event.block_unplug), 133) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_alloc_da_blocks,event.ext4_alloc_da_blocks), 134) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_allocate_blocks,event.ext4_allocate_blocks), 135) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_allocate_inode,event.ext4_allocate_inode), 136) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_begin_ordered_truncate,event.ext4_begin_ordered_truncate), 137) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_collapse_range,event.ext4_collapse_range), 138) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_release_space,event.ext4_da_release_space), 139) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_reserve_space,event.ext4_da_reserve_space), 140) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_update_reserve_space,event.ext4_da_update_reserve_space), 141) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_write_pages,event.ext4_da_write_pages), 142) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_da_write_pages_extent,event.ext4_da_write_pages_extent), 143) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_direct_IO_enter,event.ext4_direct_IO_enter), 144) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_direct_IO_exit,event.ext4_direct_IO_exit), 145) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_discard_blocks,event.ext4_discard_blocks), 146) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_discard_preallocations,event.ext4_discard_preallocations), 147) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_drop_inode,event.ext4_drop_inode), 148) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_cache_extent,event.ext4_es_cache_extent), 149) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_find_delayed_extent_range_enter,event.ext4_es_find_delayed_extent_range_enter), 150) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_find_delayed_extent_range_exit,event.ext4_es_find_delayed_extent_range_exit), 151) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_insert_extent,event.ext4_es_insert_extent), 152) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_lookup_extent_enter,event.ext4_es_lookup_extent_enter), 153) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_lookup_extent_exit,event.ext4_es_lookup_extent_exit), 154) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_remove_extent,event.ext4_es_remove_extent), 155) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_shrink,event.ext4_es_shrink), 156) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_shrink_count,event.ext4_es_shrink_count), 157) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_shrink_scan_enter,event.ext4_es_shrink_scan_enter), 158) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_es_shrink_scan_exit,event.ext4_es_shrink_scan_exit), 159) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_evict_inode,event.ext4_evict_inode), 160) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_convert_to_initialized_enter,event.ext4_ext_convert_to_initialized_enter), 161) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_convert_to_initialized_fastpath,event.ext4_ext_convert_to_initialized_fastpath), 162) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_handle_unwritten_extents,event.ext4_ext_handle_unwritten_extents), 163) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_in_cache,event.ext4_ext_in_cache), 164) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_load_extent,event.ext4_ext_load_extent), 165) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_map_blocks_enter,event.ext4_ext_map_blocks_enter), 166) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_map_blocks_exit,event.ext4_ext_map_blocks_exit), 167) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_put_in_cache,event.ext4_ext_put_in_cache), 168) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_remove_space,event.ext4_ext_remove_space), 169) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_remove_space_done,event.ext4_ext_remove_space_done), 170) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_rm_idx,event.ext4_ext_rm_idx), 171) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_rm_leaf,event.ext4_ext_rm_leaf), 172) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ext_show_extent,event.ext4_ext_show_extent), 173) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_fallocate_enter,event.ext4_fallocate_enter), 174) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_fallocate_exit,event.ext4_fallocate_exit), 175) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_find_delalloc_range,event.ext4_find_delalloc_range), 176) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_forget,event.ext4_forget), 177) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_free_blocks,event.ext4_free_blocks), 178) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_free_inode,event.ext4_free_inode), 179) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_get_implied_cluster_alloc_exit,event.ext4_get_implied_cluster_alloc_exit), 180) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_get_reserved_cluster_alloc,event.ext4_get_reserved_cluster_alloc), 181) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ind_map_blocks_enter,event.ext4_ind_map_blocks_enter), 182) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_ind_map_blocks_exit,event.ext4_ind_map_blocks_exit), 183) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_insert_range,event.ext4_insert_range), 184) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_invalidatepage,event.ext4_invalidatepage), 185) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_journal_start,event.ext4_journal_start), 186) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_journal_start_reserved,event.ext4_journal_start_reserved), 187) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_journalled_invalidatepage,event.ext4_journalled_invalidatepage), 188) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_journalled_write_end,event.ext4_journalled_write_end), 189) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_load_inode,event.ext4_load_inode), 190) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_load_inode_bitmap,event.ext4_load_inode_bitmap), 191) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mark_inode_dirty,event.ext4_mark_inode_dirty), 192) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_bitmap_load,event.ext4_mb_bitmap_load), 193) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_buddy_bitmap_load,event.ext4_mb_buddy_bitmap_load), 194) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_discard_preallocations,event.ext4_mb_discard_preallocations), 195) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_new_group_pa,event.ext4_mb_new_group_pa), 196) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_new_inode_pa,event.ext4_mb_new_inode_pa), 197) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_release_group_pa,event.ext4_mb_release_group_pa), 198) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mb_release_inode_pa,event.ext4_mb_release_inode_pa), 199) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mballoc_alloc,event.ext4_mballoc_alloc), 200) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mballoc_discard,event.ext4_mballoc_discard), 201) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mballoc_free,event.ext4_mballoc_free), 202) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_mballoc_prealloc,event.ext4_mballoc_prealloc), 203) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_other_inode_update_time,event.ext4_other_inode_update_time), 204) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_punch_hole,event.ext4_punch_hole), 205) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_read_block_bitmap_load,event.ext4_read_block_bitmap_load), 206) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_readpage,event.ext4_readpage), 207) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_releasepage,event.ext4_releasepage), 208) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_remove_blocks,event.ext4_remove_blocks), 209) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_request_blocks,event.ext4_request_blocks), 210) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_request_inode,event.ext4_request_inode), 211) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_sync_fs,event.ext4_sync_fs), 212) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_trim_all_free,event.ext4_trim_all_free), 213) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_trim_extent,event.ext4_trim_extent), 214) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_truncate_enter,event.ext4_truncate_enter), 215) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_truncate_exit,event.ext4_truncate_exit), 216) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_unlink_enter,event.ext4_unlink_enter), 217) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_unlink_exit,event.ext4_unlink_exit), 218) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_write_begin,event.ext4_write_begin), 219) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_write_end,event.ext4_write_end), 230) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_writepage,event.ext4_writepage), 231) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_writepages,event.ext4_writepages), 232) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_writepages_result,event.ext4_writepages_result), 233) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ext4_zero_range,event.ext4_zero_range), 234) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,task_newtask,event.task_newtask), 235) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,task_rename,event.task_rename), 236) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_exec,event.sched_process_exec), 237) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_exit,event.sched_process_exit), 238) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_fork,event.sched_process_fork), 239) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_free,event.sched_process_free), 240) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_hang,event.sched_process_hang), 241) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_process_wait,event.sched_process_wait), 242) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_do_submit_bio,event.f2fs_do_submit_bio), 243) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_evict_inode,event.f2fs_evict_inode), 244) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_fallocate,event.f2fs_fallocate), 245) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_get_data_block,event.f2fs_get_data_block), 246) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_get_victim,event.f2fs_get_victim), 247) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_iget,event.f2fs_iget), 248) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_iget_exit,event.f2fs_iget_exit), 249) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_new_inode,event.f2fs_new_inode), 250) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_readpage,event.f2fs_readpage), 251) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_reserve_new_block,event.f2fs_reserve_new_block), 252) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_set_page_dirty,event.f2fs_set_page_dirty), 253) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_submit_write_page,event.f2fs_submit_write_page), 254) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_sync_file_enter,event.f2fs_sync_file_enter), 255) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_sync_file_exit,event.f2fs_sync_file_exit), 256) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_sync_fs,event.f2fs_sync_fs), 257) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate,event.f2fs_truncate), 258) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_blocks_enter,event.f2fs_truncate_blocks_enter), 259) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_blocks_exit,event.f2fs_truncate_blocks_exit), 260) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_data_blocks_range,event.f2fs_truncate_data_blocks_range), 261) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_inode_blocks_enter,event.f2fs_truncate_inode_blocks_enter), 262) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_inode_blocks_exit,event.f2fs_truncate_inode_blocks_exit), 263) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_node,event.f2fs_truncate_node), 264) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_nodes_enter,event.f2fs_truncate_nodes_enter), 265) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_nodes_exit,event.f2fs_truncate_nodes_exit), 266) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_truncate_partial_nodes,event.f2fs_truncate_partial_nodes), 267) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_unlink_enter,event.f2fs_unlink_enter), 268) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_unlink_exit,event.f2fs_unlink_exit), 269) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_vm_page_mkwrite,event.f2fs_vm_page_mkwrite), 270) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_write_begin,event.f2fs_write_begin), 271) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_write_checkpoint,event.f2fs_write_checkpoint), 272) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_write_end,event.f2fs_write_end), 273) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_iommu_end,event.alloc_pages_iommu_end), 274) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_iommu_fail,event.alloc_pages_iommu_fail), 275) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_iommu_start,event.alloc_pages_iommu_start), 276) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_sys_end,event.alloc_pages_sys_end), 277) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_sys_fail,event.alloc_pages_sys_fail), 278) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,alloc_pages_sys_start,event.alloc_pages_sys_start), 279) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_alloc_contiguous_retry,event.dma_alloc_contiguous_retry), 280) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,iommu_map_range,event.iommu_map_range), 281) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,iommu_sec_ptbl_map_range_end,event.iommu_sec_ptbl_map_range_end), 282) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,iommu_sec_ptbl_map_range_start,event.iommu_sec_ptbl_map_range_start), 283) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_alloc_buffer_end,event.ion_alloc_buffer_end), 284) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_alloc_buffer_fail,event.ion_alloc_buffer_fail), 285) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_alloc_buffer_fallback,event.ion_alloc_buffer_fallback), 286) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_alloc_buffer_start,event.ion_alloc_buffer_start), 287) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_cp_alloc_retry,event.ion_cp_alloc_retry), 288) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_cp_secure_buffer_end,event.ion_cp_secure_buffer_end), 289) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_cp_secure_buffer_start,event.ion_cp_secure_buffer_start), 290) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_prefetching,event.ion_prefetching), 291) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_add_to_pool_end,event.ion_secure_cma_add_to_pool_end), 292) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_add_to_pool_start,event.ion_secure_cma_add_to_pool_start), 293) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_allocate_end,event.ion_secure_cma_allocate_end), 294) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_allocate_start,event.ion_secure_cma_allocate_start), 295) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_shrink_pool_end,event.ion_secure_cma_shrink_pool_end), 296) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_secure_cma_shrink_pool_start,event.ion_secure_cma_shrink_pool_start), 297) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kfree,event.kfree), 298) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kmalloc,event.kmalloc), 299) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kmalloc_node,event.kmalloc_node), 300) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kmem_cache_alloc,event.kmem_cache_alloc), 301) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kmem_cache_alloc_node,event.kmem_cache_alloc_node), 302) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kmem_cache_free,event.kmem_cache_free), 303) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,migrate_pages_end,event.migrate_pages_end), 304) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,migrate_pages_start,event.migrate_pages_start), 305) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,migrate_retry,event.migrate_retry), 306) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_alloc,event.mm_page_alloc), 307) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_alloc_extfrag,event.mm_page_alloc_extfrag), 308) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_alloc_zone_locked,event.mm_page_alloc_zone_locked), 309) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_free,event.mm_page_free), 310) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_free_batched,event.mm_page_free_batched), 311) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_page_pcpu_drain,event.mm_page_pcpu_drain), 312) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,rss_stat,event.rss_stat), 313) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_heap_shrink,event.ion_heap_shrink), 314) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_heap_grow,event.ion_heap_grow), 315) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fence_init,event.fence_init), 316) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fence_destroy,event.fence_destroy), 317) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fence_enable_signal,event.fence_enable_signal), 318) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fence_signaled,event.fence_signaled), 319) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clk_enable,event.clk_enable), 320) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clk_disable,event.clk_disable), 321) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,clk_set_rate,event.clk_set_rate), 322) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_transaction_alloc_buf,event.binder_transaction_alloc_buf), 323) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,signal_deliver,event.signal_deliver), 324) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,signal_generate,event.signal_generate), 325) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,oom_score_adj_update,event.oom_score_adj_update), 326) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,generic,event.generic), 327) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_event_record,event.mm_event_record), 328) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sys_enter,event.sys_enter), 329) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sys_exit,event.sys_exit), 330) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,zero,event.zero), 331) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,gpu_frequency,event.gpu_frequency), 332) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_tracing_mark_write,event.sde_tracing_mark_write), 333) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mark_victim,event.mark_victim), 334) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_stat,event.ion_stat), 335) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_buffer_create,event.ion_buffer_create), 336) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ion_buffer_destroy,event.ion_buffer_destroy), 337) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,scm_call_start,event.scm_call_start), 338) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,scm_call_end,event.scm_call_end), 339) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,gpu_mem_total,event.gpu_mem_total), 340) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,thermal_temperature,event.thermal_temperature), 341) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cdev_update,event.cdev_update), 342) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpuhp_exit,event.cpuhp_exit), 343) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpuhp_multi_enter,event.cpuhp_multi_enter), 344) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpuhp_enter,event.cpuhp_enter), 345) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpuhp_latency,event.cpuhp_latency), 346) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fastrpc_dma_stat,event.fastrpc_dma_stat), 347) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_tracing_mark_write,event.dpu_tracing_mark_write), 348) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,g2d_tracing_mark_write,event.g2d_tracing_mark_write), 349) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_tracing_mark_write,event.mali_tracing_mark_write), 350) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_heap_stat,event.dma_heap_stat), 351) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cpuhp_pause,event.cpuhp_pause), 352) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_pi_setprio,event.sched_pi_setprio), 353) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_sde_evtlog,event.sde_sde_evtlog), 354) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_sde_perf_calc_crtc,event.sde_sde_perf_calc_crtc), 355) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_sde_perf_crtc_update,event.sde_sde_perf_crtc_update), 356) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_sde_perf_set_qos_luts,event.sde_sde_perf_set_qos_luts), 357) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sde_sde_perf_update_bus,event.sde_sde_perf_update_bus), 358) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,rss_stat_throttled,event.rss_stat_throttled), 359) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,netif_receive_skb,event.netif_receive_skb), 360) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,net_dev_xmit,event.net_dev_xmit), 361) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,inet_sock_set_state,event.inet_sock_set_state), 362) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,tcp_retransmit_skb,event.tcp_retransmit_skb), 363) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cros_ec_sensorhub_data,event.cros_ec_sensorhub_data), 364) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,napi_gro_receive_entry,event.napi_gro_receive_entry), 365) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,napi_gro_receive_exit,event.napi_gro_receive_exit), 366) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kfree_skb,event.kfree_skb), 367) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_access_fault,event.kvm_access_fault), 368) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_ack_irq,event.kvm_ack_irq), 369) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_age_hva,event.kvm_age_hva), 370) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_age_page,event.kvm_age_page), 371) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_arm_clear_debug,event.kvm_arm_clear_debug), 372) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_arm_set_dreg32,event.kvm_arm_set_dreg32), 373) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_arm_set_regset,event.kvm_arm_set_regset), 374) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_arm_setup_debug,event.kvm_arm_setup_debug), 375) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_entry,event.kvm_entry), 376) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_exit,event.kvm_exit), 377) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_fpu,event.kvm_fpu), 378) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_get_timer_map,event.kvm_get_timer_map), 379) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_guest_fault,event.kvm_guest_fault), 380) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_handle_sys_reg,event.kvm_handle_sys_reg), 381) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_hvc_arm64,event.kvm_hvc_arm64), 382) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_irq_line,event.kvm_irq_line), 383) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_mmio,event.kvm_mmio), 384) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_mmio_emulate,event.kvm_mmio_emulate), 385) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_set_guest_debug,event.kvm_set_guest_debug), 386) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_set_irq,event.kvm_set_irq), 387) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_set_spte_hva,event.kvm_set_spte_hva), 388) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_set_way_flush,event.kvm_set_way_flush), 389) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_sys_access,event.kvm_sys_access), 390) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_test_age_hva,event.kvm_test_age_hva), 391) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_timer_emulate,event.kvm_timer_emulate), 392) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_timer_hrtimer_expire,event.kvm_timer_hrtimer_expire), 393) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_timer_restore_state,event.kvm_timer_restore_state), 394) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_timer_save_state,event.kvm_timer_save_state), 395) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_timer_update_irq,event.kvm_timer_update_irq), 396) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_toggle_cache,event.kvm_toggle_cache), 397) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_unmap_hva_range,event.kvm_unmap_hva_range), 398) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_userspace_exit,event.kvm_userspace_exit), 399) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_vcpu_wakeup,event.kvm_vcpu_wakeup), 400) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kvm_wfx_arm64,event.kvm_wfx_arm64), 401) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trap_reg,event.trap_reg), 402) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vgic_update_irq_pending,event.vgic_update_irq_pending), 403) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,wakeup_source_activate,event.wakeup_source_activate), 404) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,wakeup_source_deactivate,event.wakeup_source_deactivate), 405) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ufshcd_command,event.ufshcd_command), 406) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,ufshcd_clk_gating,event.ufshcd_clk_gating), 407) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,console,event.console), 408) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,drm_vblank_event,event.drm_vblank_event), 409) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,drm_vblank_event_delivered,event.drm_vblank_event_delivered), 410) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,drm_sched_job,event.drm_sched_job), 411) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,drm_run_job,event.drm_run_job), 412) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,drm_sched_process_job,event.drm_sched_process_job), 413) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_fence_init,event.dma_fence_init), 414) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_fence_emit,event.dma_fence_emit), 415) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_fence_signaled,event.dma_fence_signaled), 416) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_fence_wait_start,event.dma_fence_wait_start), 417) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dma_fence_wait_end,event.dma_fence_wait_end), 418) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_iostat,event.f2fs_iostat), 419) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_iostat_latency,event.f2fs_iostat_latency), 420) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_cpu_util_cfs,event.sched_cpu_util_cfs), 421) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,v4l2_qbuf,event.v4l2_qbuf), 422) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,v4l2_dqbuf,event.v4l2_dqbuf), 423) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vb2_v4l2_buf_queue,event.vb2_v4l2_buf_queue), 424) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vb2_v4l2_buf_done,event.vb2_v4l2_buf_done), 425) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vb2_v4l2_qbuf,event.vb2_v4l2_qbuf), 426) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vb2_v4l2_dqbuf,event.vb2_v4l2_dqbuf), 427) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dsi_cmd_fifo_status,event.dsi_cmd_fifo_status), 428) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dsi_rx,event.dsi_rx), 429) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dsi_tx,event.dsi_tx), 430) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_dataread_end,event.android_fs_dataread_end), 431) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_dataread_start,event.android_fs_dataread_start), 432) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_datawrite_end,event.android_fs_datawrite_end), 433) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_datawrite_start,event.android_fs_datawrite_start), 434) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_fsync_end,event.android_fs_fsync_end), 435) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,android_fs_fsync_start,event.android_fs_fsync_start), 436) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,funcgraph_entry,event.funcgraph_entry), 437) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,funcgraph_exit,event.funcgraph_exit), 438) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_video_cmd,event.virtio_video_cmd), 439) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_video_cmd_done,event.virtio_video_cmd_done), 440) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_video_resource_queue,event.virtio_video_resource_queue), 441) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_video_resource_queue_done,event.virtio_video_resource_queue_done), 442) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_shrink_slab_start,event.mm_shrink_slab_start), 443) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mm_shrink_slab_end,event.mm_shrink_slab_end), 444) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_smc,event.trusty_smc), 445) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_smc_done,event.trusty_smc_done), 446) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_std_call32,event.trusty_std_call32), 447) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_std_call32_done,event.trusty_std_call32_done), 448) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_share_memory,event.trusty_share_memory), 449) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_share_memory_done,event.trusty_share_memory_done), 450) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_reclaim_memory,event.trusty_reclaim_memory), 451) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_reclaim_memory_done,event.trusty_reclaim_memory_done), 452) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_irq,event.trusty_irq), 453) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_handle_event,event.trusty_ipc_handle_event), 454) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_connect,event.trusty_ipc_connect), 455) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_connect_end,event.trusty_ipc_connect_end), 456) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_write,event.trusty_ipc_write), 457) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_poll,event.trusty_ipc_poll), 458) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_read,event.trusty_ipc_read), 460) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_read_end,event.trusty_ipc_read_end), 461) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_ipc_rx,event.trusty_ipc_rx), 462) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,trusty_enqueue_nop,event.trusty_enqueue_nop), 464) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cma_alloc_start,event.cma_alloc_start), 465) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,cma_alloc_info,event.cma_alloc_info), 466) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,lwis_tracing_mark_write,event.lwis_tracing_mark_write), 467) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_gpu_cmd_queue,event.virtio_gpu_cmd_queue), 468) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,virtio_gpu_cmd_response,event.virtio_gpu_cmd_response), 469) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_CQS_SET,event.mali_mali_KCPU_CQS_SET), 470) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_CQS_WAIT_START,event.mali_mali_KCPU_CQS_WAIT_START), 471) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_CQS_WAIT_END,event.mali_mali_KCPU_CQS_WAIT_END), 472) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_FENCE_SIGNAL,event.mali_mali_KCPU_FENCE_SIGNAL), 473) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_FENCE_WAIT_START,event.mali_mali_KCPU_FENCE_WAIT_START), 474) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_KCPU_FENCE_WAIT_END,event.mali_mali_KCPU_FENCE_WAIT_END), 475) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,hyp_enter,event.hyp_enter), 476) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,hyp_exit,event.hyp_exit), 477) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,host_hcall,event.host_hcall), 478) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,host_smc,event.host_smc), 479) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,host_mem_abort,event.host_mem_abort), 480) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,suspend_resume_minimal,event.suspend_resume_minimal), 481) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_CSF_INTERRUPT_START,event.mali_mali_CSF_INTERRUPT_START), 482) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_CSF_INTERRUPT_END,event.mali_mali_CSF_INTERRUPT_END), 483) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,samsung_tracing_mark_write,event.samsung_tracing_mark_write), 484) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_command,event.binder_command), 485) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,binder_return,event.binder_return), 486) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_switch_with_ctrs,event.sched_switch_with_ctrs), 487) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,gpu_work_period,event.gpu_work_period), 488) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,rpm_status,event.rpm_status), 489) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,panel_write_generic,event.panel_write_generic), 490) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_migrate_task,event.sched_migrate_task), 491) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_dsi_cmd_fifo_status,event.dpu_dsi_cmd_fifo_status), 492) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_dsi_rx,event.dpu_dsi_rx), 493) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_dsi_tx,event.dpu_dsi_tx), 494) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_background_gc,event.f2fs_background_gc), 495) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_gc_begin,event.f2fs_gc_begin), 496) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,f2fs_gc_end,event.f2fs_gc_end), 497) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fastrpc_dma_free,event.fastrpc_dma_free), 498) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fastrpc_dma_alloc,event.fastrpc_dma_alloc), 499) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fastrpc_dma_unmap,event.fastrpc_dma_unmap), 500) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,fastrpc_dma_map,event.fastrpc_dma_map), 501) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,google_icc_event,event.google_icc_event), 502) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,google_irm_event,event.google_irm_event), 503) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,device_pm_callback_start,event.device_pm_callback_start), 504) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,device_pm_callback_end,event.device_pm_callback_end), 505) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,thermal_exynos_acpm_bulk,event.thermal_exynos_acpm_bulk), 506) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,thermal_exynos_acpm_high_overhead,event.thermal_exynos_acpm_high_overhead), 507) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dcvsh_freq,event.dcvsh_freq), 508) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kgsl_gpu_frequency,event.kgsl_gpu_frequency), 509) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_CORES_DOWN_SCALE_NOTIFY_PEND,event.mali_mali_PM_MCU_HCTL_CORES_DOWN_SCALE_NOTIFY_PEND), 510) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_CORES_NOTIFY_PEND,event.mali_mali_PM_MCU_HCTL_CORES_NOTIFY_PEND), 511) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_CORE_INACTIVE_PEND,event.mali_mali_PM_MCU_HCTL_CORE_INACTIVE_PEND), 512) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_MCU_ON_RECHECK,event.mali_mali_PM_MCU_HCTL_MCU_ON_RECHECK), 513) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_SHADERS_CORE_OFF_PEND,event.mali_mali_PM_MCU_HCTL_SHADERS_CORE_OFF_PEND), 514) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_SHADERS_PEND_OFF,event.mali_mali_PM_MCU_HCTL_SHADERS_PEND_OFF), 515) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_SHADERS_PEND_ON,event.mali_mali_PM_MCU_HCTL_SHADERS_PEND_ON), 516) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_HCTL_SHADERS_READY_OFF,event.mali_mali_PM_MCU_HCTL_SHADERS_READY_OFF), 517) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_IN_SLEEP,event.mali_mali_PM_MCU_IN_SLEEP), 518) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_OFF,event.mali_mali_PM_MCU_OFF), 519) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON,event.mali_mali_PM_MCU_ON), 520) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_CORE_ATTR_UPDATE_PEND,event.mali_mali_PM_MCU_ON_CORE_ATTR_UPDATE_PEND), 521) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_GLB_REINIT_PEND,event.mali_mali_PM_MCU_ON_GLB_REINIT_PEND), 522) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_HALT,event.mali_mali_PM_MCU_ON_HALT), 523) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_HWCNT_DISABLE,event.mali_mali_PM_MCU_ON_HWCNT_DISABLE), 524) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_HWCNT_ENABLE,event.mali_mali_PM_MCU_ON_HWCNT_ENABLE), 525) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_PEND_HALT,event.mali_mali_PM_MCU_ON_PEND_HALT), 526) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_PEND_SLEEP,event.mali_mali_PM_MCU_ON_PEND_SLEEP), 527) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_ON_SLEEP_INITIATE,event.mali_mali_PM_MCU_ON_SLEEP_INITIATE), 528) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_PEND_OFF,event.mali_mali_PM_MCU_PEND_OFF), 529) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_PEND_ON_RELOAD,event.mali_mali_PM_MCU_PEND_ON_RELOAD), 530) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_POWER_DOWN,event.mali_mali_PM_MCU_POWER_DOWN), 531) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_mali_PM_MCU_RESET_WAIT,event.mali_mali_PM_MCU_RESET_WAIT), 532) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,bcl_irq_trigger,event.bcl_irq_trigger), 533) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kgsl_adreno_cmdbatch_queued,event.kgsl_adreno_cmdbatch_queued), 534) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kgsl_adreno_cmdbatch_submitted,event.kgsl_adreno_cmdbatch_submitted), 535) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kgsl_adreno_cmdbatch_sync,event.kgsl_adreno_cmdbatch_sync), 536) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kgsl_adreno_cmdbatch_retired,event.kgsl_adreno_cmdbatch_retired), 537) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,pixel_mm_kswapd_wake,event.pixel_mm_kswapd_wake), 538) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,pixel_mm_kswapd_done,event.pixel_mm_kswapd_done), 539) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,sched_wakeup_task_attr,event.sched_wakeup_task_attr), 540) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,devfreq_frequency,event.devfreq_frequency), 541) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,kprobe_event,event.kprobe_event), 542) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,param_set_value_cpm,event.param_set_value_cpm), 543) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,do_sys_open,event.do_sys_open), 544) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,open_exec,event.open_exec), 545) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_io_start,event.block_io_start), 546) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,block_io_done,event.block_io_done), 547) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,mali_gpu_power_state,event.mali_gpu_power_state), 548) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_disp_dpu_underrun,event.dpu_disp_dpu_underrun), 549) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,dpu_disp_vblank_irq_enable,event.dpu_disp_vblank_irq_enable), 550)
#define perfetto_protos_FtraceEvent_CALLBACK NULL
#define perfetto_protos_FtraceEvent_DEFAULT NULL
#define perfetto_protos_FtraceEvent_event_print_MSGTYPE perfetto_protos_PrintFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_switch_MSGTYPE perfetto_protos_SchedSwitchFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpu_frequency_MSGTYPE perfetto_protos_CpuFrequencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpu_frequency_limits_MSGTYPE perfetto_protos_CpuFrequencyLimitsFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpu_idle_MSGTYPE perfetto_protos_CpuIdleFtraceEvent
#define perfetto_protos_FtraceEvent_event_clock_enable_MSGTYPE perfetto_protos_ClockEnableFtraceEvent
#define perfetto_protos_FtraceEvent_event_clock_disable_MSGTYPE perfetto_protos_ClockDisableFtraceEvent
#define perfetto_protos_FtraceEvent_event_clock_set_rate_MSGTYPE perfetto_protos_ClockSetRateFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_wakeup_MSGTYPE perfetto_protos_SchedWakeupFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_blocked_reason_MSGTYPE perfetto_protos_SchedBlockedReasonFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_cpu_hotplug_MSGTYPE perfetto_protos_SchedCpuHotplugFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_waking_MSGTYPE perfetto_protos_SchedWakingFtraceEvent
#define perfetto_protos_FtraceEvent_event_ipi_entry_MSGTYPE perfetto_protos_IpiEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_ipi_exit_MSGTYPE perfetto_protos_IpiExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ipi_raise_MSGTYPE perfetto_protos_IpiRaiseFtraceEvent
#define perfetto_protos_FtraceEvent_event_softirq_entry_MSGTYPE perfetto_protos_SoftirqEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_softirq_exit_MSGTYPE perfetto_protos_SoftirqExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_softirq_raise_MSGTYPE perfetto_protos_SoftirqRaiseFtraceEvent
#define perfetto_protos_FtraceEvent_event_i2c_read_MSGTYPE perfetto_protos_I2cReadFtraceEvent
#define perfetto_protos_FtraceEvent_event_i2c_write_MSGTYPE perfetto_protos_I2cWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_i2c_result_MSGTYPE perfetto_protos_I2cResultFtraceEvent
#define perfetto_protos_FtraceEvent_event_i2c_reply_MSGTYPE perfetto_protos_I2cReplyFtraceEvent
#define perfetto_protos_FtraceEvent_event_smbus_read_MSGTYPE perfetto_protos_SmbusReadFtraceEvent
#define perfetto_protos_FtraceEvent_event_smbus_write_MSGTYPE perfetto_protos_SmbusWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_smbus_result_MSGTYPE perfetto_protos_SmbusResultFtraceEvent
#define perfetto_protos_FtraceEvent_event_smbus_reply_MSGTYPE perfetto_protos_SmbusReplyFtraceEvent
#define perfetto_protos_FtraceEvent_event_lowmemory_kill_MSGTYPE perfetto_protos_LowmemoryKillFtraceEvent
#define perfetto_protos_FtraceEvent_event_irq_handler_entry_MSGTYPE perfetto_protos_IrqHandlerEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_irq_handler_exit_MSGTYPE perfetto_protos_IrqHandlerExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_sync_pt_MSGTYPE perfetto_protos_SyncPtFtraceEvent
#define perfetto_protos_FtraceEvent_event_sync_timeline_MSGTYPE perfetto_protos_SyncTimelineFtraceEvent
#define perfetto_protos_FtraceEvent_event_sync_wait_MSGTYPE perfetto_protos_SyncWaitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_write_begin_MSGTYPE perfetto_protos_Ext4DaWriteBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_write_end_MSGTYPE perfetto_protos_Ext4DaWriteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_sync_file_enter_MSGTYPE perfetto_protos_Ext4SyncFileEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_sync_file_exit_MSGTYPE perfetto_protos_Ext4SyncFileExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_issue_MSGTYPE perfetto_protos_BlockRqIssueFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_vmscan_direct_reclaim_begin_MSGTYPE perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_vmscan_direct_reclaim_end_MSGTYPE perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_vmscan_kswapd_wake_MSGTYPE perfetto_protos_MmVmscanKswapdWakeFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_vmscan_kswapd_sleep_MSGTYPE perfetto_protos_MmVmscanKswapdSleepFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_transaction_MSGTYPE perfetto_protos_BinderTransactionFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_transaction_received_MSGTYPE perfetto_protos_BinderTransactionReceivedFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_set_priority_MSGTYPE perfetto_protos_BinderSetPriorityFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_lock_MSGTYPE perfetto_protos_BinderLockFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_locked_MSGTYPE perfetto_protos_BinderLockedFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_unlock_MSGTYPE perfetto_protos_BinderUnlockFtraceEvent
#define perfetto_protos_FtraceEvent_event_workqueue_activate_work_MSGTYPE perfetto_protos_WorkqueueActivateWorkFtraceEvent
#define perfetto_protos_FtraceEvent_event_workqueue_execute_end_MSGTYPE perfetto_protos_WorkqueueExecuteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_workqueue_execute_start_MSGTYPE perfetto_protos_WorkqueueExecuteStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_workqueue_queue_work_MSGTYPE perfetto_protos_WorkqueueQueueWorkFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_disable_MSGTYPE perfetto_protos_RegulatorDisableFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_disable_complete_MSGTYPE perfetto_protos_RegulatorDisableCompleteFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_enable_MSGTYPE perfetto_protos_RegulatorEnableFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_enable_complete_MSGTYPE perfetto_protos_RegulatorEnableCompleteFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_enable_delay_MSGTYPE perfetto_protos_RegulatorEnableDelayFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_set_voltage_MSGTYPE perfetto_protos_RegulatorSetVoltageFtraceEvent
#define perfetto_protos_FtraceEvent_event_regulator_set_voltage_complete_MSGTYPE perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_attach_task_MSGTYPE perfetto_protos_CgroupAttachTaskFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_mkdir_MSGTYPE perfetto_protos_CgroupMkdirFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_remount_MSGTYPE perfetto_protos_CgroupRemountFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_rmdir_MSGTYPE perfetto_protos_CgroupRmdirFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_transfer_tasks_MSGTYPE perfetto_protos_CgroupTransferTasksFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_destroy_root_MSGTYPE perfetto_protos_CgroupDestroyRootFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_release_MSGTYPE perfetto_protos_CgroupReleaseFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_rename_MSGTYPE perfetto_protos_CgroupRenameFtraceEvent
#define perfetto_protos_FtraceEvent_event_cgroup_setup_root_MSGTYPE perfetto_protos_CgroupSetupRootFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_cmd_kickoff_MSGTYPE perfetto_protos_MdpCmdKickoffFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_commit_MSGTYPE perfetto_protos_MdpCommitFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_set_ot_MSGTYPE perfetto_protos_MdpPerfSetOtFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_sspp_change_MSGTYPE perfetto_protos_MdpSsppChangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_tracing_mark_write_MSGTYPE perfetto_protos_TracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_cmd_pingpong_done_MSGTYPE perfetto_protos_MdpCmdPingpongDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_compare_bw_MSGTYPE perfetto_protos_MdpCompareBwFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_set_panic_luts_MSGTYPE perfetto_protos_MdpPerfSetPanicLutsFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_sspp_set_MSGTYPE perfetto_protos_MdpSsppSetFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_cmd_readptr_done_MSGTYPE perfetto_protos_MdpCmdReadptrDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_misr_crc_MSGTYPE perfetto_protos_MdpMisrCrcFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_set_qos_luts_MSGTYPE perfetto_protos_MdpPerfSetQosLutsFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_trace_counter_MSGTYPE perfetto_protos_MdpTraceCounterFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_cmd_release_bw_MSGTYPE perfetto_protos_MdpCmdReleaseBwFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_mixer_update_MSGTYPE perfetto_protos_MdpMixerUpdateFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_set_wm_levels_MSGTYPE perfetto_protos_MdpPerfSetWmLevelsFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_video_underrun_done_MSGTYPE perfetto_protos_MdpVideoUnderrunDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_cmd_wait_pingpong_MSGTYPE perfetto_protos_MdpCmdWaitPingpongFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_prefill_calc_MSGTYPE perfetto_protos_MdpPerfPrefillCalcFtraceEvent
#define perfetto_protos_FtraceEvent_event_mdp_perf_update_bus_MSGTYPE perfetto_protos_MdpPerfUpdateBusFtraceEvent
#define perfetto_protos_FtraceEvent_event_rotator_bw_ao_as_context_MSGTYPE perfetto_protos_RotatorBwAoAsContextFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_filemap_add_to_page_cache_MSGTYPE perfetto_protos_MmFilemapAddToPageCacheFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_filemap_delete_from_page_cache_MSGTYPE perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_begin_MSGTYPE perfetto_protos_MmCompactionBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_defer_compaction_MSGTYPE perfetto_protos_MmCompactionDeferCompactionFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_deferred_MSGTYPE perfetto_protos_MmCompactionDeferredFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_defer_reset_MSGTYPE perfetto_protos_MmCompactionDeferResetFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_end_MSGTYPE perfetto_protos_MmCompactionEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_finished_MSGTYPE perfetto_protos_MmCompactionFinishedFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_isolate_freepages_MSGTYPE perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_isolate_migratepages_MSGTYPE perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_kcompactd_sleep_MSGTYPE perfetto_protos_MmCompactionKcompactdSleepFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_kcompactd_wake_MSGTYPE perfetto_protos_MmCompactionKcompactdWakeFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_migratepages_MSGTYPE perfetto_protos_MmCompactionMigratepagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_suitable_MSGTYPE perfetto_protos_MmCompactionSuitableFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_try_to_compact_pages_MSGTYPE perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_compaction_wakeup_kcompactd_MSGTYPE perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent
#define perfetto_protos_FtraceEvent_event_suspend_resume_MSGTYPE perfetto_protos_SuspendResumeFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_wakeup_new_MSGTYPE perfetto_protos_SchedWakeupNewFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_backmerge_MSGTYPE perfetto_protos_BlockBioBackmergeFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_bounce_MSGTYPE perfetto_protos_BlockBioBounceFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_complete_MSGTYPE perfetto_protos_BlockBioCompleteFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_frontmerge_MSGTYPE perfetto_protos_BlockBioFrontmergeFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_queue_MSGTYPE perfetto_protos_BlockBioQueueFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_bio_remap_MSGTYPE perfetto_protos_BlockBioRemapFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_dirty_buffer_MSGTYPE perfetto_protos_BlockDirtyBufferFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_getrq_MSGTYPE perfetto_protos_BlockGetrqFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_plug_MSGTYPE perfetto_protos_BlockPlugFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_abort_MSGTYPE perfetto_protos_BlockRqAbortFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_complete_MSGTYPE perfetto_protos_BlockRqCompleteFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_insert_MSGTYPE perfetto_protos_BlockRqInsertFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_remap_MSGTYPE perfetto_protos_BlockRqRemapFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_rq_requeue_MSGTYPE perfetto_protos_BlockRqRequeueFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_sleeprq_MSGTYPE perfetto_protos_BlockSleeprqFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_split_MSGTYPE perfetto_protos_BlockSplitFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_touch_buffer_MSGTYPE perfetto_protos_BlockTouchBufferFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_unplug_MSGTYPE perfetto_protos_BlockUnplugFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_alloc_da_blocks_MSGTYPE perfetto_protos_Ext4AllocDaBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_allocate_blocks_MSGTYPE perfetto_protos_Ext4AllocateBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_allocate_inode_MSGTYPE perfetto_protos_Ext4AllocateInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_begin_ordered_truncate_MSGTYPE perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_collapse_range_MSGTYPE perfetto_protos_Ext4CollapseRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_release_space_MSGTYPE perfetto_protos_Ext4DaReleaseSpaceFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_reserve_space_MSGTYPE perfetto_protos_Ext4DaReserveSpaceFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_update_reserve_space_MSGTYPE perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_write_pages_MSGTYPE perfetto_protos_Ext4DaWritePagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_da_write_pages_extent_MSGTYPE perfetto_protos_Ext4DaWritePagesExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_direct_IO_enter_MSGTYPE perfetto_protos_Ext4DirectIOEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_direct_IO_exit_MSGTYPE perfetto_protos_Ext4DirectIOExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_discard_blocks_MSGTYPE perfetto_protos_Ext4DiscardBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_discard_preallocations_MSGTYPE perfetto_protos_Ext4DiscardPreallocationsFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_drop_inode_MSGTYPE perfetto_protos_Ext4DropInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_cache_extent_MSGTYPE perfetto_protos_Ext4EsCacheExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_find_delayed_extent_range_enter_MSGTYPE perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_find_delayed_extent_range_exit_MSGTYPE perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_insert_extent_MSGTYPE perfetto_protos_Ext4EsInsertExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_lookup_extent_enter_MSGTYPE perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_lookup_extent_exit_MSGTYPE perfetto_protos_Ext4EsLookupExtentExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_remove_extent_MSGTYPE perfetto_protos_Ext4EsRemoveExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_shrink_MSGTYPE perfetto_protos_Ext4EsShrinkFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_shrink_count_MSGTYPE perfetto_protos_Ext4EsShrinkCountFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_shrink_scan_enter_MSGTYPE perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_es_shrink_scan_exit_MSGTYPE perfetto_protos_Ext4EsShrinkScanExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_evict_inode_MSGTYPE perfetto_protos_Ext4EvictInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_convert_to_initialized_enter_MSGTYPE perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_convert_to_initialized_fastpath_MSGTYPE perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_handle_unwritten_extents_MSGTYPE perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_in_cache_MSGTYPE perfetto_protos_Ext4ExtInCacheFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_load_extent_MSGTYPE perfetto_protos_Ext4ExtLoadExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_map_blocks_enter_MSGTYPE perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_map_blocks_exit_MSGTYPE perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_put_in_cache_MSGTYPE perfetto_protos_Ext4ExtPutInCacheFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_remove_space_MSGTYPE perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_remove_space_done_MSGTYPE perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_rm_idx_MSGTYPE perfetto_protos_Ext4ExtRmIdxFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_rm_leaf_MSGTYPE perfetto_protos_Ext4ExtRmLeafFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ext_show_extent_MSGTYPE perfetto_protos_Ext4ExtShowExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_fallocate_enter_MSGTYPE perfetto_protos_Ext4FallocateEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_fallocate_exit_MSGTYPE perfetto_protos_Ext4FallocateExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_find_delalloc_range_MSGTYPE perfetto_protos_Ext4FindDelallocRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_forget_MSGTYPE perfetto_protos_Ext4ForgetFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_free_blocks_MSGTYPE perfetto_protos_Ext4FreeBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_free_inode_MSGTYPE perfetto_protos_Ext4FreeInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_get_implied_cluster_alloc_exit_MSGTYPE perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_get_reserved_cluster_alloc_MSGTYPE perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ind_map_blocks_enter_MSGTYPE perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_ind_map_blocks_exit_MSGTYPE perfetto_protos_Ext4IndMapBlocksExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_insert_range_MSGTYPE perfetto_protos_Ext4InsertRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_invalidatepage_MSGTYPE perfetto_protos_Ext4InvalidatepageFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_journal_start_MSGTYPE perfetto_protos_Ext4JournalStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_journal_start_reserved_MSGTYPE perfetto_protos_Ext4JournalStartReservedFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_journalled_invalidatepage_MSGTYPE perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_journalled_write_end_MSGTYPE perfetto_protos_Ext4JournalledWriteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_load_inode_MSGTYPE perfetto_protos_Ext4LoadInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_load_inode_bitmap_MSGTYPE perfetto_protos_Ext4LoadInodeBitmapFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mark_inode_dirty_MSGTYPE perfetto_protos_Ext4MarkInodeDirtyFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_bitmap_load_MSGTYPE perfetto_protos_Ext4MbBitmapLoadFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_buddy_bitmap_load_MSGTYPE perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_discard_preallocations_MSGTYPE perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_new_group_pa_MSGTYPE perfetto_protos_Ext4MbNewGroupPaFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_new_inode_pa_MSGTYPE perfetto_protos_Ext4MbNewInodePaFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_release_group_pa_MSGTYPE perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mb_release_inode_pa_MSGTYPE perfetto_protos_Ext4MbReleaseInodePaFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mballoc_alloc_MSGTYPE perfetto_protos_Ext4MballocAllocFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mballoc_discard_MSGTYPE perfetto_protos_Ext4MballocDiscardFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mballoc_free_MSGTYPE perfetto_protos_Ext4MballocFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_mballoc_prealloc_MSGTYPE perfetto_protos_Ext4MballocPreallocFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_other_inode_update_time_MSGTYPE perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_punch_hole_MSGTYPE perfetto_protos_Ext4PunchHoleFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_read_block_bitmap_load_MSGTYPE perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_readpage_MSGTYPE perfetto_protos_Ext4ReadpageFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_releasepage_MSGTYPE perfetto_protos_Ext4ReleasepageFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_remove_blocks_MSGTYPE perfetto_protos_Ext4RemoveBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_request_blocks_MSGTYPE perfetto_protos_Ext4RequestBlocksFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_request_inode_MSGTYPE perfetto_protos_Ext4RequestInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_sync_fs_MSGTYPE perfetto_protos_Ext4SyncFsFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_trim_all_free_MSGTYPE perfetto_protos_Ext4TrimAllFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_trim_extent_MSGTYPE perfetto_protos_Ext4TrimExtentFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_truncate_enter_MSGTYPE perfetto_protos_Ext4TruncateEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_truncate_exit_MSGTYPE perfetto_protos_Ext4TruncateExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_unlink_enter_MSGTYPE perfetto_protos_Ext4UnlinkEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_unlink_exit_MSGTYPE perfetto_protos_Ext4UnlinkExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_write_begin_MSGTYPE perfetto_protos_Ext4WriteBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_write_end_MSGTYPE perfetto_protos_Ext4WriteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_writepage_MSGTYPE perfetto_protos_Ext4WritepageFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_writepages_MSGTYPE perfetto_protos_Ext4WritepagesFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_writepages_result_MSGTYPE perfetto_protos_Ext4WritepagesResultFtraceEvent
#define perfetto_protos_FtraceEvent_event_ext4_zero_range_MSGTYPE perfetto_protos_Ext4ZeroRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_task_newtask_MSGTYPE perfetto_protos_TaskNewtaskFtraceEvent
#define perfetto_protos_FtraceEvent_event_task_rename_MSGTYPE perfetto_protos_TaskRenameFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_exec_MSGTYPE perfetto_protos_SchedProcessExecFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_exit_MSGTYPE perfetto_protos_SchedProcessExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_fork_MSGTYPE perfetto_protos_SchedProcessForkFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_free_MSGTYPE perfetto_protos_SchedProcessFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_hang_MSGTYPE perfetto_protos_SchedProcessHangFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_process_wait_MSGTYPE perfetto_protos_SchedProcessWaitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_do_submit_bio_MSGTYPE perfetto_protos_F2fsDoSubmitBioFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_evict_inode_MSGTYPE perfetto_protos_F2fsEvictInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_fallocate_MSGTYPE perfetto_protos_F2fsFallocateFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_get_data_block_MSGTYPE perfetto_protos_F2fsGetDataBlockFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_get_victim_MSGTYPE perfetto_protos_F2fsGetVictimFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_iget_MSGTYPE perfetto_protos_F2fsIgetFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_iget_exit_MSGTYPE perfetto_protos_F2fsIgetExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_new_inode_MSGTYPE perfetto_protos_F2fsNewInodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_readpage_MSGTYPE perfetto_protos_F2fsReadpageFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_reserve_new_block_MSGTYPE perfetto_protos_F2fsReserveNewBlockFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_set_page_dirty_MSGTYPE perfetto_protos_F2fsSetPageDirtyFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_submit_write_page_MSGTYPE perfetto_protos_F2fsSubmitWritePageFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_sync_file_enter_MSGTYPE perfetto_protos_F2fsSyncFileEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_sync_file_exit_MSGTYPE perfetto_protos_F2fsSyncFileExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_sync_fs_MSGTYPE perfetto_protos_F2fsSyncFsFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_MSGTYPE perfetto_protos_F2fsTruncateFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_blocks_enter_MSGTYPE perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_blocks_exit_MSGTYPE perfetto_protos_F2fsTruncateBlocksExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_data_blocks_range_MSGTYPE perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_inode_blocks_enter_MSGTYPE perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_inode_blocks_exit_MSGTYPE perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_node_MSGTYPE perfetto_protos_F2fsTruncateNodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_nodes_enter_MSGTYPE perfetto_protos_F2fsTruncateNodesEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_nodes_exit_MSGTYPE perfetto_protos_F2fsTruncateNodesExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_truncate_partial_nodes_MSGTYPE perfetto_protos_F2fsTruncatePartialNodesFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_unlink_enter_MSGTYPE perfetto_protos_F2fsUnlinkEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_unlink_exit_MSGTYPE perfetto_protos_F2fsUnlinkExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_vm_page_mkwrite_MSGTYPE perfetto_protos_F2fsVmPageMkwriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_write_begin_MSGTYPE perfetto_protos_F2fsWriteBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_write_checkpoint_MSGTYPE perfetto_protos_F2fsWriteCheckpointFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_write_end_MSGTYPE perfetto_protos_F2fsWriteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_iommu_end_MSGTYPE perfetto_protos_AllocPagesIommuEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_iommu_fail_MSGTYPE perfetto_protos_AllocPagesIommuFailFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_iommu_start_MSGTYPE perfetto_protos_AllocPagesIommuStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_sys_end_MSGTYPE perfetto_protos_AllocPagesSysEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_sys_fail_MSGTYPE perfetto_protos_AllocPagesSysFailFtraceEvent
#define perfetto_protos_FtraceEvent_event_alloc_pages_sys_start_MSGTYPE perfetto_protos_AllocPagesSysStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_alloc_contiguous_retry_MSGTYPE perfetto_protos_DmaAllocContiguousRetryFtraceEvent
#define perfetto_protos_FtraceEvent_event_iommu_map_range_MSGTYPE perfetto_protos_IommuMapRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_iommu_sec_ptbl_map_range_end_MSGTYPE perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_iommu_sec_ptbl_map_range_start_MSGTYPE perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_alloc_buffer_end_MSGTYPE perfetto_protos_IonAllocBufferEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_alloc_buffer_fail_MSGTYPE perfetto_protos_IonAllocBufferFailFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_alloc_buffer_fallback_MSGTYPE perfetto_protos_IonAllocBufferFallbackFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_alloc_buffer_start_MSGTYPE perfetto_protos_IonAllocBufferStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_cp_alloc_retry_MSGTYPE perfetto_protos_IonCpAllocRetryFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_cp_secure_buffer_end_MSGTYPE perfetto_protos_IonCpSecureBufferEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_cp_secure_buffer_start_MSGTYPE perfetto_protos_IonCpSecureBufferStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_prefetching_MSGTYPE perfetto_protos_IonPrefetchingFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_add_to_pool_end_MSGTYPE perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_add_to_pool_start_MSGTYPE perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_allocate_end_MSGTYPE perfetto_protos_IonSecureCmaAllocateEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_allocate_start_MSGTYPE perfetto_protos_IonSecureCmaAllocateStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_shrink_pool_end_MSGTYPE perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_secure_cma_shrink_pool_start_MSGTYPE perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_kfree_MSGTYPE perfetto_protos_KfreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_kmalloc_MSGTYPE perfetto_protos_KmallocFtraceEvent
#define perfetto_protos_FtraceEvent_event_kmalloc_node_MSGTYPE perfetto_protos_KmallocNodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_kmem_cache_alloc_MSGTYPE perfetto_protos_KmemCacheAllocFtraceEvent
#define perfetto_protos_FtraceEvent_event_kmem_cache_alloc_node_MSGTYPE perfetto_protos_KmemCacheAllocNodeFtraceEvent
#define perfetto_protos_FtraceEvent_event_kmem_cache_free_MSGTYPE perfetto_protos_KmemCacheFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_migrate_pages_end_MSGTYPE perfetto_protos_MigratePagesEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_migrate_pages_start_MSGTYPE perfetto_protos_MigratePagesStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_migrate_retry_MSGTYPE perfetto_protos_MigrateRetryFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_alloc_MSGTYPE perfetto_protos_MmPageAllocFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_alloc_extfrag_MSGTYPE perfetto_protos_MmPageAllocExtfragFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_alloc_zone_locked_MSGTYPE perfetto_protos_MmPageAllocZoneLockedFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_free_MSGTYPE perfetto_protos_MmPageFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_free_batched_MSGTYPE perfetto_protos_MmPageFreeBatchedFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_page_pcpu_drain_MSGTYPE perfetto_protos_MmPagePcpuDrainFtraceEvent
#define perfetto_protos_FtraceEvent_event_rss_stat_MSGTYPE perfetto_protos_RssStatFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_heap_shrink_MSGTYPE perfetto_protos_IonHeapShrinkFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_heap_grow_MSGTYPE perfetto_protos_IonHeapGrowFtraceEvent
#define perfetto_protos_FtraceEvent_event_fence_init_MSGTYPE perfetto_protos_FenceInitFtraceEvent
#define perfetto_protos_FtraceEvent_event_fence_destroy_MSGTYPE perfetto_protos_FenceDestroyFtraceEvent
#define perfetto_protos_FtraceEvent_event_fence_enable_signal_MSGTYPE perfetto_protos_FenceEnableSignalFtraceEvent
#define perfetto_protos_FtraceEvent_event_fence_signaled_MSGTYPE perfetto_protos_FenceSignaledFtraceEvent
#define perfetto_protos_FtraceEvent_event_clk_enable_MSGTYPE perfetto_protos_ClkEnableFtraceEvent
#define perfetto_protos_FtraceEvent_event_clk_disable_MSGTYPE perfetto_protos_ClkDisableFtraceEvent
#define perfetto_protos_FtraceEvent_event_clk_set_rate_MSGTYPE perfetto_protos_ClkSetRateFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_transaction_alloc_buf_MSGTYPE perfetto_protos_BinderTransactionAllocBufFtraceEvent
#define perfetto_protos_FtraceEvent_event_signal_deliver_MSGTYPE perfetto_protos_SignalDeliverFtraceEvent
#define perfetto_protos_FtraceEvent_event_signal_generate_MSGTYPE perfetto_protos_SignalGenerateFtraceEvent
#define perfetto_protos_FtraceEvent_event_oom_score_adj_update_MSGTYPE perfetto_protos_OomScoreAdjUpdateFtraceEvent
#define perfetto_protos_FtraceEvent_event_generic_MSGTYPE perfetto_protos_GenericFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_event_record_MSGTYPE perfetto_protos_MmEventRecordFtraceEvent
#define perfetto_protos_FtraceEvent_event_sys_enter_MSGTYPE perfetto_protos_SysEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_sys_exit_MSGTYPE perfetto_protos_SysExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_zero_MSGTYPE perfetto_protos_ZeroFtraceEvent
#define perfetto_protos_FtraceEvent_event_gpu_frequency_MSGTYPE perfetto_protos_GpuFrequencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_tracing_mark_write_MSGTYPE perfetto_protos_SdeTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_mark_victim_MSGTYPE perfetto_protos_MarkVictimFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_stat_MSGTYPE perfetto_protos_IonStatFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_buffer_create_MSGTYPE perfetto_protos_IonBufferCreateFtraceEvent
#define perfetto_protos_FtraceEvent_event_ion_buffer_destroy_MSGTYPE perfetto_protos_IonBufferDestroyFtraceEvent
#define perfetto_protos_FtraceEvent_event_scm_call_start_MSGTYPE perfetto_protos_ScmCallStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_scm_call_end_MSGTYPE perfetto_protos_ScmCallEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_gpu_mem_total_MSGTYPE perfetto_protos_GpuMemTotalFtraceEvent
#define perfetto_protos_FtraceEvent_event_thermal_temperature_MSGTYPE perfetto_protos_ThermalTemperatureFtraceEvent
#define perfetto_protos_FtraceEvent_event_cdev_update_MSGTYPE perfetto_protos_CdevUpdateFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpuhp_exit_MSGTYPE perfetto_protos_CpuhpExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpuhp_multi_enter_MSGTYPE perfetto_protos_CpuhpMultiEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpuhp_enter_MSGTYPE perfetto_protos_CpuhpEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpuhp_latency_MSGTYPE perfetto_protos_CpuhpLatencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_fastrpc_dma_stat_MSGTYPE perfetto_protos_FastrpcDmaStatFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_tracing_mark_write_MSGTYPE perfetto_protos_DpuTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_g2d_tracing_mark_write_MSGTYPE perfetto_protos_G2dTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_tracing_mark_write_MSGTYPE perfetto_protos_MaliTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_heap_stat_MSGTYPE perfetto_protos_DmaHeapStatFtraceEvent
#define perfetto_protos_FtraceEvent_event_cpuhp_pause_MSGTYPE perfetto_protos_CpuhpPauseFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_pi_setprio_MSGTYPE perfetto_protos_SchedPiSetprioFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_sde_evtlog_MSGTYPE perfetto_protos_SdeSdeEvtlogFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_sde_perf_calc_crtc_MSGTYPE perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_sde_perf_crtc_update_MSGTYPE perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_sde_perf_set_qos_luts_MSGTYPE perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent
#define perfetto_protos_FtraceEvent_event_sde_sde_perf_update_bus_MSGTYPE perfetto_protos_SdeSdePerfUpdateBusFtraceEvent
#define perfetto_protos_FtraceEvent_event_rss_stat_throttled_MSGTYPE perfetto_protos_RssStatThrottledFtraceEvent
#define perfetto_protos_FtraceEvent_event_netif_receive_skb_MSGTYPE perfetto_protos_NetifReceiveSkbFtraceEvent
#define perfetto_protos_FtraceEvent_event_net_dev_xmit_MSGTYPE perfetto_protos_NetDevXmitFtraceEvent
#define perfetto_protos_FtraceEvent_event_inet_sock_set_state_MSGTYPE perfetto_protos_InetSockSetStateFtraceEvent
#define perfetto_protos_FtraceEvent_event_tcp_retransmit_skb_MSGTYPE perfetto_protos_TcpRetransmitSkbFtraceEvent
#define perfetto_protos_FtraceEvent_event_cros_ec_sensorhub_data_MSGTYPE perfetto_protos_CrosEcSensorhubDataFtraceEvent
#define perfetto_protos_FtraceEvent_event_napi_gro_receive_entry_MSGTYPE perfetto_protos_NapiGroReceiveEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_napi_gro_receive_exit_MSGTYPE perfetto_protos_NapiGroReceiveExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_kfree_skb_MSGTYPE perfetto_protos_KfreeSkbFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_access_fault_MSGTYPE perfetto_protos_KvmAccessFaultFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_ack_irq_MSGTYPE perfetto_protos_KvmAckIrqFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_age_hva_MSGTYPE perfetto_protos_KvmAgeHvaFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_age_page_MSGTYPE perfetto_protos_KvmAgePageFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_arm_clear_debug_MSGTYPE perfetto_protos_KvmArmClearDebugFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_arm_set_dreg32_MSGTYPE perfetto_protos_KvmArmSetDreg32FtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_arm_set_regset_MSGTYPE perfetto_protos_KvmArmSetRegsetFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_arm_setup_debug_MSGTYPE perfetto_protos_KvmArmSetupDebugFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_entry_MSGTYPE perfetto_protos_KvmEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_exit_MSGTYPE perfetto_protos_KvmExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_fpu_MSGTYPE perfetto_protos_KvmFpuFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_get_timer_map_MSGTYPE perfetto_protos_KvmGetTimerMapFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_guest_fault_MSGTYPE perfetto_protos_KvmGuestFaultFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_handle_sys_reg_MSGTYPE perfetto_protos_KvmHandleSysRegFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_hvc_arm64_MSGTYPE perfetto_protos_KvmHvcArm64FtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_irq_line_MSGTYPE perfetto_protos_KvmIrqLineFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_mmio_MSGTYPE perfetto_protos_KvmMmioFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_mmio_emulate_MSGTYPE perfetto_protos_KvmMmioEmulateFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_set_guest_debug_MSGTYPE perfetto_protos_KvmSetGuestDebugFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_set_irq_MSGTYPE perfetto_protos_KvmSetIrqFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_set_spte_hva_MSGTYPE perfetto_protos_KvmSetSpteHvaFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_set_way_flush_MSGTYPE perfetto_protos_KvmSetWayFlushFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_sys_access_MSGTYPE perfetto_protos_KvmSysAccessFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_test_age_hva_MSGTYPE perfetto_protos_KvmTestAgeHvaFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_timer_emulate_MSGTYPE perfetto_protos_KvmTimerEmulateFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_timer_hrtimer_expire_MSGTYPE perfetto_protos_KvmTimerHrtimerExpireFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_timer_restore_state_MSGTYPE perfetto_protos_KvmTimerRestoreStateFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_timer_save_state_MSGTYPE perfetto_protos_KvmTimerSaveStateFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_timer_update_irq_MSGTYPE perfetto_protos_KvmTimerUpdateIrqFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_toggle_cache_MSGTYPE perfetto_protos_KvmToggleCacheFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_unmap_hva_range_MSGTYPE perfetto_protos_KvmUnmapHvaRangeFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_userspace_exit_MSGTYPE perfetto_protos_KvmUserspaceExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_vcpu_wakeup_MSGTYPE perfetto_protos_KvmVcpuWakeupFtraceEvent
#define perfetto_protos_FtraceEvent_event_kvm_wfx_arm64_MSGTYPE perfetto_protos_KvmWfxArm64FtraceEvent
#define perfetto_protos_FtraceEvent_event_trap_reg_MSGTYPE perfetto_protos_TrapRegFtraceEvent
#define perfetto_protos_FtraceEvent_event_vgic_update_irq_pending_MSGTYPE perfetto_protos_VgicUpdateIrqPendingFtraceEvent
#define perfetto_protos_FtraceEvent_event_wakeup_source_activate_MSGTYPE perfetto_protos_WakeupSourceActivateFtraceEvent
#define perfetto_protos_FtraceEvent_event_wakeup_source_deactivate_MSGTYPE perfetto_protos_WakeupSourceDeactivateFtraceEvent
#define perfetto_protos_FtraceEvent_event_ufshcd_command_MSGTYPE perfetto_protos_UfshcdCommandFtraceEvent
#define perfetto_protos_FtraceEvent_event_ufshcd_clk_gating_MSGTYPE perfetto_protos_UfshcdClkGatingFtraceEvent
#define perfetto_protos_FtraceEvent_event_console_MSGTYPE perfetto_protos_ConsoleFtraceEvent
#define perfetto_protos_FtraceEvent_event_drm_vblank_event_MSGTYPE perfetto_protos_DrmVblankEventFtraceEvent
#define perfetto_protos_FtraceEvent_event_drm_vblank_event_delivered_MSGTYPE perfetto_protos_DrmVblankEventDeliveredFtraceEvent
#define perfetto_protos_FtraceEvent_event_drm_sched_job_MSGTYPE perfetto_protos_DrmSchedJobFtraceEvent
#define perfetto_protos_FtraceEvent_event_drm_run_job_MSGTYPE perfetto_protos_DrmRunJobFtraceEvent
#define perfetto_protos_FtraceEvent_event_drm_sched_process_job_MSGTYPE perfetto_protos_DrmSchedProcessJobFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_fence_init_MSGTYPE perfetto_protos_DmaFenceInitFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_fence_emit_MSGTYPE perfetto_protos_DmaFenceEmitFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_fence_signaled_MSGTYPE perfetto_protos_DmaFenceSignaledFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_fence_wait_start_MSGTYPE perfetto_protos_DmaFenceWaitStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_dma_fence_wait_end_MSGTYPE perfetto_protos_DmaFenceWaitEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_iostat_MSGTYPE perfetto_protos_F2fsIostatFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_iostat_latency_MSGTYPE perfetto_protos_F2fsIostatLatencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_cpu_util_cfs_MSGTYPE perfetto_protos_SchedCpuUtilCfsFtraceEvent
#define perfetto_protos_FtraceEvent_event_v4l2_qbuf_MSGTYPE perfetto_protos_V4l2QbufFtraceEvent
#define perfetto_protos_FtraceEvent_event_v4l2_dqbuf_MSGTYPE perfetto_protos_V4l2DqbufFtraceEvent
#define perfetto_protos_FtraceEvent_event_vb2_v4l2_buf_queue_MSGTYPE perfetto_protos_Vb2V4l2BufQueueFtraceEvent
#define perfetto_protos_FtraceEvent_event_vb2_v4l2_buf_done_MSGTYPE perfetto_protos_Vb2V4l2BufDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_vb2_v4l2_qbuf_MSGTYPE perfetto_protos_Vb2V4l2QbufFtraceEvent
#define perfetto_protos_FtraceEvent_event_vb2_v4l2_dqbuf_MSGTYPE perfetto_protos_Vb2V4l2DqbufFtraceEvent
#define perfetto_protos_FtraceEvent_event_dsi_cmd_fifo_status_MSGTYPE perfetto_protos_DsiCmdFifoStatusFtraceEvent
#define perfetto_protos_FtraceEvent_event_dsi_rx_MSGTYPE perfetto_protos_DsiRxFtraceEvent
#define perfetto_protos_FtraceEvent_event_dsi_tx_MSGTYPE perfetto_protos_DsiTxFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_dataread_end_MSGTYPE perfetto_protos_AndroidFsDatareadEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_dataread_start_MSGTYPE perfetto_protos_AndroidFsDatareadStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_datawrite_end_MSGTYPE perfetto_protos_AndroidFsDatawriteEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_datawrite_start_MSGTYPE perfetto_protos_AndroidFsDatawriteStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_fsync_end_MSGTYPE perfetto_protos_AndroidFsFsyncEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_android_fs_fsync_start_MSGTYPE perfetto_protos_AndroidFsFsyncStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_funcgraph_entry_MSGTYPE perfetto_protos_FuncgraphEntryFtraceEvent
#define perfetto_protos_FtraceEvent_event_funcgraph_exit_MSGTYPE perfetto_protos_FuncgraphExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_video_cmd_MSGTYPE perfetto_protos_VirtioVideoCmdFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_video_cmd_done_MSGTYPE perfetto_protos_VirtioVideoCmdDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_video_resource_queue_MSGTYPE perfetto_protos_VirtioVideoResourceQueueFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_video_resource_queue_done_MSGTYPE perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_shrink_slab_start_MSGTYPE perfetto_protos_MmShrinkSlabStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_mm_shrink_slab_end_MSGTYPE perfetto_protos_MmShrinkSlabEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_smc_MSGTYPE perfetto_protos_TrustySmcFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_smc_done_MSGTYPE perfetto_protos_TrustySmcDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_std_call32_MSGTYPE perfetto_protos_TrustyStdCall32FtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_std_call32_done_MSGTYPE perfetto_protos_TrustyStdCall32DoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_share_memory_MSGTYPE perfetto_protos_TrustyShareMemoryFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_share_memory_done_MSGTYPE perfetto_protos_TrustyShareMemoryDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_reclaim_memory_MSGTYPE perfetto_protos_TrustyReclaimMemoryFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_reclaim_memory_done_MSGTYPE perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_irq_MSGTYPE perfetto_protos_TrustyIrqFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_handle_event_MSGTYPE perfetto_protos_TrustyIpcHandleEventFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_connect_MSGTYPE perfetto_protos_TrustyIpcConnectFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_connect_end_MSGTYPE perfetto_protos_TrustyIpcConnectEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_write_MSGTYPE perfetto_protos_TrustyIpcWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_poll_MSGTYPE perfetto_protos_TrustyIpcPollFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_read_MSGTYPE perfetto_protos_TrustyIpcReadFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_read_end_MSGTYPE perfetto_protos_TrustyIpcReadEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_ipc_rx_MSGTYPE perfetto_protos_TrustyIpcRxFtraceEvent
#define perfetto_protos_FtraceEvent_event_trusty_enqueue_nop_MSGTYPE perfetto_protos_TrustyEnqueueNopFtraceEvent
#define perfetto_protos_FtraceEvent_event_cma_alloc_start_MSGTYPE perfetto_protos_CmaAllocStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_cma_alloc_info_MSGTYPE perfetto_protos_CmaAllocInfoFtraceEvent
#define perfetto_protos_FtraceEvent_event_lwis_tracing_mark_write_MSGTYPE perfetto_protos_LwisTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_gpu_cmd_queue_MSGTYPE perfetto_protos_VirtioGpuCmdQueueFtraceEvent
#define perfetto_protos_FtraceEvent_event_virtio_gpu_cmd_response_MSGTYPE perfetto_protos_VirtioGpuCmdResponseFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_CQS_SET_MSGTYPE perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_CQS_WAIT_START_MSGTYPE perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_CQS_WAIT_END_MSGTYPE perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_FENCE_SIGNAL_MSGTYPE perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_FENCE_WAIT_START_MSGTYPE perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_KCPU_FENCE_WAIT_END_MSGTYPE perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_hyp_enter_MSGTYPE perfetto_protos_HypEnterFtraceEvent
#define perfetto_protos_FtraceEvent_event_hyp_exit_MSGTYPE perfetto_protos_HypExitFtraceEvent
#define perfetto_protos_FtraceEvent_event_host_hcall_MSGTYPE perfetto_protos_HostHcallFtraceEvent
#define perfetto_protos_FtraceEvent_event_host_smc_MSGTYPE perfetto_protos_HostSmcFtraceEvent
#define perfetto_protos_FtraceEvent_event_host_mem_abort_MSGTYPE perfetto_protos_HostMemAbortFtraceEvent
#define perfetto_protos_FtraceEvent_event_suspend_resume_minimal_MSGTYPE perfetto_protos_SuspendResumeMinimalFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_CSF_INTERRUPT_START_MSGTYPE perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_CSF_INTERRUPT_END_MSGTYPE perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_samsung_tracing_mark_write_MSGTYPE perfetto_protos_SamsungTracingMarkWriteFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_command_MSGTYPE perfetto_protos_BinderCommandFtraceEvent
#define perfetto_protos_FtraceEvent_event_binder_return_MSGTYPE perfetto_protos_BinderReturnFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_switch_with_ctrs_MSGTYPE perfetto_protos_SchedSwitchWithCtrsFtraceEvent
#define perfetto_protos_FtraceEvent_event_gpu_work_period_MSGTYPE perfetto_protos_GpuWorkPeriodFtraceEvent
#define perfetto_protos_FtraceEvent_event_rpm_status_MSGTYPE perfetto_protos_RpmStatusFtraceEvent
#define perfetto_protos_FtraceEvent_event_panel_write_generic_MSGTYPE perfetto_protos_PanelWriteGenericFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_migrate_task_MSGTYPE perfetto_protos_SchedMigrateTaskFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_dsi_cmd_fifo_status_MSGTYPE perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_dsi_rx_MSGTYPE perfetto_protos_DpuDsiRxFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_dsi_tx_MSGTYPE perfetto_protos_DpuDsiTxFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_background_gc_MSGTYPE perfetto_protos_F2fsBackgroundGcFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_gc_begin_MSGTYPE perfetto_protos_F2fsGcBeginFtraceEvent
#define perfetto_protos_FtraceEvent_event_f2fs_gc_end_MSGTYPE perfetto_protos_F2fsGcEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_fastrpc_dma_free_MSGTYPE perfetto_protos_FastrpcDmaFreeFtraceEvent
#define perfetto_protos_FtraceEvent_event_fastrpc_dma_alloc_MSGTYPE perfetto_protos_FastrpcDmaAllocFtraceEvent
#define perfetto_protos_FtraceEvent_event_fastrpc_dma_unmap_MSGTYPE perfetto_protos_FastrpcDmaUnmapFtraceEvent
#define perfetto_protos_FtraceEvent_event_fastrpc_dma_map_MSGTYPE perfetto_protos_FastrpcDmaMapFtraceEvent
#define perfetto_protos_FtraceEvent_event_google_icc_event_MSGTYPE perfetto_protos_GoogleIccEventFtraceEvent
#define perfetto_protos_FtraceEvent_event_google_irm_event_MSGTYPE perfetto_protos_GoogleIrmEventFtraceEvent
#define perfetto_protos_FtraceEvent_event_device_pm_callback_start_MSGTYPE perfetto_protos_DevicePmCallbackStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_device_pm_callback_end_MSGTYPE perfetto_protos_DevicePmCallbackEndFtraceEvent
#define perfetto_protos_FtraceEvent_event_thermal_exynos_acpm_bulk_MSGTYPE perfetto_protos_ThermalExynosAcpmBulkFtraceEvent
#define perfetto_protos_FtraceEvent_event_thermal_exynos_acpm_high_overhead_MSGTYPE perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent
#define perfetto_protos_FtraceEvent_event_dcvsh_freq_MSGTYPE perfetto_protos_DcvshFreqFtraceEvent
#define perfetto_protos_FtraceEvent_event_kgsl_gpu_frequency_MSGTYPE perfetto_protos_KgslGpuFrequencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_CORES_DOWN_SCALE_NOTIFY_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_CORES_NOTIFY_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_CORE_INACTIVE_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_MCU_ON_RECHECK_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_SHADERS_CORE_OFF_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_SHADERS_PEND_OFF_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_SHADERS_PEND_ON_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_HCTL_SHADERS_READY_OFF_MSGTYPE perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_IN_SLEEP_MSGTYPE perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_OFF_MSGTYPE perfetto_protos_MaliMaliPMMCUOFFFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_MSGTYPE perfetto_protos_MaliMaliPMMCUONFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_CORE_ATTR_UPDATE_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_GLB_REINIT_PEND_MSGTYPE perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_HALT_MSGTYPE perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_HWCNT_DISABLE_MSGTYPE perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_HWCNT_ENABLE_MSGTYPE perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_PEND_HALT_MSGTYPE perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_PEND_SLEEP_MSGTYPE perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_ON_SLEEP_INITIATE_MSGTYPE perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_PEND_OFF_MSGTYPE perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_PEND_ON_RELOAD_MSGTYPE perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_POWER_DOWN_MSGTYPE perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_mali_PM_MCU_RESET_WAIT_MSGTYPE perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent
#define perfetto_protos_FtraceEvent_event_bcl_irq_trigger_MSGTYPE perfetto_protos_BclIrqTriggerFtraceEvent
#define perfetto_protos_FtraceEvent_event_kgsl_adreno_cmdbatch_queued_MSGTYPE perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent
#define perfetto_protos_FtraceEvent_event_kgsl_adreno_cmdbatch_submitted_MSGTYPE perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent
#define perfetto_protos_FtraceEvent_event_kgsl_adreno_cmdbatch_sync_MSGTYPE perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent
#define perfetto_protos_FtraceEvent_event_kgsl_adreno_cmdbatch_retired_MSGTYPE perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent
#define perfetto_protos_FtraceEvent_event_pixel_mm_kswapd_wake_MSGTYPE perfetto_protos_PixelMmKswapdWakeFtraceEvent
#define perfetto_protos_FtraceEvent_event_pixel_mm_kswapd_done_MSGTYPE perfetto_protos_PixelMmKswapdDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_sched_wakeup_task_attr_MSGTYPE perfetto_protos_SchedWakeupTaskAttrFtraceEvent
#define perfetto_protos_FtraceEvent_event_devfreq_frequency_MSGTYPE perfetto_protos_DevfreqFrequencyFtraceEvent
#define perfetto_protos_FtraceEvent_event_kprobe_event_MSGTYPE perfetto_protos_KprobeEvent
#define perfetto_protos_FtraceEvent_event_param_set_value_cpm_MSGTYPE perfetto_protos_ParamSetValueCpmFtraceEvent
#define perfetto_protos_FtraceEvent_event_do_sys_open_MSGTYPE perfetto_protos_DoSysOpenFtraceEvent
#define perfetto_protos_FtraceEvent_event_open_exec_MSGTYPE perfetto_protos_OpenExecFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_io_start_MSGTYPE perfetto_protos_BlockIoStartFtraceEvent
#define perfetto_protos_FtraceEvent_event_block_io_done_MSGTYPE perfetto_protos_BlockIoDoneFtraceEvent
#define perfetto_protos_FtraceEvent_event_mali_gpu_power_state_MSGTYPE perfetto_protos_MaliGpuPowerStateFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_disp_dpu_underrun_MSGTYPE perfetto_protos_DpuDispDpuUnderrunFtraceEvent
#define perfetto_protos_FtraceEvent_event_dpu_disp_vblank_irq_enable_MSGTYPE perfetto_protos_DpuDispVblankIrqEnableFtraceEvent

#define perfetto_protos_FtraceCpuStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   cpu,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   entries,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   overrun,           3) \
X(a, STATIC,   OPTIONAL, UINT64,   commit_overrun,    4) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_read,        5) \
X(a, STATIC,   OPTIONAL, DOUBLE,   oldest_event_ts,   6) \
X(a, STATIC,   OPTIONAL, DOUBLE,   now_ts,            7) \
X(a, STATIC,   OPTIONAL, UINT64,   dropped_events,    8) \
X(a, STATIC,   OPTIONAL, UINT64,   read_events,       9)
#define perfetto_protos_FtraceCpuStats_CALLBACK NULL
#define perfetto_protos_FtraceCpuStats_DEFAULT NULL

#define perfetto_protos_FtraceKprobeStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    hits,              1) \
X(a, STATIC,   OPTIONAL, INT64,    misses,            2)
#define perfetto_protos_FtraceKprobeStats_CALLBACK NULL
#define perfetto_protos_FtraceKprobeStats_DEFAULT NULL

#define perfetto_protos_FtraceStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    phase,             1) \
X(a, CALLBACK, REPEATED, MESSAGE,  cpu_stats,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   kernel_symbols_parsed,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   kernel_symbols_mem_kb,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   atrace_errors,     5) \
X(a, CALLBACK, REPEATED, STRING,   unknown_ftrace_events,   6) \
X(a, CALLBACK, REPEATED, STRING,   failed_ftrace_events,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     preserve_ftrace_buffer,   8) \
X(a, CALLBACK, REPEATED, UENUM,    ftrace_parse_errors,   9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  kprobe_stats,     10)
#define perfetto_protos_FtraceStats_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceStats_DEFAULT NULL
#define perfetto_protos_FtraceStats_cpu_stats_MSGTYPE perfetto_protos_FtraceCpuStats
#define perfetto_protos_FtraceStats_kprobe_stats_MSGTYPE perfetto_protos_FtraceKprobeStats

#define perfetto_protos_FtraceEventBundle_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  event,             2) \
X(a, STATIC,   OPTIONAL, BOOL,     lost_events,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  compact_sched,     4) \
X(a, STATIC,   OPTIONAL, UENUM,    ftrace_clock,      5) \
X(a, STATIC,   OPTIONAL, INT64,    ftrace_timestamp,   6) \
X(a, STATIC,   OPTIONAL, INT64,    boot_timestamp,    7) \
X(a, CALLBACK, REPEATED, MESSAGE,  error,             8) \
X(a, STATIC,   OPTIONAL, UINT64,   last_read_event_timestamp,   9) \
X(a, STATIC,   OPTIONAL, UINT64,   previous_bundle_end_timestamp,  10) \
X(a, CALLBACK, OPTIONAL, BYTES,    broken_abi_trace_page, 512)
#define perfetto_protos_FtraceEventBundle_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceEventBundle_DEFAULT NULL
#define perfetto_protos_FtraceEventBundle_event_MSGTYPE perfetto_protos_FtraceEvent
#define perfetto_protos_FtraceEventBundle_compact_sched_MSGTYPE perfetto_protos_FtraceEventBundle_CompactSched
#define perfetto_protos_FtraceEventBundle_error_MSGTYPE perfetto_protos_FtraceEventBundle_FtraceError

#define perfetto_protos_FtraceEventBundle_CompactSched_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT64,   switch_timestamp,   1) \
X(a, CALLBACK, REPEATED, INT64,    switch_prev_state,   2) \
X(a, CALLBACK, REPEATED, INT32,    switch_next_pid,   3) \
X(a, CALLBACK, REPEATED, INT32,    switch_next_prio,   4) \
X(a, CALLBACK, REPEATED, STRING,   intern_table,      5) \
X(a, CALLBACK, REPEATED, UINT32,   switch_next_comm_index,   6) \
X(a, CALLBACK, REPEATED, UINT64,   waking_timestamp,   7) \
X(a, CALLBACK, REPEATED, INT32,    waking_pid,        8) \
X(a, CALLBACK, REPEATED, INT32,    waking_target_cpu,   9) \
X(a, CALLBACK, REPEATED, INT32,    waking_prio,      10) \
X(a, CALLBACK, REPEATED, UINT32,   waking_comm_index,  11) \
X(a, CALLBACK, REPEATED, UINT32,   waking_common_flags,  12)
#define perfetto_protos_FtraceEventBundle_CompactSched_CALLBACK pb_default_field_callback
#define perfetto_protos_FtraceEventBundle_CompactSched_DEFAULT NULL

#define perfetto_protos_FtraceEventBundle_FtraceError_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         1) \
X(a, STATIC,   OPTIONAL, UENUM,    status,            2)
#define perfetto_protos_FtraceEventBundle_FtraceError_CALLBACK NULL
#define perfetto_protos_FtraceEventBundle_FtraceError_DEFAULT NULL

#define perfetto_protos_GpuCounterEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  counter_descriptor,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  counters,          2) \
X(a, STATIC,   OPTIONAL, INT32,    gpu_id,            3)
#define perfetto_protos_GpuCounterEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuCounterEvent_DEFAULT NULL
#define perfetto_protos_GpuCounterEvent_counter_descriptor_MSGTYPE perfetto_protos_GpuCounterDescriptor
#define perfetto_protos_GpuCounterEvent_counters_MSGTYPE perfetto_protos_GpuCounterEvent_GpuCounter

#define perfetto_protos_GpuCounterEvent_GpuCounter_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   counter_id,        1) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   2) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),   3)
#define perfetto_protos_GpuCounterEvent_GpuCounter_CALLBACK NULL
#define perfetto_protos_GpuCounterEvent_GpuCounter_DEFAULT NULL

#define perfetto_protos_GpuLog_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    severity,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   tag,               2) \
X(a, CALLBACK, OPTIONAL, STRING,   log_message,       3)
#define perfetto_protos_GpuLog_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuLog_DEFAULT NULL

#define perfetto_protos_GpuRenderStageEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   event_id,          1) \
X(a, STATIC,   OPTIONAL, UINT64,   duration,          2) \
X(a, STATIC,   OPTIONAL, INT32,    hw_queue_id,       3) \
X(a, STATIC,   OPTIONAL, INT32,    stage_id,          4) \
X(a, STATIC,   OPTIONAL, UINT64,   context,           5) \
X(a, CALLBACK, REPEATED, MESSAGE,  extra_data,        6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  specifications,    7) \
X(a, STATIC,   OPTIONAL, UINT64,   render_target_handle,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   render_pass_handle,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   submission_id,    10) \
X(a, STATIC,   OPTIONAL, INT32,    gpu_id,           11) \
X(a, STATIC,   OPTIONAL, UINT64,   command_buffer_handle,  12) \
X(a, STATIC,   OPTIONAL, UINT64,   hw_queue_iid,     13) \
X(a, STATIC,   OPTIONAL, UINT64,   stage_iid,        14) \
X(a, CALLBACK, REPEATED, UINT64,   render_subpass_index_mask,  15) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      100)
#define perfetto_protos_GpuRenderStageEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuRenderStageEvent_DEFAULT NULL
#define perfetto_protos_GpuRenderStageEvent_extra_data_MSGTYPE perfetto_protos_GpuRenderStageEvent_ExtraData
#define perfetto_protos_GpuRenderStageEvent_specifications_MSGTYPE perfetto_protos_GpuRenderStageEvent_Specifications

#define perfetto_protos_GpuRenderStageEvent_ExtraData_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_GpuRenderStageEvent_ExtraData_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuRenderStageEvent_ExtraData_DEFAULT NULL

#define perfetto_protos_GpuRenderStageEvent_Specifications_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  context_spec,      1) \
X(a, CALLBACK, REPEATED, MESSAGE,  hw_queue,          2) \
X(a, CALLBACK, REPEATED, MESSAGE,  stage,             3)
#define perfetto_protos_GpuRenderStageEvent_Specifications_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuRenderStageEvent_Specifications_DEFAULT NULL
#define perfetto_protos_GpuRenderStageEvent_Specifications_context_spec_MSGTYPE perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec
#define perfetto_protos_GpuRenderStageEvent_Specifications_hw_queue_MSGTYPE perfetto_protos_GpuRenderStageEvent_Specifications_Description
#define perfetto_protos_GpuRenderStageEvent_Specifications_stage_MSGTYPE perfetto_protos_GpuRenderStageEvent_Specifications_Description

#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   context,           1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2)
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_CALLBACK NULL
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_DEFAULT NULL

#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       2)
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_CALLBACK pb_default_field_callback
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_DEFAULT NULL

#define perfetto_protos_InternedGraphicsContext_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               2) \
X(a, STATIC,   OPTIONAL, UENUM,    api,               3)
#define perfetto_protos_InternedGraphicsContext_CALLBACK NULL
#define perfetto_protos_InternedGraphicsContext_DEFAULT NULL

#define perfetto_protos_InternedGpuRenderStageSpecification_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   description,       3) \
X(a, STATIC,   OPTIONAL, UENUM,    category,          4)
#define perfetto_protos_InternedGpuRenderStageSpecification_CALLBACK pb_default_field_callback
#define perfetto_protos_InternedGpuRenderStageSpecification_DEFAULT NULL

#define perfetto_protos_VulkanApiEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vk_debug_utils_object_name,event.vk_debug_utils_object_name),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event,vk_queue_submit,event.vk_queue_submit),   2)
#define perfetto_protos_VulkanApiEvent_CALLBACK NULL
#define perfetto_protos_VulkanApiEvent_DEFAULT NULL
#define perfetto_protos_VulkanApiEvent_event_vk_debug_utils_object_name_MSGTYPE perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName
#define perfetto_protos_VulkanApiEvent_event_vk_queue_submit_MSGTYPE perfetto_protos_VulkanApiEvent_VkQueueSubmit

#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   vk_device,         2) \
X(a, STATIC,   OPTIONAL, INT32,    object_type,       3) \
X(a, STATIC,   OPTIONAL, UINT64,   object,            4) \
X(a, CALLBACK, OPTIONAL, STRING,   object_name,       5)
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_CALLBACK pb_default_field_callback
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_DEFAULT NULL

#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   duration_ns,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   vk_queue,          4) \
X(a, CALLBACK, REPEATED, UINT64,   vk_command_buffers,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   submission_id,     6)
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_CALLBACK pb_default_field_callback
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_DEFAULT NULL

#define perfetto_protos_VulkanMemoryEventAnnotation_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   key_iid,           1) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   2) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),   3) \
X(a, STATIC,   ONEOF,    UINT64,   (value,string_iid,value.string_iid),   4)
#define perfetto_protos_VulkanMemoryEventAnnotation_CALLBACK NULL
#define perfetto_protos_VulkanMemoryEventAnnotation_DEFAULT NULL

#define perfetto_protos_VulkanMemoryEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    source,            1) \
X(a, STATIC,   OPTIONAL, UENUM,    operation,         2) \
X(a, STATIC,   OPTIONAL, INT64,    timestamp,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               4) \
X(a, STATIC,   OPTIONAL, FIXED64,  memory_address,    5) \
X(a, STATIC,   OPTIONAL, UINT64,   memory_size,       6) \
X(a, STATIC,   OPTIONAL, UINT64,   caller_iid,        7) \
X(a, STATIC,   OPTIONAL, UENUM,    allocation_scope,   8) \
X(a, CALLBACK, REPEATED, MESSAGE,  annotations,       9) \
X(a, STATIC,   OPTIONAL, FIXED64,  device,           16) \
X(a, STATIC,   OPTIONAL, FIXED64,  device_memory,    17) \
X(a, STATIC,   OPTIONAL, UINT32,   memory_type,      18) \
X(a, STATIC,   OPTIONAL, UINT32,   heap,             19) \
X(a, STATIC,   OPTIONAL, FIXED64,  object_handle,    20)
#define perfetto_protos_VulkanMemoryEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_VulkanMemoryEvent_DEFAULT NULL
#define perfetto_protos_VulkanMemoryEvent_annotations_MSGTYPE perfetto_protos_VulkanMemoryEventAnnotation

#define perfetto_protos_InternedString_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, BYTES,    str,               2)
#define perfetto_protos_InternedString_CALLBACK pb_default_field_callback
#define perfetto_protos_InternedString_DEFAULT NULL

#define perfetto_protos_Line_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   function_name,     1) \
X(a, CALLBACK, OPTIONAL, STRING,   source_file_name,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   line_number,       3)
#define perfetto_protos_Line_CALLBACK pb_default_field_callback
#define perfetto_protos_Line_DEFAULT NULL

#define perfetto_protos_AddressSymbols_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   address,           1) \
X(a, CALLBACK, REPEATED, MESSAGE,  lines,             2)
#define perfetto_protos_AddressSymbols_CALLBACK pb_default_field_callback
#define perfetto_protos_AddressSymbols_DEFAULT NULL
#define perfetto_protos_AddressSymbols_lines_MSGTYPE perfetto_protos_Line

#define perfetto_protos_ModuleSymbols_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   build_id,          2) \
X(a, CALLBACK, REPEATED, MESSAGE,  address_symbols,   3)
#define perfetto_protos_ModuleSymbols_CALLBACK pb_default_field_callback
#define perfetto_protos_ModuleSymbols_DEFAULT NULL
#define perfetto_protos_ModuleSymbols_address_symbols_MSGTYPE perfetto_protos_AddressSymbols

#define perfetto_protos_Mapping_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   build_id,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   start_offset,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             4) \
X(a, STATIC,   OPTIONAL, UINT64,   end,               5) \
X(a, STATIC,   OPTIONAL, UINT64,   load_bias,         6) \
X(a, CALLBACK, REPEATED, UINT64,   path_string_ids,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   exact_offset,      8)
#define perfetto_protos_Mapping_CALLBACK pb_default_field_callback
#define perfetto_protos_Mapping_DEFAULT NULL

#define perfetto_protos_Frame_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   function_name_id,   2) \
X(a, STATIC,   OPTIONAL, UINT64,   mapping_id,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   rel_pc,            4)
#define perfetto_protos_Frame_CALLBACK NULL
#define perfetto_protos_Frame_DEFAULT NULL

#define perfetto_protos_Callstack_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, REPEATED, UINT64,   frame_ids,         2)
#define perfetto_protos_Callstack_CALLBACK pb_default_field_callback
#define perfetto_protos_Callstack_DEFAULT NULL

#define perfetto_protos_HistogramName_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_HistogramName_CALLBACK pb_default_field_callback
#define perfetto_protos_HistogramName_DEFAULT NULL

#define perfetto_protos_ChromeHistogramSample_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   name_hash,         1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, INT64,    sample,            3) \
X(a, STATIC,   OPTIONAL, UINT64,   name_iid,          4)
#define perfetto_protos_ChromeHistogramSample_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeHistogramSample_DEFAULT NULL

#define perfetto_protos_DebugAnnotation_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT64,   (name_field,name_iid,name_field.name_iid),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   2) \
X(a, STATIC,   ONEOF,    UINT64,   (value,uint_value,value.uint_value),   3) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   4) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),   5) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),   6) \
X(a, STATIC,   ONEOF,    UINT64,   (value,pointer_value,value.pointer_value),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,nested_value,value.nested_value),   8) \
X(a, CALLBACK, ONEOF,    STRING,   (value,legacy_json_value,value.legacy_json_value),   9) \
X(a, CALLBACK, ONEOF,    STRING,   (name_field,name,name_field.name),  10) \
X(a, CALLBACK, REPEATED, MESSAGE,  dict_entries,     11) \
X(a, CALLBACK, REPEATED, MESSAGE,  array_values,     12) \
X(a, STATIC,   ONEOF,    UINT64,   (proto_type_descriptor,proto_type_name_iid,proto_type_descriptor.proto_type_name_iid),  13) \
X(a, CALLBACK, OPTIONAL, BYTES,    proto_value,      14) \
X(a, CALLBACK, ONEOF,    STRING,   (proto_type_descriptor,proto_type_name,proto_type_descriptor.proto_type_name),  16) \
X(a, STATIC,   ONEOF,    UINT64,   (value,string_value_iid,value.string_value_iid),  17)
#define perfetto_protos_DebugAnnotation_CALLBACK pb_default_field_callback
#define perfetto_protos_DebugAnnotation_DEFAULT NULL
#define perfetto_protos_DebugAnnotation_value_nested_value_MSGTYPE perfetto_protos_DebugAnnotation_NestedValue
#define perfetto_protos_DebugAnnotation_dict_entries_MSGTYPE perfetto_protos_DebugAnnotation
#define perfetto_protos_DebugAnnotation_array_values_MSGTYPE perfetto_protos_DebugAnnotation

#define perfetto_protos_DebugAnnotation_NestedValue_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    nested_type,       1) \
X(a, CALLBACK, REPEATED, STRING,   dict_keys,         2) \
X(a, CALLBACK, REPEATED, MESSAGE,  dict_values,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  array_values,      4) \
X(a, STATIC,   OPTIONAL, INT64,    int_value,         5) \
X(a, STATIC,   OPTIONAL, DOUBLE,   double_value,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     bool_value,        7) \
X(a, CALLBACK, OPTIONAL, STRING,   string_value,      8)
#define perfetto_protos_DebugAnnotation_NestedValue_CALLBACK pb_default_field_callback
#define perfetto_protos_DebugAnnotation_NestedValue_DEFAULT NULL
#define perfetto_protos_DebugAnnotation_NestedValue_dict_values_MSGTYPE perfetto_protos_DebugAnnotation_NestedValue
#define perfetto_protos_DebugAnnotation_NestedValue_array_values_MSGTYPE perfetto_protos_DebugAnnotation_NestedValue

#define perfetto_protos_DebugAnnotationName_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_DebugAnnotationName_CALLBACK pb_default_field_callback
#define perfetto_protos_DebugAnnotationName_DEFAULT NULL

#define perfetto_protos_DebugAnnotationValueTypeName_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_DebugAnnotationValueTypeName_CALLBACK pb_default_field_callback
#define perfetto_protos_DebugAnnotationValueTypeName_DEFAULT NULL

#define perfetto_protos_LogMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   source_location_iid,   1) \
X(a, STATIC,   OPTIONAL, UINT64,   body_iid,          2) \
X(a, STATIC,   OPTIONAL, UENUM,    prio,              3)
#define perfetto_protos_LogMessage_CALLBACK NULL
#define perfetto_protos_LogMessage_DEFAULT NULL

#define perfetto_protos_LogMessageBody_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   body,              2)
#define perfetto_protos_LogMessageBody_CALLBACK pb_default_field_callback
#define perfetto_protos_LogMessageBody_DEFAULT NULL

#define perfetto_protos_UnsymbolizedSourceLocation_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   mapping_id,        2) \
X(a, STATIC,   OPTIONAL, UINT64,   rel_pc,            3)
#define perfetto_protos_UnsymbolizedSourceLocation_CALLBACK NULL
#define perfetto_protos_UnsymbolizedSourceLocation_DEFAULT NULL

#define perfetto_protos_SourceLocation_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   file_name,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   function_name,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   line_number,       4)
#define perfetto_protos_SourceLocation_CALLBACK pb_default_field_callback
#define perfetto_protos_SourceLocation_DEFAULT NULL

#define perfetto_protos_ChromeActiveProcesses_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    pid,               1)
#define perfetto_protos_ChromeActiveProcesses_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeActiveProcesses_DEFAULT NULL

#define perfetto_protos_ChromeApplicationStateInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    application_state,   1)
#define perfetto_protos_ChromeApplicationStateInfo_CALLBACK NULL
#define perfetto_protos_ChromeApplicationStateInfo_DEFAULT NULL

#define perfetto_protos_ChromeCompositorSchedulerState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  state_machine,     1) \
X(a, STATIC,   OPTIONAL, BOOL,     observing_begin_frame_source,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     begin_impl_frame_deadline_task,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     pending_begin_frame_task,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     skipped_last_frame_missed_exceeded_deadline,   5) \
X(a, STATIC,   OPTIONAL, UENUM,    inside_action,     7) \
X(a, STATIC,   OPTIONAL, UENUM,    deadline_mode,     8) \
X(a, STATIC,   OPTIONAL, INT64,    deadline_us,       9) \
X(a, STATIC,   OPTIONAL, INT64,    deadline_scheduled_at_us,  10) \
X(a, STATIC,   OPTIONAL, INT64,    now_us,           11) \
X(a, STATIC,   OPTIONAL, INT64,    now_to_deadline_delta_us,  12) \
X(a, STATIC,   OPTIONAL, INT64,    now_to_deadline_scheduled_at_delta_us,  13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  begin_impl_frame_args,  14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  begin_frame_observer_state,  15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  begin_frame_source_state,  16) \
X(a, STATIC,   OPTIONAL, MESSAGE,  compositor_timing_history,  17)
#define perfetto_protos_ChromeCompositorSchedulerState_CALLBACK NULL
#define perfetto_protos_ChromeCompositorSchedulerState_DEFAULT NULL
#define perfetto_protos_ChromeCompositorSchedulerState_state_machine_MSGTYPE perfetto_protos_ChromeCompositorStateMachine
#define perfetto_protos_ChromeCompositorSchedulerState_begin_impl_frame_args_MSGTYPE perfetto_protos_BeginImplFrameArgs
#define perfetto_protos_ChromeCompositorSchedulerState_begin_frame_observer_state_MSGTYPE perfetto_protos_BeginFrameObserverState
#define perfetto_protos_ChromeCompositorSchedulerState_begin_frame_source_state_MSGTYPE perfetto_protos_BeginFrameSourceState
#define perfetto_protos_ChromeCompositorSchedulerState_compositor_timing_history_MSGTYPE perfetto_protos_CompositorTimingHistory

#define perfetto_protos_ChromeCompositorStateMachine_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  major_state,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  minor_state,       2)
#define perfetto_protos_ChromeCompositorStateMachine_CALLBACK NULL
#define perfetto_protos_ChromeCompositorStateMachine_DEFAULT NULL
#define perfetto_protos_ChromeCompositorStateMachine_major_state_MSGTYPE perfetto_protos_ChromeCompositorStateMachine_MajorState
#define perfetto_protos_ChromeCompositorStateMachine_minor_state_MSGTYPE perfetto_protos_ChromeCompositorStateMachine_MinorState

#define perfetto_protos_ChromeCompositorStateMachine_MajorState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    next_action,       1) \
X(a, STATIC,   OPTIONAL, UENUM,    begin_impl_frame_state,   2) \
X(a, STATIC,   OPTIONAL, UENUM,    begin_main_frame_state,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    layer_tree_frame_sink_state,   4) \
X(a, STATIC,   OPTIONAL, UENUM,    forced_redraw_state,   5)
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_CALLBACK NULL
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_DEFAULT NULL

#define perfetto_protos_ChromeCompositorStateMachine_MinorState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    commit_count,      1) \
X(a, STATIC,   OPTIONAL, INT32,    current_frame_number,   2) \
X(a, STATIC,   OPTIONAL, INT32,    last_frame_number_submit_performed,   3) \
X(a, STATIC,   OPTIONAL, INT32,    last_frame_number_draw_performed,   4) \
X(a, STATIC,   OPTIONAL, INT32,    last_frame_number_begin_main_frame_sent,   5) \
X(a, STATIC,   OPTIONAL, BOOL,     did_draw,          6) \
X(a, STATIC,   OPTIONAL, BOOL,     did_send_begin_main_frame_for_current_frame,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     did_notify_begin_main_frame_not_expected_until,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     did_notify_begin_main_frame_not_expected_soon,   9) \
X(a, STATIC,   OPTIONAL, BOOL,     wants_begin_main_frame_not_expected,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     did_commit_during_frame,  11) \
X(a, STATIC,   OPTIONAL, BOOL,     did_invalidate_layer_tree_frame_sink,  12) \
X(a, STATIC,   OPTIONAL, BOOL,     did_perform_impl_side_invalidaion,  13) \
X(a, STATIC,   OPTIONAL, BOOL,     did_prepare_tiles,  14) \
X(a, STATIC,   OPTIONAL, INT32,    consecutive_checkerboard_animations,  15) \
X(a, STATIC,   OPTIONAL, INT32,    pending_submit_frames,  16) \
X(a, STATIC,   OPTIONAL, INT32,    submit_frames_with_current_layer_tree_frame_sink,  17) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_redraw,     18) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_prepare_tiles,  19) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_begin_main_frame,  20) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_one_begin_impl_frame,  21) \
X(a, STATIC,   OPTIONAL, BOOL,     visible,          22) \
X(a, STATIC,   OPTIONAL, BOOL,     begin_frame_source_paused,  23) \
X(a, STATIC,   OPTIONAL, BOOL,     can_draw,         24) \
X(a, STATIC,   OPTIONAL, BOOL,     resourceless_draw,  25) \
X(a, STATIC,   OPTIONAL, BOOL,     has_pending_tree,  26) \
X(a, STATIC,   OPTIONAL, BOOL,     pending_tree_is_ready_for_activation,  27) \
X(a, STATIC,   OPTIONAL, BOOL,     active_tree_needs_first_draw,  28) \
X(a, STATIC,   OPTIONAL, BOOL,     active_tree_is_ready_to_draw,  29) \
X(a, STATIC,   OPTIONAL, BOOL,     did_create_and_initialize_first_layer_tree_frame_sink,  30) \
X(a, STATIC,   OPTIONAL, UENUM,    tree_priority,    31) \
X(a, STATIC,   OPTIONAL, UENUM,    scroll_handler_state,  32) \
X(a, STATIC,   OPTIONAL, BOOL,     critical_begin_main_frame_to_activate_is_fast,  33) \
X(a, STATIC,   OPTIONAL, BOOL,     main_thread_missed_last_deadline,  34) \
X(a, STATIC,   OPTIONAL, BOOL,     video_needs_begin_frames,  36) \
X(a, STATIC,   OPTIONAL, BOOL,     defer_begin_main_frame,  37) \
X(a, STATIC,   OPTIONAL, BOOL,     last_commit_had_no_updates,  38) \
X(a, STATIC,   OPTIONAL, BOOL,     did_draw_in_last_frame,  39) \
X(a, STATIC,   OPTIONAL, BOOL,     did_submit_in_last_frame,  40) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_impl_side_invalidation,  41) \
X(a, STATIC,   OPTIONAL, BOOL,     current_pending_tree_is_impl_side,  42) \
X(a, STATIC,   OPTIONAL, BOOL,     previous_pending_tree_was_impl_side,  43) \
X(a, STATIC,   OPTIONAL, BOOL,     processing_animation_worklets_for_active_tree,  44) \
X(a, STATIC,   OPTIONAL, BOOL,     processing_animation_worklets_for_pending_tree,  45) \
X(a, STATIC,   OPTIONAL, BOOL,     processing_paint_worklets_for_pending_tree,  46)
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_CALLBACK NULL
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_DEFAULT NULL

#define perfetto_protos_BeginFrameArgs_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   source_id,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   sequence_number,   3) \
X(a, STATIC,   OPTIONAL, INT64,    frame_time_us,     4) \
X(a, STATIC,   OPTIONAL, INT64,    deadline_us,       5) \
X(a, STATIC,   OPTIONAL, INT64,    interval_delta_us,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     on_critical_path,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     animate_only,      8) \
X(a, STATIC,   ONEOF,    UINT64,   (created_from,source_location_iid,created_from.source_location_iid),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (created_from,source_location,created_from.source_location),  10) \
X(a, STATIC,   OPTIONAL, INT64,    frames_throttled_since_last,  12)
#define perfetto_protos_BeginFrameArgs_CALLBACK NULL
#define perfetto_protos_BeginFrameArgs_DEFAULT NULL
#define perfetto_protos_BeginFrameArgs_created_from_source_location_MSGTYPE perfetto_protos_SourceLocation

#define perfetto_protos_BeginImplFrameArgs_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    updated_at_us,     1) \
X(a, STATIC,   OPTIONAL, INT64,    finished_at_us,    2) \
X(a, STATIC,   OPTIONAL, UENUM,    state,             3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (args,current_args,args.current_args),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (args,last_args,args.last_args),   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timestamps_in_us,   6)
#define perfetto_protos_BeginImplFrameArgs_CALLBACK NULL
#define perfetto_protos_BeginImplFrameArgs_DEFAULT NULL
#define perfetto_protos_BeginImplFrameArgs_args_current_args_MSGTYPE perfetto_protos_BeginFrameArgs
#define perfetto_protos_BeginImplFrameArgs_args_last_args_MSGTYPE perfetto_protos_BeginFrameArgs
#define perfetto_protos_BeginImplFrameArgs_timestamps_in_us_MSGTYPE perfetto_protos_BeginImplFrameArgs_TimestampsInUs

#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    interval_delta,    1) \
X(a, STATIC,   OPTIONAL, INT64,    now_to_deadline_delta,   2) \
X(a, STATIC,   OPTIONAL, INT64,    frame_time_to_now_delta,   3) \
X(a, STATIC,   OPTIONAL, INT64,    frame_time_to_deadline_delta,   4) \
X(a, STATIC,   OPTIONAL, INT64,    now,               5) \
X(a, STATIC,   OPTIONAL, INT64,    frame_time,        6) \
X(a, STATIC,   OPTIONAL, INT64,    deadline,          7)
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_CALLBACK NULL
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_DEFAULT NULL

#define perfetto_protos_BeginFrameObserverState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    dropped_begin_frame_args,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  last_begin_frame_args,   2)
#define perfetto_protos_BeginFrameObserverState_CALLBACK NULL
#define perfetto_protos_BeginFrameObserverState_DEFAULT NULL
#define perfetto_protos_BeginFrameObserverState_last_begin_frame_args_MSGTYPE perfetto_protos_BeginFrameArgs

#define perfetto_protos_BeginFrameSourceState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   source_id,         1) \
X(a, STATIC,   OPTIONAL, BOOL,     paused,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   num_observers,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  last_begin_frame_args,   4)
#define perfetto_protos_BeginFrameSourceState_CALLBACK NULL
#define perfetto_protos_BeginFrameSourceState_DEFAULT NULL
#define perfetto_protos_BeginFrameSourceState_last_begin_frame_args_MSGTYPE perfetto_protos_BeginFrameArgs

#define perfetto_protos_CompositorTimingHistory_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    begin_main_frame_queue_critical_estimate_delta_us,   1) \
X(a, STATIC,   OPTIONAL, INT64,    begin_main_frame_queue_not_critical_estimate_delta_us,   2) \
X(a, STATIC,   OPTIONAL, INT64,    begin_main_frame_start_to_ready_to_commit_estimate_delta_us,   3) \
X(a, STATIC,   OPTIONAL, INT64,    commit_to_ready_to_activate_estimate_delta_us,   4) \
X(a, STATIC,   OPTIONAL, INT64,    prepare_tiles_estimate_delta_us,   5) \
X(a, STATIC,   OPTIONAL, INT64,    activate_estimate_delta_us,   6) \
X(a, STATIC,   OPTIONAL, INT64,    draw_estimate_delta_us,   7)
#define perfetto_protos_CompositorTimingHistory_CALLBACK NULL
#define perfetto_protos_CompositorTimingHistory_DEFAULT NULL

#define perfetto_protos_ChromeContentSettingsEventInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   number_of_exceptions,   1)
#define perfetto_protos_ChromeContentSettingsEventInfo_CALLBACK NULL
#define perfetto_protos_ChromeContentSettingsEventInfo_DEFAULT NULL

#define perfetto_protos_ChromeFrameReporter_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    state,             1) \
X(a, STATIC,   OPTIONAL, UENUM,    reason,            2) \
X(a, STATIC,   OPTIONAL, UINT64,   frame_source,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   frame_sequence,    4) \
X(a, STATIC,   OPTIONAL, BOOL,     affects_smoothness,   5) \
X(a, STATIC,   OPTIONAL, UENUM,    scroll_state,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     has_main_animation,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     has_compositor_animation,   8) \
X(a, STATIC,   OPTIONAL, BOOL,     has_smooth_input_main,   9) \
X(a, STATIC,   OPTIONAL, BOOL,     has_missing_content,  10) \
X(a, STATIC,   OPTIONAL, UINT64,   layer_tree_host_id,  11) \
X(a, STATIC,   OPTIONAL, BOOL,     has_high_latency,  12) \
X(a, STATIC,   OPTIONAL, UENUM,    frame_type,       13) \
X(a, CALLBACK, REPEATED, STRING,   high_latency_contribution_stage,  14) \
X(a, STATIC,   OPTIONAL, BOOL,     checkerboarded_needs_raster,  15) \
X(a, STATIC,   OPTIONAL, BOOL,     checkerboarded_needs_record,  16) \
X(a, STATIC,   OPTIONAL, INT64,    surface_frame_trace_id,  17) \
X(a, STATIC,   OPTIONAL, INT64,    display_trace_id,  18)
#define perfetto_protos_ChromeFrameReporter_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeFrameReporter_DEFAULT NULL

#define perfetto_protos_ChromeKeyedService_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1)
#define perfetto_protos_ChromeKeyedService_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeKeyedService_DEFAULT NULL

#define perfetto_protos_ChromeLatencyInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    trace_id,          1) \
X(a, STATIC,   OPTIONAL, UENUM,    step,              2) \
X(a, STATIC,   OPTIONAL, INT32,    frame_tree_node_id,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  component_info,    4) \
X(a, STATIC,   OPTIONAL, BOOL,     is_coalesced,      5) \
X(a, STATIC,   OPTIONAL, INT64,    gesture_scroll_id,   6) \
X(a, STATIC,   OPTIONAL, INT64,    touch_id,          7) \
X(a, STATIC,   OPTIONAL, UENUM,    input_type,        8)
#define perfetto_protos_ChromeLatencyInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeLatencyInfo_DEFAULT NULL
#define perfetto_protos_ChromeLatencyInfo_component_info_MSGTYPE perfetto_protos_ChromeLatencyInfo_ComponentInfo

#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    component_type,    1) \
X(a, STATIC,   OPTIONAL, UINT64,   time_us,           2)
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_CALLBACK NULL
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_DEFAULT NULL

#define perfetto_protos_ChromeLegacyIpc_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    message_class,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   message_line,      2)
#define perfetto_protos_ChromeLegacyIpc_CALLBACK NULL
#define perfetto_protos_ChromeLegacyIpc_DEFAULT NULL

#define perfetto_protos_ChromeMessagePump_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     sent_messages_in_queue,   1) \
X(a, STATIC,   OPTIONAL, UINT64,   io_handler_location_iid,   2)
#define perfetto_protos_ChromeMessagePump_CALLBACK NULL
#define perfetto_protos_ChromeMessagePump_DEFAULT NULL

#define perfetto_protos_ChromeMojoEventInfo_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   watcher_notify_interface_tag,   1) \
X(a, STATIC,   OPTIONAL, UINT32,   ipc_hash,          2) \
X(a, CALLBACK, OPTIONAL, STRING,   mojo_interface_tag,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   mojo_interface_method_iid,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     is_reply,          5) \
X(a, STATIC,   OPTIONAL, UINT64,   payload_size,      6) \
X(a, STATIC,   OPTIONAL, UINT64,   data_num_bytes,    7)
#define perfetto_protos_ChromeMojoEventInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeMojoEventInfo_DEFAULT NULL

#define perfetto_protos_ChromeRendererSchedulerState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    rail_mode,         1) \
X(a, STATIC,   OPTIONAL, BOOL,     is_backgrounded,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     is_hidden,         3)
#define perfetto_protos_ChromeRendererSchedulerState_CALLBACK NULL
#define perfetto_protos_ChromeRendererSchedulerState_DEFAULT NULL

#define perfetto_protos_ChromeUserEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   action,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   action_hash,       2)
#define perfetto_protos_ChromeUserEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeUserEvent_DEFAULT NULL

#define perfetto_protos_ChromeWindowHandleEventInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   dpi,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   message_id,        2) \
X(a, STATIC,   OPTIONAL, FIXED64,  hwnd_ptr,          3)
#define perfetto_protos_ChromeWindowHandleEventInfo_CALLBACK NULL
#define perfetto_protos_ChromeWindowHandleEventInfo_DEFAULT NULL

#define perfetto_protos_Screenshot_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, BYTES,    jpg_image,         1)
#define perfetto_protos_Screenshot_CALLBACK pb_default_field_callback
#define perfetto_protos_Screenshot_DEFAULT NULL

#define perfetto_protos_TaskExecution_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   posted_from_iid,   1)
#define perfetto_protos_TaskExecution_CALLBACK NULL
#define perfetto_protos_TaskExecution_DEFAULT NULL

#define perfetto_protos_TrackEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    INT64,    (timestamp,timestamp_delta_us,timestamp.timestamp_delta_us),   1) \
X(a, STATIC,   ONEOF,    INT64,    (thread_time,thread_time_delta_us,thread_time.thread_time_delta_us),   2) \
X(a, CALLBACK, REPEATED, UINT64,   category_iids,     3) \
X(a, CALLBACK, REPEATED, MESSAGE,  debug_annotations,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  task_execution,    5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  legacy_event,      6) \
X(a, STATIC,   ONEOF,    INT64,    (thread_instruction_count,thread_instruction_count_delta,thread_instruction_count.thread_instruction_count_delta),   8) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              9) \
X(a, STATIC,   ONEOF,    UINT64,   (name_field,name_iid,name_field.name_iid),  10) \
X(a, STATIC,   OPTIONAL, UINT64,   track_uuid,       11) \
X(a, CALLBACK, REPEATED, INT64,    extra_counter_values,  12) \
X(a, STATIC,   ONEOF,    INT64,    (timestamp,timestamp_absolute_us,timestamp.timestamp_absolute_us),  16) \
X(a, STATIC,   ONEOF,    INT64,    (thread_time,thread_time_absolute_us,thread_time.thread_time_absolute_us),  17) \
X(a, STATIC,   ONEOF,    INT64,    (thread_instruction_count,thread_instruction_count_absolute,thread_instruction_count.thread_instruction_count_absolute),  20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  log_message,      21) \
X(a, CALLBACK, REPEATED, STRING,   categories,       22) \
X(a, CALLBACK, ONEOF,    STRING,   (name_field,name,name_field.name),  23) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cc_scheduler_state,  24) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_user_event,  25) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_keyed_service,  26) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_legacy_ipc,  27) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_histogram_sample,  28) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_latency_info,  29) \
X(a, STATIC,   ONEOF,    INT64,    (counter_value_field,counter_value,counter_value_field.counter_value),  30) \
X(a, CALLBACK, REPEATED, UINT64,   extra_counter_track_uuids,  31) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_frame_reporter,  32) \
X(a, STATIC,   ONEOF,    MESSAGE,  (source_location_field,source_location,source_location_field.source_location),  33) \
X(a, STATIC,   ONEOF,    UINT64,   (source_location_field,source_location_iid,source_location_field.source_location_iid),  34) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_message_pump,  35) \
X(a, CALLBACK, REPEATED, UINT64,   flow_ids_old,     36) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_mojo_event_info,  38) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_application_state_info,  39) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_renderer_scheduler_state,  40) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_window_handle_event_info,  41) \
X(a, CALLBACK, REPEATED, UINT64,   terminating_flow_ids_old,  42) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_content_settings_event_info,  43) \
X(a, STATIC,   ONEOF,    DOUBLE,   (counter_value_field,double_counter_value,counter_value_field.double_counter_value),  44) \
X(a, CALLBACK, REPEATED, UINT64,   extra_double_counter_track_uuids,  45) \
X(a, CALLBACK, REPEATED, DOUBLE,   extra_double_counter_values,  46) \
X(a, CALLBACK, REPEATED, FIXED64,  flow_ids,         47) \
X(a, CALLBACK, REPEATED, FIXED64,  terminating_flow_ids,  48) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_active_processes,  49) \
X(a, STATIC,   OPTIONAL, MESSAGE,  screenshot,       50) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define perfetto_protos_TrackEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEvent_DEFAULT NULL
#define perfetto_protos_TrackEvent_debug_annotations_MSGTYPE perfetto_protos_DebugAnnotation
#define perfetto_protos_TrackEvent_task_execution_MSGTYPE perfetto_protos_TaskExecution
#define perfetto_protos_TrackEvent_legacy_event_MSGTYPE perfetto_protos_TrackEvent_LegacyEvent
#define perfetto_protos_TrackEvent_log_message_MSGTYPE perfetto_protos_LogMessage
#define perfetto_protos_TrackEvent_cc_scheduler_state_MSGTYPE perfetto_protos_ChromeCompositorSchedulerState
#define perfetto_protos_TrackEvent_chrome_user_event_MSGTYPE perfetto_protos_ChromeUserEvent
#define perfetto_protos_TrackEvent_chrome_keyed_service_MSGTYPE perfetto_protos_ChromeKeyedService
#define perfetto_protos_TrackEvent_chrome_legacy_ipc_MSGTYPE perfetto_protos_ChromeLegacyIpc
#define perfetto_protos_TrackEvent_chrome_histogram_sample_MSGTYPE perfetto_protos_ChromeHistogramSample
#define perfetto_protos_TrackEvent_chrome_latency_info_MSGTYPE perfetto_protos_ChromeLatencyInfo
#define perfetto_protos_TrackEvent_chrome_frame_reporter_MSGTYPE perfetto_protos_ChromeFrameReporter
#define perfetto_protos_TrackEvent_source_location_field_source_location_MSGTYPE perfetto_protos_SourceLocation
#define perfetto_protos_TrackEvent_chrome_message_pump_MSGTYPE perfetto_protos_ChromeMessagePump
#define perfetto_protos_TrackEvent_chrome_mojo_event_info_MSGTYPE perfetto_protos_ChromeMojoEventInfo
#define perfetto_protos_TrackEvent_chrome_application_state_info_MSGTYPE perfetto_protos_ChromeApplicationStateInfo
#define perfetto_protos_TrackEvent_chrome_renderer_scheduler_state_MSGTYPE perfetto_protos_ChromeRendererSchedulerState
#define perfetto_protos_TrackEvent_chrome_window_handle_event_info_MSGTYPE perfetto_protos_ChromeWindowHandleEventInfo
#define perfetto_protos_TrackEvent_chrome_content_settings_event_info_MSGTYPE perfetto_protos_ChromeContentSettingsEventInfo
#define perfetto_protos_TrackEvent_chrome_active_processes_MSGTYPE perfetto_protos_ChromeActiveProcesses
#define perfetto_protos_TrackEvent_screenshot_MSGTYPE perfetto_protos_Screenshot

#define perfetto_protos_TrackEvent_LegacyEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   name_iid,          1) \
X(a, STATIC,   OPTIONAL, INT32,    phase,             2) \
X(a, STATIC,   OPTIONAL, INT64,    duration_us,       3) \
X(a, STATIC,   OPTIONAL, INT64,    thread_duration_us,   4) \
X(a, STATIC,   ONEOF,    UINT64,   (id,unscoped_id,id.unscoped_id),   6) \
X(a, CALLBACK, OPTIONAL, STRING,   id_scope,          7) \
X(a, STATIC,   OPTIONAL, UINT64,   bind_id,           8) \
X(a, STATIC,   OPTIONAL, BOOL,     use_async_tts,     9) \
X(a, STATIC,   ONEOF,    UINT64,   (id,local_id,id.local_id),  10) \
X(a, STATIC,   ONEOF,    UINT64,   (id,global_id,id.global_id),  11) \
X(a, STATIC,   OPTIONAL, BOOL,     bind_to_enclosing,  12) \
X(a, STATIC,   OPTIONAL, UENUM,    flow_direction,   13) \
X(a, STATIC,   OPTIONAL, UENUM,    instant_event_scope,  14) \
X(a, STATIC,   OPTIONAL, INT64,    thread_instruction_delta,  15) \
X(a, STATIC,   OPTIONAL, INT32,    pid_override,     18) \
X(a, STATIC,   OPTIONAL, INT32,    tid_override,     19)
#define perfetto_protos_TrackEvent_LegacyEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEvent_LegacyEvent_DEFAULT NULL

#define perfetto_protos_TrackEventDefaults_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   track_uuid,       11) \
X(a, CALLBACK, REPEATED, UINT64,   extra_counter_track_uuids,  31) \
X(a, CALLBACK, REPEATED, UINT64,   extra_double_counter_track_uuids,  45)
#define perfetto_protos_TrackEventDefaults_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackEventDefaults_DEFAULT NULL

#define perfetto_protos_EventCategory_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_EventCategory_CALLBACK pb_default_field_callback
#define perfetto_protos_EventCategory_DEFAULT NULL

#define perfetto_protos_EventName_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2)
#define perfetto_protos_EventName_CALLBACK pb_default_field_callback
#define perfetto_protos_EventName_DEFAULT NULL

#define perfetto_protos_InternedData_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  event_categories,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  event_names,       2) \
X(a, CALLBACK, REPEATED, MESSAGE,  debug_annotation_names,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  source_locations,   4) \
X(a, CALLBACK, REPEATED, MESSAGE,  function_names,    5) \
X(a, CALLBACK, REPEATED, MESSAGE,  frames,            6) \
X(a, CALLBACK, REPEATED, MESSAGE,  callstacks,        7) \
X(a, CALLBACK, REPEATED, MESSAGE,  build_ids,        16) \
X(a, CALLBACK, REPEATED, MESSAGE,  mapping_paths,    17) \
X(a, CALLBACK, REPEATED, MESSAGE,  source_paths,     18) \
X(a, CALLBACK, REPEATED, MESSAGE,  mappings,         19) \
X(a, CALLBACK, REPEATED, MESSAGE,  log_message_body,  20) \
X(a, CALLBACK, REPEATED, MESSAGE,  vulkan_memory_keys,  22) \
X(a, CALLBACK, REPEATED, MESSAGE,  graphics_contexts,  23) \
X(a, CALLBACK, REPEATED, MESSAGE,  gpu_specifications,  24) \
X(a, CALLBACK, REPEATED, MESSAGE,  histogram_names,  25) \
X(a, CALLBACK, REPEATED, MESSAGE,  kernel_symbols,   26) \
X(a, CALLBACK, REPEATED, MESSAGE,  debug_annotation_value_type_names,  27) \
X(a, CALLBACK, REPEATED, MESSAGE,  unsymbolized_source_locations,  28) \
X(a, CALLBACK, REPEATED, MESSAGE,  debug_annotation_string_values,  29) \
X(a, CALLBACK, REPEATED, MESSAGE,  packet_context,   30) \
X(a, CALLBACK, REPEATED, MESSAGE,  v8_js_function_name,  31) \
X(a, CALLBACK, REPEATED, MESSAGE,  v8_js_function,   32) \
X(a, CALLBACK, REPEATED, MESSAGE,  v8_js_script,     33) \
X(a, CALLBACK, REPEATED, MESSAGE,  v8_wasm_script,   34) \
X(a, CALLBACK, REPEATED, MESSAGE,  v8_isolate,       35) \
X(a, CALLBACK, REPEATED, MESSAGE,  protolog_string_args,  36) \
X(a, CALLBACK, REPEATED, MESSAGE,  protolog_stacktrace,  37) \
X(a, CALLBACK, REPEATED, MESSAGE,  viewcapture_package_name,  38) \
X(a, CALLBACK, REPEATED, MESSAGE,  viewcapture_window_name,  39) \
X(a, CALLBACK, REPEATED, MESSAGE,  viewcapture_view_id,  40) \
X(a, CALLBACK, REPEATED, MESSAGE,  viewcapture_class_name,  41) \
X(a, CALLBACK, REPEATED, MESSAGE,  app_wakelock_info,  42)
#define perfetto_protos_InternedData_CALLBACK pb_default_field_callback
#define perfetto_protos_InternedData_DEFAULT NULL
#define perfetto_protos_InternedData_event_categories_MSGTYPE perfetto_protos_EventCategory
#define perfetto_protos_InternedData_event_names_MSGTYPE perfetto_protos_EventName
#define perfetto_protos_InternedData_debug_annotation_names_MSGTYPE perfetto_protos_DebugAnnotationName
#define perfetto_protos_InternedData_source_locations_MSGTYPE perfetto_protos_SourceLocation
#define perfetto_protos_InternedData_function_names_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_frames_MSGTYPE perfetto_protos_Frame
#define perfetto_protos_InternedData_callstacks_MSGTYPE perfetto_protos_Callstack
#define perfetto_protos_InternedData_build_ids_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_mapping_paths_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_source_paths_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_mappings_MSGTYPE perfetto_protos_Mapping
#define perfetto_protos_InternedData_log_message_body_MSGTYPE perfetto_protos_LogMessageBody
#define perfetto_protos_InternedData_vulkan_memory_keys_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_graphics_contexts_MSGTYPE perfetto_protos_InternedGraphicsContext
#define perfetto_protos_InternedData_gpu_specifications_MSGTYPE perfetto_protos_InternedGpuRenderStageSpecification
#define perfetto_protos_InternedData_histogram_names_MSGTYPE perfetto_protos_HistogramName
#define perfetto_protos_InternedData_kernel_symbols_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_debug_annotation_value_type_names_MSGTYPE perfetto_protos_DebugAnnotationValueTypeName
#define perfetto_protos_InternedData_unsymbolized_source_locations_MSGTYPE perfetto_protos_UnsymbolizedSourceLocation
#define perfetto_protos_InternedData_debug_annotation_string_values_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_packet_context_MSGTYPE perfetto_protos_NetworkPacketContext
#define perfetto_protos_InternedData_v8_js_function_name_MSGTYPE perfetto_protos_InternedV8String
#define perfetto_protos_InternedData_v8_js_function_MSGTYPE perfetto_protos_InternedV8JsFunction
#define perfetto_protos_InternedData_v8_js_script_MSGTYPE perfetto_protos_InternedV8JsScript
#define perfetto_protos_InternedData_v8_wasm_script_MSGTYPE perfetto_protos_InternedV8WasmScript
#define perfetto_protos_InternedData_v8_isolate_MSGTYPE perfetto_protos_InternedV8Isolate
#define perfetto_protos_InternedData_protolog_string_args_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_protolog_stacktrace_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_viewcapture_package_name_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_viewcapture_window_name_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_viewcapture_view_id_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_viewcapture_class_name_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_InternedData_app_wakelock_info_MSGTYPE perfetto_protos_AppWakelockInfo

#define perfetto_protos_MemoryTrackerSnapshot_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   global_dump_id,    1) \
X(a, STATIC,   OPTIONAL, UENUM,    level_of_detail,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  process_memory_dumps,   3)
#define perfetto_protos_MemoryTrackerSnapshot_CALLBACK pb_default_field_callback
#define perfetto_protos_MemoryTrackerSnapshot_DEFAULT NULL
#define perfetto_protos_MemoryTrackerSnapshot_process_memory_dumps_MSGTYPE perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot

#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  allocator_dumps,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  memory_edges,      3)
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_CALLBACK pb_default_field_callback
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_DEFAULT NULL
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_allocator_dumps_MSGTYPE perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_memory_edges_MSGTYPE perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge

#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   absolute_name,     2) \
X(a, STATIC,   OPTIONAL, BOOL,     weak,              3) \
X(a, STATIC,   OPTIONAL, UINT64,   size_bytes,        4) \
X(a, CALLBACK, REPEATED, MESSAGE,  entries,           5)
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_CALLBACK pb_default_field_callback
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_DEFAULT NULL
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_entries_MSGTYPE perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry

#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UENUM,    units,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   value_uint64,      3) \
X(a, CALLBACK, OPTIONAL, STRING,   value_string,      4)
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_DEFAULT NULL

#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   source_id,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   target_id,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   importance,        3) \
X(a, STATIC,   OPTIONAL, BOOL,     overridable,       4)
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_CALLBACK NULL
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_DEFAULT NULL

#define perfetto_protos_PerfettoMetatrace_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT32,   (record_type,event_id,record_type.event_id),   1) \
X(a, STATIC,   ONEOF,    UINT32,   (record_type,counter_id,record_type.counter_id),   2) \
X(a, STATIC,   OPTIONAL, UINT64,   event_duration_ns,   3) \
X(a, STATIC,   OPTIONAL, INT32,    counter_value,     4) \
X(a, STATIC,   OPTIONAL, UINT32,   thread_id,         5) \
X(a, STATIC,   OPTIONAL, BOOL,     has_overruns,      6) \
X(a, CALLBACK, REPEATED, MESSAGE,  args,              7) \
X(a, CALLBACK, ONEOF,    STRING,   (record_type,event_name,record_type.event_name),   8) \
X(a, CALLBACK, ONEOF,    STRING,   (record_type,counter_name,record_type.counter_name),   9) \
X(a, CALLBACK, REPEATED, MESSAGE,  interned_strings,  10) \
X(a, STATIC,   ONEOF,    UINT64,   (record_type,event_name_iid,record_type.event_name_iid),  11)
#define perfetto_protos_PerfettoMetatrace_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfettoMetatrace_DEFAULT NULL
#define perfetto_protos_PerfettoMetatrace_args_MSGTYPE perfetto_protos_PerfettoMetatrace_Arg
#define perfetto_protos_PerfettoMetatrace_interned_strings_MSGTYPE perfetto_protos_PerfettoMetatrace_InternedString

#define perfetto_protos_PerfettoMetatrace_Arg_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    STRING,   (key_or_interned_key,key,key_or_interned_key.key),   1) \
X(a, CALLBACK, ONEOF,    STRING,   (value_or_interned_value,value,value_or_interned_value.value),   2) \
X(a, STATIC,   ONEOF,    UINT64,   (key_or_interned_key,key_iid,key_or_interned_key.key_iid),   3) \
X(a, STATIC,   ONEOF,    UINT64,   (value_or_interned_value,value_iid,value_or_interned_value.value_iid),   4)
#define perfetto_protos_PerfettoMetatrace_Arg_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfettoMetatrace_Arg_DEFAULT NULL

#define perfetto_protos_PerfettoMetatrace_InternedString_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   iid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_PerfettoMetatrace_InternedString_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfettoMetatrace_InternedString_DEFAULT NULL

#define perfetto_protos_TracingServiceEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,all_data_sources_started,event_type.all_data_sources_started),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,tracing_started,event_type.tracing_started),   2) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,all_data_sources_flushed,event_type.all_data_sources_flushed),   3) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,read_tracing_buffers_completed,event_type.read_tracing_buffers_completed),   4) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,tracing_disabled,event_type.tracing_disabled),   5) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,seized_for_bugreport,event_type.seized_for_bugreport),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event_type,slow_starting_data_sources,event_type.slow_starting_data_sources),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (event_type,last_flush_slow_data_sources,event_type.last_flush_slow_data_sources),   8) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,flush_started,event_type.flush_started),   9) \
X(a, STATIC,   ONEOF,    BOOL,     (event_type,clone_started,event_type.clone_started),  10) \
X(a, STATIC,   ONEOF,    UINT32,   (event_type,buffer_cloned,event_type.buffer_cloned),  11)
#define perfetto_protos_TracingServiceEvent_CALLBACK NULL
#define perfetto_protos_TracingServiceEvent_DEFAULT NULL
#define perfetto_protos_TracingServiceEvent_event_type_slow_starting_data_sources_MSGTYPE perfetto_protos_TracingServiceEvent_DataSources
#define perfetto_protos_TracingServiceEvent_event_type_last_flush_slow_data_sources_MSGTYPE perfetto_protos_TracingServiceEvent_DataSources

#define perfetto_protos_TracingServiceEvent_DataSources_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  data_source,       1)
#define perfetto_protos_TracingServiceEvent_DataSources_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingServiceEvent_DataSources_DEFAULT NULL
#define perfetto_protos_TracingServiceEvent_DataSources_data_source_MSGTYPE perfetto_protos_TracingServiceEvent_DataSources_DataSource

#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   producer_name,     1) \
X(a, CALLBACK, OPTIONAL, STRING,   data_source_name,   2)
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_CALLBACK pb_default_field_callback
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_DEFAULT NULL

#define perfetto_protos_AndroidEnergyConsumer_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    energy_consumer_id,   1) \
X(a, STATIC,   OPTIONAL, INT32,    ordinal,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              3) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              4)
#define perfetto_protos_AndroidEnergyConsumer_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidEnergyConsumer_DEFAULT NULL

#define perfetto_protos_AndroidEnergyConsumerDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  energy_consumers,   1)
#define perfetto_protos_AndroidEnergyConsumerDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidEnergyConsumerDescriptor_DEFAULT NULL
#define perfetto_protos_AndroidEnergyConsumerDescriptor_energy_consumers_MSGTYPE perfetto_protos_AndroidEnergyConsumer

#define perfetto_protos_AndroidEnergyEstimationBreakdown_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  energy_consumer_descriptor,   1) \
X(a, STATIC,   OPTIONAL, INT32,    energy_consumer_id,   2) \
X(a, STATIC,   OPTIONAL, INT64,    energy_uws,        3) \
X(a, CALLBACK, REPEATED, MESSAGE,  per_uid_breakdown,   4)
#define perfetto_protos_AndroidEnergyEstimationBreakdown_CALLBACK pb_default_field_callback
#define perfetto_protos_AndroidEnergyEstimationBreakdown_DEFAULT NULL
#define perfetto_protos_AndroidEnergyEstimationBreakdown_energy_consumer_descriptor_MSGTYPE perfetto_protos_AndroidEnergyConsumerDescriptor
#define perfetto_protos_AndroidEnergyEstimationBreakdown_per_uid_breakdown_MSGTYPE perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown

#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    uid,               1) \
X(a, STATIC,   OPTIONAL, INT64,    energy_uws,        2)
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_CALLBACK NULL
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_DEFAULT NULL

#define perfetto_protos_EntityStateResidency_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  power_entity_state,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  residency,         2)
#define perfetto_protos_EntityStateResidency_CALLBACK pb_default_field_callback
#define perfetto_protos_EntityStateResidency_DEFAULT NULL
#define perfetto_protos_EntityStateResidency_power_entity_state_MSGTYPE perfetto_protos_EntityStateResidency_PowerEntityState
#define perfetto_protos_EntityStateResidency_residency_MSGTYPE perfetto_protos_EntityStateResidency_StateResidency

#define perfetto_protos_EntityStateResidency_PowerEntityState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    entity_index,      1) \
X(a, STATIC,   OPTIONAL, INT32,    state_index,       2) \
X(a, CALLBACK, OPTIONAL, STRING,   entity_name,       3) \
X(a, CALLBACK, OPTIONAL, STRING,   state_name,        4)
#define perfetto_protos_EntityStateResidency_PowerEntityState_CALLBACK pb_default_field_callback
#define perfetto_protos_EntityStateResidency_PowerEntityState_DEFAULT NULL

#define perfetto_protos_EntityStateResidency_StateResidency_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    entity_index,      1) \
X(a, STATIC,   OPTIONAL, INT32,    state_index,       2) \
X(a, STATIC,   OPTIONAL, UINT64,   total_time_in_state_ms,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   total_state_entry_count,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   last_entry_timestamp_ms,   5)
#define perfetto_protos_EntityStateResidency_StateResidency_CALLBACK NULL
#define perfetto_protos_EntityStateResidency_StateResidency_DEFAULT NULL

#define perfetto_protos_BatteryCounters_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    charge_counter_uah,   1) \
X(a, STATIC,   OPTIONAL, FLOAT,    capacity_percent,   2) \
X(a, STATIC,   OPTIONAL, INT64,    current_ua,        3) \
X(a, STATIC,   OPTIONAL, INT64,    current_avg_ua,    4) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              5) \
X(a, STATIC,   OPTIONAL, INT64,    energy_counter_uwh,   6) \
X(a, STATIC,   OPTIONAL, INT64,    voltage_uv,        7)
#define perfetto_protos_BatteryCounters_CALLBACK pb_default_field_callback
#define perfetto_protos_BatteryCounters_DEFAULT NULL

#define perfetto_protos_PowerRails_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  rail_descriptor,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  energy_data,       2)
#define perfetto_protos_PowerRails_CALLBACK pb_default_field_callback
#define perfetto_protos_PowerRails_DEFAULT NULL
#define perfetto_protos_PowerRails_rail_descriptor_MSGTYPE perfetto_protos_PowerRails_RailDescriptor
#define perfetto_protos_PowerRails_energy_data_MSGTYPE perfetto_protos_PowerRails_EnergyData

#define perfetto_protos_PowerRails_RailDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   index,             1) \
X(a, CALLBACK, OPTIONAL, STRING,   rail_name,         2) \
X(a, CALLBACK, OPTIONAL, STRING,   subsys_name,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   sampling_rate,     4)
#define perfetto_protos_PowerRails_RailDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_PowerRails_RailDescriptor_DEFAULT NULL

#define perfetto_protos_PowerRails_EnergyData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   index,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp_ms,      2) \
X(a, STATIC,   OPTIONAL, UINT64,   energy,            3)
#define perfetto_protos_PowerRails_EnergyData_CALLBACK NULL
#define perfetto_protos_PowerRails_EnergyData_DEFAULT NULL

#define perfetto_protos_ObfuscatedMember_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   obfuscated_name,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   deobfuscated_name,   2)
#define perfetto_protos_ObfuscatedMember_CALLBACK pb_default_field_callback
#define perfetto_protos_ObfuscatedMember_DEFAULT NULL

#define perfetto_protos_ObfuscatedClass_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   obfuscated_name,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   deobfuscated_name,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  obfuscated_members,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  obfuscated_methods,   4)
#define perfetto_protos_ObfuscatedClass_CALLBACK pb_default_field_callback
#define perfetto_protos_ObfuscatedClass_DEFAULT NULL
#define perfetto_protos_ObfuscatedClass_obfuscated_members_MSGTYPE perfetto_protos_ObfuscatedMember
#define perfetto_protos_ObfuscatedClass_obfuscated_methods_MSGTYPE perfetto_protos_ObfuscatedMember

#define perfetto_protos_DeobfuscationMapping_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   package_name,      1) \
X(a, STATIC,   OPTIONAL, INT64,    version_code,      2) \
X(a, CALLBACK, REPEATED, MESSAGE,  obfuscated_classes,   3)
#define perfetto_protos_DeobfuscationMapping_CALLBACK pb_default_field_callback
#define perfetto_protos_DeobfuscationMapping_DEFAULT NULL
#define perfetto_protos_DeobfuscationMapping_obfuscated_classes_MSGTYPE perfetto_protos_ObfuscatedClass

#define perfetto_protos_HeapGraphRoot_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT64,   object_ids,        1) \
X(a, STATIC,   OPTIONAL, UENUM,    root_type,         2)
#define perfetto_protos_HeapGraphRoot_CALLBACK pb_default_field_callback
#define perfetto_protos_HeapGraphRoot_DEFAULT NULL

#define perfetto_protos_HeapGraphType_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   id,                1) \
X(a, STATIC,   OPTIONAL, UINT64,   location_id,       2) \
X(a, CALLBACK, OPTIONAL, STRING,   class_name,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   object_size,       4) \
X(a, STATIC,   OPTIONAL, UINT64,   superclass_id,     5) \
X(a, CALLBACK, REPEATED, UINT64,   reference_field_id,   6) \
X(a, STATIC,   OPTIONAL, UENUM,    kind,              7) \
X(a, STATIC,   OPTIONAL, UINT64,   classloader_id,    8)
#define perfetto_protos_HeapGraphType_CALLBACK pb_default_field_callback
#define perfetto_protos_HeapGraphType_DEFAULT NULL

#define perfetto_protos_HeapGraphObject_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT64,   (identifier,id,identifier.id),   1) \
X(a, STATIC,   OPTIONAL, UINT64,   type_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   self_size,         3) \
X(a, CALLBACK, REPEATED, UINT64,   reference_field_id,   4) \
X(a, CALLBACK, REPEATED, UINT64,   reference_object_id,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   reference_field_id_base,   6) \
X(a, STATIC,   ONEOF,    UINT64,   (identifier,id_delta,identifier.id_delta),   7) \
X(a, STATIC,   OPTIONAL, INT64,    native_allocation_registry_size_field,   8) \
X(a, STATIC,   OPTIONAL, UENUM,    heap_type_delta,   9)
#define perfetto_protos_HeapGraphObject_CALLBACK pb_default_field_callback
#define perfetto_protos_HeapGraphObject_DEFAULT NULL

#define perfetto_protos_HeapGraph_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  objects,           2) \
X(a, CALLBACK, REPEATED, MESSAGE,  field_names,       4) \
X(a, STATIC,   OPTIONAL, BOOL,     continued,         5) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             6) \
X(a, CALLBACK, REPEATED, MESSAGE,  roots,             7) \
X(a, CALLBACK, REPEATED, MESSAGE,  location_names,    8) \
X(a, CALLBACK, REPEATED, MESSAGE,  types,             9)
#define perfetto_protos_HeapGraph_CALLBACK pb_default_field_callback
#define perfetto_protos_HeapGraph_DEFAULT NULL
#define perfetto_protos_HeapGraph_objects_MSGTYPE perfetto_protos_HeapGraphObject
#define perfetto_protos_HeapGraph_field_names_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_HeapGraph_roots_MSGTYPE perfetto_protos_HeapGraphRoot
#define perfetto_protos_HeapGraph_location_names_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_HeapGraph_types_MSGTYPE perfetto_protos_HeapGraphType

#define perfetto_protos_ProfilePacket_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  strings,           1) \
X(a, CALLBACK, REPEATED, MESSAGE,  frames,            2) \
X(a, CALLBACK, REPEATED, MESSAGE,  callstacks,        3) \
X(a, CALLBACK, REPEATED, MESSAGE,  mappings,          4) \
X(a, CALLBACK, REPEATED, MESSAGE,  process_dumps,     5) \
X(a, STATIC,   OPTIONAL, BOOL,     continued,         6) \
X(a, STATIC,   OPTIONAL, UINT64,   index,             7)
#define perfetto_protos_ProfilePacket_CALLBACK pb_default_field_callback
#define perfetto_protos_ProfilePacket_DEFAULT NULL
#define perfetto_protos_ProfilePacket_strings_MSGTYPE perfetto_protos_InternedString
#define perfetto_protos_ProfilePacket_frames_MSGTYPE perfetto_protos_Frame
#define perfetto_protos_ProfilePacket_callstacks_MSGTYPE perfetto_protos_Callstack
#define perfetto_protos_ProfilePacket_mappings_MSGTYPE perfetto_protos_Mapping
#define perfetto_protos_ProfilePacket_process_dumps_MSGTYPE perfetto_protos_ProfilePacket_ProcessHeapSamples

#define perfetto_protos_ProfilePacket_HeapSample_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   callstack_id,      1) \
X(a, STATIC,   OPTIONAL, UINT64,   self_allocated,    2) \
X(a, STATIC,   OPTIONAL, UINT64,   self_freed,        3) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   alloc_count,       5) \
X(a, STATIC,   OPTIONAL, UINT64,   free_count,        6) \
X(a, STATIC,   OPTIONAL, UINT64,   self_max,          8) \
X(a, STATIC,   OPTIONAL, UINT64,   self_max_count,    9)
#define perfetto_protos_ProfilePacket_HeapSample_CALLBACK NULL
#define perfetto_protos_ProfilePacket_HeapSample_DEFAULT NULL

#define perfetto_protos_ProfilePacket_Histogram_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  buckets,           1)
#define perfetto_protos_ProfilePacket_Histogram_CALLBACK pb_default_field_callback
#define perfetto_protos_ProfilePacket_Histogram_DEFAULT NULL
#define perfetto_protos_ProfilePacket_Histogram_buckets_MSGTYPE perfetto_protos_ProfilePacket_Histogram_Bucket

#define perfetto_protos_ProfilePacket_Histogram_Bucket_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   upper_limit,       1) \
X(a, STATIC,   OPTIONAL, BOOL,     max_bucket,        2) \
X(a, STATIC,   OPTIONAL, UINT64,   count,             3)
#define perfetto_protos_ProfilePacket_Histogram_Bucket_CALLBACK NULL
#define perfetto_protos_ProfilePacket_Histogram_Bucket_DEFAULT NULL

#define perfetto_protos_ProfilePacket_ProcessStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   unwinding_errors,   1) \
X(a, STATIC,   OPTIONAL, UINT64,   heap_samples,      2) \
X(a, STATIC,   OPTIONAL, UINT64,   map_reparses,      3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  unwinding_time_us,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   total_unwinding_time_us,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   client_spinlock_blocked_us,   6)
#define perfetto_protos_ProfilePacket_ProcessStats_CALLBACK NULL
#define perfetto_protos_ProfilePacket_ProcessStats_DEFAULT NULL
#define perfetto_protos_ProfilePacket_ProcessStats_unwinding_time_us_MSGTYPE perfetto_protos_ProfilePacket_Histogram

#define perfetto_protos_ProfilePacket_ProcessHeapSamples_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   pid,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  samples,           2) \
X(a, STATIC,   OPTIONAL, BOOL,     from_startup,      3) \
X(a, STATIC,   OPTIONAL, BOOL,     rejected_concurrent,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stats,             5) \
X(a, STATIC,   OPTIONAL, BOOL,     disconnected,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     buffer_overran,    7) \
X(a, STATIC,   OPTIONAL, BOOL,     buffer_corrupted,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         9) \
X(a, STATIC,   OPTIONAL, BOOL,     hit_guardrail,    10) \
X(a, CALLBACK, OPTIONAL, STRING,   heap_name,        11) \
X(a, STATIC,   OPTIONAL, UINT64,   sampling_interval_bytes,  12) \
X(a, STATIC,   OPTIONAL, UINT64,   orig_sampling_interval_bytes,  13) \
X(a, STATIC,   OPTIONAL, UENUM,    client_error,     14)
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_CALLBACK pb_default_field_callback
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_DEFAULT NULL
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_samples_MSGTYPE perfetto_protos_ProfilePacket_HeapSample
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_stats_MSGTYPE perfetto_protos_ProfilePacket_ProcessStats

#define perfetto_protos_StreamingAllocation_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT64,   address,           1) \
X(a, CALLBACK, REPEATED, UINT64,   size,              2) \
X(a, CALLBACK, REPEATED, UINT64,   sample_size,       3) \
X(a, CALLBACK, REPEATED, UINT64,   clock_monotonic_coarse_timestamp,   4) \
X(a, CALLBACK, REPEATED, UINT32,   heap_id,           5) \
X(a, CALLBACK, REPEATED, UINT64,   sequence_number,   6)
#define perfetto_protos_StreamingAllocation_CALLBACK pb_default_field_callback
#define perfetto_protos_StreamingAllocation_DEFAULT NULL

#define perfetto_protos_StreamingFree_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT64,   address,           1) \
X(a, CALLBACK, REPEATED, UINT32,   heap_id,           2) \
X(a, CALLBACK, REPEATED, UINT64,   sequence_number,   3)
#define perfetto_protos_StreamingFree_CALLBACK pb_default_field_callback
#define perfetto_protos_StreamingFree_DEFAULT NULL

#define perfetto_protos_StreamingProfilePacket_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT64,   callstack_iid,     1) \
X(a, CALLBACK, REPEATED, INT64,    timestamp_delta_us,   2) \
X(a, STATIC,   OPTIONAL, INT32,    process_priority,   3)
#define perfetto_protos_StreamingProfilePacket_CALLBACK pb_default_field_callback
#define perfetto_protos_StreamingProfilePacket_DEFAULT NULL

#define perfetto_protos_Profiling_FIELDLIST(X, a) \

#define perfetto_protos_Profiling_CALLBACK NULL
#define perfetto_protos_Profiling_DEFAULT NULL

#define perfetto_protos_PerfSample_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               2) \
X(a, STATIC,   OPTIONAL, UINT32,   tid,               3) \
X(a, STATIC,   OPTIONAL, UINT64,   callstack_iid,     4) \
X(a, STATIC,   OPTIONAL, UENUM,    cpu_mode,          5) \
X(a, STATIC,   OPTIONAL, UINT64,   timebase_count,    6) \
X(a, CALLBACK, REPEATED, UINT64,   follower_counts,   7) \
X(a, STATIC,   ONEOF,    UENUM,    (optional_unwind_error,unwind_error,optional_unwind_error.unwind_error),  16) \
X(a, STATIC,   OPTIONAL, UINT64,   kernel_records_lost,  17) \
X(a, STATIC,   ONEOF,    UENUM,    (optional_sample_skipped_reason,sample_skipped_reason,optional_sample_skipped_reason.sample_skipped_reason),  18) \
X(a, STATIC,   OPTIONAL, MESSAGE,  producer_event,   19)
#define perfetto_protos_PerfSample_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfSample_DEFAULT NULL
#define perfetto_protos_PerfSample_producer_event_MSGTYPE perfetto_protos_PerfSample_ProducerEvent

#define perfetto_protos_PerfSample_ProducerEvent_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (optional_source_stop_reason,source_stop_reason,optional_source_stop_reason.source_stop_reason),   1)
#define perfetto_protos_PerfSample_ProducerEvent_CALLBACK NULL
#define perfetto_protos_PerfSample_ProducerEvent_DEFAULT NULL

#define perfetto_protos_PerfSampleDefaults_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timebase,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   process_shard_count,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   chosen_process_shard,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  followers,         4)
#define perfetto_protos_PerfSampleDefaults_CALLBACK pb_default_field_callback
#define perfetto_protos_PerfSampleDefaults_DEFAULT NULL
#define perfetto_protos_PerfSampleDefaults_timebase_MSGTYPE perfetto_protos_PerfEvents_Timebase
#define perfetto_protos_PerfSampleDefaults_followers_MSGTYPE perfetto_protos_FollowerEvent

#define perfetto_protos_SmapsEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   size_kb,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   private_dirty_kb,   3) \
X(a, STATIC,   OPTIONAL, UINT64,   swap_kb,           4) \
X(a, CALLBACK, OPTIONAL, STRING,   file_name,         5) \
X(a, STATIC,   OPTIONAL, UINT64,   start_address,     6) \
X(a, STATIC,   OPTIONAL, UINT64,   module_timestamp,   7) \
X(a, CALLBACK, OPTIONAL, STRING,   module_debugid,    8) \
X(a, CALLBACK, OPTIONAL, STRING,   module_debug_path,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   protection_flags,  10) \
X(a, STATIC,   OPTIONAL, UINT64,   private_clean_resident_kb,  11) \
X(a, STATIC,   OPTIONAL, UINT64,   shared_dirty_resident_kb,  12) \
X(a, STATIC,   OPTIONAL, UINT64,   shared_clean_resident_kb,  13) \
X(a, STATIC,   OPTIONAL, UINT64,   locked_kb,        14) \
X(a, STATIC,   OPTIONAL, UINT64,   proportional_resident_kb,  15)
#define perfetto_protos_SmapsEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_SmapsEntry_DEFAULT NULL

#define perfetto_protos_SmapsPacket_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pid,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  entries,           2)
#define perfetto_protos_SmapsPacket_CALLBACK pb_default_field_callback
#define perfetto_protos_SmapsPacket_DEFAULT NULL
#define perfetto_protos_SmapsPacket_entries_MSGTYPE perfetto_protos_SmapsEntry

#define perfetto_protos_ProcessStats_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  processes,         1) \
X(a, STATIC,   OPTIONAL, UINT64,   collection_end_timestamp,   2)
#define perfetto_protos_ProcessStats_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessStats_DEFAULT NULL
#define perfetto_protos_ProcessStats_processes_MSGTYPE perfetto_protos_ProcessStats_Process

#define perfetto_protos_ProcessStats_Thread_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tid,               1)
#define perfetto_protos_ProcessStats_Thread_CALLBACK NULL
#define perfetto_protos_ProcessStats_Thread_DEFAULT NULL

#define perfetto_protos_ProcessStats_FDInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   fd,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   path,              2)
#define perfetto_protos_ProcessStats_FDInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessStats_FDInfo_DEFAULT NULL

#define perfetto_protos_ProcessStats_Process_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   vm_size_kb,        2) \
X(a, STATIC,   OPTIONAL, UINT64,   vm_rss_kb,         3) \
X(a, STATIC,   OPTIONAL, UINT64,   rss_anon_kb,       4) \
X(a, STATIC,   OPTIONAL, UINT64,   rss_file_kb,       5) \
X(a, STATIC,   OPTIONAL, UINT64,   rss_shmem_kb,      6) \
X(a, STATIC,   OPTIONAL, UINT64,   vm_swap_kb,        7) \
X(a, STATIC,   OPTIONAL, UINT64,   vm_locked_kb,      8) \
X(a, STATIC,   OPTIONAL, UINT64,   vm_hwm_kb,         9) \
X(a, STATIC,   OPTIONAL, INT64,    oom_score_adj,    10) \
X(a, CALLBACK, REPEATED, MESSAGE,  threads,          11) \
X(a, STATIC,   OPTIONAL, BOOL,     is_peak_rss_resettable,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   chrome_private_footprint_kb,  13) \
X(a, STATIC,   OPTIONAL, UINT32,   chrome_peak_resident_set_kb,  14) \
X(a, CALLBACK, REPEATED, MESSAGE,  fds,              15) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_rss_kb,       16) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_pss_kb,       17) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_pss_anon_kb,  18) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_pss_file_kb,  19) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_pss_shmem_kb,  20) \
X(a, STATIC,   OPTIONAL, UINT64,   runtime_user_mode,  21) \
X(a, STATIC,   OPTIONAL, UINT64,   runtime_kernel_mode,  22) \
X(a, STATIC,   OPTIONAL, UINT64,   smr_swap_pss_kb,  23)
#define perfetto_protos_ProcessStats_Process_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessStats_Process_DEFAULT NULL
#define perfetto_protos_ProcessStats_Process_threads_MSGTYPE perfetto_protos_ProcessStats_Thread
#define perfetto_protos_ProcessStats_Process_fds_MSGTYPE perfetto_protos_ProcessStats_FDInfo

#define perfetto_protos_ProcessTree_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  processes,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  threads,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   collection_end_timestamp,   3)
#define perfetto_protos_ProcessTree_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessTree_DEFAULT NULL
#define perfetto_protos_ProcessTree_processes_MSGTYPE perfetto_protos_ProcessTree_Process
#define perfetto_protos_ProcessTree_threads_MSGTYPE perfetto_protos_ProcessTree_Thread

#define perfetto_protos_ProcessTree_Thread_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    tid,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, INT32,    tgid,              3) \
X(a, CALLBACK, REPEATED, INT32,    nstid,             4)
#define perfetto_protos_ProcessTree_Thread_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessTree_Thread_DEFAULT NULL

#define perfetto_protos_ProcessTree_Process_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    ppid,              2) \
X(a, CALLBACK, REPEATED, STRING,   cmdline,           3) \
X(a, STATIC,   OPTIONAL, INT32,    uid,               5) \
X(a, CALLBACK, REPEATED, INT32,    nspid,             6) \
X(a, STATIC,   OPTIONAL, UINT64,   process_start_from_boot,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     is_kthread,        8) \
X(a, STATIC,   OPTIONAL, BOOL,     cmdline_is_comm,   9)
#define perfetto_protos_ProcessTree_Process_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessTree_Process_DEFAULT NULL

#define perfetto_protos_RemoteClockSync_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  synced_clocks,     1)
#define perfetto_protos_RemoteClockSync_CALLBACK pb_default_field_callback
#define perfetto_protos_RemoteClockSync_DEFAULT NULL
#define perfetto_protos_RemoteClockSync_synced_clocks_MSGTYPE perfetto_protos_RemoteClockSync_SyncedClocks

#define perfetto_protos_RemoteClockSync_SyncedClocks_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  client_clocks,     2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  host_clocks,       3)
#define perfetto_protos_RemoteClockSync_SyncedClocks_CALLBACK NULL
#define perfetto_protos_RemoteClockSync_SyncedClocks_DEFAULT NULL
#define perfetto_protos_RemoteClockSync_SyncedClocks_client_clocks_MSGTYPE perfetto_protos_ClockSnapshot
#define perfetto_protos_RemoteClockSync_SyncedClocks_host_clocks_MSGTYPE perfetto_protos_ClockSnapshot

#define perfetto_protos_Atom_FIELDLIST(X, a) \

#define perfetto_protos_Atom_CALLBACK NULL
#define perfetto_protos_Atom_DEFAULT NULL

#define perfetto_protos_StatsdAtom_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  atom,              1) \
X(a, CALLBACK, REPEATED, INT64,    timestamp_nanos,   2)
#define perfetto_protos_StatsdAtom_CALLBACK pb_default_field_callback
#define perfetto_protos_StatsdAtom_DEFAULT NULL
#define perfetto_protos_StatsdAtom_atom_MSGTYPE perfetto_protos_Atom

#define perfetto_protos_SysStats_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  meminfo,           1) \
X(a, CALLBACK, REPEATED, MESSAGE,  vmstat,            2) \
X(a, CALLBACK, REPEATED, MESSAGE,  cpu_stat,          3) \
X(a, STATIC,   OPTIONAL, UINT64,   num_forks,         4) \
X(a, STATIC,   OPTIONAL, UINT64,   num_irq_total,     5) \
X(a, CALLBACK, REPEATED, MESSAGE,  num_irq,           6) \
X(a, STATIC,   OPTIONAL, UINT64,   num_softirq_total,   7) \
X(a, CALLBACK, REPEATED, MESSAGE,  num_softirq,       8) \
X(a, STATIC,   OPTIONAL, UINT64,   collection_end_timestamp,   9) \
X(a, CALLBACK, REPEATED, MESSAGE,  devfreq,          10) \
X(a, CALLBACK, REPEATED, UINT32,   cpufreq_khz,      11) \
X(a, CALLBACK, REPEATED, MESSAGE,  buddy_info,       12) \
X(a, CALLBACK, REPEATED, MESSAGE,  disk_stat,        13) \
X(a, CALLBACK, REPEATED, MESSAGE,  psi,              14) \
X(a, CALLBACK, REPEATED, MESSAGE,  thermal_zone,     15) \
X(a, CALLBACK, REPEATED, MESSAGE,  cpuidle_state,    16) \
X(a, CALLBACK, REPEATED, UINT64,   gpufreq_mhz,      17)
#define perfetto_protos_SysStats_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_DEFAULT NULL
#define perfetto_protos_SysStats_meminfo_MSGTYPE perfetto_protos_SysStats_MeminfoValue
#define perfetto_protos_SysStats_vmstat_MSGTYPE perfetto_protos_SysStats_VmstatValue
#define perfetto_protos_SysStats_cpu_stat_MSGTYPE perfetto_protos_SysStats_CpuTimes
#define perfetto_protos_SysStats_num_irq_MSGTYPE perfetto_protos_SysStats_InterruptCount
#define perfetto_protos_SysStats_num_softirq_MSGTYPE perfetto_protos_SysStats_InterruptCount
#define perfetto_protos_SysStats_devfreq_MSGTYPE perfetto_protos_SysStats_DevfreqValue
#define perfetto_protos_SysStats_buddy_info_MSGTYPE perfetto_protos_SysStats_BuddyInfo
#define perfetto_protos_SysStats_disk_stat_MSGTYPE perfetto_protos_SysStats_DiskStat
#define perfetto_protos_SysStats_psi_MSGTYPE perfetto_protos_SysStats_PsiSample
#define perfetto_protos_SysStats_thermal_zone_MSGTYPE perfetto_protos_SysStats_ThermalZone
#define perfetto_protos_SysStats_cpuidle_state_MSGTYPE perfetto_protos_SysStats_CpuIdleState

#define perfetto_protos_SysStats_MeminfoValue_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    key,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   value,             2)
#define perfetto_protos_SysStats_MeminfoValue_CALLBACK NULL
#define perfetto_protos_SysStats_MeminfoValue_DEFAULT NULL

#define perfetto_protos_SysStats_VmstatValue_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    key,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   value,             2)
#define perfetto_protos_SysStats_VmstatValue_CALLBACK NULL
#define perfetto_protos_SysStats_VmstatValue_DEFAULT NULL

#define perfetto_protos_SysStats_CpuTimes_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_id,            1) \
X(a, STATIC,   OPTIONAL, UINT64,   user_ns,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   user_nice_ns,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   system_mode_ns,    4) \
X(a, STATIC,   OPTIONAL, UINT64,   idle_ns,           5) \
X(a, STATIC,   OPTIONAL, UINT64,   io_wait_ns,        6) \
X(a, STATIC,   OPTIONAL, UINT64,   irq_ns,            7) \
X(a, STATIC,   OPTIONAL, UINT64,   softirq_ns,        8)
#define perfetto_protos_SysStats_CpuTimes_CALLBACK NULL
#define perfetto_protos_SysStats_CpuTimes_DEFAULT NULL

#define perfetto_protos_SysStats_InterruptCount_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    irq,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   count,             2)
#define perfetto_protos_SysStats_InterruptCount_CALLBACK NULL
#define perfetto_protos_SysStats_InterruptCount_DEFAULT NULL

#define perfetto_protos_SysStats_DevfreqValue_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, UINT64,   value,             2)
#define perfetto_protos_SysStats_DevfreqValue_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_DevfreqValue_DEFAULT NULL

#define perfetto_protos_SysStats_BuddyInfo_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   node,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   zone,              2) \
X(a, CALLBACK, REPEATED, UINT32,   order_pages,       3)
#define perfetto_protos_SysStats_BuddyInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_BuddyInfo_DEFAULT NULL

#define perfetto_protos_SysStats_DiskStat_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   device_name,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   read_sectors,      2) \
X(a, STATIC,   OPTIONAL, UINT64,   read_time_ms,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   write_sectors,     4) \
X(a, STATIC,   OPTIONAL, UINT64,   write_time_ms,     5) \
X(a, STATIC,   OPTIONAL, UINT64,   discard_sectors,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   discard_time_ms,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   flush_count,       8) \
X(a, STATIC,   OPTIONAL, UINT64,   flush_time_ms,     9)
#define perfetto_protos_SysStats_DiskStat_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_DiskStat_DEFAULT NULL

#define perfetto_protos_SysStats_PsiSample_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    resource,          1) \
X(a, STATIC,   OPTIONAL, UINT64,   total_ns,          2)
#define perfetto_protos_SysStats_PsiSample_CALLBACK NULL
#define perfetto_protos_SysStats_PsiSample_DEFAULT NULL

#define perfetto_protos_SysStats_ThermalZone_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   temp,              2) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              3)
#define perfetto_protos_SysStats_ThermalZone_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_ThermalZone_DEFAULT NULL

#define perfetto_protos_SysStats_CpuIdleStateEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   state,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   duration_us,       2)
#define perfetto_protos_SysStats_CpuIdleStateEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_CpuIdleStateEntry_DEFAULT NULL

#define perfetto_protos_SysStats_CpuIdleState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_id,            1) \
X(a, CALLBACK, REPEATED, MESSAGE,  cpuidle_state_entry,   2)
#define perfetto_protos_SysStats_CpuIdleState_CALLBACK pb_default_field_callback
#define perfetto_protos_SysStats_CpuIdleState_DEFAULT NULL
#define perfetto_protos_SysStats_CpuIdleState_cpuidle_state_entry_MSGTYPE perfetto_protos_SysStats_CpuIdleStateEntry

#define perfetto_protos_Utsname_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   sysname,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   version,           2) \
X(a, CALLBACK, OPTIONAL, STRING,   release,           3) \
X(a, CALLBACK, OPTIONAL, STRING,   machine,           4)
#define perfetto_protos_Utsname_CALLBACK pb_default_field_callback
#define perfetto_protos_Utsname_DEFAULT NULL

#define perfetto_protos_SystemInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  utsname,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   android_build_fingerprint,   2) \
X(a, STATIC,   OPTIONAL, INT64,    hz,                3) \
X(a, CALLBACK, OPTIONAL, STRING,   tracing_service_version,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   android_sdk_version,   5) \
X(a, STATIC,   OPTIONAL, UINT32,   page_size,         6) \
X(a, STATIC,   OPTIONAL, INT32,    timezone_off_mins,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   num_cpus,          8) \
X(a, CALLBACK, OPTIONAL, STRING,   android_soc_model,   9) \
X(a, CALLBACK, OPTIONAL, STRING,   android_hardware_revision,  10) \
X(a, CALLBACK, OPTIONAL, STRING,   android_storage_model,  11) \
X(a, CALLBACK, OPTIONAL, STRING,   android_ram_model,  12) \
X(a, CALLBACK, OPTIONAL, STRING,   android_guest_soc_model,  13) \
X(a, CALLBACK, OPTIONAL, STRING,   android_device_manufacturer,  14)
#define perfetto_protos_SystemInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_SystemInfo_DEFAULT NULL
#define perfetto_protos_SystemInfo_utsname_MSGTYPE perfetto_protos_Utsname

#define perfetto_protos_CpuInfo_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  cpus,              1)
#define perfetto_protos_CpuInfo_CALLBACK pb_default_field_callback
#define perfetto_protos_CpuInfo_DEFAULT NULL
#define perfetto_protos_CpuInfo_cpus_MSGTYPE perfetto_protos_CpuInfo_Cpu

#define perfetto_protos_CpuInfo_ArmCpuIdentifier_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   implementer,       1) \
X(a, STATIC,   OPTIONAL, UINT32,   architecture,      2) \
X(a, STATIC,   OPTIONAL, UINT32,   variant,           3) \
X(a, STATIC,   OPTIONAL, UINT32,   part,              4) \
X(a, STATIC,   OPTIONAL, UINT32,   revision,          5)
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_CALLBACK NULL
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_DEFAULT NULL

#define perfetto_protos_CpuInfo_Cpu_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   processor,         1) \
X(a, CALLBACK, REPEATED, UINT32,   frequencies,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   capacity,          3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (identifier,arm_identifier,identifier.arm_identifier),   4) \
X(a, STATIC,   OPTIONAL, UINT64,   features,          5)
#define perfetto_protos_CpuInfo_Cpu_CALLBACK pb_default_field_callback
#define perfetto_protos_CpuInfo_Cpu_DEFAULT NULL
#define perfetto_protos_CpuInfo_Cpu_identifier_arm_identifier_MSGTYPE perfetto_protos_CpuInfo_ArmCpuIdentifier

#define perfetto_protos_TestEvent_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   str,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   seq_value,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   counter,           3) \
X(a, STATIC,   OPTIONAL, BOOL,     is_last,           4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  payload,           5)
#define perfetto_protos_TestEvent_CALLBACK pb_default_field_callback
#define perfetto_protos_TestEvent_DEFAULT NULL
#define perfetto_protos_TestEvent_payload_MSGTYPE perfetto_protos_TestEvent_TestPayload

#define perfetto_protos_TestEvent_TestPayload_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   str,               1) \
X(a, CALLBACK, REPEATED, MESSAGE,  nested,            2) \
X(a, STATIC,   OPTIONAL, UINT32,   remaining_nesting_depth,   3) \
X(a, CALLBACK, OPTIONAL, STRING,   single_string,     4) \
X(a, STATIC,   OPTIONAL, INT32,    single_int,        5) \
X(a, CALLBACK, REPEATED, INT32,    repeated_ints,     6) \
X(a, CALLBACK, REPEATED, MESSAGE,  debug_annotations,   7)
#define perfetto_protos_TestEvent_TestPayload_CALLBACK pb_default_field_callback
#define perfetto_protos_TestEvent_TestPayload_DEFAULT NULL
#define perfetto_protos_TestEvent_TestPayload_nested_MSGTYPE perfetto_protos_TestEvent_TestPayload
#define perfetto_protos_TestEvent_TestPayload_debug_annotations_MSGTYPE perfetto_protos_DebugAnnotation

#define perfetto_protos_TracePacketDefaults_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  track_event_defaults,  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  perf_sample_defaults,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp_clock_id,  58) \
X(a, STATIC,   OPTIONAL, MESSAGE,  v8_code_defaults,  99)
#define perfetto_protos_TracePacketDefaults_CALLBACK NULL
#define perfetto_protos_TracePacketDefaults_DEFAULT NULL
#define perfetto_protos_TracePacketDefaults_track_event_defaults_MSGTYPE perfetto_protos_TrackEventDefaults
#define perfetto_protos_TracePacketDefaults_perf_sample_defaults_MSGTYPE perfetto_protos_PerfSampleDefaults
#define perfetto_protos_TracePacketDefaults_v8_code_defaults_MSGTYPE perfetto_protos_V8CodeDefaults

#define perfetto_protos_TraceUuid_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    msb,               1) \
X(a, STATIC,   OPTIONAL, INT64,    lsb,               2)
#define perfetto_protos_TraceUuid_CALLBACK NULL
#define perfetto_protos_TraceUuid_DEFAULT NULL

#define perfetto_protos_ProcessDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, CALLBACK, REPEATED, STRING,   cmdline,           2) \
X(a, STATIC,   OPTIONAL, INT32,    legacy_sort_index,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    chrome_process_type,   4) \
X(a, STATIC,   OPTIONAL, INT32,    process_priority,   5) \
X(a, CALLBACK, OPTIONAL, STRING,   process_name,      6) \
X(a, STATIC,   OPTIONAL, INT64,    start_timestamp_ns,   7) \
X(a, CALLBACK, REPEATED, STRING,   process_labels,    8)
#define perfetto_protos_ProcessDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessDescriptor_DEFAULT NULL

#define perfetto_protos_TrackEventRangeOfInterest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    start_us,          1)
#define perfetto_protos_TrackEventRangeOfInterest_CALLBACK NULL
#define perfetto_protos_TrackEventRangeOfInterest_DEFAULT NULL

#define perfetto_protos_ThreadDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pid,               1) \
X(a, STATIC,   OPTIONAL, INT32,    tid,               2) \
X(a, STATIC,   OPTIONAL, INT32,    legacy_sort_index,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    chrome_thread_type,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   thread_name,       5) \
X(a, STATIC,   OPTIONAL, INT64,    reference_timestamp_us,   6) \
X(a, STATIC,   OPTIONAL, INT64,    reference_thread_time_us,   7) \
X(a, STATIC,   OPTIONAL, INT64,    reference_thread_instruction_count,   8)
#define perfetto_protos_ThreadDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_ThreadDescriptor_DEFAULT NULL

#define perfetto_protos_ChromeProcessDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    process_type,      1) \
X(a, STATIC,   OPTIONAL, INT32,    process_priority,   2) \
X(a, STATIC,   OPTIONAL, INT32,    legacy_sort_index,   3) \
X(a, CALLBACK, OPTIONAL, STRING,   host_app_package_name,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   crash_trace_id,    5)
#define perfetto_protos_ChromeProcessDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeProcessDescriptor_DEFAULT NULL

#define perfetto_protos_ChromeThreadDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    thread_type,       1) \
X(a, STATIC,   OPTIONAL, INT32,    legacy_sort_index,   2)
#define perfetto_protos_ChromeThreadDescriptor_CALLBACK NULL
#define perfetto_protos_ChromeThreadDescriptor_DEFAULT NULL

#define perfetto_protos_CounterDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              1) \
X(a, CALLBACK, REPEATED, STRING,   categories,        2) \
X(a, STATIC,   OPTIONAL, UENUM,    unit,              3) \
X(a, STATIC,   OPTIONAL, INT64,    unit_multiplier,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     is_incremental,    5) \
X(a, CALLBACK, OPTIONAL, STRING,   unit_name,         6)
#define perfetto_protos_CounterDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_CounterDescriptor_DEFAULT NULL

#define perfetto_protos_TrackDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   uuid,              1) \
X(a, CALLBACK, ONEOF,    STRING,   (static_or_dynamic_name,name,static_or_dynamic_name.name),   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  process,           3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  thread,            4) \
X(a, STATIC,   OPTIONAL, UINT64,   parent_uuid,       5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_process,    6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  chrome_thread,     7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  counter,           8) \
X(a, STATIC,   OPTIONAL, BOOL,     disallow_merging_with_system_tracks,   9) \
X(a, CALLBACK, ONEOF,    STRING,   (static_or_dynamic_name,static_name,static_or_dynamic_name.static_name),  10) \
X(a, STATIC,   OPTIONAL, UENUM,    child_ordering,   11) \
X(a, STATIC,   OPTIONAL, INT32,    sibling_order_rank,  12) \
X(a, CALLBACK, ONEOF,    STRING,   (static_or_dynamic_name,atrace_name,static_or_dynamic_name.atrace_name),  13)
#define perfetto_protos_TrackDescriptor_CALLBACK pb_default_field_callback
#define perfetto_protos_TrackDescriptor_DEFAULT NULL
#define perfetto_protos_TrackDescriptor_process_MSGTYPE perfetto_protos_ProcessDescriptor
#define perfetto_protos_TrackDescriptor_thread_MSGTYPE perfetto_protos_ThreadDescriptor
#define perfetto_protos_TrackDescriptor_chrome_process_MSGTYPE perfetto_protos_ChromeProcessDescriptor
#define perfetto_protos_TrackDescriptor_chrome_thread_MSGTYPE perfetto_protos_ChromeThreadDescriptor
#define perfetto_protos_TrackDescriptor_counter_MSGTYPE perfetto_protos_CounterDescriptor

#define perfetto_protos_TranslationTable_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,chrome_histogram,table.chrome_histogram),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,chrome_user_event,table.chrome_user_event),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,chrome_performance_mark,table.chrome_performance_mark),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,slice_name,table.slice_name),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,process_track_name,table.process_track_name),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (table,chrome_study,table.chrome_study),   6)
#define perfetto_protos_TranslationTable_CALLBACK NULL
#define perfetto_protos_TranslationTable_DEFAULT NULL
#define perfetto_protos_TranslationTable_table_chrome_histogram_MSGTYPE perfetto_protos_ChromeHistorgramTranslationTable
#define perfetto_protos_TranslationTable_table_chrome_user_event_MSGTYPE perfetto_protos_ChromeUserEventTranslationTable
#define perfetto_protos_TranslationTable_table_chrome_performance_mark_MSGTYPE perfetto_protos_ChromePerformanceMarkTranslationTable
#define perfetto_protos_TranslationTable_table_slice_name_MSGTYPE perfetto_protos_SliceNameTranslationTable
#define perfetto_protos_TranslationTable_table_process_track_name_MSGTYPE perfetto_protos_ProcessTrackNameTranslationTable
#define perfetto_protos_TranslationTable_table_chrome_study_MSGTYPE perfetto_protos_ChromeStudyTranslationTable

#define perfetto_protos_ChromeHistorgramTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  hash_to_name,      1)
#define perfetto_protos_ChromeHistorgramTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeHistorgramTranslationTable_DEFAULT NULL
#define perfetto_protos_ChromeHistorgramTranslationTable_hash_to_name_MSGTYPE perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry

#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_DEFAULT NULL

#define perfetto_protos_ChromeUserEventTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  action_hash_to_name,   1)
#define perfetto_protos_ChromeUserEventTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeUserEventTranslationTable_DEFAULT NULL
#define perfetto_protos_ChromeUserEventTranslationTable_action_hash_to_name_MSGTYPE perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry

#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_DEFAULT NULL

#define perfetto_protos_ChromePerformanceMarkTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  site_hash_to_name,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  mark_hash_to_name,   2)
#define perfetto_protos_ChromePerformanceMarkTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromePerformanceMarkTranslationTable_DEFAULT NULL
#define perfetto_protos_ChromePerformanceMarkTranslationTable_site_hash_to_name_MSGTYPE perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry
#define perfetto_protos_ChromePerformanceMarkTranslationTable_mark_hash_to_name_MSGTYPE perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry

#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DEFAULT NULL

#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DEFAULT NULL

#define perfetto_protos_SliceNameTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  raw_to_deobfuscated_name,   1)
#define perfetto_protos_SliceNameTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_SliceNameTranslationTable_DEFAULT NULL
#define perfetto_protos_SliceNameTranslationTable_raw_to_deobfuscated_name_MSGTYPE perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry

#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DEFAULT NULL

#define perfetto_protos_ProcessTrackNameTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  raw_to_deobfuscated_name,   1)
#define perfetto_protos_ProcessTrackNameTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessTrackNameTranslationTable_DEFAULT NULL
#define perfetto_protos_ProcessTrackNameTranslationTable_raw_to_deobfuscated_name_MSGTYPE perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry

#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DEFAULT NULL

#define perfetto_protos_ChromeStudyTranslationTable_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  hash_to_name,      1)
#define perfetto_protos_ChromeStudyTranslationTable_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeStudyTranslationTable_DEFAULT NULL
#define perfetto_protos_ChromeStudyTranslationTable_hash_to_name_MSGTYPE perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry

#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   key,               1) \
X(a, CALLBACK, OPTIONAL, STRING,   value,             2)
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_CALLBACK pb_default_field_callback
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_DEFAULT NULL

#define perfetto_protos_Trigger_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   trigger_name,      1) \
X(a, CALLBACK, OPTIONAL, STRING,   producer_name,     2) \
X(a, STATIC,   OPTIONAL, INT32,    trusted_producer_uid,   3)
#define perfetto_protos_Trigger_CALLBACK pb_default_field_callback
#define perfetto_protos_Trigger_DEFAULT NULL

#define perfetto_protos_UiState_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    timeline_start_ts,   1) \
X(a, STATIC,   OPTIONAL, INT64,    timeline_end_ts,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  highlight_process,   3)
#define perfetto_protos_UiState_CALLBACK NULL
#define perfetto_protos_UiState_DEFAULT NULL
#define perfetto_protos_UiState_highlight_process_MSGTYPE perfetto_protos_UiState_HighlightProcess

#define perfetto_protos_UiState_HighlightProcess_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UINT32,   (selector,pid,selector.pid),   1) \
X(a, CALLBACK, ONEOF,    STRING,   (selector,cmdline,selector.cmdline),   2)
#define perfetto_protos_UiState_HighlightProcess_CALLBACK pb_default_field_callback
#define perfetto_protos_UiState_HighlightProcess_DEFAULT NULL

#define perfetto_protos_TracePacket_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,ftrace_events,data.ftrace_events),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,process_tree,data.process_tree),   2) \
X(a, STATIC,   ONEOF,    INT32,    (optional_trusted_uid,trusted_uid,optional_trusted_uid.trusted_uid),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,inode_file_map,data.inode_file_map),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,chrome_events,data.chrome_events),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,clock_snapshot,data.clock_snapshot),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,sys_stats,data.sys_stats),   7) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,process_stats,data.process_stats),   9) \
X(a, STATIC,   ONEOF,    UINT32,   (optional_trusted_packet_sequence_id,trusted_packet_sequence_id,optional_trusted_packet_sequence_id.trusted_packet_sequence_id),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,track_event,data.track_event),  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  interned_data,    12) \
X(a, STATIC,   OPTIONAL, UINT32,   sequence_flags,   13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,trace_config,data.trace_config),  33) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,ftrace_stats,data.ftrace_stats),  34) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,trace_stats,data.trace_stats),  35) \
X(a, CALLBACK, ONEOF,    BYTES,    (data,synchronization_marker,data.synchronization_marker),  36) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,profile_packet,data.profile_packet),  37) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,battery,data.battery),  38) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_log,data.android_log),  39) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,power_rails,data.power_rails),  40) \
X(a, STATIC,   OPTIONAL, BOOL,     incremental_state_cleared,  41) \
X(a, STATIC,   OPTIONAL, BOOL,     previous_packet_dropped,  42) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,process_descriptor,data.process_descriptor),  43) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,thread_descriptor,data.thread_descriptor),  44) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,system_info,data.system_info),  45) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,trigger,data.trigger),  46) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,packages_list,data.packages_list),  47) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,chrome_benchmark_metadata,data.chrome_benchmark_metadata),  48) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,perfetto_metatrace,data.perfetto_metatrace),  49) \
X(a, CALLBACK, ONEOF,    BYTES,    (data,compressed_packets,data.compressed_packets),  50) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,chrome_metadata,data.chrome_metadata),  51) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,gpu_counter_event,data.gpu_counter_event),  52) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,gpu_render_stage_event,data.gpu_render_stage_event),  53) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,streaming_profile_packet,data.streaming_profile_packet),  54) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,heap_graph,data.heap_graph),  56) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,graphics_frame_event,data.graphics_frame_event),  57) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp_clock_id,  58) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trace_packet_defaults,  59) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,track_descriptor,data.track_descriptor),  60) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,module_symbols,data.module_symbols),  61) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,vulkan_memory_event,data.vulkan_memory_event),  62) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,gpu_log,data.gpu_log),  63) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,deobfuscation_mapping,data.deobfuscation_mapping),  64) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,vulkan_api_event,data.vulkan_api_event),  65) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,perf_sample,data.perf_sample),  66) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,cpu_info,data.cpu_info),  67) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,smaps_packet,data.smaps_packet),  68) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,service_event,data.service_event),  69) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,initial_display_state,data.initial_display_state),  70) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,gpu_mem_total_event,data.gpu_mem_total_event),  71) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,extension_descriptor,data.extension_descriptor),  72) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,memory_tracker_snapshot,data.memory_tracker_snapshot),  73) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,streaming_allocation,data.streaming_allocation),  74) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,streaming_free,data.streaming_free),  75) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,frame_timeline_event,data.frame_timeline_event),  76) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_energy_estimation_breakdown,data.android_energy_estimation_breakdown),  77) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,ui_state,data.ui_state),  78) \
X(a, STATIC,   OPTIONAL, INT32,    trusted_pid,      79) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_camera_frame_event,data.android_camera_frame_event),  80) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_camera_session_stats,data.android_camera_session_stats),  81) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,translation_table,data.translation_table),  82) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_game_intervention_list,data.android_game_intervention_list),  83) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,statsd_atom,data.statsd_atom),  84) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,android_system_property,data.android_system_property),  86) \
X(a, STATIC,   OPTIONAL, BOOL,     first_packet_on_sequence,  87) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,network_packet,data.network_packet),  88) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,trace_uuid,data.trace_uuid),  89) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,track_event_range_of_interest,data.track_event_range_of_interest),  90) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,entity_state_residency,data.entity_state_residency),  91) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,network_packet_bundle,data.network_packet_bundle),  92) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,surfaceflinger_layers_snapshot,data.surfaceflinger_layers_snapshot),  93) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,surfaceflinger_transactions,data.surfaceflinger_transactions),  94) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,etw_events,data.etw_events),  95) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,shell_transition,data.shell_transition),  96) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,shell_handler_mappings,data.shell_handler_mappings),  97) \
X(a, STATIC,   OPTIONAL, UINT32,   machine_id,       98) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,v8_js_code,data.v8_js_code),  99) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,v8_internal_code,data.v8_internal_code), 100) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,v8_wasm_code,data.v8_wasm_code), 101) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,v8_reg_exp_code,data.v8_reg_exp_code), 102) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,v8_code_move,data.v8_code_move), 103) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,protolog_message,data.protolog_message), 104) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,protolog_viewer_config,data.protolog_viewer_config), 105) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,remote_clock_sync,data.remote_clock_sync), 107) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,chrome_trigger,data.chrome_trigger), 109) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,pixel_modem_events,data.pixel_modem_events), 110) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,pixel_modem_token_database,data.pixel_modem_token_database), 111) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,winscope_extensions,data.winscope_extensions), 112) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,clone_snapshot_trigger,data.clone_snapshot_trigger), 113) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,bluetooth_trace_event,data.bluetooth_trace_event), 114) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,kernel_wakelock_data,data.kernel_wakelock_data), 115) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,app_wakelock_bundle,data.app_wakelock_bundle), 116) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,for_testing,data.for_testing), 900)
#define perfetto_protos_TracePacket_CALLBACK pb_default_field_callback
#define perfetto_protos_TracePacket_DEFAULT NULL
#define perfetto_protos_TracePacket_data_ftrace_events_MSGTYPE perfetto_protos_FtraceEventBundle
#define perfetto_protos_TracePacket_data_process_tree_MSGTYPE perfetto_protos_ProcessTree
#define perfetto_protos_TracePacket_data_inode_file_map_MSGTYPE perfetto_protos_InodeFileMap
#define perfetto_protos_TracePacket_data_chrome_events_MSGTYPE perfetto_protos_ChromeEventBundle
#define perfetto_protos_TracePacket_data_clock_snapshot_MSGTYPE perfetto_protos_ClockSnapshot
#define perfetto_protos_TracePacket_data_sys_stats_MSGTYPE perfetto_protos_SysStats
#define perfetto_protos_TracePacket_data_process_stats_MSGTYPE perfetto_protos_ProcessStats
#define perfetto_protos_TracePacket_data_track_event_MSGTYPE perfetto_protos_TrackEvent
#define perfetto_protos_TracePacket_interned_data_MSGTYPE perfetto_protos_InternedData
#define perfetto_protos_TracePacket_data_trace_config_MSGTYPE perfetto_protos_TraceConfig
#define perfetto_protos_TracePacket_data_ftrace_stats_MSGTYPE perfetto_protos_FtraceStats
#define perfetto_protos_TracePacket_data_trace_stats_MSGTYPE perfetto_protos_TraceStats
#define perfetto_protos_TracePacket_data_profile_packet_MSGTYPE perfetto_protos_ProfilePacket
#define perfetto_protos_TracePacket_data_battery_MSGTYPE perfetto_protos_BatteryCounters
#define perfetto_protos_TracePacket_data_android_log_MSGTYPE perfetto_protos_AndroidLogPacket
#define perfetto_protos_TracePacket_data_power_rails_MSGTYPE perfetto_protos_PowerRails
#define perfetto_protos_TracePacket_data_process_descriptor_MSGTYPE perfetto_protos_ProcessDescriptor
#define perfetto_protos_TracePacket_data_thread_descriptor_MSGTYPE perfetto_protos_ThreadDescriptor
#define perfetto_protos_TracePacket_data_system_info_MSGTYPE perfetto_protos_SystemInfo
#define perfetto_protos_TracePacket_data_trigger_MSGTYPE perfetto_protos_Trigger
#define perfetto_protos_TracePacket_data_packages_list_MSGTYPE perfetto_protos_PackagesList
#define perfetto_protos_TracePacket_data_chrome_benchmark_metadata_MSGTYPE perfetto_protos_ChromeBenchmarkMetadata
#define perfetto_protos_TracePacket_data_perfetto_metatrace_MSGTYPE perfetto_protos_PerfettoMetatrace
#define perfetto_protos_TracePacket_data_chrome_metadata_MSGTYPE perfetto_protos_ChromeMetadataPacket
#define perfetto_protos_TracePacket_data_gpu_counter_event_MSGTYPE perfetto_protos_GpuCounterEvent
#define perfetto_protos_TracePacket_data_gpu_render_stage_event_MSGTYPE perfetto_protos_GpuRenderStageEvent
#define perfetto_protos_TracePacket_data_streaming_profile_packet_MSGTYPE perfetto_protos_StreamingProfilePacket
#define perfetto_protos_TracePacket_data_heap_graph_MSGTYPE perfetto_protos_HeapGraph
#define perfetto_protos_TracePacket_data_graphics_frame_event_MSGTYPE perfetto_protos_GraphicsFrameEvent
#define perfetto_protos_TracePacket_trace_packet_defaults_MSGTYPE perfetto_protos_TracePacketDefaults
#define perfetto_protos_TracePacket_data_track_descriptor_MSGTYPE perfetto_protos_TrackDescriptor
#define perfetto_protos_TracePacket_data_module_symbols_MSGTYPE perfetto_protos_ModuleSymbols
#define perfetto_protos_TracePacket_data_vulkan_memory_event_MSGTYPE perfetto_protos_VulkanMemoryEvent
#define perfetto_protos_TracePacket_data_gpu_log_MSGTYPE perfetto_protos_GpuLog
#define perfetto_protos_TracePacket_data_deobfuscation_mapping_MSGTYPE perfetto_protos_DeobfuscationMapping
#define perfetto_protos_TracePacket_data_vulkan_api_event_MSGTYPE perfetto_protos_VulkanApiEvent
#define perfetto_protos_TracePacket_data_perf_sample_MSGTYPE perfetto_protos_PerfSample
#define perfetto_protos_TracePacket_data_cpu_info_MSGTYPE perfetto_protos_CpuInfo
#define perfetto_protos_TracePacket_data_smaps_packet_MSGTYPE perfetto_protos_SmapsPacket
#define perfetto_protos_TracePacket_data_service_event_MSGTYPE perfetto_protos_TracingServiceEvent
#define perfetto_protos_TracePacket_data_initial_display_state_MSGTYPE perfetto_protos_InitialDisplayState
#define perfetto_protos_TracePacket_data_gpu_mem_total_event_MSGTYPE perfetto_protos_GpuMemTotalEvent
#define perfetto_protos_TracePacket_data_extension_descriptor_MSGTYPE perfetto_protos_ExtensionDescriptor
#define perfetto_protos_TracePacket_data_memory_tracker_snapshot_MSGTYPE perfetto_protos_MemoryTrackerSnapshot
#define perfetto_protos_TracePacket_data_streaming_allocation_MSGTYPE perfetto_protos_StreamingAllocation
#define perfetto_protos_TracePacket_data_streaming_free_MSGTYPE perfetto_protos_StreamingFree
#define perfetto_protos_TracePacket_data_frame_timeline_event_MSGTYPE perfetto_protos_FrameTimelineEvent
#define perfetto_protos_TracePacket_data_android_energy_estimation_breakdown_MSGTYPE perfetto_protos_AndroidEnergyEstimationBreakdown
#define perfetto_protos_TracePacket_data_ui_state_MSGTYPE perfetto_protos_UiState
#define perfetto_protos_TracePacket_data_android_camera_frame_event_MSGTYPE perfetto_protos_AndroidCameraFrameEvent
#define perfetto_protos_TracePacket_data_android_camera_session_stats_MSGTYPE perfetto_protos_AndroidCameraSessionStats
#define perfetto_protos_TracePacket_data_translation_table_MSGTYPE perfetto_protos_TranslationTable
#define perfetto_protos_TracePacket_data_android_game_intervention_list_MSGTYPE perfetto_protos_AndroidGameInterventionList
#define perfetto_protos_TracePacket_data_statsd_atom_MSGTYPE perfetto_protos_StatsdAtom
#define perfetto_protos_TracePacket_data_android_system_property_MSGTYPE perfetto_protos_AndroidSystemProperty
#define perfetto_protos_TracePacket_data_network_packet_MSGTYPE perfetto_protos_NetworkPacketEvent
#define perfetto_protos_TracePacket_data_trace_uuid_MSGTYPE perfetto_protos_TraceUuid
#define perfetto_protos_TracePacket_data_track_event_range_of_interest_MSGTYPE perfetto_protos_TrackEventRangeOfInterest
#define perfetto_protos_TracePacket_data_entity_state_residency_MSGTYPE perfetto_protos_EntityStateResidency
#define perfetto_protos_TracePacket_data_network_packet_bundle_MSGTYPE perfetto_protos_NetworkPacketBundle
#define perfetto_protos_TracePacket_data_surfaceflinger_layers_snapshot_MSGTYPE perfetto_protos_LayersSnapshotProto
#define perfetto_protos_TracePacket_data_surfaceflinger_transactions_MSGTYPE perfetto_protos_TransactionTraceEntry
#define perfetto_protos_TracePacket_data_etw_events_MSGTYPE perfetto_protos_EtwTraceEventBundle
#define perfetto_protos_TracePacket_data_shell_transition_MSGTYPE perfetto_protos_ShellTransition
#define perfetto_protos_TracePacket_data_shell_handler_mappings_MSGTYPE perfetto_protos_ShellHandlerMappings
#define perfetto_protos_TracePacket_data_v8_js_code_MSGTYPE perfetto_protos_V8JsCode
#define perfetto_protos_TracePacket_data_v8_internal_code_MSGTYPE perfetto_protos_V8InternalCode
#define perfetto_protos_TracePacket_data_v8_wasm_code_MSGTYPE perfetto_protos_V8WasmCode
#define perfetto_protos_TracePacket_data_v8_reg_exp_code_MSGTYPE perfetto_protos_V8RegExpCode
#define perfetto_protos_TracePacket_data_v8_code_move_MSGTYPE perfetto_protos_V8CodeMove
#define perfetto_protos_TracePacket_data_protolog_message_MSGTYPE perfetto_protos_ProtoLogMessage
#define perfetto_protos_TracePacket_data_protolog_viewer_config_MSGTYPE perfetto_protos_ProtoLogViewerConfig
#define perfetto_protos_TracePacket_data_remote_clock_sync_MSGTYPE perfetto_protos_RemoteClockSync
#define perfetto_protos_TracePacket_data_chrome_trigger_MSGTYPE perfetto_protos_ChromeTrigger
#define perfetto_protos_TracePacket_data_pixel_modem_events_MSGTYPE perfetto_protos_PixelModemEvents
#define perfetto_protos_TracePacket_data_pixel_modem_token_database_MSGTYPE perfetto_protos_PixelModemTokenDatabase
#define perfetto_protos_TracePacket_data_winscope_extensions_MSGTYPE perfetto_protos_WinscopeExtensions
#define perfetto_protos_TracePacket_data_clone_snapshot_trigger_MSGTYPE perfetto_protos_Trigger
#define perfetto_protos_TracePacket_data_bluetooth_trace_event_MSGTYPE perfetto_protos_BluetoothTraceEvent
#define perfetto_protos_TracePacket_data_kernel_wakelock_data_MSGTYPE perfetto_protos_KernelWakelockData
#define perfetto_protos_TracePacket_data_app_wakelock_bundle_MSGTYPE perfetto_protos_AppWakelockBundle
#define perfetto_protos_TracePacket_data_for_testing_MSGTYPE perfetto_protos_TestEvent

#define perfetto_protos_Trace_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  packet,            1)
#define perfetto_protos_Trace_CALLBACK pb_default_field_callback
#define perfetto_protos_Trace_DEFAULT NULL
#define perfetto_protos_Trace_packet_MSGTYPE perfetto_protos_TracePacket

extern const pb_msgdesc_t perfetto_protos_FtraceDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceDescriptor_AtraceCategory_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEventCategory_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEventDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_DataSourceDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceState_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceState_Producer_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceState_DataSource_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceState_TracingSession_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidGameInterventionListConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidInputEventConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidInputEventConfig_TraceRule_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidLogConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidPolledStateConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidSdkSyspropGuardConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidSystemPropertyConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AppWakelocksConfig_msg;
extern const pb_msgdesc_t perfetto_protos_KernelWakelocksConfig_msg;
extern const pb_msgdesc_t perfetto_protos_NetworkPacketTraceConfig_msg;
extern const pb_msgdesc_t perfetto_protos_PackagesListConfig_msg;
extern const pb_msgdesc_t perfetto_protos_PixelModemConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogGroup_msg;
extern const pb_msgdesc_t perfetto_protos_SurfaceFlingerLayersConfig_msg;
extern const pb_msgdesc_t perfetto_protos_SurfaceFlingerTransactionsConfig_msg;
extern const pb_msgdesc_t perfetto_protos_WindowManagerConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ChromiumHistogramSamplesConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_msg;
extern const pb_msgdesc_t perfetto_protos_ChromiumSystemMetricsConfig_msg;
extern const pb_msgdesc_t perfetto_protos_V8Config_msg;
extern const pb_msgdesc_t perfetto_protos_EtwConfig_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_KprobeEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_CompactSchedConfig_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_PrintFilter_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_PrintFilter_Rule_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterConfig_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStagesConfig_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanMemoryConfig_msg;
extern const pb_msgdesc_t perfetto_protos_InodeFileConfig_msg;
extern const pb_msgdesc_t perfetto_protos_InodeFileConfig_MountPointMappingEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ConsoleConfig_msg;
extern const pb_msgdesc_t perfetto_protos_InterceptorConfig_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidPowerConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessStatsConfig_msg;
extern const pb_msgdesc_t perfetto_protos_HeapprofdConfig_msg;
extern const pb_msgdesc_t perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_msg;
extern const pb_msgdesc_t perfetto_protos_JavaHprofConfig_msg;
extern const pb_msgdesc_t perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEvents_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEvents_Timebase_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEvents_Tracepoint_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEvents_RawEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FollowerEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEventConfig_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEventConfig_CallstackSampling_msg;
extern const pb_msgdesc_t perfetto_protos_PerfEventConfig_Scope_msg;
extern const pb_msgdesc_t perfetto_protos_StatsdTracingConfig_msg;
extern const pb_msgdesc_t perfetto_protos_StatsdPullAtomConfig_msg;
extern const pb_msgdesc_t perfetto_protos_SysStatsConfig_msg;
extern const pb_msgdesc_t perfetto_protos_SystemInfoConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TestConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TestConfig_DummyFields_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEventConfig_msg;
extern const pb_msgdesc_t perfetto_protos_DataSourceConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_BufferConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_DataSource_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_BuiltinDataSource_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_ProducerConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_StatsdMetadata_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_GuardrailOverrides_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_TriggerConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_TriggerConfig_Trigger_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_IncrementalStateConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_IncidentReportConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_TraceFilter_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_AndroidReportConfig_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_CmdTraceStartDelay_msg;
extern const pb_msgdesc_t perfetto_protos_TraceConfig_SessionSemaphore_msg;
extern const pb_msgdesc_t perfetto_protos_TraceStats_msg;
extern const pb_msgdesc_t perfetto_protos_TraceStats_BufferStats_msg;
extern const pb_msgdesc_t perfetto_protos_TraceStats_WriterStats_msg;
extern const pb_msgdesc_t perfetto_protos_TraceStats_FilterStats_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidGameInterventionList_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidGameInterventionList_GameModeInfo_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidGameInterventionList_GamePackageInfo_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidLogPacket_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidLogPacket_LogEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidLogPacket_LogEvent_Arg_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidLogPacket_Stats_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidSystemProperty_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidSystemProperty_PropertyValue_msg;
extern const pb_msgdesc_t perfetto_protos_AppWakelockInfo_msg;
extern const pb_msgdesc_t perfetto_protos_AppWakelockBundle_msg;
extern const pb_msgdesc_t perfetto_protos_BluetoothTraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraFrameEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraSessionStats_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraSessionStats_CameraGraph_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_msg;
extern const pb_msgdesc_t perfetto_protos_FrameTimelineEvent_FrameEnd_msg;
extern const pb_msgdesc_t perfetto_protos_GpuMemTotalEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GraphicsFrameEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GraphicsFrameEvent_BufferEvent_msg;
extern const pb_msgdesc_t perfetto_protos_InitialDisplayState_msg;
extern const pb_msgdesc_t perfetto_protos_KernelWakelockData_msg;
extern const pb_msgdesc_t perfetto_protos_KernelWakelockData_Wakelock_msg;
extern const pb_msgdesc_t perfetto_protos_NetworkPacketEvent_msg;
extern const pb_msgdesc_t perfetto_protos_NetworkPacketBundle_msg;
extern const pb_msgdesc_t perfetto_protos_NetworkPacketContext_msg;
extern const pb_msgdesc_t perfetto_protos_PackagesList_msg;
extern const pb_msgdesc_t perfetto_protos_PackagesList_PackageInfo_msg;
extern const pb_msgdesc_t perfetto_protos_PixelModemEvents_msg;
extern const pb_msgdesc_t perfetto_protos_PixelModemTokenDatabase_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogMessage_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogViewerConfig_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogViewerConfig_MessageData_msg;
extern const pb_msgdesc_t perfetto_protos_ProtoLogViewerConfig_Group_msg;
extern const pb_msgdesc_t perfetto_protos_ShellTransition_msg;
extern const pb_msgdesc_t perfetto_protos_ShellTransition_Target_msg;
extern const pb_msgdesc_t perfetto_protos_ShellHandlerMappings_msg;
extern const pb_msgdesc_t perfetto_protos_ShellHandlerMapping_msg;
extern const pb_msgdesc_t perfetto_protos_RectProto_msg;
extern const pb_msgdesc_t perfetto_protos_RegionProto_msg;
extern const pb_msgdesc_t perfetto_protos_SizeProto_msg;
extern const pb_msgdesc_t perfetto_protos_TransformProto_msg;
extern const pb_msgdesc_t perfetto_protos_ColorProto_msg;
extern const pb_msgdesc_t perfetto_protos_InputWindowInfoProto_msg;
extern const pb_msgdesc_t perfetto_protos_BlurRegion_msg;
extern const pb_msgdesc_t perfetto_protos_ColorTransformProto_msg;
extern const pb_msgdesc_t perfetto_protos_LayersTraceFileProto_msg;
extern const pb_msgdesc_t perfetto_protos_LayersSnapshotProto_msg;
extern const pb_msgdesc_t perfetto_protos_LayersProto_msg;
extern const pb_msgdesc_t perfetto_protos_DisplayProto_msg;
extern const pb_msgdesc_t perfetto_protos_LayerProto_msg;
extern const pb_msgdesc_t perfetto_protos_LayerProto_MetadataEntry_msg;
extern const pb_msgdesc_t perfetto_protos_PositionProto_msg;
extern const pb_msgdesc_t perfetto_protos_FloatRectProto_msg;
extern const pb_msgdesc_t perfetto_protos_ActiveBufferProto_msg;
extern const pb_msgdesc_t perfetto_protos_BarrierLayerProto_msg;
extern const pb_msgdesc_t perfetto_protos_TransactionTraceFile_msg;
extern const pb_msgdesc_t perfetto_protos_TransactionTraceEntry_msg;
extern const pb_msgdesc_t perfetto_protos_DisplayInfo_msg;
extern const pb_msgdesc_t perfetto_protos_LayerCreationArgs_msg;
extern const pb_msgdesc_t perfetto_protos_Transform_msg;
extern const pb_msgdesc_t perfetto_protos_TransactionState_msg;
extern const pb_msgdesc_t perfetto_protos_LayerState_msg;
extern const pb_msgdesc_t perfetto_protos_LayerState_Matrix22_msg;
extern const pb_msgdesc_t perfetto_protos_LayerState_Color3_msg;
extern const pb_msgdesc_t perfetto_protos_LayerState_BufferData_msg;
extern const pb_msgdesc_t perfetto_protos_LayerState_WindowInfo_msg;
extern const pb_msgdesc_t perfetto_protos_DisplayState_msg;
extern const pb_msgdesc_t perfetto_protos_WinscopeExtensions_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeBenchmarkMetadata_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeMetadataPacket_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeMetadataPacket_FinchHash_msg;
extern const pb_msgdesc_t perfetto_protos_BackgroundTracingMetadata_msg;
extern const pb_msgdesc_t perfetto_protos_BackgroundTracingMetadata_TriggerRule_msg;
extern const pb_msgdesc_t perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_msg;
extern const pb_msgdesc_t perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeTracedValue_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeStringTableEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeTraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeTraceEvent_Arg_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeMetadata_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeLegacyJsonTrace_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeEventBundle_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeTrigger_msg;
extern const pb_msgdesc_t perfetto_protos_V8String_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8String_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8JsScript_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8WasmScript_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8JsFunction_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8Isolate_msg;
extern const pb_msgdesc_t perfetto_protos_InternedV8Isolate_CodeRange_msg;
extern const pb_msgdesc_t perfetto_protos_V8JsCode_msg;
extern const pb_msgdesc_t perfetto_protos_V8InternalCode_msg;
extern const pb_msgdesc_t perfetto_protos_V8WasmCode_msg;
extern const pb_msgdesc_t perfetto_protos_V8RegExpCode_msg;
extern const pb_msgdesc_t perfetto_protos_V8CodeMove_msg;
extern const pb_msgdesc_t perfetto_protos_V8CodeDefaults_msg;
extern const pb_msgdesc_t perfetto_protos_ClockSnapshot_msg;
extern const pb_msgdesc_t perfetto_protos_ClockSnapshot_Clock_msg;
extern const pb_msgdesc_t perfetto_protos_CSwitchEtwEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ReadyThreadEtwEvent_msg;
extern const pb_msgdesc_t perfetto_protos_EtwTraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_EtwTraceEventBundle_msg;
extern const pb_msgdesc_t perfetto_protos_FileDescriptorSet_msg;
extern const pb_msgdesc_t perfetto_protos_FileDescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_DescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_DescriptorProto_ReservedRange_msg;
extern const pb_msgdesc_t perfetto_protos_UninterpretedOption_msg;
extern const pb_msgdesc_t perfetto_protos_UninterpretedOption_NamePart_msg;
extern const pb_msgdesc_t perfetto_protos_FieldOptions_msg;
extern const pb_msgdesc_t perfetto_protos_FieldDescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_OneofDescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_EnumDescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_EnumValueDescriptorProto_msg;
extern const pb_msgdesc_t perfetto_protos_OneofOptions_msg;
extern const pb_msgdesc_t perfetto_protos_ExtensionDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_InodeFileMap_msg;
extern const pb_msgdesc_t perfetto_protos_InodeFileMap_Entry_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsDatareadEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsDatareadStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsDatawriteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsDatawriteStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsFsyncEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidFsFsyncStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BclIrqTriggerFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderTransactionFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderTransactionReceivedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderSetPriorityFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderLockFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderLockedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderUnlockFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderTransactionAllocBufFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderCommandFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BinderReturnFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqIssueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioBackmergeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioBounceFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioCompleteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioFrontmergeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioQueueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockBioRemapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockDirtyBufferFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockGetrqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockPlugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqAbortFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqCompleteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqInsertFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqRemapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockRqRequeueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockSleeprqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockSplitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockTouchBufferFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockUnplugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockIoStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_BlockIoDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupAttachTaskFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupMkdirFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupRemountFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupRmdirFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupTransferTasksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupDestroyRootFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupReleaseFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupRenameFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CgroupSetupRootFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClkEnableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClkDisableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClkSetRateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CmaAllocStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CmaAllocInfoFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionDeferCompactionFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionDeferredFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionDeferResetFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionFinishedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionMigratepagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionSuitableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ParamSetValueCpmFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuhpExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuhpMultiEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuhpEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuhpLatencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuhpPauseFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CrosEcSensorhubDataFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DcvshFreqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DevfreqFrequencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaFenceInitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaFenceEmitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaFenceSignaledFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaFenceWaitStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaFenceWaitEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaHeapStatFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuDsiRxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuDsiTxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuDispDpuUnderrunFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DrmVblankEventFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DrmVblankEventDeliveredFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaWriteBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaWriteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4SyncFileEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4SyncFileExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4AllocDaBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4AllocateBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4AllocateInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4CollapseRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaReserveSpaceFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaWritePagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DirectIOEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DirectIOExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DiscardBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4DropInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsCacheExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsInsertExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsRemoveExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsShrinkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsShrinkCountFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4EvictInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtInCacheFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtLoadExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtPutInCacheFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtRmIdxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtRmLeafFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ExtShowExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4FallocateEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4FallocateExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4FindDelallocRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ForgetFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4FreeBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4FreeInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4InsertRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4InvalidatepageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4JournalStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4JournalStartReservedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4JournalledWriteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4LoadInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbBitmapLoadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbNewGroupPaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbNewInodePaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MballocAllocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MballocDiscardFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MballocFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4MballocPreallocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4PunchHoleFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ReadpageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ReleasepageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4RemoveBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4RequestBlocksFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4RequestInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4SyncFsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4TrimAllFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4TrimExtentFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4TruncateEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4TruncateExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4UnlinkEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4UnlinkExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4WriteBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4WriteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4WritepageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4WritepagesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4WritepagesResultFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Ext4ZeroRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsDoSubmitBioFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsEvictInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsFallocateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsGetDataBlockFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsGetVictimFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsIgetFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsIgetExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsNewInodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsReadpageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsReserveNewBlockFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsSetPageDirtyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsSubmitWritePageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsSyncFileEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsSyncFileExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsSyncFsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateNodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncateNodesExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsUnlinkEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsUnlinkExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsVmPageMkwriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsWriteBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsWriteCheckpointFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsWriteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsIostatFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsIostatLatencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsBackgroundGcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsGcBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_F2fsGcEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FastrpcDmaStatFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FastrpcDmaFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FastrpcDmaAllocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FastrpcDmaUnmapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FastrpcDmaMapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FenceInitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FenceDestroyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FenceEnableSignalFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FenceSignaledFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DoSysOpenFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_OpenExecFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PrintFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FuncgraphEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FuncgraphExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_G2dTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GenericFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GenericFtraceEvent_Field_msg;
extern const pb_msgdesc_t perfetto_protos_KprobeEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GoogleIccEventFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GoogleIrmEventFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GpuMemTotalFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DrmSchedJobFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DrmRunJobFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DrmSchedProcessJobFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_HypEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_HypExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_HostHcallFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_HostSmcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_HostMemAbortFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_I2cReadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_I2cWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_I2cResultFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_I2cReplyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SmbusReadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SmbusWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SmbusResultFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SmbusReplyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonStatFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IpiEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IpiExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IpiRaiseFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SoftirqEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SoftirqExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SoftirqRaiseFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IrqHandlerEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IrqHandlerExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KgslGpuFrequencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesIommuEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesIommuFailFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesIommuStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesSysEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesSysFailFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_AllocPagesSysStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DmaAllocContiguousRetryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IommuMapRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonAllocBufferEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonAllocBufferFailFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonAllocBufferFallbackFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonAllocBufferStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonCpAllocRetryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonCpSecureBufferEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonCpSecureBufferStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonPrefetchingFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KfreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KmallocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KmallocNodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KmemCacheAllocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KmemCacheAllocNodeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KmemCacheFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MigratePagesEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MigratePagesStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MigrateRetryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPageAllocFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPageAllocExtfragFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPageAllocZoneLockedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPageFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPageFreeBatchedFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmPagePcpuDrainFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RssStatFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonHeapShrinkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonHeapGrowFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonBufferCreateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_IonBufferDestroyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmAccessFaultFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmAckIrqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmAgeHvaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmAgePageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmArmClearDebugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmArmSetDreg32FtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmArmSetRegsetFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmArmSetupDebugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmFpuFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmGetTimerMapFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmGuestFaultFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmHandleSysRegFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmHvcArm64FtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmIrqLineFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmMmioFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmMmioEmulateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmSetGuestDebugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmSetIrqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmSetSpteHvaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmSetWayFlushFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmSysAccessFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTestAgeHvaFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTimerEmulateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTimerRestoreStateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTimerSaveStateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmTimerUpdateIrqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmToggleCacheFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmUnmapHvaRangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmUserspaceExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmVcpuWakeupFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KvmWfxArm64FtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrapRegFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VgicUpdateIrqPendingFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_LowmemoryKillFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_LwisTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MaliGpuPowerStateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCmdKickoffFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCommitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfSetOtFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpSsppChangeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCmdPingpongDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCompareBwFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpSsppSetFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCmdReadptrDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpMisrCrcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfSetQosLutsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpTraceCounterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCmdReleaseBwFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpMixerUpdateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpCmdWaitPingpongFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfPrefillCalcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MdpPerfUpdateBusFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RotatorBwAoAsContextFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmEventRecordFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_NetifReceiveSkbFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_NetDevXmitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_NapiGroReceiveEntryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_NapiGroReceiveExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_OomScoreAdjUpdateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MarkVictimFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DsiCmdFifoStatusFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DsiRxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DsiTxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PanelWriteGenericFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedSwitchWithCtrsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PixelMmKswapdWakeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PixelMmKswapdDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuFrequencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuFrequencyLimitsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CpuIdleFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClockEnableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClockDisableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ClockSetRateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SuspendResumeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GpuFrequencyFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WakeupSourceActivateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WakeupSourceDeactivateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GpuWorkPeriodFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DevicePmCallbackStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_DevicePmCallbackEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ConsoleFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SysEnterFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SysExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorDisableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorDisableCompleteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorEnableFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorEnableCompleteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorEnableDelayFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorSetVoltageFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RpmStatusFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SamsungTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedSwitchFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedWakeupFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedBlockedReasonFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedCpuHotplugFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedWakingFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedWakeupNewFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessExecFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessExitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessForkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessFreeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessHangFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedProcessWaitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedPiSetprioFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedCpuUtilCfsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedMigrateTaskFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SchedWakeupTaskAttrFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ScmCallStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ScmCallEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeTracingMarkWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeSdeEvtlogFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SignalDeliverFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SignalGenerateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_KfreeSkbFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_InetSockSetStateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SyncPtFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SyncTimelineFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SyncWaitFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_RssStatThrottledFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_SuspendResumeMinimalFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ZeroFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TaskNewtaskFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TaskRenameFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TcpRetransmitSkbFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ThermalTemperatureFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_CdevUpdateFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustySmcFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustySmcDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyStdCall32FtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyStdCall32DoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyShareMemoryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyShareMemoryDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyReclaimMemoryFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIrqFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcHandleEventFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcConnectFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcConnectEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcWriteFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcPollFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcReadFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcReadEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyIpcRxFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrustyEnqueueNopFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_UfshcdCommandFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_UfshcdClkGatingFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_V4l2QbufFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_V4l2DqbufFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Vb2V4l2BufQueueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Vb2V4l2BufDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Vb2V4l2QbufFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_Vb2V4l2DqbufFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioGpuCmdQueueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioGpuCmdResponseFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioVideoCmdFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioVideoCmdDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioVideoResourceQueueFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmVmscanKswapdWakeFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmVmscanKswapdSleepFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmShrinkSlabStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_MmShrinkSlabEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WorkqueueActivateWorkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WorkqueueExecuteEndFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WorkqueueExecuteStartFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_WorkqueueQueueWorkFtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceCpuStats_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceKprobeStats_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceStats_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceEventBundle_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceEventBundle_CompactSched_msg;
extern const pb_msgdesc_t perfetto_protos_FtraceEventBundle_FtraceError_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GpuCounterEvent_GpuCounter_msg;
extern const pb_msgdesc_t perfetto_protos_GpuLog_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStageEvent_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStageEvent_ExtraData_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStageEvent_Specifications_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_msg;
extern const pb_msgdesc_t perfetto_protos_GpuRenderStageEvent_Specifications_Description_msg;
extern const pb_msgdesc_t perfetto_protos_InternedGraphicsContext_msg;
extern const pb_msgdesc_t perfetto_protos_InternedGpuRenderStageSpecification_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanApiEvent_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanApiEvent_VkQueueSubmit_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanMemoryEventAnnotation_msg;
extern const pb_msgdesc_t perfetto_protos_VulkanMemoryEvent_msg;
extern const pb_msgdesc_t perfetto_protos_InternedString_msg;
extern const pb_msgdesc_t perfetto_protos_Line_msg;
extern const pb_msgdesc_t perfetto_protos_AddressSymbols_msg;
extern const pb_msgdesc_t perfetto_protos_ModuleSymbols_msg;
extern const pb_msgdesc_t perfetto_protos_Mapping_msg;
extern const pb_msgdesc_t perfetto_protos_Frame_msg;
extern const pb_msgdesc_t perfetto_protos_Callstack_msg;
extern const pb_msgdesc_t perfetto_protos_HistogramName_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeHistogramSample_msg;
extern const pb_msgdesc_t perfetto_protos_DebugAnnotation_msg;
extern const pb_msgdesc_t perfetto_protos_DebugAnnotation_NestedValue_msg;
extern const pb_msgdesc_t perfetto_protos_DebugAnnotationName_msg;
extern const pb_msgdesc_t perfetto_protos_DebugAnnotationValueTypeName_msg;
extern const pb_msgdesc_t perfetto_protos_LogMessage_msg;
extern const pb_msgdesc_t perfetto_protos_LogMessageBody_msg;
extern const pb_msgdesc_t perfetto_protos_UnsymbolizedSourceLocation_msg;
extern const pb_msgdesc_t perfetto_protos_SourceLocation_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeActiveProcesses_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeApplicationStateInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeCompositorSchedulerState_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeCompositorStateMachine_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeCompositorStateMachine_MajorState_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeCompositorStateMachine_MinorState_msg;
extern const pb_msgdesc_t perfetto_protos_BeginFrameArgs_msg;
extern const pb_msgdesc_t perfetto_protos_BeginImplFrameArgs_msg;
extern const pb_msgdesc_t perfetto_protos_BeginImplFrameArgs_TimestampsInUs_msg;
extern const pb_msgdesc_t perfetto_protos_BeginFrameObserverState_msg;
extern const pb_msgdesc_t perfetto_protos_BeginFrameSourceState_msg;
extern const pb_msgdesc_t perfetto_protos_CompositorTimingHistory_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeContentSettingsEventInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeFrameReporter_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeKeyedService_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeLatencyInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeLatencyInfo_ComponentInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeLegacyIpc_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeMessagePump_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeMojoEventInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeRendererSchedulerState_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeUserEvent_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeWindowHandleEventInfo_msg;
extern const pb_msgdesc_t perfetto_protos_Screenshot_msg;
extern const pb_msgdesc_t perfetto_protos_TaskExecution_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEvent_LegacyEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEventDefaults_msg;
extern const pb_msgdesc_t perfetto_protos_EventCategory_msg;
extern const pb_msgdesc_t perfetto_protos_EventName_msg;
extern const pb_msgdesc_t perfetto_protos_InternedData_msg;
extern const pb_msgdesc_t perfetto_protos_MemoryTrackerSnapshot_msg;
extern const pb_msgdesc_t perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_msg;
extern const pb_msgdesc_t perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_msg;
extern const pb_msgdesc_t perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_msg;
extern const pb_msgdesc_t perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_msg;
extern const pb_msgdesc_t perfetto_protos_PerfettoMetatrace_msg;
extern const pb_msgdesc_t perfetto_protos_PerfettoMetatrace_Arg_msg;
extern const pb_msgdesc_t perfetto_protos_PerfettoMetatrace_InternedString_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceEvent_DataSources_msg;
extern const pb_msgdesc_t perfetto_protos_TracingServiceEvent_DataSources_DataSource_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidEnergyConsumer_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidEnergyConsumerDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidEnergyEstimationBreakdown_msg;
extern const pb_msgdesc_t perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_msg;
extern const pb_msgdesc_t perfetto_protos_EntityStateResidency_msg;
extern const pb_msgdesc_t perfetto_protos_EntityStateResidency_PowerEntityState_msg;
extern const pb_msgdesc_t perfetto_protos_EntityStateResidency_StateResidency_msg;
extern const pb_msgdesc_t perfetto_protos_BatteryCounters_msg;
extern const pb_msgdesc_t perfetto_protos_PowerRails_msg;
extern const pb_msgdesc_t perfetto_protos_PowerRails_RailDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_PowerRails_EnergyData_msg;
extern const pb_msgdesc_t perfetto_protos_ObfuscatedMember_msg;
extern const pb_msgdesc_t perfetto_protos_ObfuscatedClass_msg;
extern const pb_msgdesc_t perfetto_protos_DeobfuscationMapping_msg;
extern const pb_msgdesc_t perfetto_protos_HeapGraphRoot_msg;
extern const pb_msgdesc_t perfetto_protos_HeapGraphType_msg;
extern const pb_msgdesc_t perfetto_protos_HeapGraphObject_msg;
extern const pb_msgdesc_t perfetto_protos_HeapGraph_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_HeapSample_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_Histogram_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_Histogram_Bucket_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_ProcessStats_msg;
extern const pb_msgdesc_t perfetto_protos_ProfilePacket_ProcessHeapSamples_msg;
extern const pb_msgdesc_t perfetto_protos_StreamingAllocation_msg;
extern const pb_msgdesc_t perfetto_protos_StreamingFree_msg;
extern const pb_msgdesc_t perfetto_protos_StreamingProfilePacket_msg;
extern const pb_msgdesc_t perfetto_protos_Profiling_msg;
extern const pb_msgdesc_t perfetto_protos_PerfSample_msg;
extern const pb_msgdesc_t perfetto_protos_PerfSample_ProducerEvent_msg;
extern const pb_msgdesc_t perfetto_protos_PerfSampleDefaults_msg;
extern const pb_msgdesc_t perfetto_protos_SmapsEntry_msg;
extern const pb_msgdesc_t perfetto_protos_SmapsPacket_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessStats_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessStats_Thread_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessStats_FDInfo_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessStats_Process_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessTree_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessTree_Thread_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessTree_Process_msg;
extern const pb_msgdesc_t perfetto_protos_RemoteClockSync_msg;
extern const pb_msgdesc_t perfetto_protos_RemoteClockSync_SyncedClocks_msg;
extern const pb_msgdesc_t perfetto_protos_Atom_msg;
extern const pb_msgdesc_t perfetto_protos_StatsdAtom_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_MeminfoValue_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_VmstatValue_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_CpuTimes_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_InterruptCount_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_DevfreqValue_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_BuddyInfo_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_DiskStat_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_PsiSample_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_ThermalZone_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_CpuIdleStateEntry_msg;
extern const pb_msgdesc_t perfetto_protos_SysStats_CpuIdleState_msg;
extern const pb_msgdesc_t perfetto_protos_Utsname_msg;
extern const pb_msgdesc_t perfetto_protos_SystemInfo_msg;
extern const pb_msgdesc_t perfetto_protos_CpuInfo_msg;
extern const pb_msgdesc_t perfetto_protos_CpuInfo_ArmCpuIdentifier_msg;
extern const pb_msgdesc_t perfetto_protos_CpuInfo_Cpu_msg;
extern const pb_msgdesc_t perfetto_protos_TestEvent_msg;
extern const pb_msgdesc_t perfetto_protos_TestEvent_TestPayload_msg;
extern const pb_msgdesc_t perfetto_protos_TracePacketDefaults_msg;
extern const pb_msgdesc_t perfetto_protos_TraceUuid_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_TrackEventRangeOfInterest_msg;
extern const pb_msgdesc_t perfetto_protos_ThreadDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeProcessDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeThreadDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_CounterDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_TrackDescriptor_msg;
extern const pb_msgdesc_t perfetto_protos_TranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeHistorgramTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeUserEventTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ChromePerformanceMarkTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_SliceNameTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessTrackNameTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeStudyTranslationTable_msg;
extern const pb_msgdesc_t perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_msg;
extern const pb_msgdesc_t perfetto_protos_Trigger_msg;
extern const pb_msgdesc_t perfetto_protos_UiState_msg;
extern const pb_msgdesc_t perfetto_protos_UiState_HighlightProcess_msg;
extern const pb_msgdesc_t perfetto_protos_TracePacket_msg;
extern const pb_msgdesc_t perfetto_protos_Trace_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define perfetto_protos_FtraceDescriptor_fields &perfetto_protos_FtraceDescriptor_msg
#define perfetto_protos_FtraceDescriptor_AtraceCategory_fields &perfetto_protos_FtraceDescriptor_AtraceCategory_msg
#define perfetto_protos_GpuCounterDescriptor_fields &perfetto_protos_GpuCounterDescriptor_msg
#define perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_fields &perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_msg
#define perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_fields &perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_msg
#define perfetto_protos_TrackEventCategory_fields &perfetto_protos_TrackEventCategory_msg
#define perfetto_protos_TrackEventDescriptor_fields &perfetto_protos_TrackEventDescriptor_msg
#define perfetto_protos_DataSourceDescriptor_fields &perfetto_protos_DataSourceDescriptor_msg
#define perfetto_protos_TracingServiceState_fields &perfetto_protos_TracingServiceState_msg
#define perfetto_protos_TracingServiceState_Producer_fields &perfetto_protos_TracingServiceState_Producer_msg
#define perfetto_protos_TracingServiceState_DataSource_fields &perfetto_protos_TracingServiceState_DataSource_msg
#define perfetto_protos_TracingServiceState_TracingSession_fields &perfetto_protos_TracingServiceState_TracingSession_msg
#define perfetto_protos_AndroidGameInterventionListConfig_fields &perfetto_protos_AndroidGameInterventionListConfig_msg
#define perfetto_protos_AndroidInputEventConfig_fields &perfetto_protos_AndroidInputEventConfig_msg
#define perfetto_protos_AndroidInputEventConfig_TraceRule_fields &perfetto_protos_AndroidInputEventConfig_TraceRule_msg
#define perfetto_protos_AndroidLogConfig_fields &perfetto_protos_AndroidLogConfig_msg
#define perfetto_protos_AndroidPolledStateConfig_fields &perfetto_protos_AndroidPolledStateConfig_msg
#define perfetto_protos_AndroidSdkSyspropGuardConfig_fields &perfetto_protos_AndroidSdkSyspropGuardConfig_msg
#define perfetto_protos_AndroidSystemPropertyConfig_fields &perfetto_protos_AndroidSystemPropertyConfig_msg
#define perfetto_protos_AppWakelocksConfig_fields &perfetto_protos_AppWakelocksConfig_msg
#define perfetto_protos_KernelWakelocksConfig_fields &perfetto_protos_KernelWakelocksConfig_msg
#define perfetto_protos_NetworkPacketTraceConfig_fields &perfetto_protos_NetworkPacketTraceConfig_msg
#define perfetto_protos_PackagesListConfig_fields &perfetto_protos_PackagesListConfig_msg
#define perfetto_protos_PixelModemConfig_fields &perfetto_protos_PixelModemConfig_msg
#define perfetto_protos_ProtoLogConfig_fields &perfetto_protos_ProtoLogConfig_msg
#define perfetto_protos_ProtoLogGroup_fields &perfetto_protos_ProtoLogGroup_msg
#define perfetto_protos_SurfaceFlingerLayersConfig_fields &perfetto_protos_SurfaceFlingerLayersConfig_msg
#define perfetto_protos_SurfaceFlingerTransactionsConfig_fields &perfetto_protos_SurfaceFlingerTransactionsConfig_msg
#define perfetto_protos_WindowManagerConfig_fields &perfetto_protos_WindowManagerConfig_msg
#define perfetto_protos_ChromeConfig_fields &perfetto_protos_ChromeConfig_msg
#define perfetto_protos_ChromiumHistogramSamplesConfig_fields &perfetto_protos_ChromiumHistogramSamplesConfig_msg
#define perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_fields &perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_msg
#define perfetto_protos_ChromiumSystemMetricsConfig_fields &perfetto_protos_ChromiumSystemMetricsConfig_msg
#define perfetto_protos_V8Config_fields &perfetto_protos_V8Config_msg
#define perfetto_protos_EtwConfig_fields &perfetto_protos_EtwConfig_msg
#define perfetto_protos_FtraceConfig_fields &perfetto_protos_FtraceConfig_msg
#define perfetto_protos_FtraceConfig_KprobeEvent_fields &perfetto_protos_FtraceConfig_KprobeEvent_msg
#define perfetto_protos_FtraceConfig_CompactSchedConfig_fields &perfetto_protos_FtraceConfig_CompactSchedConfig_msg
#define perfetto_protos_FtraceConfig_PrintFilter_fields &perfetto_protos_FtraceConfig_PrintFilter_msg
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_fields &perfetto_protos_FtraceConfig_PrintFilter_Rule_msg
#define perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_fields &perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_msg
#define perfetto_protos_GpuCounterConfig_fields &perfetto_protos_GpuCounterConfig_msg
#define perfetto_protos_GpuRenderStagesConfig_fields &perfetto_protos_GpuRenderStagesConfig_msg
#define perfetto_protos_VulkanMemoryConfig_fields &perfetto_protos_VulkanMemoryConfig_msg
#define perfetto_protos_InodeFileConfig_fields &perfetto_protos_InodeFileConfig_msg
#define perfetto_protos_InodeFileConfig_MountPointMappingEntry_fields &perfetto_protos_InodeFileConfig_MountPointMappingEntry_msg
#define perfetto_protos_ConsoleConfig_fields &perfetto_protos_ConsoleConfig_msg
#define perfetto_protos_InterceptorConfig_fields &perfetto_protos_InterceptorConfig_msg
#define perfetto_protos_AndroidPowerConfig_fields &perfetto_protos_AndroidPowerConfig_msg
#define perfetto_protos_ProcessStatsConfig_fields &perfetto_protos_ProcessStatsConfig_msg
#define perfetto_protos_HeapprofdConfig_fields &perfetto_protos_HeapprofdConfig_msg
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_fields &perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_msg
#define perfetto_protos_JavaHprofConfig_fields &perfetto_protos_JavaHprofConfig_msg
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_fields &perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_msg
#define perfetto_protos_PerfEvents_fields &perfetto_protos_PerfEvents_msg
#define perfetto_protos_PerfEvents_Timebase_fields &perfetto_protos_PerfEvents_Timebase_msg
#define perfetto_protos_PerfEvents_Tracepoint_fields &perfetto_protos_PerfEvents_Tracepoint_msg
#define perfetto_protos_PerfEvents_RawEvent_fields &perfetto_protos_PerfEvents_RawEvent_msg
#define perfetto_protos_FollowerEvent_fields &perfetto_protos_FollowerEvent_msg
#define perfetto_protos_PerfEventConfig_fields &perfetto_protos_PerfEventConfig_msg
#define perfetto_protos_PerfEventConfig_CallstackSampling_fields &perfetto_protos_PerfEventConfig_CallstackSampling_msg
#define perfetto_protos_PerfEventConfig_Scope_fields &perfetto_protos_PerfEventConfig_Scope_msg
#define perfetto_protos_StatsdTracingConfig_fields &perfetto_protos_StatsdTracingConfig_msg
#define perfetto_protos_StatsdPullAtomConfig_fields &perfetto_protos_StatsdPullAtomConfig_msg
#define perfetto_protos_SysStatsConfig_fields &perfetto_protos_SysStatsConfig_msg
#define perfetto_protos_SystemInfoConfig_fields &perfetto_protos_SystemInfoConfig_msg
#define perfetto_protos_TestConfig_fields &perfetto_protos_TestConfig_msg
#define perfetto_protos_TestConfig_DummyFields_fields &perfetto_protos_TestConfig_DummyFields_msg
#define perfetto_protos_TrackEventConfig_fields &perfetto_protos_TrackEventConfig_msg
#define perfetto_protos_DataSourceConfig_fields &perfetto_protos_DataSourceConfig_msg
#define perfetto_protos_TraceConfig_fields &perfetto_protos_TraceConfig_msg
#define perfetto_protos_TraceConfig_BufferConfig_fields &perfetto_protos_TraceConfig_BufferConfig_msg
#define perfetto_protos_TraceConfig_DataSource_fields &perfetto_protos_TraceConfig_DataSource_msg
#define perfetto_protos_TraceConfig_BuiltinDataSource_fields &perfetto_protos_TraceConfig_BuiltinDataSource_msg
#define perfetto_protos_TraceConfig_ProducerConfig_fields &perfetto_protos_TraceConfig_ProducerConfig_msg
#define perfetto_protos_TraceConfig_StatsdMetadata_fields &perfetto_protos_TraceConfig_StatsdMetadata_msg
#define perfetto_protos_TraceConfig_GuardrailOverrides_fields &perfetto_protos_TraceConfig_GuardrailOverrides_msg
#define perfetto_protos_TraceConfig_TriggerConfig_fields &perfetto_protos_TraceConfig_TriggerConfig_msg
#define perfetto_protos_TraceConfig_TriggerConfig_Trigger_fields &perfetto_protos_TraceConfig_TriggerConfig_Trigger_msg
#define perfetto_protos_TraceConfig_IncrementalStateConfig_fields &perfetto_protos_TraceConfig_IncrementalStateConfig_msg
#define perfetto_protos_TraceConfig_IncidentReportConfig_fields &perfetto_protos_TraceConfig_IncidentReportConfig_msg
#define perfetto_protos_TraceConfig_TraceFilter_fields &perfetto_protos_TraceConfig_TraceFilter_msg
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_fields &perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_msg
#define perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_fields &perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_msg
#define perfetto_protos_TraceConfig_AndroidReportConfig_fields &perfetto_protos_TraceConfig_AndroidReportConfig_msg
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_fields &perfetto_protos_TraceConfig_CmdTraceStartDelay_msg
#define perfetto_protos_TraceConfig_SessionSemaphore_fields &perfetto_protos_TraceConfig_SessionSemaphore_msg
#define perfetto_protos_TraceStats_fields &perfetto_protos_TraceStats_msg
#define perfetto_protos_TraceStats_BufferStats_fields &perfetto_protos_TraceStats_BufferStats_msg
#define perfetto_protos_TraceStats_WriterStats_fields &perfetto_protos_TraceStats_WriterStats_msg
#define perfetto_protos_TraceStats_FilterStats_fields &perfetto_protos_TraceStats_FilterStats_msg
#define perfetto_protos_AndroidGameInterventionList_fields &perfetto_protos_AndroidGameInterventionList_msg
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_fields &perfetto_protos_AndroidGameInterventionList_GameModeInfo_msg
#define perfetto_protos_AndroidGameInterventionList_GamePackageInfo_fields &perfetto_protos_AndroidGameInterventionList_GamePackageInfo_msg
#define perfetto_protos_AndroidLogPacket_fields &perfetto_protos_AndroidLogPacket_msg
#define perfetto_protos_AndroidLogPacket_LogEvent_fields &perfetto_protos_AndroidLogPacket_LogEvent_msg
#define perfetto_protos_AndroidLogPacket_LogEvent_Arg_fields &perfetto_protos_AndroidLogPacket_LogEvent_Arg_msg
#define perfetto_protos_AndroidLogPacket_Stats_fields &perfetto_protos_AndroidLogPacket_Stats_msg
#define perfetto_protos_AndroidSystemProperty_fields &perfetto_protos_AndroidSystemProperty_msg
#define perfetto_protos_AndroidSystemProperty_PropertyValue_fields &perfetto_protos_AndroidSystemProperty_PropertyValue_msg
#define perfetto_protos_AppWakelockInfo_fields &perfetto_protos_AppWakelockInfo_msg
#define perfetto_protos_AppWakelockBundle_fields &perfetto_protos_AppWakelockBundle_msg
#define perfetto_protos_BluetoothTraceEvent_fields &perfetto_protos_BluetoothTraceEvent_msg
#define perfetto_protos_AndroidCameraFrameEvent_fields &perfetto_protos_AndroidCameraFrameEvent_msg
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_fields &perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_msg
#define perfetto_protos_AndroidCameraSessionStats_fields &perfetto_protos_AndroidCameraSessionStats_msg
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_fields &perfetto_protos_AndroidCameraSessionStats_CameraGraph_msg
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_fields &perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_msg
#define perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_fields &perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_msg
#define perfetto_protos_FrameTimelineEvent_fields &perfetto_protos_FrameTimelineEvent_msg
#define perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_fields &perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_msg
#define perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_fields &perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_msg
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_fields &perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_msg
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_fields &perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_msg
#define perfetto_protos_FrameTimelineEvent_FrameEnd_fields &perfetto_protos_FrameTimelineEvent_FrameEnd_msg
#define perfetto_protos_GpuMemTotalEvent_fields &perfetto_protos_GpuMemTotalEvent_msg
#define perfetto_protos_GraphicsFrameEvent_fields &perfetto_protos_GraphicsFrameEvent_msg
#define perfetto_protos_GraphicsFrameEvent_BufferEvent_fields &perfetto_protos_GraphicsFrameEvent_BufferEvent_msg
#define perfetto_protos_InitialDisplayState_fields &perfetto_protos_InitialDisplayState_msg
#define perfetto_protos_KernelWakelockData_fields &perfetto_protos_KernelWakelockData_msg
#define perfetto_protos_KernelWakelockData_Wakelock_fields &perfetto_protos_KernelWakelockData_Wakelock_msg
#define perfetto_protos_NetworkPacketEvent_fields &perfetto_protos_NetworkPacketEvent_msg
#define perfetto_protos_NetworkPacketBundle_fields &perfetto_protos_NetworkPacketBundle_msg
#define perfetto_protos_NetworkPacketContext_fields &perfetto_protos_NetworkPacketContext_msg
#define perfetto_protos_PackagesList_fields &perfetto_protos_PackagesList_msg
#define perfetto_protos_PackagesList_PackageInfo_fields &perfetto_protos_PackagesList_PackageInfo_msg
#define perfetto_protos_PixelModemEvents_fields &perfetto_protos_PixelModemEvents_msg
#define perfetto_protos_PixelModemTokenDatabase_fields &perfetto_protos_PixelModemTokenDatabase_msg
#define perfetto_protos_ProtoLogMessage_fields &perfetto_protos_ProtoLogMessage_msg
#define perfetto_protos_ProtoLogViewerConfig_fields &perfetto_protos_ProtoLogViewerConfig_msg
#define perfetto_protos_ProtoLogViewerConfig_MessageData_fields &perfetto_protos_ProtoLogViewerConfig_MessageData_msg
#define perfetto_protos_ProtoLogViewerConfig_Group_fields &perfetto_protos_ProtoLogViewerConfig_Group_msg
#define perfetto_protos_ShellTransition_fields &perfetto_protos_ShellTransition_msg
#define perfetto_protos_ShellTransition_Target_fields &perfetto_protos_ShellTransition_Target_msg
#define perfetto_protos_ShellHandlerMappings_fields &perfetto_protos_ShellHandlerMappings_msg
#define perfetto_protos_ShellHandlerMapping_fields &perfetto_protos_ShellHandlerMapping_msg
#define perfetto_protos_RectProto_fields &perfetto_protos_RectProto_msg
#define perfetto_protos_RegionProto_fields &perfetto_protos_RegionProto_msg
#define perfetto_protos_SizeProto_fields &perfetto_protos_SizeProto_msg
#define perfetto_protos_TransformProto_fields &perfetto_protos_TransformProto_msg
#define perfetto_protos_ColorProto_fields &perfetto_protos_ColorProto_msg
#define perfetto_protos_InputWindowInfoProto_fields &perfetto_protos_InputWindowInfoProto_msg
#define perfetto_protos_BlurRegion_fields &perfetto_protos_BlurRegion_msg
#define perfetto_protos_ColorTransformProto_fields &perfetto_protos_ColorTransformProto_msg
#define perfetto_protos_LayersTraceFileProto_fields &perfetto_protos_LayersTraceFileProto_msg
#define perfetto_protos_LayersSnapshotProto_fields &perfetto_protos_LayersSnapshotProto_msg
#define perfetto_protos_LayersProto_fields &perfetto_protos_LayersProto_msg
#define perfetto_protos_DisplayProto_fields &perfetto_protos_DisplayProto_msg
#define perfetto_protos_LayerProto_fields &perfetto_protos_LayerProto_msg
#define perfetto_protos_LayerProto_MetadataEntry_fields &perfetto_protos_LayerProto_MetadataEntry_msg
#define perfetto_protos_PositionProto_fields &perfetto_protos_PositionProto_msg
#define perfetto_protos_FloatRectProto_fields &perfetto_protos_FloatRectProto_msg
#define perfetto_protos_ActiveBufferProto_fields &perfetto_protos_ActiveBufferProto_msg
#define perfetto_protos_BarrierLayerProto_fields &perfetto_protos_BarrierLayerProto_msg
#define perfetto_protos_TransactionTraceFile_fields &perfetto_protos_TransactionTraceFile_msg
#define perfetto_protos_TransactionTraceEntry_fields &perfetto_protos_TransactionTraceEntry_msg
#define perfetto_protos_DisplayInfo_fields &perfetto_protos_DisplayInfo_msg
#define perfetto_protos_LayerCreationArgs_fields &perfetto_protos_LayerCreationArgs_msg
#define perfetto_protos_Transform_fields &perfetto_protos_Transform_msg
#define perfetto_protos_TransactionState_fields &perfetto_protos_TransactionState_msg
#define perfetto_protos_LayerState_fields &perfetto_protos_LayerState_msg
#define perfetto_protos_LayerState_Matrix22_fields &perfetto_protos_LayerState_Matrix22_msg
#define perfetto_protos_LayerState_Color3_fields &perfetto_protos_LayerState_Color3_msg
#define perfetto_protos_LayerState_BufferData_fields &perfetto_protos_LayerState_BufferData_msg
#define perfetto_protos_LayerState_WindowInfo_fields &perfetto_protos_LayerState_WindowInfo_msg
#define perfetto_protos_DisplayState_fields &perfetto_protos_DisplayState_msg
#define perfetto_protos_WinscopeExtensions_fields &perfetto_protos_WinscopeExtensions_msg
#define perfetto_protos_ChromeBenchmarkMetadata_fields &perfetto_protos_ChromeBenchmarkMetadata_msg
#define perfetto_protos_ChromeMetadataPacket_fields &perfetto_protos_ChromeMetadataPacket_msg
#define perfetto_protos_ChromeMetadataPacket_FinchHash_fields &perfetto_protos_ChromeMetadataPacket_FinchHash_msg
#define perfetto_protos_BackgroundTracingMetadata_fields &perfetto_protos_BackgroundTracingMetadata_msg
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_fields &perfetto_protos_BackgroundTracingMetadata_TriggerRule_msg
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_fields &perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_msg
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_fields &perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_msg
#define perfetto_protos_ChromeTracedValue_fields &perfetto_protos_ChromeTracedValue_msg
#define perfetto_protos_ChromeStringTableEntry_fields &perfetto_protos_ChromeStringTableEntry_msg
#define perfetto_protos_ChromeTraceEvent_fields &perfetto_protos_ChromeTraceEvent_msg
#define perfetto_protos_ChromeTraceEvent_Arg_fields &perfetto_protos_ChromeTraceEvent_Arg_msg
#define perfetto_protos_ChromeMetadata_fields &perfetto_protos_ChromeMetadata_msg
#define perfetto_protos_ChromeLegacyJsonTrace_fields &perfetto_protos_ChromeLegacyJsonTrace_msg
#define perfetto_protos_ChromeEventBundle_fields &perfetto_protos_ChromeEventBundle_msg
#define perfetto_protos_ChromeTrigger_fields &perfetto_protos_ChromeTrigger_msg
#define perfetto_protos_V8String_fields &perfetto_protos_V8String_msg
#define perfetto_protos_InternedV8String_fields &perfetto_protos_InternedV8String_msg
#define perfetto_protos_InternedV8JsScript_fields &perfetto_protos_InternedV8JsScript_msg
#define perfetto_protos_InternedV8WasmScript_fields &perfetto_protos_InternedV8WasmScript_msg
#define perfetto_protos_InternedV8JsFunction_fields &perfetto_protos_InternedV8JsFunction_msg
#define perfetto_protos_InternedV8Isolate_fields &perfetto_protos_InternedV8Isolate_msg
#define perfetto_protos_InternedV8Isolate_CodeRange_fields &perfetto_protos_InternedV8Isolate_CodeRange_msg
#define perfetto_protos_V8JsCode_fields &perfetto_protos_V8JsCode_msg
#define perfetto_protos_V8InternalCode_fields &perfetto_protos_V8InternalCode_msg
#define perfetto_protos_V8WasmCode_fields &perfetto_protos_V8WasmCode_msg
#define perfetto_protos_V8RegExpCode_fields &perfetto_protos_V8RegExpCode_msg
#define perfetto_protos_V8CodeMove_fields &perfetto_protos_V8CodeMove_msg
#define perfetto_protos_V8CodeDefaults_fields &perfetto_protos_V8CodeDefaults_msg
#define perfetto_protos_ClockSnapshot_fields &perfetto_protos_ClockSnapshot_msg
#define perfetto_protos_ClockSnapshot_Clock_fields &perfetto_protos_ClockSnapshot_Clock_msg
#define perfetto_protos_CSwitchEtwEvent_fields &perfetto_protos_CSwitchEtwEvent_msg
#define perfetto_protos_ReadyThreadEtwEvent_fields &perfetto_protos_ReadyThreadEtwEvent_msg
#define perfetto_protos_EtwTraceEvent_fields &perfetto_protos_EtwTraceEvent_msg
#define perfetto_protos_EtwTraceEventBundle_fields &perfetto_protos_EtwTraceEventBundle_msg
#define perfetto_protos_FileDescriptorSet_fields &perfetto_protos_FileDescriptorSet_msg
#define perfetto_protos_FileDescriptorProto_fields &perfetto_protos_FileDescriptorProto_msg
#define perfetto_protos_DescriptorProto_fields &perfetto_protos_DescriptorProto_msg
#define perfetto_protos_DescriptorProto_ReservedRange_fields &perfetto_protos_DescriptorProto_ReservedRange_msg
#define perfetto_protos_UninterpretedOption_fields &perfetto_protos_UninterpretedOption_msg
#define perfetto_protos_UninterpretedOption_NamePart_fields &perfetto_protos_UninterpretedOption_NamePart_msg
#define perfetto_protos_FieldOptions_fields &perfetto_protos_FieldOptions_msg
#define perfetto_protos_FieldDescriptorProto_fields &perfetto_protos_FieldDescriptorProto_msg
#define perfetto_protos_OneofDescriptorProto_fields &perfetto_protos_OneofDescriptorProto_msg
#define perfetto_protos_EnumDescriptorProto_fields &perfetto_protos_EnumDescriptorProto_msg
#define perfetto_protos_EnumValueDescriptorProto_fields &perfetto_protos_EnumValueDescriptorProto_msg
#define perfetto_protos_OneofOptions_fields &perfetto_protos_OneofOptions_msg
#define perfetto_protos_ExtensionDescriptor_fields &perfetto_protos_ExtensionDescriptor_msg
#define perfetto_protos_InodeFileMap_fields &perfetto_protos_InodeFileMap_msg
#define perfetto_protos_InodeFileMap_Entry_fields &perfetto_protos_InodeFileMap_Entry_msg
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_fields &perfetto_protos_AndroidFsDatareadEndFtraceEvent_msg
#define perfetto_protos_AndroidFsDatareadStartFtraceEvent_fields &perfetto_protos_AndroidFsDatareadStartFtraceEvent_msg
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_fields &perfetto_protos_AndroidFsDatawriteEndFtraceEvent_msg
#define perfetto_protos_AndroidFsDatawriteStartFtraceEvent_fields &perfetto_protos_AndroidFsDatawriteStartFtraceEvent_msg
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_fields &perfetto_protos_AndroidFsFsyncEndFtraceEvent_msg
#define perfetto_protos_AndroidFsFsyncStartFtraceEvent_fields &perfetto_protos_AndroidFsFsyncStartFtraceEvent_msg
#define perfetto_protos_BclIrqTriggerFtraceEvent_fields &perfetto_protos_BclIrqTriggerFtraceEvent_msg
#define perfetto_protos_BinderTransactionFtraceEvent_fields &perfetto_protos_BinderTransactionFtraceEvent_msg
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_fields &perfetto_protos_BinderTransactionReceivedFtraceEvent_msg
#define perfetto_protos_BinderSetPriorityFtraceEvent_fields &perfetto_protos_BinderSetPriorityFtraceEvent_msg
#define perfetto_protos_BinderLockFtraceEvent_fields &perfetto_protos_BinderLockFtraceEvent_msg
#define perfetto_protos_BinderLockedFtraceEvent_fields &perfetto_protos_BinderLockedFtraceEvent_msg
#define perfetto_protos_BinderUnlockFtraceEvent_fields &perfetto_protos_BinderUnlockFtraceEvent_msg
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_fields &perfetto_protos_BinderTransactionAllocBufFtraceEvent_msg
#define perfetto_protos_BinderCommandFtraceEvent_fields &perfetto_protos_BinderCommandFtraceEvent_msg
#define perfetto_protos_BinderReturnFtraceEvent_fields &perfetto_protos_BinderReturnFtraceEvent_msg
#define perfetto_protos_BlockRqIssueFtraceEvent_fields &perfetto_protos_BlockRqIssueFtraceEvent_msg
#define perfetto_protos_BlockBioBackmergeFtraceEvent_fields &perfetto_protos_BlockBioBackmergeFtraceEvent_msg
#define perfetto_protos_BlockBioBounceFtraceEvent_fields &perfetto_protos_BlockBioBounceFtraceEvent_msg
#define perfetto_protos_BlockBioCompleteFtraceEvent_fields &perfetto_protos_BlockBioCompleteFtraceEvent_msg
#define perfetto_protos_BlockBioFrontmergeFtraceEvent_fields &perfetto_protos_BlockBioFrontmergeFtraceEvent_msg
#define perfetto_protos_BlockBioQueueFtraceEvent_fields &perfetto_protos_BlockBioQueueFtraceEvent_msg
#define perfetto_protos_BlockBioRemapFtraceEvent_fields &perfetto_protos_BlockBioRemapFtraceEvent_msg
#define perfetto_protos_BlockDirtyBufferFtraceEvent_fields &perfetto_protos_BlockDirtyBufferFtraceEvent_msg
#define perfetto_protos_BlockGetrqFtraceEvent_fields &perfetto_protos_BlockGetrqFtraceEvent_msg
#define perfetto_protos_BlockPlugFtraceEvent_fields &perfetto_protos_BlockPlugFtraceEvent_msg
#define perfetto_protos_BlockRqAbortFtraceEvent_fields &perfetto_protos_BlockRqAbortFtraceEvent_msg
#define perfetto_protos_BlockRqCompleteFtraceEvent_fields &perfetto_protos_BlockRqCompleteFtraceEvent_msg
#define perfetto_protos_BlockRqInsertFtraceEvent_fields &perfetto_protos_BlockRqInsertFtraceEvent_msg
#define perfetto_protos_BlockRqRemapFtraceEvent_fields &perfetto_protos_BlockRqRemapFtraceEvent_msg
#define perfetto_protos_BlockRqRequeueFtraceEvent_fields &perfetto_protos_BlockRqRequeueFtraceEvent_msg
#define perfetto_protos_BlockSleeprqFtraceEvent_fields &perfetto_protos_BlockSleeprqFtraceEvent_msg
#define perfetto_protos_BlockSplitFtraceEvent_fields &perfetto_protos_BlockSplitFtraceEvent_msg
#define perfetto_protos_BlockTouchBufferFtraceEvent_fields &perfetto_protos_BlockTouchBufferFtraceEvent_msg
#define perfetto_protos_BlockUnplugFtraceEvent_fields &perfetto_protos_BlockUnplugFtraceEvent_msg
#define perfetto_protos_BlockIoStartFtraceEvent_fields &perfetto_protos_BlockIoStartFtraceEvent_msg
#define perfetto_protos_BlockIoDoneFtraceEvent_fields &perfetto_protos_BlockIoDoneFtraceEvent_msg
#define perfetto_protos_CgroupAttachTaskFtraceEvent_fields &perfetto_protos_CgroupAttachTaskFtraceEvent_msg
#define perfetto_protos_CgroupMkdirFtraceEvent_fields &perfetto_protos_CgroupMkdirFtraceEvent_msg
#define perfetto_protos_CgroupRemountFtraceEvent_fields &perfetto_protos_CgroupRemountFtraceEvent_msg
#define perfetto_protos_CgroupRmdirFtraceEvent_fields &perfetto_protos_CgroupRmdirFtraceEvent_msg
#define perfetto_protos_CgroupTransferTasksFtraceEvent_fields &perfetto_protos_CgroupTransferTasksFtraceEvent_msg
#define perfetto_protos_CgroupDestroyRootFtraceEvent_fields &perfetto_protos_CgroupDestroyRootFtraceEvent_msg
#define perfetto_protos_CgroupReleaseFtraceEvent_fields &perfetto_protos_CgroupReleaseFtraceEvent_msg
#define perfetto_protos_CgroupRenameFtraceEvent_fields &perfetto_protos_CgroupRenameFtraceEvent_msg
#define perfetto_protos_CgroupSetupRootFtraceEvent_fields &perfetto_protos_CgroupSetupRootFtraceEvent_msg
#define perfetto_protos_ClkEnableFtraceEvent_fields &perfetto_protos_ClkEnableFtraceEvent_msg
#define perfetto_protos_ClkDisableFtraceEvent_fields &perfetto_protos_ClkDisableFtraceEvent_msg
#define perfetto_protos_ClkSetRateFtraceEvent_fields &perfetto_protos_ClkSetRateFtraceEvent_msg
#define perfetto_protos_CmaAllocStartFtraceEvent_fields &perfetto_protos_CmaAllocStartFtraceEvent_msg
#define perfetto_protos_CmaAllocInfoFtraceEvent_fields &perfetto_protos_CmaAllocInfoFtraceEvent_msg
#define perfetto_protos_MmCompactionBeginFtraceEvent_fields &perfetto_protos_MmCompactionBeginFtraceEvent_msg
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_fields &perfetto_protos_MmCompactionDeferCompactionFtraceEvent_msg
#define perfetto_protos_MmCompactionDeferredFtraceEvent_fields &perfetto_protos_MmCompactionDeferredFtraceEvent_msg
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_fields &perfetto_protos_MmCompactionDeferResetFtraceEvent_msg
#define perfetto_protos_MmCompactionEndFtraceEvent_fields &perfetto_protos_MmCompactionEndFtraceEvent_msg
#define perfetto_protos_MmCompactionFinishedFtraceEvent_fields &perfetto_protos_MmCompactionFinishedFtraceEvent_msg
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_fields &perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_msg
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_fields &perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_msg
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_fields &perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_msg
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_fields &perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_msg
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_fields &perfetto_protos_MmCompactionMigratepagesFtraceEvent_msg
#define perfetto_protos_MmCompactionSuitableFtraceEvent_fields &perfetto_protos_MmCompactionSuitableFtraceEvent_msg
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_fields &perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_msg
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_fields &perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_msg
#define perfetto_protos_ParamSetValueCpmFtraceEvent_fields &perfetto_protos_ParamSetValueCpmFtraceEvent_msg
#define perfetto_protos_CpuhpExitFtraceEvent_fields &perfetto_protos_CpuhpExitFtraceEvent_msg
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_fields &perfetto_protos_CpuhpMultiEnterFtraceEvent_msg
#define perfetto_protos_CpuhpEnterFtraceEvent_fields &perfetto_protos_CpuhpEnterFtraceEvent_msg
#define perfetto_protos_CpuhpLatencyFtraceEvent_fields &perfetto_protos_CpuhpLatencyFtraceEvent_msg
#define perfetto_protos_CpuhpPauseFtraceEvent_fields &perfetto_protos_CpuhpPauseFtraceEvent_msg
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_fields &perfetto_protos_CrosEcSensorhubDataFtraceEvent_msg
#define perfetto_protos_DcvshFreqFtraceEvent_fields &perfetto_protos_DcvshFreqFtraceEvent_msg
#define perfetto_protos_DevfreqFrequencyFtraceEvent_fields &perfetto_protos_DevfreqFrequencyFtraceEvent_msg
#define perfetto_protos_DmaFenceInitFtraceEvent_fields &perfetto_protos_DmaFenceInitFtraceEvent_msg
#define perfetto_protos_DmaFenceEmitFtraceEvent_fields &perfetto_protos_DmaFenceEmitFtraceEvent_msg
#define perfetto_protos_DmaFenceSignaledFtraceEvent_fields &perfetto_protos_DmaFenceSignaledFtraceEvent_msg
#define perfetto_protos_DmaFenceWaitStartFtraceEvent_fields &perfetto_protos_DmaFenceWaitStartFtraceEvent_msg
#define perfetto_protos_DmaFenceWaitEndFtraceEvent_fields &perfetto_protos_DmaFenceWaitEndFtraceEvent_msg
#define perfetto_protos_DmaHeapStatFtraceEvent_fields &perfetto_protos_DmaHeapStatFtraceEvent_msg
#define perfetto_protos_DpuTracingMarkWriteFtraceEvent_fields &perfetto_protos_DpuTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_fields &perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_msg
#define perfetto_protos_DpuDsiRxFtraceEvent_fields &perfetto_protos_DpuDsiRxFtraceEvent_msg
#define perfetto_protos_DpuDsiTxFtraceEvent_fields &perfetto_protos_DpuDsiTxFtraceEvent_msg
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_fields &perfetto_protos_DpuDispDpuUnderrunFtraceEvent_msg
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_fields &perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_msg
#define perfetto_protos_DrmVblankEventFtraceEvent_fields &perfetto_protos_DrmVblankEventFtraceEvent_msg
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_fields &perfetto_protos_DrmVblankEventDeliveredFtraceEvent_msg
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_fields &perfetto_protos_Ext4DaWriteBeginFtraceEvent_msg
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_fields &perfetto_protos_Ext4DaWriteEndFtraceEvent_msg
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_fields &perfetto_protos_Ext4SyncFileEnterFtraceEvent_msg
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_fields &perfetto_protos_Ext4SyncFileExitFtraceEvent_msg
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_fields &perfetto_protos_Ext4AllocDaBlocksFtraceEvent_msg
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_fields &perfetto_protos_Ext4AllocateBlocksFtraceEvent_msg
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_fields &perfetto_protos_Ext4AllocateInodeFtraceEvent_msg
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_fields &perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_msg
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_fields &perfetto_protos_Ext4CollapseRangeFtraceEvent_msg
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_fields &perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_msg
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_fields &perfetto_protos_Ext4DaReserveSpaceFtraceEvent_msg
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_fields &perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_msg
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_fields &perfetto_protos_Ext4DaWritePagesFtraceEvent_msg
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_fields &perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_msg
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_fields &perfetto_protos_Ext4DirectIOEnterFtraceEvent_msg
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_fields &perfetto_protos_Ext4DirectIOExitFtraceEvent_msg
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_fields &perfetto_protos_Ext4DiscardBlocksFtraceEvent_msg
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_fields &perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_msg
#define perfetto_protos_Ext4DropInodeFtraceEvent_fields &perfetto_protos_Ext4DropInodeFtraceEvent_msg
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_fields &perfetto_protos_Ext4EsCacheExtentFtraceEvent_msg
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_fields &perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_msg
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_fields &perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_msg
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_fields &perfetto_protos_Ext4EsInsertExtentFtraceEvent_msg
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_fields &perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_msg
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_fields &perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_msg
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_fields &perfetto_protos_Ext4EsRemoveExtentFtraceEvent_msg
#define perfetto_protos_Ext4EsShrinkFtraceEvent_fields &perfetto_protos_Ext4EsShrinkFtraceEvent_msg
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_fields &perfetto_protos_Ext4EsShrinkCountFtraceEvent_msg
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_fields &perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_msg
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_fields &perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_msg
#define perfetto_protos_Ext4EvictInodeFtraceEvent_fields &perfetto_protos_Ext4EvictInodeFtraceEvent_msg
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_fields &perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_msg
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_fields &perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_msg
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_fields &perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_msg
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_fields &perfetto_protos_Ext4ExtInCacheFtraceEvent_msg
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_fields &perfetto_protos_Ext4ExtLoadExtentFtraceEvent_msg
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_fields &perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_msg
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_fields &perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_msg
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_fields &perfetto_protos_Ext4ExtPutInCacheFtraceEvent_msg
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_fields &perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_msg
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_fields &perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_msg
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_fields &perfetto_protos_Ext4ExtRmIdxFtraceEvent_msg
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_fields &perfetto_protos_Ext4ExtRmLeafFtraceEvent_msg
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_fields &perfetto_protos_Ext4ExtShowExtentFtraceEvent_msg
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_fields &perfetto_protos_Ext4FallocateEnterFtraceEvent_msg
#define perfetto_protos_Ext4FallocateExitFtraceEvent_fields &perfetto_protos_Ext4FallocateExitFtraceEvent_msg
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_fields &perfetto_protos_Ext4FindDelallocRangeFtraceEvent_msg
#define perfetto_protos_Ext4ForgetFtraceEvent_fields &perfetto_protos_Ext4ForgetFtraceEvent_msg
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_fields &perfetto_protos_Ext4FreeBlocksFtraceEvent_msg
#define perfetto_protos_Ext4FreeInodeFtraceEvent_fields &perfetto_protos_Ext4FreeInodeFtraceEvent_msg
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_fields &perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_msg
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_fields &perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_msg
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_fields &perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_msg
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_fields &perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_msg
#define perfetto_protos_Ext4InsertRangeFtraceEvent_fields &perfetto_protos_Ext4InsertRangeFtraceEvent_msg
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_fields &perfetto_protos_Ext4InvalidatepageFtraceEvent_msg
#define perfetto_protos_Ext4JournalStartFtraceEvent_fields &perfetto_protos_Ext4JournalStartFtraceEvent_msg
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_fields &perfetto_protos_Ext4JournalStartReservedFtraceEvent_msg
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_fields &perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_msg
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_fields &perfetto_protos_Ext4JournalledWriteEndFtraceEvent_msg
#define perfetto_protos_Ext4LoadInodeFtraceEvent_fields &perfetto_protos_Ext4LoadInodeFtraceEvent_msg
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_fields &perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_msg
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_fields &perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_msg
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_fields &perfetto_protos_Ext4MbBitmapLoadFtraceEvent_msg
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_fields &perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_msg
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_fields &perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_msg
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_fields &perfetto_protos_Ext4MbNewGroupPaFtraceEvent_msg
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_fields &perfetto_protos_Ext4MbNewInodePaFtraceEvent_msg
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_fields &perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_msg
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_fields &perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_msg
#define perfetto_protos_Ext4MballocAllocFtraceEvent_fields &perfetto_protos_Ext4MballocAllocFtraceEvent_msg
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_fields &perfetto_protos_Ext4MballocDiscardFtraceEvent_msg
#define perfetto_protos_Ext4MballocFreeFtraceEvent_fields &perfetto_protos_Ext4MballocFreeFtraceEvent_msg
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_fields &perfetto_protos_Ext4MballocPreallocFtraceEvent_msg
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_fields &perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_msg
#define perfetto_protos_Ext4PunchHoleFtraceEvent_fields &perfetto_protos_Ext4PunchHoleFtraceEvent_msg
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_fields &perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_msg
#define perfetto_protos_Ext4ReadpageFtraceEvent_fields &perfetto_protos_Ext4ReadpageFtraceEvent_msg
#define perfetto_protos_Ext4ReleasepageFtraceEvent_fields &perfetto_protos_Ext4ReleasepageFtraceEvent_msg
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_fields &perfetto_protos_Ext4RemoveBlocksFtraceEvent_msg
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_fields &perfetto_protos_Ext4RequestBlocksFtraceEvent_msg
#define perfetto_protos_Ext4RequestInodeFtraceEvent_fields &perfetto_protos_Ext4RequestInodeFtraceEvent_msg
#define perfetto_protos_Ext4SyncFsFtraceEvent_fields &perfetto_protos_Ext4SyncFsFtraceEvent_msg
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_fields &perfetto_protos_Ext4TrimAllFreeFtraceEvent_msg
#define perfetto_protos_Ext4TrimExtentFtraceEvent_fields &perfetto_protos_Ext4TrimExtentFtraceEvent_msg
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_fields &perfetto_protos_Ext4TruncateEnterFtraceEvent_msg
#define perfetto_protos_Ext4TruncateExitFtraceEvent_fields &perfetto_protos_Ext4TruncateExitFtraceEvent_msg
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_fields &perfetto_protos_Ext4UnlinkEnterFtraceEvent_msg
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_fields &perfetto_protos_Ext4UnlinkExitFtraceEvent_msg
#define perfetto_protos_Ext4WriteBeginFtraceEvent_fields &perfetto_protos_Ext4WriteBeginFtraceEvent_msg
#define perfetto_protos_Ext4WriteEndFtraceEvent_fields &perfetto_protos_Ext4WriteEndFtraceEvent_msg
#define perfetto_protos_Ext4WritepageFtraceEvent_fields &perfetto_protos_Ext4WritepageFtraceEvent_msg
#define perfetto_protos_Ext4WritepagesFtraceEvent_fields &perfetto_protos_Ext4WritepagesFtraceEvent_msg
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_fields &perfetto_protos_Ext4WritepagesResultFtraceEvent_msg
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_fields &perfetto_protos_Ext4ZeroRangeFtraceEvent_msg
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_fields &perfetto_protos_F2fsDoSubmitBioFtraceEvent_msg
#define perfetto_protos_F2fsEvictInodeFtraceEvent_fields &perfetto_protos_F2fsEvictInodeFtraceEvent_msg
#define perfetto_protos_F2fsFallocateFtraceEvent_fields &perfetto_protos_F2fsFallocateFtraceEvent_msg
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_fields &perfetto_protos_F2fsGetDataBlockFtraceEvent_msg
#define perfetto_protos_F2fsGetVictimFtraceEvent_fields &perfetto_protos_F2fsGetVictimFtraceEvent_msg
#define perfetto_protos_F2fsIgetFtraceEvent_fields &perfetto_protos_F2fsIgetFtraceEvent_msg
#define perfetto_protos_F2fsIgetExitFtraceEvent_fields &perfetto_protos_F2fsIgetExitFtraceEvent_msg
#define perfetto_protos_F2fsNewInodeFtraceEvent_fields &perfetto_protos_F2fsNewInodeFtraceEvent_msg
#define perfetto_protos_F2fsReadpageFtraceEvent_fields &perfetto_protos_F2fsReadpageFtraceEvent_msg
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_fields &perfetto_protos_F2fsReserveNewBlockFtraceEvent_msg
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_fields &perfetto_protos_F2fsSetPageDirtyFtraceEvent_msg
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_fields &perfetto_protos_F2fsSubmitWritePageFtraceEvent_msg
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_fields &perfetto_protos_F2fsSyncFileEnterFtraceEvent_msg
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_fields &perfetto_protos_F2fsSyncFileExitFtraceEvent_msg
#define perfetto_protos_F2fsSyncFsFtraceEvent_fields &perfetto_protos_F2fsSyncFsFtraceEvent_msg
#define perfetto_protos_F2fsTruncateFtraceEvent_fields &perfetto_protos_F2fsTruncateFtraceEvent_msg
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_fields &perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_msg
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_fields &perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_msg
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_fields &perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_msg
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_fields &perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_msg
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_fields &perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_msg
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_fields &perfetto_protos_F2fsTruncateNodeFtraceEvent_msg
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_fields &perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_msg
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_fields &perfetto_protos_F2fsTruncateNodesExitFtraceEvent_msg
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_fields &perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_msg
#define perfetto_protos_F2fsUnlinkEnterFtraceEvent_fields &perfetto_protos_F2fsUnlinkEnterFtraceEvent_msg
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_fields &perfetto_protos_F2fsUnlinkExitFtraceEvent_msg
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_fields &perfetto_protos_F2fsVmPageMkwriteFtraceEvent_msg
#define perfetto_protos_F2fsWriteBeginFtraceEvent_fields &perfetto_protos_F2fsWriteBeginFtraceEvent_msg
#define perfetto_protos_F2fsWriteCheckpointFtraceEvent_fields &perfetto_protos_F2fsWriteCheckpointFtraceEvent_msg
#define perfetto_protos_F2fsWriteEndFtraceEvent_fields &perfetto_protos_F2fsWriteEndFtraceEvent_msg
#define perfetto_protos_F2fsIostatFtraceEvent_fields &perfetto_protos_F2fsIostatFtraceEvent_msg
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_fields &perfetto_protos_F2fsIostatLatencyFtraceEvent_msg
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_fields &perfetto_protos_F2fsBackgroundGcFtraceEvent_msg
#define perfetto_protos_F2fsGcBeginFtraceEvent_fields &perfetto_protos_F2fsGcBeginFtraceEvent_msg
#define perfetto_protos_F2fsGcEndFtraceEvent_fields &perfetto_protos_F2fsGcEndFtraceEvent_msg
#define perfetto_protos_FastrpcDmaStatFtraceEvent_fields &perfetto_protos_FastrpcDmaStatFtraceEvent_msg
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_fields &perfetto_protos_FastrpcDmaFreeFtraceEvent_msg
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_fields &perfetto_protos_FastrpcDmaAllocFtraceEvent_msg
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_fields &perfetto_protos_FastrpcDmaUnmapFtraceEvent_msg
#define perfetto_protos_FastrpcDmaMapFtraceEvent_fields &perfetto_protos_FastrpcDmaMapFtraceEvent_msg
#define perfetto_protos_FenceInitFtraceEvent_fields &perfetto_protos_FenceInitFtraceEvent_msg
#define perfetto_protos_FenceDestroyFtraceEvent_fields &perfetto_protos_FenceDestroyFtraceEvent_msg
#define perfetto_protos_FenceEnableSignalFtraceEvent_fields &perfetto_protos_FenceEnableSignalFtraceEvent_msg
#define perfetto_protos_FenceSignaledFtraceEvent_fields &perfetto_protos_FenceSignaledFtraceEvent_msg
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_fields &perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_msg
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_fields &perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_msg
#define perfetto_protos_DoSysOpenFtraceEvent_fields &perfetto_protos_DoSysOpenFtraceEvent_msg
#define perfetto_protos_OpenExecFtraceEvent_fields &perfetto_protos_OpenExecFtraceEvent_msg
#define perfetto_protos_PrintFtraceEvent_fields &perfetto_protos_PrintFtraceEvent_msg
#define perfetto_protos_FuncgraphEntryFtraceEvent_fields &perfetto_protos_FuncgraphEntryFtraceEvent_msg
#define perfetto_protos_FuncgraphExitFtraceEvent_fields &perfetto_protos_FuncgraphExitFtraceEvent_msg
#define perfetto_protos_G2dTracingMarkWriteFtraceEvent_fields &perfetto_protos_G2dTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_GenericFtraceEvent_fields &perfetto_protos_GenericFtraceEvent_msg
#define perfetto_protos_GenericFtraceEvent_Field_fields &perfetto_protos_GenericFtraceEvent_Field_msg
#define perfetto_protos_KprobeEvent_fields &perfetto_protos_KprobeEvent_msg
#define perfetto_protos_GoogleIccEventFtraceEvent_fields &perfetto_protos_GoogleIccEventFtraceEvent_msg
#define perfetto_protos_GoogleIrmEventFtraceEvent_fields &perfetto_protos_GoogleIrmEventFtraceEvent_msg
#define perfetto_protos_GpuMemTotalFtraceEvent_fields &perfetto_protos_GpuMemTotalFtraceEvent_msg
#define perfetto_protos_DrmSchedJobFtraceEvent_fields &perfetto_protos_DrmSchedJobFtraceEvent_msg
#define perfetto_protos_DrmRunJobFtraceEvent_fields &perfetto_protos_DrmRunJobFtraceEvent_msg
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_fields &perfetto_protos_DrmSchedProcessJobFtraceEvent_msg
#define perfetto_protos_HypEnterFtraceEvent_fields &perfetto_protos_HypEnterFtraceEvent_msg
#define perfetto_protos_HypExitFtraceEvent_fields &perfetto_protos_HypExitFtraceEvent_msg
#define perfetto_protos_HostHcallFtraceEvent_fields &perfetto_protos_HostHcallFtraceEvent_msg
#define perfetto_protos_HostSmcFtraceEvent_fields &perfetto_protos_HostSmcFtraceEvent_msg
#define perfetto_protos_HostMemAbortFtraceEvent_fields &perfetto_protos_HostMemAbortFtraceEvent_msg
#define perfetto_protos_I2cReadFtraceEvent_fields &perfetto_protos_I2cReadFtraceEvent_msg
#define perfetto_protos_I2cWriteFtraceEvent_fields &perfetto_protos_I2cWriteFtraceEvent_msg
#define perfetto_protos_I2cResultFtraceEvent_fields &perfetto_protos_I2cResultFtraceEvent_msg
#define perfetto_protos_I2cReplyFtraceEvent_fields &perfetto_protos_I2cReplyFtraceEvent_msg
#define perfetto_protos_SmbusReadFtraceEvent_fields &perfetto_protos_SmbusReadFtraceEvent_msg
#define perfetto_protos_SmbusWriteFtraceEvent_fields &perfetto_protos_SmbusWriteFtraceEvent_msg
#define perfetto_protos_SmbusResultFtraceEvent_fields &perfetto_protos_SmbusResultFtraceEvent_msg
#define perfetto_protos_SmbusReplyFtraceEvent_fields &perfetto_protos_SmbusReplyFtraceEvent_msg
#define perfetto_protos_IonStatFtraceEvent_fields &perfetto_protos_IonStatFtraceEvent_msg
#define perfetto_protos_IpiEntryFtraceEvent_fields &perfetto_protos_IpiEntryFtraceEvent_msg
#define perfetto_protos_IpiExitFtraceEvent_fields &perfetto_protos_IpiExitFtraceEvent_msg
#define perfetto_protos_IpiRaiseFtraceEvent_fields &perfetto_protos_IpiRaiseFtraceEvent_msg
#define perfetto_protos_SoftirqEntryFtraceEvent_fields &perfetto_protos_SoftirqEntryFtraceEvent_msg
#define perfetto_protos_SoftirqExitFtraceEvent_fields &perfetto_protos_SoftirqExitFtraceEvent_msg
#define perfetto_protos_SoftirqRaiseFtraceEvent_fields &perfetto_protos_SoftirqRaiseFtraceEvent_msg
#define perfetto_protos_IrqHandlerEntryFtraceEvent_fields &perfetto_protos_IrqHandlerEntryFtraceEvent_msg
#define perfetto_protos_IrqHandlerExitFtraceEvent_fields &perfetto_protos_IrqHandlerExitFtraceEvent_msg
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_fields &perfetto_protos_KgslGpuFrequencyFtraceEvent_msg
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_fields &perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_msg
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_fields &perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_msg
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_fields &perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_msg
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_fields &perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_msg
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_fields &perfetto_protos_AllocPagesIommuEndFtraceEvent_msg
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_fields &perfetto_protos_AllocPagesIommuFailFtraceEvent_msg
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_fields &perfetto_protos_AllocPagesIommuStartFtraceEvent_msg
#define perfetto_protos_AllocPagesSysEndFtraceEvent_fields &perfetto_protos_AllocPagesSysEndFtraceEvent_msg
#define perfetto_protos_AllocPagesSysFailFtraceEvent_fields &perfetto_protos_AllocPagesSysFailFtraceEvent_msg
#define perfetto_protos_AllocPagesSysStartFtraceEvent_fields &perfetto_protos_AllocPagesSysStartFtraceEvent_msg
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_fields &perfetto_protos_DmaAllocContiguousRetryFtraceEvent_msg
#define perfetto_protos_IommuMapRangeFtraceEvent_fields &perfetto_protos_IommuMapRangeFtraceEvent_msg
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_fields &perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_msg
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_fields &perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_msg
#define perfetto_protos_IonAllocBufferEndFtraceEvent_fields &perfetto_protos_IonAllocBufferEndFtraceEvent_msg
#define perfetto_protos_IonAllocBufferFailFtraceEvent_fields &perfetto_protos_IonAllocBufferFailFtraceEvent_msg
#define perfetto_protos_IonAllocBufferFallbackFtraceEvent_fields &perfetto_protos_IonAllocBufferFallbackFtraceEvent_msg
#define perfetto_protos_IonAllocBufferStartFtraceEvent_fields &perfetto_protos_IonAllocBufferStartFtraceEvent_msg
#define perfetto_protos_IonCpAllocRetryFtraceEvent_fields &perfetto_protos_IonCpAllocRetryFtraceEvent_msg
#define perfetto_protos_IonCpSecureBufferEndFtraceEvent_fields &perfetto_protos_IonCpSecureBufferEndFtraceEvent_msg
#define perfetto_protos_IonCpSecureBufferStartFtraceEvent_fields &perfetto_protos_IonCpSecureBufferStartFtraceEvent_msg
#define perfetto_protos_IonPrefetchingFtraceEvent_fields &perfetto_protos_IonPrefetchingFtraceEvent_msg
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_fields &perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_msg
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_fields &perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_msg
#define perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_fields &perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_msg
#define perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_fields &perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_msg
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_fields &perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_msg
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_fields &perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_msg
#define perfetto_protos_KfreeFtraceEvent_fields &perfetto_protos_KfreeFtraceEvent_msg
#define perfetto_protos_KmallocFtraceEvent_fields &perfetto_protos_KmallocFtraceEvent_msg
#define perfetto_protos_KmallocNodeFtraceEvent_fields &perfetto_protos_KmallocNodeFtraceEvent_msg
#define perfetto_protos_KmemCacheAllocFtraceEvent_fields &perfetto_protos_KmemCacheAllocFtraceEvent_msg
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_fields &perfetto_protos_KmemCacheAllocNodeFtraceEvent_msg
#define perfetto_protos_KmemCacheFreeFtraceEvent_fields &perfetto_protos_KmemCacheFreeFtraceEvent_msg
#define perfetto_protos_MigratePagesEndFtraceEvent_fields &perfetto_protos_MigratePagesEndFtraceEvent_msg
#define perfetto_protos_MigratePagesStartFtraceEvent_fields &perfetto_protos_MigratePagesStartFtraceEvent_msg
#define perfetto_protos_MigrateRetryFtraceEvent_fields &perfetto_protos_MigrateRetryFtraceEvent_msg
#define perfetto_protos_MmPageAllocFtraceEvent_fields &perfetto_protos_MmPageAllocFtraceEvent_msg
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_fields &perfetto_protos_MmPageAllocExtfragFtraceEvent_msg
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_fields &perfetto_protos_MmPageAllocZoneLockedFtraceEvent_msg
#define perfetto_protos_MmPageFreeFtraceEvent_fields &perfetto_protos_MmPageFreeFtraceEvent_msg
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_fields &perfetto_protos_MmPageFreeBatchedFtraceEvent_msg
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_fields &perfetto_protos_MmPagePcpuDrainFtraceEvent_msg
#define perfetto_protos_RssStatFtraceEvent_fields &perfetto_protos_RssStatFtraceEvent_msg
#define perfetto_protos_IonHeapShrinkFtraceEvent_fields &perfetto_protos_IonHeapShrinkFtraceEvent_msg
#define perfetto_protos_IonHeapGrowFtraceEvent_fields &perfetto_protos_IonHeapGrowFtraceEvent_msg
#define perfetto_protos_IonBufferCreateFtraceEvent_fields &perfetto_protos_IonBufferCreateFtraceEvent_msg
#define perfetto_protos_IonBufferDestroyFtraceEvent_fields &perfetto_protos_IonBufferDestroyFtraceEvent_msg
#define perfetto_protos_KvmAccessFaultFtraceEvent_fields &perfetto_protos_KvmAccessFaultFtraceEvent_msg
#define perfetto_protos_KvmAckIrqFtraceEvent_fields &perfetto_protos_KvmAckIrqFtraceEvent_msg
#define perfetto_protos_KvmAgeHvaFtraceEvent_fields &perfetto_protos_KvmAgeHvaFtraceEvent_msg
#define perfetto_protos_KvmAgePageFtraceEvent_fields &perfetto_protos_KvmAgePageFtraceEvent_msg
#define perfetto_protos_KvmArmClearDebugFtraceEvent_fields &perfetto_protos_KvmArmClearDebugFtraceEvent_msg
#define perfetto_protos_KvmArmSetDreg32FtraceEvent_fields &perfetto_protos_KvmArmSetDreg32FtraceEvent_msg
#define perfetto_protos_KvmArmSetRegsetFtraceEvent_fields &perfetto_protos_KvmArmSetRegsetFtraceEvent_msg
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_fields &perfetto_protos_KvmArmSetupDebugFtraceEvent_msg
#define perfetto_protos_KvmEntryFtraceEvent_fields &perfetto_protos_KvmEntryFtraceEvent_msg
#define perfetto_protos_KvmExitFtraceEvent_fields &perfetto_protos_KvmExitFtraceEvent_msg
#define perfetto_protos_KvmFpuFtraceEvent_fields &perfetto_protos_KvmFpuFtraceEvent_msg
#define perfetto_protos_KvmGetTimerMapFtraceEvent_fields &perfetto_protos_KvmGetTimerMapFtraceEvent_msg
#define perfetto_protos_KvmGuestFaultFtraceEvent_fields &perfetto_protos_KvmGuestFaultFtraceEvent_msg
#define perfetto_protos_KvmHandleSysRegFtraceEvent_fields &perfetto_protos_KvmHandleSysRegFtraceEvent_msg
#define perfetto_protos_KvmHvcArm64FtraceEvent_fields &perfetto_protos_KvmHvcArm64FtraceEvent_msg
#define perfetto_protos_KvmIrqLineFtraceEvent_fields &perfetto_protos_KvmIrqLineFtraceEvent_msg
#define perfetto_protos_KvmMmioFtraceEvent_fields &perfetto_protos_KvmMmioFtraceEvent_msg
#define perfetto_protos_KvmMmioEmulateFtraceEvent_fields &perfetto_protos_KvmMmioEmulateFtraceEvent_msg
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_fields &perfetto_protos_KvmSetGuestDebugFtraceEvent_msg
#define perfetto_protos_KvmSetIrqFtraceEvent_fields &perfetto_protos_KvmSetIrqFtraceEvent_msg
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_fields &perfetto_protos_KvmSetSpteHvaFtraceEvent_msg
#define perfetto_protos_KvmSetWayFlushFtraceEvent_fields &perfetto_protos_KvmSetWayFlushFtraceEvent_msg
#define perfetto_protos_KvmSysAccessFtraceEvent_fields &perfetto_protos_KvmSysAccessFtraceEvent_msg
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_fields &perfetto_protos_KvmTestAgeHvaFtraceEvent_msg
#define perfetto_protos_KvmTimerEmulateFtraceEvent_fields &perfetto_protos_KvmTimerEmulateFtraceEvent_msg
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_fields &perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_msg
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_fields &perfetto_protos_KvmTimerRestoreStateFtraceEvent_msg
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_fields &perfetto_protos_KvmTimerSaveStateFtraceEvent_msg
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_fields &perfetto_protos_KvmTimerUpdateIrqFtraceEvent_msg
#define perfetto_protos_KvmToggleCacheFtraceEvent_fields &perfetto_protos_KvmToggleCacheFtraceEvent_msg
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_fields &perfetto_protos_KvmUnmapHvaRangeFtraceEvent_msg
#define perfetto_protos_KvmUserspaceExitFtraceEvent_fields &perfetto_protos_KvmUserspaceExitFtraceEvent_msg
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_fields &perfetto_protos_KvmVcpuWakeupFtraceEvent_msg
#define perfetto_protos_KvmWfxArm64FtraceEvent_fields &perfetto_protos_KvmWfxArm64FtraceEvent_msg
#define perfetto_protos_TrapRegFtraceEvent_fields &perfetto_protos_TrapRegFtraceEvent_msg
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_fields &perfetto_protos_VgicUpdateIrqPendingFtraceEvent_msg
#define perfetto_protos_LowmemoryKillFtraceEvent_fields &perfetto_protos_LowmemoryKillFtraceEvent_msg
#define perfetto_protos_LwisTracingMarkWriteFtraceEvent_fields &perfetto_protos_LwisTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_MaliTracingMarkWriteFtraceEvent_fields &perfetto_protos_MaliTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_fields &perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_fields &perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_fields &perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_fields &perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_fields &perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_msg
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_fields &perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_msg
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_fields &perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_msg
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_fields &perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_fields &perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_msg
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_fields &perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_msg
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_fields &perfetto_protos_MaliGpuPowerStateFtraceEvent_msg
#define perfetto_protos_MdpCmdKickoffFtraceEvent_fields &perfetto_protos_MdpCmdKickoffFtraceEvent_msg
#define perfetto_protos_MdpCommitFtraceEvent_fields &perfetto_protos_MdpCommitFtraceEvent_msg
#define perfetto_protos_MdpPerfSetOtFtraceEvent_fields &perfetto_protos_MdpPerfSetOtFtraceEvent_msg
#define perfetto_protos_MdpSsppChangeFtraceEvent_fields &perfetto_protos_MdpSsppChangeFtraceEvent_msg
#define perfetto_protos_TracingMarkWriteFtraceEvent_fields &perfetto_protos_TracingMarkWriteFtraceEvent_msg
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_fields &perfetto_protos_MdpCmdPingpongDoneFtraceEvent_msg
#define perfetto_protos_MdpCompareBwFtraceEvent_fields &perfetto_protos_MdpCompareBwFtraceEvent_msg
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_fields &perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_msg
#define perfetto_protos_MdpSsppSetFtraceEvent_fields &perfetto_protos_MdpSsppSetFtraceEvent_msg
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_fields &perfetto_protos_MdpCmdReadptrDoneFtraceEvent_msg
#define perfetto_protos_MdpMisrCrcFtraceEvent_fields &perfetto_protos_MdpMisrCrcFtraceEvent_msg
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_fields &perfetto_protos_MdpPerfSetQosLutsFtraceEvent_msg
#define perfetto_protos_MdpTraceCounterFtraceEvent_fields &perfetto_protos_MdpTraceCounterFtraceEvent_msg
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_fields &perfetto_protos_MdpCmdReleaseBwFtraceEvent_msg
#define perfetto_protos_MdpMixerUpdateFtraceEvent_fields &perfetto_protos_MdpMixerUpdateFtraceEvent_msg
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_fields &perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_msg
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_fields &perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_msg
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_fields &perfetto_protos_MdpCmdWaitPingpongFtraceEvent_msg
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_fields &perfetto_protos_MdpPerfPrefillCalcFtraceEvent_msg
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_fields &perfetto_protos_MdpPerfUpdateBusFtraceEvent_msg
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_fields &perfetto_protos_RotatorBwAoAsContextFtraceEvent_msg
#define perfetto_protos_MmEventRecordFtraceEvent_fields &perfetto_protos_MmEventRecordFtraceEvent_msg
#define perfetto_protos_NetifReceiveSkbFtraceEvent_fields &perfetto_protos_NetifReceiveSkbFtraceEvent_msg
#define perfetto_protos_NetDevXmitFtraceEvent_fields &perfetto_protos_NetDevXmitFtraceEvent_msg
#define perfetto_protos_NapiGroReceiveEntryFtraceEvent_fields &perfetto_protos_NapiGroReceiveEntryFtraceEvent_msg
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_fields &perfetto_protos_NapiGroReceiveExitFtraceEvent_msg
#define perfetto_protos_OomScoreAdjUpdateFtraceEvent_fields &perfetto_protos_OomScoreAdjUpdateFtraceEvent_msg
#define perfetto_protos_MarkVictimFtraceEvent_fields &perfetto_protos_MarkVictimFtraceEvent_msg
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_fields &perfetto_protos_DsiCmdFifoStatusFtraceEvent_msg
#define perfetto_protos_DsiRxFtraceEvent_fields &perfetto_protos_DsiRxFtraceEvent_msg
#define perfetto_protos_DsiTxFtraceEvent_fields &perfetto_protos_DsiTxFtraceEvent_msg
#define perfetto_protos_PanelWriteGenericFtraceEvent_fields &perfetto_protos_PanelWriteGenericFtraceEvent_msg
#define perfetto_protos_SchedSwitchWithCtrsFtraceEvent_fields &perfetto_protos_SchedSwitchWithCtrsFtraceEvent_msg
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_fields &perfetto_protos_PixelMmKswapdWakeFtraceEvent_msg
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_fields &perfetto_protos_PixelMmKswapdDoneFtraceEvent_msg
#define perfetto_protos_CpuFrequencyFtraceEvent_fields &perfetto_protos_CpuFrequencyFtraceEvent_msg
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_fields &perfetto_protos_CpuFrequencyLimitsFtraceEvent_msg
#define perfetto_protos_CpuIdleFtraceEvent_fields &perfetto_protos_CpuIdleFtraceEvent_msg
#define perfetto_protos_ClockEnableFtraceEvent_fields &perfetto_protos_ClockEnableFtraceEvent_msg
#define perfetto_protos_ClockDisableFtraceEvent_fields &perfetto_protos_ClockDisableFtraceEvent_msg
#define perfetto_protos_ClockSetRateFtraceEvent_fields &perfetto_protos_ClockSetRateFtraceEvent_msg
#define perfetto_protos_SuspendResumeFtraceEvent_fields &perfetto_protos_SuspendResumeFtraceEvent_msg
#define perfetto_protos_GpuFrequencyFtraceEvent_fields &perfetto_protos_GpuFrequencyFtraceEvent_msg
#define perfetto_protos_WakeupSourceActivateFtraceEvent_fields &perfetto_protos_WakeupSourceActivateFtraceEvent_msg
#define perfetto_protos_WakeupSourceDeactivateFtraceEvent_fields &perfetto_protos_WakeupSourceDeactivateFtraceEvent_msg
#define perfetto_protos_GpuWorkPeriodFtraceEvent_fields &perfetto_protos_GpuWorkPeriodFtraceEvent_msg
#define perfetto_protos_DevicePmCallbackStartFtraceEvent_fields &perfetto_protos_DevicePmCallbackStartFtraceEvent_msg
#define perfetto_protos_DevicePmCallbackEndFtraceEvent_fields &perfetto_protos_DevicePmCallbackEndFtraceEvent_msg
#define perfetto_protos_ConsoleFtraceEvent_fields &perfetto_protos_ConsoleFtraceEvent_msg
#define perfetto_protos_SysEnterFtraceEvent_fields &perfetto_protos_SysEnterFtraceEvent_msg
#define perfetto_protos_SysExitFtraceEvent_fields &perfetto_protos_SysExitFtraceEvent_msg
#define perfetto_protos_RegulatorDisableFtraceEvent_fields &perfetto_protos_RegulatorDisableFtraceEvent_msg
#define perfetto_protos_RegulatorDisableCompleteFtraceEvent_fields &perfetto_protos_RegulatorDisableCompleteFtraceEvent_msg
#define perfetto_protos_RegulatorEnableFtraceEvent_fields &perfetto_protos_RegulatorEnableFtraceEvent_msg
#define perfetto_protos_RegulatorEnableCompleteFtraceEvent_fields &perfetto_protos_RegulatorEnableCompleteFtraceEvent_msg
#define perfetto_protos_RegulatorEnableDelayFtraceEvent_fields &perfetto_protos_RegulatorEnableDelayFtraceEvent_msg
#define perfetto_protos_RegulatorSetVoltageFtraceEvent_fields &perfetto_protos_RegulatorSetVoltageFtraceEvent_msg
#define perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_fields &perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_msg
#define perfetto_protos_RpmStatusFtraceEvent_fields &perfetto_protos_RpmStatusFtraceEvent_msg
#define perfetto_protos_SamsungTracingMarkWriteFtraceEvent_fields &perfetto_protos_SamsungTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_SchedSwitchFtraceEvent_fields &perfetto_protos_SchedSwitchFtraceEvent_msg
#define perfetto_protos_SchedWakeupFtraceEvent_fields &perfetto_protos_SchedWakeupFtraceEvent_msg
#define perfetto_protos_SchedBlockedReasonFtraceEvent_fields &perfetto_protos_SchedBlockedReasonFtraceEvent_msg
#define perfetto_protos_SchedCpuHotplugFtraceEvent_fields &perfetto_protos_SchedCpuHotplugFtraceEvent_msg
#define perfetto_protos_SchedWakingFtraceEvent_fields &perfetto_protos_SchedWakingFtraceEvent_msg
#define perfetto_protos_SchedWakeupNewFtraceEvent_fields &perfetto_protos_SchedWakeupNewFtraceEvent_msg
#define perfetto_protos_SchedProcessExecFtraceEvent_fields &perfetto_protos_SchedProcessExecFtraceEvent_msg
#define perfetto_protos_SchedProcessExitFtraceEvent_fields &perfetto_protos_SchedProcessExitFtraceEvent_msg
#define perfetto_protos_SchedProcessForkFtraceEvent_fields &perfetto_protos_SchedProcessForkFtraceEvent_msg
#define perfetto_protos_SchedProcessFreeFtraceEvent_fields &perfetto_protos_SchedProcessFreeFtraceEvent_msg
#define perfetto_protos_SchedProcessHangFtraceEvent_fields &perfetto_protos_SchedProcessHangFtraceEvent_msg
#define perfetto_protos_SchedProcessWaitFtraceEvent_fields &perfetto_protos_SchedProcessWaitFtraceEvent_msg
#define perfetto_protos_SchedPiSetprioFtraceEvent_fields &perfetto_protos_SchedPiSetprioFtraceEvent_msg
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_fields &perfetto_protos_SchedCpuUtilCfsFtraceEvent_msg
#define perfetto_protos_SchedMigrateTaskFtraceEvent_fields &perfetto_protos_SchedMigrateTaskFtraceEvent_msg
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_fields &perfetto_protos_SchedWakeupTaskAttrFtraceEvent_msg
#define perfetto_protos_ScmCallStartFtraceEvent_fields &perfetto_protos_ScmCallStartFtraceEvent_msg
#define perfetto_protos_ScmCallEndFtraceEvent_fields &perfetto_protos_ScmCallEndFtraceEvent_msg
#define perfetto_protos_SdeTracingMarkWriteFtraceEvent_fields &perfetto_protos_SdeTracingMarkWriteFtraceEvent_msg
#define perfetto_protos_SdeSdeEvtlogFtraceEvent_fields &perfetto_protos_SdeSdeEvtlogFtraceEvent_msg
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_fields &perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_msg
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_fields &perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_msg
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_fields &perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_msg
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_fields &perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_msg
#define perfetto_protos_SignalDeliverFtraceEvent_fields &perfetto_protos_SignalDeliverFtraceEvent_msg
#define perfetto_protos_SignalGenerateFtraceEvent_fields &perfetto_protos_SignalGenerateFtraceEvent_msg
#define perfetto_protos_KfreeSkbFtraceEvent_fields &perfetto_protos_KfreeSkbFtraceEvent_msg
#define perfetto_protos_InetSockSetStateFtraceEvent_fields &perfetto_protos_InetSockSetStateFtraceEvent_msg
#define perfetto_protos_SyncPtFtraceEvent_fields &perfetto_protos_SyncPtFtraceEvent_msg
#define perfetto_protos_SyncTimelineFtraceEvent_fields &perfetto_protos_SyncTimelineFtraceEvent_msg
#define perfetto_protos_SyncWaitFtraceEvent_fields &perfetto_protos_SyncWaitFtraceEvent_msg
#define perfetto_protos_RssStatThrottledFtraceEvent_fields &perfetto_protos_RssStatThrottledFtraceEvent_msg
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_fields &perfetto_protos_SuspendResumeMinimalFtraceEvent_msg
#define perfetto_protos_ZeroFtraceEvent_fields &perfetto_protos_ZeroFtraceEvent_msg
#define perfetto_protos_TaskNewtaskFtraceEvent_fields &perfetto_protos_TaskNewtaskFtraceEvent_msg
#define perfetto_protos_TaskRenameFtraceEvent_fields &perfetto_protos_TaskRenameFtraceEvent_msg
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_fields &perfetto_protos_TcpRetransmitSkbFtraceEvent_msg
#define perfetto_protos_ThermalTemperatureFtraceEvent_fields &perfetto_protos_ThermalTemperatureFtraceEvent_msg
#define perfetto_protos_CdevUpdateFtraceEvent_fields &perfetto_protos_CdevUpdateFtraceEvent_msg
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_fields &perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_msg
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_fields &perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_msg
#define perfetto_protos_TrustySmcFtraceEvent_fields &perfetto_protos_TrustySmcFtraceEvent_msg
#define perfetto_protos_TrustySmcDoneFtraceEvent_fields &perfetto_protos_TrustySmcDoneFtraceEvent_msg
#define perfetto_protos_TrustyStdCall32FtraceEvent_fields &perfetto_protos_TrustyStdCall32FtraceEvent_msg
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_fields &perfetto_protos_TrustyStdCall32DoneFtraceEvent_msg
#define perfetto_protos_TrustyShareMemoryFtraceEvent_fields &perfetto_protos_TrustyShareMemoryFtraceEvent_msg
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_fields &perfetto_protos_TrustyShareMemoryDoneFtraceEvent_msg
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_fields &perfetto_protos_TrustyReclaimMemoryFtraceEvent_msg
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_fields &perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_msg
#define perfetto_protos_TrustyIrqFtraceEvent_fields &perfetto_protos_TrustyIrqFtraceEvent_msg
#define perfetto_protos_TrustyIpcHandleEventFtraceEvent_fields &perfetto_protos_TrustyIpcHandleEventFtraceEvent_msg
#define perfetto_protos_TrustyIpcConnectFtraceEvent_fields &perfetto_protos_TrustyIpcConnectFtraceEvent_msg
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_fields &perfetto_protos_TrustyIpcConnectEndFtraceEvent_msg
#define perfetto_protos_TrustyIpcWriteFtraceEvent_fields &perfetto_protos_TrustyIpcWriteFtraceEvent_msg
#define perfetto_protos_TrustyIpcPollFtraceEvent_fields &perfetto_protos_TrustyIpcPollFtraceEvent_msg
#define perfetto_protos_TrustyIpcReadFtraceEvent_fields &perfetto_protos_TrustyIpcReadFtraceEvent_msg
#define perfetto_protos_TrustyIpcReadEndFtraceEvent_fields &perfetto_protos_TrustyIpcReadEndFtraceEvent_msg
#define perfetto_protos_TrustyIpcRxFtraceEvent_fields &perfetto_protos_TrustyIpcRxFtraceEvent_msg
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_fields &perfetto_protos_TrustyEnqueueNopFtraceEvent_msg
#define perfetto_protos_UfshcdCommandFtraceEvent_fields &perfetto_protos_UfshcdCommandFtraceEvent_msg
#define perfetto_protos_UfshcdClkGatingFtraceEvent_fields &perfetto_protos_UfshcdClkGatingFtraceEvent_msg
#define perfetto_protos_V4l2QbufFtraceEvent_fields &perfetto_protos_V4l2QbufFtraceEvent_msg
#define perfetto_protos_V4l2DqbufFtraceEvent_fields &perfetto_protos_V4l2DqbufFtraceEvent_msg
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_fields &perfetto_protos_Vb2V4l2BufQueueFtraceEvent_msg
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_fields &perfetto_protos_Vb2V4l2BufDoneFtraceEvent_msg
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_fields &perfetto_protos_Vb2V4l2QbufFtraceEvent_msg
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_fields &perfetto_protos_Vb2V4l2DqbufFtraceEvent_msg
#define perfetto_protos_VirtioGpuCmdQueueFtraceEvent_fields &perfetto_protos_VirtioGpuCmdQueueFtraceEvent_msg
#define perfetto_protos_VirtioGpuCmdResponseFtraceEvent_fields &perfetto_protos_VirtioGpuCmdResponseFtraceEvent_msg
#define perfetto_protos_VirtioVideoCmdFtraceEvent_fields &perfetto_protos_VirtioVideoCmdFtraceEvent_msg
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_fields &perfetto_protos_VirtioVideoCmdDoneFtraceEvent_msg
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_fields &perfetto_protos_VirtioVideoResourceQueueFtraceEvent_msg
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_fields &perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_msg
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_fields &perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_msg
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_fields &perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_msg
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_fields &perfetto_protos_MmVmscanKswapdWakeFtraceEvent_msg
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_fields &perfetto_protos_MmVmscanKswapdSleepFtraceEvent_msg
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_fields &perfetto_protos_MmShrinkSlabStartFtraceEvent_msg
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_fields &perfetto_protos_MmShrinkSlabEndFtraceEvent_msg
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_fields &perfetto_protos_WorkqueueActivateWorkFtraceEvent_msg
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_fields &perfetto_protos_WorkqueueExecuteEndFtraceEvent_msg
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_fields &perfetto_protos_WorkqueueExecuteStartFtraceEvent_msg
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_fields &perfetto_protos_WorkqueueQueueWorkFtraceEvent_msg
#define perfetto_protos_FtraceEvent_fields &perfetto_protos_FtraceEvent_msg
#define perfetto_protos_FtraceCpuStats_fields &perfetto_protos_FtraceCpuStats_msg
#define perfetto_protos_FtraceKprobeStats_fields &perfetto_protos_FtraceKprobeStats_msg
#define perfetto_protos_FtraceStats_fields &perfetto_protos_FtraceStats_msg
#define perfetto_protos_FtraceEventBundle_fields &perfetto_protos_FtraceEventBundle_msg
#define perfetto_protos_FtraceEventBundle_CompactSched_fields &perfetto_protos_FtraceEventBundle_CompactSched_msg
#define perfetto_protos_FtraceEventBundle_FtraceError_fields &perfetto_protos_FtraceEventBundle_FtraceError_msg
#define perfetto_protos_GpuCounterEvent_fields &perfetto_protos_GpuCounterEvent_msg
#define perfetto_protos_GpuCounterEvent_GpuCounter_fields &perfetto_protos_GpuCounterEvent_GpuCounter_msg
#define perfetto_protos_GpuLog_fields &perfetto_protos_GpuLog_msg
#define perfetto_protos_GpuRenderStageEvent_fields &perfetto_protos_GpuRenderStageEvent_msg
#define perfetto_protos_GpuRenderStageEvent_ExtraData_fields &perfetto_protos_GpuRenderStageEvent_ExtraData_msg
#define perfetto_protos_GpuRenderStageEvent_Specifications_fields &perfetto_protos_GpuRenderStageEvent_Specifications_msg
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_fields &perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_msg
#define perfetto_protos_GpuRenderStageEvent_Specifications_Description_fields &perfetto_protos_GpuRenderStageEvent_Specifications_Description_msg
#define perfetto_protos_InternedGraphicsContext_fields &perfetto_protos_InternedGraphicsContext_msg
#define perfetto_protos_InternedGpuRenderStageSpecification_fields &perfetto_protos_InternedGpuRenderStageSpecification_msg
#define perfetto_protos_VulkanApiEvent_fields &perfetto_protos_VulkanApiEvent_msg
#define perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_fields &perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_msg
#define perfetto_protos_VulkanApiEvent_VkQueueSubmit_fields &perfetto_protos_VulkanApiEvent_VkQueueSubmit_msg
#define perfetto_protos_VulkanMemoryEventAnnotation_fields &perfetto_protos_VulkanMemoryEventAnnotation_msg
#define perfetto_protos_VulkanMemoryEvent_fields &perfetto_protos_VulkanMemoryEvent_msg
#define perfetto_protos_InternedString_fields &perfetto_protos_InternedString_msg
#define perfetto_protos_Line_fields &perfetto_protos_Line_msg
#define perfetto_protos_AddressSymbols_fields &perfetto_protos_AddressSymbols_msg
#define perfetto_protos_ModuleSymbols_fields &perfetto_protos_ModuleSymbols_msg
#define perfetto_protos_Mapping_fields &perfetto_protos_Mapping_msg
#define perfetto_protos_Frame_fields &perfetto_protos_Frame_msg
#define perfetto_protos_Callstack_fields &perfetto_protos_Callstack_msg
#define perfetto_protos_HistogramName_fields &perfetto_protos_HistogramName_msg
#define perfetto_protos_ChromeHistogramSample_fields &perfetto_protos_ChromeHistogramSample_msg
#define perfetto_protos_DebugAnnotation_fields &perfetto_protos_DebugAnnotation_msg
#define perfetto_protos_DebugAnnotation_NestedValue_fields &perfetto_protos_DebugAnnotation_NestedValue_msg
#define perfetto_protos_DebugAnnotationName_fields &perfetto_protos_DebugAnnotationName_msg
#define perfetto_protos_DebugAnnotationValueTypeName_fields &perfetto_protos_DebugAnnotationValueTypeName_msg
#define perfetto_protos_LogMessage_fields &perfetto_protos_LogMessage_msg
#define perfetto_protos_LogMessageBody_fields &perfetto_protos_LogMessageBody_msg
#define perfetto_protos_UnsymbolizedSourceLocation_fields &perfetto_protos_UnsymbolizedSourceLocation_msg
#define perfetto_protos_SourceLocation_fields &perfetto_protos_SourceLocation_msg
#define perfetto_protos_ChromeActiveProcesses_fields &perfetto_protos_ChromeActiveProcesses_msg
#define perfetto_protos_ChromeApplicationStateInfo_fields &perfetto_protos_ChromeApplicationStateInfo_msg
#define perfetto_protos_ChromeCompositorSchedulerState_fields &perfetto_protos_ChromeCompositorSchedulerState_msg
#define perfetto_protos_ChromeCompositorStateMachine_fields &perfetto_protos_ChromeCompositorStateMachine_msg
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_fields &perfetto_protos_ChromeCompositorStateMachine_MajorState_msg
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_fields &perfetto_protos_ChromeCompositorStateMachine_MinorState_msg
#define perfetto_protos_BeginFrameArgs_fields &perfetto_protos_BeginFrameArgs_msg
#define perfetto_protos_BeginImplFrameArgs_fields &perfetto_protos_BeginImplFrameArgs_msg
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_fields &perfetto_protos_BeginImplFrameArgs_TimestampsInUs_msg
#define perfetto_protos_BeginFrameObserverState_fields &perfetto_protos_BeginFrameObserverState_msg
#define perfetto_protos_BeginFrameSourceState_fields &perfetto_protos_BeginFrameSourceState_msg
#define perfetto_protos_CompositorTimingHistory_fields &perfetto_protos_CompositorTimingHistory_msg
#define perfetto_protos_ChromeContentSettingsEventInfo_fields &perfetto_protos_ChromeContentSettingsEventInfo_msg
#define perfetto_protos_ChromeFrameReporter_fields &perfetto_protos_ChromeFrameReporter_msg
#define perfetto_protos_ChromeKeyedService_fields &perfetto_protos_ChromeKeyedService_msg
#define perfetto_protos_ChromeLatencyInfo_fields &perfetto_protos_ChromeLatencyInfo_msg
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_fields &perfetto_protos_ChromeLatencyInfo_ComponentInfo_msg
#define perfetto_protos_ChromeLegacyIpc_fields &perfetto_protos_ChromeLegacyIpc_msg
#define perfetto_protos_ChromeMessagePump_fields &perfetto_protos_ChromeMessagePump_msg
#define perfetto_protos_ChromeMojoEventInfo_fields &perfetto_protos_ChromeMojoEventInfo_msg
#define perfetto_protos_ChromeRendererSchedulerState_fields &perfetto_protos_ChromeRendererSchedulerState_msg
#define perfetto_protos_ChromeUserEvent_fields &perfetto_protos_ChromeUserEvent_msg
#define perfetto_protos_ChromeWindowHandleEventInfo_fields &perfetto_protos_ChromeWindowHandleEventInfo_msg
#define perfetto_protos_Screenshot_fields &perfetto_protos_Screenshot_msg
#define perfetto_protos_TaskExecution_fields &perfetto_protos_TaskExecution_msg
#define perfetto_protos_TrackEvent_fields &perfetto_protos_TrackEvent_msg
#define perfetto_protos_TrackEvent_LegacyEvent_fields &perfetto_protos_TrackEvent_LegacyEvent_msg
#define perfetto_protos_TrackEventDefaults_fields &perfetto_protos_TrackEventDefaults_msg
#define perfetto_protos_EventCategory_fields &perfetto_protos_EventCategory_msg
#define perfetto_protos_EventName_fields &perfetto_protos_EventName_msg
#define perfetto_protos_InternedData_fields &perfetto_protos_InternedData_msg
#define perfetto_protos_MemoryTrackerSnapshot_fields &perfetto_protos_MemoryTrackerSnapshot_msg
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_fields &perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_msg
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_fields &perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_msg
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_fields &perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_msg
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_fields &perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_msg
#define perfetto_protos_PerfettoMetatrace_fields &perfetto_protos_PerfettoMetatrace_msg
#define perfetto_protos_PerfettoMetatrace_Arg_fields &perfetto_protos_PerfettoMetatrace_Arg_msg
#define perfetto_protos_PerfettoMetatrace_InternedString_fields &perfetto_protos_PerfettoMetatrace_InternedString_msg
#define perfetto_protos_TracingServiceEvent_fields &perfetto_protos_TracingServiceEvent_msg
#define perfetto_protos_TracingServiceEvent_DataSources_fields &perfetto_protos_TracingServiceEvent_DataSources_msg
#define perfetto_protos_TracingServiceEvent_DataSources_DataSource_fields &perfetto_protos_TracingServiceEvent_DataSources_DataSource_msg
#define perfetto_protos_AndroidEnergyConsumer_fields &perfetto_protos_AndroidEnergyConsumer_msg
#define perfetto_protos_AndroidEnergyConsumerDescriptor_fields &perfetto_protos_AndroidEnergyConsumerDescriptor_msg
#define perfetto_protos_AndroidEnergyEstimationBreakdown_fields &perfetto_protos_AndroidEnergyEstimationBreakdown_msg
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_fields &perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_msg
#define perfetto_protos_EntityStateResidency_fields &perfetto_protos_EntityStateResidency_msg
#define perfetto_protos_EntityStateResidency_PowerEntityState_fields &perfetto_protos_EntityStateResidency_PowerEntityState_msg
#define perfetto_protos_EntityStateResidency_StateResidency_fields &perfetto_protos_EntityStateResidency_StateResidency_msg
#define perfetto_protos_BatteryCounters_fields &perfetto_protos_BatteryCounters_msg
#define perfetto_protos_PowerRails_fields &perfetto_protos_PowerRails_msg
#define perfetto_protos_PowerRails_RailDescriptor_fields &perfetto_protos_PowerRails_RailDescriptor_msg
#define perfetto_protos_PowerRails_EnergyData_fields &perfetto_protos_PowerRails_EnergyData_msg
#define perfetto_protos_ObfuscatedMember_fields &perfetto_protos_ObfuscatedMember_msg
#define perfetto_protos_ObfuscatedClass_fields &perfetto_protos_ObfuscatedClass_msg
#define perfetto_protos_DeobfuscationMapping_fields &perfetto_protos_DeobfuscationMapping_msg
#define perfetto_protos_HeapGraphRoot_fields &perfetto_protos_HeapGraphRoot_msg
#define perfetto_protos_HeapGraphType_fields &perfetto_protos_HeapGraphType_msg
#define perfetto_protos_HeapGraphObject_fields &perfetto_protos_HeapGraphObject_msg
#define perfetto_protos_HeapGraph_fields &perfetto_protos_HeapGraph_msg
#define perfetto_protos_ProfilePacket_fields &perfetto_protos_ProfilePacket_msg
#define perfetto_protos_ProfilePacket_HeapSample_fields &perfetto_protos_ProfilePacket_HeapSample_msg
#define perfetto_protos_ProfilePacket_Histogram_fields &perfetto_protos_ProfilePacket_Histogram_msg
#define perfetto_protos_ProfilePacket_Histogram_Bucket_fields &perfetto_protos_ProfilePacket_Histogram_Bucket_msg
#define perfetto_protos_ProfilePacket_ProcessStats_fields &perfetto_protos_ProfilePacket_ProcessStats_msg
#define perfetto_protos_ProfilePacket_ProcessHeapSamples_fields &perfetto_protos_ProfilePacket_ProcessHeapSamples_msg
#define perfetto_protos_StreamingAllocation_fields &perfetto_protos_StreamingAllocation_msg
#define perfetto_protos_StreamingFree_fields &perfetto_protos_StreamingFree_msg
#define perfetto_protos_StreamingProfilePacket_fields &perfetto_protos_StreamingProfilePacket_msg
#define perfetto_protos_Profiling_fields &perfetto_protos_Profiling_msg
#define perfetto_protos_PerfSample_fields &perfetto_protos_PerfSample_msg
#define perfetto_protos_PerfSample_ProducerEvent_fields &perfetto_protos_PerfSample_ProducerEvent_msg
#define perfetto_protos_PerfSampleDefaults_fields &perfetto_protos_PerfSampleDefaults_msg
#define perfetto_protos_SmapsEntry_fields &perfetto_protos_SmapsEntry_msg
#define perfetto_protos_SmapsPacket_fields &perfetto_protos_SmapsPacket_msg
#define perfetto_protos_ProcessStats_fields &perfetto_protos_ProcessStats_msg
#define perfetto_protos_ProcessStats_Thread_fields &perfetto_protos_ProcessStats_Thread_msg
#define perfetto_protos_ProcessStats_FDInfo_fields &perfetto_protos_ProcessStats_FDInfo_msg
#define perfetto_protos_ProcessStats_Process_fields &perfetto_protos_ProcessStats_Process_msg
#define perfetto_protos_ProcessTree_fields &perfetto_protos_ProcessTree_msg
#define perfetto_protos_ProcessTree_Thread_fields &perfetto_protos_ProcessTree_Thread_msg
#define perfetto_protos_ProcessTree_Process_fields &perfetto_protos_ProcessTree_Process_msg
#define perfetto_protos_RemoteClockSync_fields &perfetto_protos_RemoteClockSync_msg
#define perfetto_protos_RemoteClockSync_SyncedClocks_fields &perfetto_protos_RemoteClockSync_SyncedClocks_msg
#define perfetto_protos_Atom_fields &perfetto_protos_Atom_msg
#define perfetto_protos_StatsdAtom_fields &perfetto_protos_StatsdAtom_msg
#define perfetto_protos_SysStats_fields &perfetto_protos_SysStats_msg
#define perfetto_protos_SysStats_MeminfoValue_fields &perfetto_protos_SysStats_MeminfoValue_msg
#define perfetto_protos_SysStats_VmstatValue_fields &perfetto_protos_SysStats_VmstatValue_msg
#define perfetto_protos_SysStats_CpuTimes_fields &perfetto_protos_SysStats_CpuTimes_msg
#define perfetto_protos_SysStats_InterruptCount_fields &perfetto_protos_SysStats_InterruptCount_msg
#define perfetto_protos_SysStats_DevfreqValue_fields &perfetto_protos_SysStats_DevfreqValue_msg
#define perfetto_protos_SysStats_BuddyInfo_fields &perfetto_protos_SysStats_BuddyInfo_msg
#define perfetto_protos_SysStats_DiskStat_fields &perfetto_protos_SysStats_DiskStat_msg
#define perfetto_protos_SysStats_PsiSample_fields &perfetto_protos_SysStats_PsiSample_msg
#define perfetto_protos_SysStats_ThermalZone_fields &perfetto_protos_SysStats_ThermalZone_msg
#define perfetto_protos_SysStats_CpuIdleStateEntry_fields &perfetto_protos_SysStats_CpuIdleStateEntry_msg
#define perfetto_protos_SysStats_CpuIdleState_fields &perfetto_protos_SysStats_CpuIdleState_msg
#define perfetto_protos_Utsname_fields &perfetto_protos_Utsname_msg
#define perfetto_protos_SystemInfo_fields &perfetto_protos_SystemInfo_msg
#define perfetto_protos_CpuInfo_fields &perfetto_protos_CpuInfo_msg
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_fields &perfetto_protos_CpuInfo_ArmCpuIdentifier_msg
#define perfetto_protos_CpuInfo_Cpu_fields &perfetto_protos_CpuInfo_Cpu_msg
#define perfetto_protos_TestEvent_fields &perfetto_protos_TestEvent_msg
#define perfetto_protos_TestEvent_TestPayload_fields &perfetto_protos_TestEvent_TestPayload_msg
#define perfetto_protos_TracePacketDefaults_fields &perfetto_protos_TracePacketDefaults_msg
#define perfetto_protos_TraceUuid_fields &perfetto_protos_TraceUuid_msg
#define perfetto_protos_ProcessDescriptor_fields &perfetto_protos_ProcessDescriptor_msg
#define perfetto_protos_TrackEventRangeOfInterest_fields &perfetto_protos_TrackEventRangeOfInterest_msg
#define perfetto_protos_ThreadDescriptor_fields &perfetto_protos_ThreadDescriptor_msg
#define perfetto_protos_ChromeProcessDescriptor_fields &perfetto_protos_ChromeProcessDescriptor_msg
#define perfetto_protos_ChromeThreadDescriptor_fields &perfetto_protos_ChromeThreadDescriptor_msg
#define perfetto_protos_CounterDescriptor_fields &perfetto_protos_CounterDescriptor_msg
#define perfetto_protos_TrackDescriptor_fields &perfetto_protos_TrackDescriptor_msg
#define perfetto_protos_TranslationTable_fields &perfetto_protos_TranslationTable_msg
#define perfetto_protos_ChromeHistorgramTranslationTable_fields &perfetto_protos_ChromeHistorgramTranslationTable_msg
#define perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_fields &perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_msg
#define perfetto_protos_ChromeUserEventTranslationTable_fields &perfetto_protos_ChromeUserEventTranslationTable_msg
#define perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_fields &perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_msg
#define perfetto_protos_ChromePerformanceMarkTranslationTable_fields &perfetto_protos_ChromePerformanceMarkTranslationTable_msg
#define perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_fields &perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_msg
#define perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_fields &perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_msg
#define perfetto_protos_SliceNameTranslationTable_fields &perfetto_protos_SliceNameTranslationTable_msg
#define perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_fields &perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_msg
#define perfetto_protos_ProcessTrackNameTranslationTable_fields &perfetto_protos_ProcessTrackNameTranslationTable_msg
#define perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_fields &perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_msg
#define perfetto_protos_ChromeStudyTranslationTable_fields &perfetto_protos_ChromeStudyTranslationTable_msg
#define perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_fields &perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_msg
#define perfetto_protos_Trigger_fields &perfetto_protos_Trigger_msg
#define perfetto_protos_UiState_fields &perfetto_protos_UiState_msg
#define perfetto_protos_UiState_HighlightProcess_fields &perfetto_protos_UiState_HighlightProcess_msg
#define perfetto_protos_TracePacket_fields &perfetto_protos_TracePacket_msg
#define perfetto_protos_Trace_fields &perfetto_protos_Trace_msg

/* Maximum encoded size of messages (where known) */
/* perfetto_protos_FtraceDescriptor_size depends on runtime parameters */
/* perfetto_protos_FtraceDescriptor_AtraceCategory_size depends on runtime parameters */
/* perfetto_protos_GpuCounterDescriptor_size depends on runtime parameters */
/* perfetto_protos_GpuCounterDescriptor_GpuCounterSpec_size depends on runtime parameters */
/* perfetto_protos_GpuCounterDescriptor_GpuCounterBlock_size depends on runtime parameters */
/* perfetto_protos_TrackEventCategory_size depends on runtime parameters */
/* perfetto_protos_TrackEventDescriptor_size depends on runtime parameters */
/* perfetto_protos_DataSourceDescriptor_size depends on runtime parameters */
/* perfetto_protos_TracingServiceState_size depends on runtime parameters */
/* perfetto_protos_TracingServiceState_Producer_size depends on runtime parameters */
/* perfetto_protos_TracingServiceState_DataSource_size depends on runtime parameters */
/* perfetto_protos_TracingServiceState_TracingSession_size depends on runtime parameters */
/* perfetto_protos_AndroidGameInterventionListConfig_size depends on runtime parameters */
/* perfetto_protos_AndroidInputEventConfig_size depends on runtime parameters */
/* perfetto_protos_AndroidInputEventConfig_TraceRule_size depends on runtime parameters */
/* perfetto_protos_AndroidLogConfig_size depends on runtime parameters */
/* perfetto_protos_AndroidSdkSyspropGuardConfig_size depends on runtime parameters */
/* perfetto_protos_AndroidSystemPropertyConfig_size depends on runtime parameters */
/* perfetto_protos_PackagesListConfig_size depends on runtime parameters */
/* perfetto_protos_PixelModemConfig_size depends on runtime parameters */
/* perfetto_protos_ProtoLogConfig_size depends on runtime parameters */
/* perfetto_protos_ProtoLogGroup_size depends on runtime parameters */
/* perfetto_protos_SurfaceFlingerLayersConfig_size depends on runtime parameters */
/* perfetto_protos_ChromeConfig_size depends on runtime parameters */
/* perfetto_protos_ChromiumHistogramSamplesConfig_size depends on runtime parameters */
/* perfetto_protos_ChromiumHistogramSamplesConfig_HistogramSample_size depends on runtime parameters */
/* perfetto_protos_EtwConfig_size depends on runtime parameters */
/* perfetto_protos_FtraceConfig_size depends on runtime parameters */
/* perfetto_protos_FtraceConfig_KprobeEvent_size depends on runtime parameters */
/* perfetto_protos_FtraceConfig_PrintFilter_size depends on runtime parameters */
/* perfetto_protos_FtraceConfig_PrintFilter_Rule_size depends on runtime parameters */
/* perfetto_protos_FtraceConfig_PrintFilter_Rule_AtraceMessage_size depends on runtime parameters */
/* perfetto_protos_GpuCounterConfig_size depends on runtime parameters */
/* perfetto_protos_GpuRenderStagesConfig_size depends on runtime parameters */
/* perfetto_protos_InodeFileConfig_size depends on runtime parameters */
/* perfetto_protos_InodeFileConfig_MountPointMappingEntry_size depends on runtime parameters */
/* perfetto_protos_InterceptorConfig_size depends on runtime parameters */
/* perfetto_protos_AndroidPowerConfig_size depends on runtime parameters */
/* perfetto_protos_ProcessStatsConfig_size depends on runtime parameters */
/* perfetto_protos_HeapprofdConfig_size depends on runtime parameters */
/* perfetto_protos_JavaHprofConfig_size depends on runtime parameters */
/* perfetto_protos_PerfEvents_Timebase_size depends on runtime parameters */
/* perfetto_protos_PerfEvents_Tracepoint_size depends on runtime parameters */
/* perfetto_protos_FollowerEvent_size depends on runtime parameters */
/* perfetto_protos_PerfEventConfig_size depends on runtime parameters */
/* perfetto_protos_PerfEventConfig_CallstackSampling_size depends on runtime parameters */
/* perfetto_protos_PerfEventConfig_Scope_size depends on runtime parameters */
/* perfetto_protos_StatsdTracingConfig_size depends on runtime parameters */
/* perfetto_protos_StatsdPullAtomConfig_size depends on runtime parameters */
/* perfetto_protos_SysStatsConfig_size depends on runtime parameters */
/* perfetto_protos_TestConfig_size depends on runtime parameters */
/* perfetto_protos_TestConfig_DummyFields_size depends on runtime parameters */
/* perfetto_protos_TrackEventConfig_size depends on runtime parameters */
/* perfetto_protos_DataSourceConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_DataSource_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_ProducerConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_TriggerConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_TriggerConfig_Trigger_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_IncidentReportConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_TraceFilter_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_TraceFilter_StringFilterRule_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_TraceFilter_StringFilterChain_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_AndroidReportConfig_size depends on runtime parameters */
/* perfetto_protos_TraceConfig_SessionSemaphore_size depends on runtime parameters */
/* perfetto_protos_TraceStats_size depends on runtime parameters */
/* perfetto_protos_TraceStats_WriterStats_size depends on runtime parameters */
/* perfetto_protos_TraceStats_FilterStats_size depends on runtime parameters */
/* perfetto_protos_AndroidGameInterventionList_size depends on runtime parameters */
/* perfetto_protos_AndroidGameInterventionList_GamePackageInfo_size depends on runtime parameters */
/* perfetto_protos_AndroidLogPacket_size depends on runtime parameters */
/* perfetto_protos_AndroidLogPacket_LogEvent_size depends on runtime parameters */
/* perfetto_protos_AndroidLogPacket_LogEvent_Arg_size depends on runtime parameters */
/* perfetto_protos_AndroidSystemProperty_size depends on runtime parameters */
/* perfetto_protos_AndroidSystemProperty_PropertyValue_size depends on runtime parameters */
/* perfetto_protos_AppWakelockInfo_size depends on runtime parameters */
/* perfetto_protos_AppWakelockBundle_size depends on runtime parameters */
/* perfetto_protos_AndroidCameraFrameEvent_size depends on runtime parameters */
/* perfetto_protos_AndroidCameraSessionStats_size depends on runtime parameters */
/* perfetto_protos_AndroidCameraSessionStats_CameraGraph_size depends on runtime parameters */
/* perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraNode_size depends on runtime parameters */
/* perfetto_protos_AndroidCameraSessionStats_CameraGraph_CameraEdge_size depends on runtime parameters */
/* perfetto_protos_FrameTimelineEvent_size depends on runtime parameters */
/* perfetto_protos_FrameTimelineEvent_ExpectedSurfaceFrameStart_size depends on runtime parameters */
/* perfetto_protos_FrameTimelineEvent_ActualSurfaceFrameStart_size depends on runtime parameters */
/* perfetto_protos_GraphicsFrameEvent_size depends on runtime parameters */
/* perfetto_protos_GraphicsFrameEvent_BufferEvent_size depends on runtime parameters */
/* perfetto_protos_KernelWakelockData_size depends on runtime parameters */
/* perfetto_protos_KernelWakelockData_Wakelock_size depends on runtime parameters */
/* perfetto_protos_NetworkPacketEvent_size depends on runtime parameters */
/* perfetto_protos_NetworkPacketBundle_size depends on runtime parameters */
/* perfetto_protos_NetworkPacketContext_size depends on runtime parameters */
/* perfetto_protos_PackagesList_size depends on runtime parameters */
/* perfetto_protos_PackagesList_PackageInfo_size depends on runtime parameters */
/* perfetto_protos_PixelModemEvents_size depends on runtime parameters */
/* perfetto_protos_PixelModemTokenDatabase_size depends on runtime parameters */
/* perfetto_protos_ProtoLogMessage_size depends on runtime parameters */
/* perfetto_protos_ProtoLogViewerConfig_size depends on runtime parameters */
/* perfetto_protos_ProtoLogViewerConfig_MessageData_size depends on runtime parameters */
/* perfetto_protos_ProtoLogViewerConfig_Group_size depends on runtime parameters */
/* perfetto_protos_ShellTransition_size depends on runtime parameters */
/* perfetto_protos_ShellHandlerMappings_size depends on runtime parameters */
/* perfetto_protos_ShellHandlerMapping_size depends on runtime parameters */
/* perfetto_protos_RegionProto_size depends on runtime parameters */
/* perfetto_protos_InputWindowInfoProto_size depends on runtime parameters */
/* perfetto_protos_ColorTransformProto_size depends on runtime parameters */
/* perfetto_protos_LayersTraceFileProto_size depends on runtime parameters */
/* perfetto_protos_LayersSnapshotProto_size depends on runtime parameters */
/* perfetto_protos_LayersProto_size depends on runtime parameters */
/* perfetto_protos_DisplayProto_size depends on runtime parameters */
/* perfetto_protos_LayerProto_size depends on runtime parameters */
/* perfetto_protos_LayerProto_MetadataEntry_size depends on runtime parameters */
/* perfetto_protos_TransactionTraceFile_size depends on runtime parameters */
/* perfetto_protos_TransactionTraceEntry_size depends on runtime parameters */
/* perfetto_protos_LayerCreationArgs_size depends on runtime parameters */
/* perfetto_protos_TransactionState_size depends on runtime parameters */
/* perfetto_protos_LayerState_size depends on runtime parameters */
/* perfetto_protos_LayerState_WindowInfo_size depends on runtime parameters */
/* perfetto_protos_ChromeBenchmarkMetadata_size depends on runtime parameters */
/* perfetto_protos_ChromeMetadataPacket_size depends on runtime parameters */
/* perfetto_protos_BackgroundTracingMetadata_size depends on runtime parameters */
/* perfetto_protos_ChromeTracedValue_size depends on runtime parameters */
/* perfetto_protos_ChromeStringTableEntry_size depends on runtime parameters */
/* perfetto_protos_ChromeTraceEvent_size depends on runtime parameters */
/* perfetto_protos_ChromeTraceEvent_Arg_size depends on runtime parameters */
/* perfetto_protos_ChromeMetadata_size depends on runtime parameters */
/* perfetto_protos_ChromeLegacyJsonTrace_size depends on runtime parameters */
/* perfetto_protos_ChromeEventBundle_size depends on runtime parameters */
/* perfetto_protos_ChromeTrigger_size depends on runtime parameters */
/* perfetto_protos_V8String_size depends on runtime parameters */
/* perfetto_protos_InternedV8String_size depends on runtime parameters */
/* perfetto_protos_InternedV8JsScript_size depends on runtime parameters */
/* perfetto_protos_InternedV8WasmScript_size depends on runtime parameters */
/* perfetto_protos_V8JsCode_size depends on runtime parameters */
/* perfetto_protos_V8InternalCode_size depends on runtime parameters */
/* perfetto_protos_V8WasmCode_size depends on runtime parameters */
/* perfetto_protos_V8RegExpCode_size depends on runtime parameters */
/* perfetto_protos_V8CodeMove_size depends on runtime parameters */
/* perfetto_protos_ClockSnapshot_size depends on runtime parameters */
/* perfetto_protos_EtwTraceEventBundle_size depends on runtime parameters */
/* perfetto_protos_FileDescriptorSet_size depends on runtime parameters */
/* perfetto_protos_FileDescriptorProto_size depends on runtime parameters */
/* perfetto_protos_DescriptorProto_size depends on runtime parameters */
/* perfetto_protos_UninterpretedOption_size depends on runtime parameters */
/* perfetto_protos_UninterpretedOption_NamePart_size depends on runtime parameters */
/* perfetto_protos_FieldOptions_size depends on runtime parameters */
/* perfetto_protos_FieldDescriptorProto_size depends on runtime parameters */
/* perfetto_protos_OneofDescriptorProto_size depends on runtime parameters */
/* perfetto_protos_EnumDescriptorProto_size depends on runtime parameters */
/* perfetto_protos_EnumValueDescriptorProto_size depends on runtime parameters */
/* perfetto_protos_ExtensionDescriptor_size depends on runtime parameters */
/* perfetto_protos_InodeFileMap_size depends on runtime parameters */
/* perfetto_protos_InodeFileMap_Entry_size depends on runtime parameters */
/* perfetto_protos_AndroidFsDatareadStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_AndroidFsDatawriteStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_AndroidFsFsyncStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BinderLockFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BinderLockedFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BinderUnlockFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqIssueFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioBackmergeFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioBounceFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioCompleteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioFrontmergeFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioQueueFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockBioRemapFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockGetrqFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockPlugFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqAbortFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqCompleteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqInsertFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqRemapFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockRqRequeueFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockSleeprqFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockSplitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockUnplugFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockIoStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_BlockIoDoneFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupAttachTaskFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupMkdirFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupRemountFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupRmdirFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupTransferTasksFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupDestroyRootFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupReleaseFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupRenameFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CgroupSetupRootFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClkEnableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClkDisableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClkSetRateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CmaAllocStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CmaAllocInfoFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ParamSetValueCpmFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DevfreqFrequencyFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DmaFenceInitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DmaFenceEmitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DmaFenceSignaledFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DmaFenceWaitStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DmaFenceWaitEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DpuTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_F2fsUnlinkEnterFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_F2fsWriteCheckpointFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FenceInitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FenceDestroyFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FenceEnableSignalFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FenceSignaledFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DoSysOpenFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_OpenExecFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_PrintFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_G2dTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_GenericFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_GenericFtraceEvent_Field_size depends on runtime parameters */
/* perfetto_protos_KprobeEvent_size depends on runtime parameters */
/* perfetto_protos_GoogleIccEventFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_GoogleIrmEventFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DrmSchedJobFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DrmRunJobFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IpiEntryFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IpiExitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IpiRaiseFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IrqHandlerEntryFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonAllocBufferEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonAllocBufferFailFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonAllocBufferFallbackFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonAllocBufferStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonCpSecureBufferEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonCpSecureBufferStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonSecureCmaAllocateEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonSecureCmaAllocateStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonHeapShrinkFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_IonHeapGrowFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_KvmArmSetDreg32FtraceEvent_size depends on runtime parameters */
/* perfetto_protos_KvmArmSetRegsetFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_KvmSysAccessFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrapRegFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_LowmemoryKillFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_LwisTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_MaliTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_MdpTraceCounterFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_NetifReceiveSkbFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_NetDevXmitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_NapiGroReceiveEntryFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_OomScoreAdjUpdateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_PanelWriteGenericFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedSwitchWithCtrsFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClockEnableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClockDisableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ClockSetRateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SuspendResumeFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_WakeupSourceActivateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_WakeupSourceDeactivateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DevicePmCallbackStartFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_DevicePmCallbackEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ConsoleFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SysEnterFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorDisableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorDisableCompleteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorEnableFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorEnableCompleteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorEnableDelayFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorSetVoltageFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RegulatorSetVoltageCompleteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_RpmStatusFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SamsungTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedSwitchFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedWakeupFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedWakingFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedWakeupNewFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessExecFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessExitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessForkFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessFreeFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessHangFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedProcessWaitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedPiSetprioFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SchedMigrateTaskFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SdeTracingMarkWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SdeSdeEvtlogFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SignalGenerateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SyncPtFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SyncTimelineFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_SyncWaitFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ZeroFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TaskNewtaskFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TaskRenameFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_ThermalTemperatureFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_CdevUpdateFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcHandleEventFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcConnectFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcWriteFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcPollFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcReadFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcReadEndFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_TrustyIpcRxFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_UfshcdCommandFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_UfshcdClkGatingFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_VirtioGpuCmdQueueFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_VirtioGpuCmdResponseFtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FtraceEvent_size depends on runtime parameters */
/* perfetto_protos_FtraceStats_size depends on runtime parameters */
/* perfetto_protos_FtraceEventBundle_size depends on runtime parameters */
/* perfetto_protos_FtraceEventBundle_CompactSched_size depends on runtime parameters */
/* perfetto_protos_GpuCounterEvent_size depends on runtime parameters */
/* perfetto_protos_GpuLog_size depends on runtime parameters */
/* perfetto_protos_GpuRenderStageEvent_size depends on runtime parameters */
/* perfetto_protos_GpuRenderStageEvent_ExtraData_size depends on runtime parameters */
/* perfetto_protos_GpuRenderStageEvent_Specifications_size depends on runtime parameters */
/* perfetto_protos_GpuRenderStageEvent_Specifications_Description_size depends on runtime parameters */
/* perfetto_protos_InternedGpuRenderStageSpecification_size depends on runtime parameters */
/* perfetto_protos_VulkanApiEvent_size depends on runtime parameters */
/* perfetto_protos_VulkanApiEvent_VkDebugUtilsObjectName_size depends on runtime parameters */
/* perfetto_protos_VulkanApiEvent_VkQueueSubmit_size depends on runtime parameters */
/* perfetto_protos_VulkanMemoryEvent_size depends on runtime parameters */
/* perfetto_protos_InternedString_size depends on runtime parameters */
/* perfetto_protos_Line_size depends on runtime parameters */
/* perfetto_protos_AddressSymbols_size depends on runtime parameters */
/* perfetto_protos_ModuleSymbols_size depends on runtime parameters */
/* perfetto_protos_Mapping_size depends on runtime parameters */
/* perfetto_protos_Callstack_size depends on runtime parameters */
/* perfetto_protos_HistogramName_size depends on runtime parameters */
/* perfetto_protos_ChromeHistogramSample_size depends on runtime parameters */
/* perfetto_protos_DebugAnnotation_size depends on runtime parameters */
/* perfetto_protos_DebugAnnotation_NestedValue_size depends on runtime parameters */
/* perfetto_protos_DebugAnnotationName_size depends on runtime parameters */
/* perfetto_protos_DebugAnnotationValueTypeName_size depends on runtime parameters */
/* perfetto_protos_LogMessageBody_size depends on runtime parameters */
/* perfetto_protos_SourceLocation_size depends on runtime parameters */
/* perfetto_protos_ChromeActiveProcesses_size depends on runtime parameters */
/* perfetto_protos_ChromeCompositorSchedulerState_size depends on runtime parameters */
/* perfetto_protos_BeginFrameArgs_size depends on runtime parameters */
/* perfetto_protos_BeginImplFrameArgs_size depends on runtime parameters */
/* perfetto_protos_BeginFrameObserverState_size depends on runtime parameters */
/* perfetto_protos_BeginFrameSourceState_size depends on runtime parameters */
/* perfetto_protos_ChromeFrameReporter_size depends on runtime parameters */
/* perfetto_protos_ChromeKeyedService_size depends on runtime parameters */
/* perfetto_protos_ChromeLatencyInfo_size depends on runtime parameters */
/* perfetto_protos_ChromeMojoEventInfo_size depends on runtime parameters */
/* perfetto_protos_ChromeUserEvent_size depends on runtime parameters */
/* perfetto_protos_Screenshot_size depends on runtime parameters */
/* perfetto_protos_TrackEvent_size depends on runtime parameters */
/* perfetto_protos_TrackEvent_LegacyEvent_size depends on runtime parameters */
/* perfetto_protos_TrackEventDefaults_size depends on runtime parameters */
/* perfetto_protos_EventCategory_size depends on runtime parameters */
/* perfetto_protos_EventName_size depends on runtime parameters */
/* perfetto_protos_InternedData_size depends on runtime parameters */
/* perfetto_protos_MemoryTrackerSnapshot_size depends on runtime parameters */
/* perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_size depends on runtime parameters */
/* perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_size depends on runtime parameters */
/* perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_size depends on runtime parameters */
/* perfetto_protos_PerfettoMetatrace_size depends on runtime parameters */
/* perfetto_protos_PerfettoMetatrace_Arg_size depends on runtime parameters */
/* perfetto_protos_PerfettoMetatrace_InternedString_size depends on runtime parameters */
/* perfetto_protos_TracingServiceEvent_size depends on runtime parameters */
/* perfetto_protos_TracingServiceEvent_DataSources_size depends on runtime parameters */
/* perfetto_protos_TracingServiceEvent_DataSources_DataSource_size depends on runtime parameters */
/* perfetto_protos_AndroidEnergyConsumer_size depends on runtime parameters */
/* perfetto_protos_AndroidEnergyConsumerDescriptor_size depends on runtime parameters */
/* perfetto_protos_AndroidEnergyEstimationBreakdown_size depends on runtime parameters */
/* perfetto_protos_EntityStateResidency_size depends on runtime parameters */
/* perfetto_protos_EntityStateResidency_PowerEntityState_size depends on runtime parameters */
/* perfetto_protos_BatteryCounters_size depends on runtime parameters */
/* perfetto_protos_PowerRails_size depends on runtime parameters */
/* perfetto_protos_PowerRails_RailDescriptor_size depends on runtime parameters */
/* perfetto_protos_ObfuscatedMember_size depends on runtime parameters */
/* perfetto_protos_ObfuscatedClass_size depends on runtime parameters */
/* perfetto_protos_DeobfuscationMapping_size depends on runtime parameters */
/* perfetto_protos_HeapGraphRoot_size depends on runtime parameters */
/* perfetto_protos_HeapGraphType_size depends on runtime parameters */
/* perfetto_protos_HeapGraphObject_size depends on runtime parameters */
/* perfetto_protos_HeapGraph_size depends on runtime parameters */
/* perfetto_protos_ProfilePacket_size depends on runtime parameters */
/* perfetto_protos_ProfilePacket_Histogram_size depends on runtime parameters */
/* perfetto_protos_ProfilePacket_ProcessStats_size depends on runtime parameters */
/* perfetto_protos_ProfilePacket_ProcessHeapSamples_size depends on runtime parameters */
/* perfetto_protos_StreamingAllocation_size depends on runtime parameters */
/* perfetto_protos_StreamingFree_size depends on runtime parameters */
/* perfetto_protos_StreamingProfilePacket_size depends on runtime parameters */
/* perfetto_protos_PerfSample_size depends on runtime parameters */
/* perfetto_protos_PerfSampleDefaults_size depends on runtime parameters */
/* perfetto_protos_SmapsEntry_size depends on runtime parameters */
/* perfetto_protos_SmapsPacket_size depends on runtime parameters */
/* perfetto_protos_ProcessStats_size depends on runtime parameters */
/* perfetto_protos_ProcessStats_FDInfo_size depends on runtime parameters */
/* perfetto_protos_ProcessStats_Process_size depends on runtime parameters */
/* perfetto_protos_ProcessTree_size depends on runtime parameters */
/* perfetto_protos_ProcessTree_Thread_size depends on runtime parameters */
/* perfetto_protos_ProcessTree_Process_size depends on runtime parameters */
/* perfetto_protos_RemoteClockSync_size depends on runtime parameters */
/* perfetto_protos_RemoteClockSync_SyncedClocks_size depends on runtime parameters */
/* perfetto_protos_StatsdAtom_size depends on runtime parameters */
/* perfetto_protos_SysStats_size depends on runtime parameters */
/* perfetto_protos_SysStats_DevfreqValue_size depends on runtime parameters */
/* perfetto_protos_SysStats_BuddyInfo_size depends on runtime parameters */
/* perfetto_protos_SysStats_DiskStat_size depends on runtime parameters */
/* perfetto_protos_SysStats_ThermalZone_size depends on runtime parameters */
/* perfetto_protos_SysStats_CpuIdleStateEntry_size depends on runtime parameters */
/* perfetto_protos_SysStats_CpuIdleState_size depends on runtime parameters */
/* perfetto_protos_Utsname_size depends on runtime parameters */
/* perfetto_protos_SystemInfo_size depends on runtime parameters */
/* perfetto_protos_CpuInfo_size depends on runtime parameters */
/* perfetto_protos_CpuInfo_Cpu_size depends on runtime parameters */
/* perfetto_protos_TestEvent_size depends on runtime parameters */
/* perfetto_protos_TestEvent_TestPayload_size depends on runtime parameters */
/* perfetto_protos_TracePacketDefaults_size depends on runtime parameters */
/* perfetto_protos_ProcessDescriptor_size depends on runtime parameters */
/* perfetto_protos_ThreadDescriptor_size depends on runtime parameters */
/* perfetto_protos_ChromeProcessDescriptor_size depends on runtime parameters */
/* perfetto_protos_CounterDescriptor_size depends on runtime parameters */
/* perfetto_protos_TrackDescriptor_size depends on runtime parameters */
/* perfetto_protos_TranslationTable_size depends on runtime parameters */
/* perfetto_protos_ChromeHistorgramTranslationTable_size depends on runtime parameters */
/* perfetto_protos_ChromeHistorgramTranslationTable_HashToNameEntry_size depends on runtime parameters */
/* perfetto_protos_ChromeUserEventTranslationTable_size depends on runtime parameters */
/* perfetto_protos_ChromeUserEventTranslationTable_ActionHashToNameEntry_size depends on runtime parameters */
/* perfetto_protos_ChromePerformanceMarkTranslationTable_size depends on runtime parameters */
/* perfetto_protos_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_size depends on runtime parameters */
/* perfetto_protos_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_size depends on runtime parameters */
/* perfetto_protos_SliceNameTranslationTable_size depends on runtime parameters */
/* perfetto_protos_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_size depends on runtime parameters */
/* perfetto_protos_ProcessTrackNameTranslationTable_size depends on runtime parameters */
/* perfetto_protos_ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_size depends on runtime parameters */
/* perfetto_protos_ChromeStudyTranslationTable_size depends on runtime parameters */
/* perfetto_protos_ChromeStudyTranslationTable_HashToNameEntry_size depends on runtime parameters */
/* perfetto_protos_Trigger_size depends on runtime parameters */
/* perfetto_protos_UiState_size depends on runtime parameters */
/* perfetto_protos_UiState_HighlightProcess_size depends on runtime parameters */
/* perfetto_protos_TracePacket_size depends on runtime parameters */
/* perfetto_protos_Trace_size depends on runtime parameters */
#define PERFETTO_PROTOS_PERFETTO_TRACE_PB_H_MAX_SIZE perfetto_protos_F2fsIostatFtraceEvent_size
#define perfetto_protos_ActiveBufferProto_size   40
#define perfetto_protos_AllocPagesIommuEndFtraceEvent_size 12
#define perfetto_protos_AllocPagesIommuFailFtraceEvent_size 12
#define perfetto_protos_AllocPagesIommuStartFtraceEvent_size 12
#define perfetto_protos_AllocPagesSysEndFtraceEvent_size 12
#define perfetto_protos_AllocPagesSysFailFtraceEvent_size 12
#define perfetto_protos_AllocPagesSysStartFtraceEvent_size 12
#define perfetto_protos_AndroidCameraFrameEvent_CameraNodeProcessingDetails_size 44
#define perfetto_protos_AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_size 22
#define perfetto_protos_AndroidFsDatareadEndFtraceEvent_size 33
#define perfetto_protos_AndroidFsDatawriteEndFtraceEvent_size 33
#define perfetto_protos_AndroidFsFsyncEndFtraceEvent_size 33
#define perfetto_protos_AndroidGameInterventionList_GameModeInfo_size 18
#define perfetto_protos_AndroidLogPacket_Stats_size 33
#define perfetto_protos_AndroidPolledStateConfig_size 6
#define perfetto_protos_AppWakelocksConfig_size  24
#define perfetto_protos_Atom_size                0
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_HistogramRule_size 31
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_NamedRule_size 12
#define perfetto_protos_BackgroundTracingMetadata_TriggerRule_size 54
#define perfetto_protos_BarrierLayerProto_size   22
#define perfetto_protos_BclIrqTriggerFtraceEvent_size 99
#define perfetto_protos_BeginImplFrameArgs_TimestampsInUs_size 77
#define perfetto_protos_BinderCommandFtraceEvent_size 6
#define perfetto_protos_BinderReturnFtraceEvent_size 6
#define perfetto_protos_BinderSetPriorityFtraceEvent_size 40
#define perfetto_protos_BinderTransactionAllocBufFtraceEvent_size 44
#define perfetto_protos_BinderTransactionFtraceEvent_size 67
#define perfetto_protos_BinderTransactionReceivedFtraceEvent_size 11
#define perfetto_protos_BlockDirtyBufferFtraceEvent_size 33
#define perfetto_protos_BlockTouchBufferFtraceEvent_size 33
#define perfetto_protos_BluetoothTraceEvent_size 44
#define perfetto_protos_BlurRegion_size          78
#define perfetto_protos_CSwitchEtwEvent_size     48
#define perfetto_protos_ChromeApplicationStateInfo_size 2
#define perfetto_protos_ChromeCompositorStateMachine_MajorState_size 10
#define perfetto_protos_ChromeCompositorStateMachine_MinorState_size 192
#define perfetto_protos_ChromeCompositorStateMachine_size 207
#define perfetto_protos_ChromeContentSettingsEventInfo_size 6
#define perfetto_protos_ChromeLatencyInfo_ComponentInfo_size 13
#define perfetto_protos_ChromeLegacyIpc_size     8
#define perfetto_protos_ChromeMessagePump_size   13
#define perfetto_protos_ChromeMetadataPacket_FinchHash_size 12
#define perfetto_protos_ChromeRendererSchedulerState_size 6
#define perfetto_protos_ChromeThreadDescriptor_size 13
#define perfetto_protos_ChromeWindowHandleEventInfo_size 21
#define perfetto_protos_ChromiumSystemMetricsConfig_size 6
#define perfetto_protos_ClockSnapshot_Clock_size 30
#define perfetto_protos_ColorProto_size          20
#define perfetto_protos_CompositorTimingHistory_size 77
#define perfetto_protos_ConsoleConfig_size       4
#define perfetto_protos_CpuFrequencyFtraceEvent_size 12
#define perfetto_protos_CpuFrequencyLimitsFtraceEvent_size 18
#define perfetto_protos_CpuIdleFtraceEvent_size  12
#define perfetto_protos_CpuInfo_ArmCpuIdentifier_size 30
#define perfetto_protos_CpuhpEnterFtraceEvent_size 39
#define perfetto_protos_CpuhpExitFtraceEvent_size 39
#define perfetto_protos_CpuhpLatencyFtraceEvent_size 34
#define perfetto_protos_CpuhpMultiEnterFtraceEvent_size 39
#define perfetto_protos_CpuhpPauseFtraceEvent_size 24
#define perfetto_protos_CrosEcSensorhubDataFtraceEvent_size 56
#define perfetto_protos_DcvshFreqFtraceEvent_size 22
#define perfetto_protos_DescriptorProto_ReservedRange_size 22
#define perfetto_protos_DisplayInfo_size         133
#define perfetto_protos_DisplayState_size        139
#define perfetto_protos_DmaAllocContiguousRetryFtraceEvent_size 11
#define perfetto_protos_DmaHeapStatFtraceEvent_size 33
#define perfetto_protos_DpuDispDpuUnderrunFtraceEvent_size 33
#define perfetto_protos_DpuDispVblankIrqEnableFtraceEvent_size 33
#define perfetto_protos_DpuDsiCmdFifoStatusFtraceEvent_size 12
#define perfetto_protos_DpuDsiRxFtraceEvent_size 12
#define perfetto_protos_DpuDsiTxFtraceEvent_size 24
#define perfetto_protos_DrmSchedProcessJobFtraceEvent_size 11
#define perfetto_protos_DrmVblankEventDeliveredFtraceEvent_size 28
#define perfetto_protos_DrmVblankEventFtraceEvent_size 34
#define perfetto_protos_DsiCmdFifoStatusFtraceEvent_size 12
#define perfetto_protos_DsiRxFtraceEvent_size    12
#define perfetto_protos_DsiTxFtraceEvent_size    18
#define perfetto_protos_EntityStateResidency_StateResidency_size 55
#define perfetto_protos_EtwTraceEvent_size       67
#define perfetto_protos_Ext4AllocDaBlocksFtraceEvent_size 34
#define perfetto_protos_Ext4AllocateBlocksFtraceEvent_size 96
#define perfetto_protos_Ext4AllocateInodeFtraceEvent_size 39
#define perfetto_protos_Ext4BeginOrderedTruncateFtraceEvent_size 33
#define perfetto_protos_Ext4CollapseRangeFtraceEvent_size 44
#define perfetto_protos_Ext4DaReleaseSpaceFtraceEvent_size 83
#define perfetto_protos_Ext4DaReserveSpaceFtraceEvent_size 72
#define perfetto_protos_Ext4DaUpdateReserveSpaceFtraceEvent_size 94
#define perfetto_protos_Ext4DaWriteBeginFtraceEvent_size 45
#define perfetto_protos_Ext4DaWriteEndFtraceEvent_size 45
#define perfetto_protos_Ext4DaWritePagesExtentFtraceEvent_size 45
#define perfetto_protos_Ext4DaWritePagesFtraceEvent_size 100
#define perfetto_protos_Ext4DirectIOEnterFtraceEvent_size 55
#define perfetto_protos_Ext4DirectIOExitFtraceEvent_size 66
#define perfetto_protos_Ext4DiscardBlocksFtraceEvent_size 33
#define perfetto_protos_Ext4DiscardPreallocationsFtraceEvent_size 34
#define perfetto_protos_Ext4DropInodeFtraceEvent_size 33
#define perfetto_protos_Ext4EsCacheExtentFtraceEvent_size 51
#define perfetto_protos_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_size 28
#define perfetto_protos_Ext4EsFindDelayedExtentRangeExitFtraceEvent_size 56
#define perfetto_protos_Ext4EsInsertExtentFtraceEvent_size 56
#define perfetto_protos_Ext4EsLookupExtentEnterFtraceEvent_size 28
#define perfetto_protos_Ext4EsLookupExtentExitFtraceEvent_size 67
#define perfetto_protos_Ext4EsRemoveExtentFtraceEvent_size 44
#define perfetto_protos_Ext4EsShrinkCountFtraceEvent_size 33
#define perfetto_protos_Ext4EsShrinkFtraceEvent_size 55
#define perfetto_protos_Ext4EsShrinkScanEnterFtraceEvent_size 33
#define perfetto_protos_Ext4EsShrinkScanExitFtraceEvent_size 33
#define perfetto_protos_Ext4EvictInodeFtraceEvent_size 33
#define perfetto_protos_Ext4ExtConvertToInitializedEnterFtraceEvent_size 57
#define perfetto_protos_Ext4ExtConvertToInitializedFastpathFtraceEvent_size 80
#define perfetto_protos_Ext4ExtHandleUnwrittenExtentsFtraceEvent_size 73
#define perfetto_protos_Ext4ExtInCacheFtraceEvent_size 39
#define perfetto_protos_Ext4ExtLoadExtentFtraceEvent_size 39
#define perfetto_protos_Ext4ExtMapBlocksEnterFtraceEvent_size 40
#define perfetto_protos_Ext4ExtMapBlocksExitFtraceEvent_size 68
#define perfetto_protos_Ext4ExtPutInCacheFtraceEvent_size 45
#define perfetto_protos_Ext4ExtRemoveSpaceDoneFtraceEvent_size 90
#define perfetto_protos_Ext4ExtRemoveSpaceFtraceEvent_size 45
#define perfetto_protos_Ext4ExtRmIdxFtraceEvent_size 33
#define perfetto_protos_Ext4ExtRmLeafFtraceEvent_size 95
#define perfetto_protos_Ext4ExtShowExtentFtraceEvent_size 45
#define perfetto_protos_Ext4FallocateEnterFtraceEvent_size 66
#define perfetto_protos_Ext4FallocateExitFtraceEvent_size 50
#define perfetto_protos_Ext4FindDelallocRangeFtraceEvent_size 62
#define perfetto_protos_Ext4ForgetFtraceEvent_size 50
#define perfetto_protos_Ext4FreeBlocksFtraceEvent_size 61
#define perfetto_protos_Ext4FreeInodeFtraceEvent_size 51
#define perfetto_protos_Ext4GetImpliedClusterAllocExitFtraceEvent_size 51
#define perfetto_protos_Ext4GetReservedClusterAllocFtraceEvent_size 34
#define perfetto_protos_Ext4IndMapBlocksEnterFtraceEvent_size 40
#define perfetto_protos_Ext4IndMapBlocksExitFtraceEvent_size 68
#define perfetto_protos_Ext4InsertRangeFtraceEvent_size 44
#define perfetto_protos_Ext4InvalidatepageFtraceEvent_size 50
#define perfetto_protos_Ext4JournalStartFtraceEvent_size 66
#define perfetto_protos_Ext4JournalStartReservedFtraceEvent_size 33
#define perfetto_protos_Ext4JournalledInvalidatepageFtraceEvent_size 50
#define perfetto_protos_Ext4JournalledWriteEndFtraceEvent_size 45
#define perfetto_protos_Ext4LoadInodeBitmapFtraceEvent_size 17
#define perfetto_protos_Ext4LoadInodeFtraceEvent_size 22
#define perfetto_protos_Ext4MarkInodeDirtyFtraceEvent_size 33
#define perfetto_protos_Ext4MbBitmapLoadFtraceEvent_size 17
#define perfetto_protos_Ext4MbBuddyBitmapLoadFtraceEvent_size 17
#define perfetto_protos_Ext4MbDiscardPreallocationsFtraceEvent_size 22
#define perfetto_protos_Ext4MbNewGroupPaFtraceEvent_size 50
#define perfetto_protos_Ext4MbNewInodePaFtraceEvent_size 50
#define perfetto_protos_Ext4MbReleaseGroupPaFtraceEvent_size 28
#define perfetto_protos_Ext4MbReleaseInodePaFtraceEvent_size 39
#define perfetto_protos_Ext4MballocAllocFtraceEvent_size 165
#define perfetto_protos_Ext4MballocDiscardFtraceEvent_size 50
#define perfetto_protos_Ext4MballocFreeFtraceEvent_size 50
#define perfetto_protos_Ext4MballocPreallocFtraceEvent_size 90
#define perfetto_protos_Ext4OtherInodeUpdateTimeFtraceEvent_size 51
#define perfetto_protos_Ext4PunchHoleFtraceEvent_size 55
#define perfetto_protos_Ext4ReadBlockBitmapLoadFtraceEvent_size 23
#define perfetto_protos_Ext4ReadpageFtraceEvent_size 33
#define perfetto_protos_Ext4ReleasepageFtraceEvent_size 33
#define perfetto_protos_Ext4RemoveBlocksFtraceEvent_size 96
#define perfetto_protos_Ext4RequestBlocksFtraceEvent_size 85
#define perfetto_protos_Ext4RequestInodeFtraceEvent_size 28
#define perfetto_protos_Ext4SyncFileEnterFtraceEvent_size 44
#define perfetto_protos_Ext4SyncFileExitFtraceEvent_size 33
#define perfetto_protos_Ext4SyncFsFtraceEvent_size 22
#define perfetto_protos_Ext4TrimAllFreeFtraceEvent_size 50
#define perfetto_protos_Ext4TrimExtentFtraceEvent_size 50
#define perfetto_protos_Ext4TruncateEnterFtraceEvent_size 33
#define perfetto_protos_Ext4TruncateExitFtraceEvent_size 33
#define perfetto_protos_Ext4UnlinkEnterFtraceEvent_size 44
#define perfetto_protos_Ext4UnlinkExitFtraceEvent_size 33
#define perfetto_protos_Ext4WriteBeginFtraceEvent_size 45
#define perfetto_protos_Ext4WriteEndFtraceEvent_size 45
#define perfetto_protos_Ext4WritepageFtraceEvent_size 33
#define perfetto_protos_Ext4WritepagesFtraceEvent_size 100
#define perfetto_protos_Ext4WritepagesResultFtraceEvent_size 77
#define perfetto_protos_Ext4ZeroRangeFtraceEvent_size 55
#define perfetto_protos_F2fsBackgroundGcFtraceEvent_size 29
#define perfetto_protos_F2fsDoSubmitBioFtraceEvent_size 45
#define perfetto_protos_F2fsEvictInodeFtraceEvent_size 73
#define perfetto_protos_F2fsFallocateFtraceEvent_size 88
#define perfetto_protos_F2fsGcBeginFtraceEvent_size 108
#define perfetto_protos_F2fsGcEndFtraceEvent_size 106
#define perfetto_protos_F2fsGetDataBlockFtraceEvent_size 66
#define perfetto_protos_F2fsGetVictimFtraceEvent_size 91
#define perfetto_protos_F2fsIgetExitFtraceEvent_size 33
#define perfetto_protos_F2fsIgetFtraceEvent_size 73
#define perfetto_protos_F2fsIostatFtraceEvent_size 261
#define perfetto_protos_F2fsIostatLatencyFtraceEvent_size 186
#define perfetto_protos_F2fsNewInodeFtraceEvent_size 33
#define perfetto_protos_F2fsReadpageFtraceEvent_size 88
#define perfetto_protos_F2fsReserveNewBlockFtraceEvent_size 23
#define perfetto_protos_F2fsSetPageDirtyFtraceEvent_size 77
#define perfetto_protos_F2fsSubmitWritePageFtraceEvent_size 50
#define perfetto_protos_F2fsSyncFileEnterFtraceEvent_size 73
#define perfetto_protos_F2fsSyncFileExitFtraceEvent_size 61
#define perfetto_protos_F2fsSyncFsFtraceEvent_size 33
#define perfetto_protos_F2fsTruncateBlocksEnterFtraceEvent_size 55
#define perfetto_protos_F2fsTruncateBlocksExitFtraceEvent_size 33
#define perfetto_protos_F2fsTruncateDataBlocksRangeFtraceEvent_size 45
#define perfetto_protos_F2fsTruncateFtraceEvent_size 73
#define perfetto_protos_F2fsTruncateInodeBlocksEnterFtraceEvent_size 55
#define perfetto_protos_F2fsTruncateInodeBlocksExitFtraceEvent_size 33
#define perfetto_protos_F2fsTruncateNodeFtraceEvent_size 34
#define perfetto_protos_F2fsTruncateNodesEnterFtraceEvent_size 34
#define perfetto_protos_F2fsTruncateNodesExitFtraceEvent_size 33
#define perfetto_protos_F2fsTruncatePartialNodesFtraceEvent_size 50
#define perfetto_protos_F2fsUnlinkExitFtraceEvent_size 33
#define perfetto_protos_F2fsVmPageMkwriteFtraceEvent_size 77
#define perfetto_protos_F2fsWriteBeginFtraceEvent_size 45
#define perfetto_protos_F2fsWriteEndFtraceEvent_size 45
#define perfetto_protos_FastrpcDmaAllocFtraceEvent_size 55
#define perfetto_protos_FastrpcDmaFreeFtraceEvent_size 33
#define perfetto_protos_FastrpcDmaMapFtraceEvent_size 72
#define perfetto_protos_FastrpcDmaStatFtraceEvent_size 33
#define perfetto_protos_FastrpcDmaUnmapFtraceEvent_size 33
#define perfetto_protos_FloatRectProto_size      20
#define perfetto_protos_FrameTimelineEvent_ActualDisplayFrameStart_size 54
#define perfetto_protos_FrameTimelineEvent_ExpectedDisplayFrameStart_size 33
#define perfetto_protos_FrameTimelineEvent_FrameEnd_size 11
#define perfetto_protos_Frame_size               44
#define perfetto_protos_FtraceConfig_CompactSchedConfig_size 2
#define perfetto_protos_FtraceCpuStats_size      95
#define perfetto_protos_FtraceEventBundle_FtraceError_size 13
#define perfetto_protos_FtraceKprobeStats_size   22
#define perfetto_protos_FuncgraphEntryFtraceEvent_size 22
#define perfetto_protos_FuncgraphExitFtraceEvent_size 55
#define perfetto_protos_GpuCounterEvent_GpuCounter_size 17
#define perfetto_protos_GpuFrequencyFtraceEvent_size 12
#define perfetto_protos_GpuMemTotalEvent_size    23
#define perfetto_protos_GpuMemTotalFtraceEvent_size 23
#define perfetto_protos_GpuRenderStageEvent_Specifications_ContextSpec_size 22
#define perfetto_protos_GpuWorkPeriodFtraceEvent_size 45
#define perfetto_protos_HeapprofdConfig_ContinuousDumpConfig_size 12
#define perfetto_protos_HostHcallFtraceEvent_size 12
#define perfetto_protos_HostMemAbortFtraceEvent_size 22
#define perfetto_protos_HostSmcFtraceEvent_size  17
#define perfetto_protos_HypEnterFtraceEvent_size 0
#define perfetto_protos_HypExitFtraceEvent_size  0
#define perfetto_protos_I2cReadFtraceEvent_size  35
#define perfetto_protos_I2cReplyFtraceEvent_size 41
#define perfetto_protos_I2cResultFtraceEvent_size 28
#define perfetto_protos_I2cWriteFtraceEvent_size 41
#define perfetto_protos_InetSockSetStateFtraceEvent_size 69
#define perfetto_protos_InitialDisplayState_size 20
#define perfetto_protos_InternedGraphicsContext_size 24
#define perfetto_protos_InternedV8Isolate_CodeRange_size 35
#define perfetto_protos_InternedV8Isolate_size   87
#define perfetto_protos_InternedV8JsFunction_size 55
#define perfetto_protos_IommuMapRangeFtraceEvent_size 44
#define perfetto_protos_IommuSecPtblMapRangeEndFtraceEvent_size 50
#define perfetto_protos_IommuSecPtblMapRangeStartFtraceEvent_size 50
#define perfetto_protos_IonBufferCreateFtraceEvent_size 22
#define perfetto_protos_IonBufferDestroyFtraceEvent_size 22
#define perfetto_protos_IonCpAllocRetryFtraceEvent_size 11
#define perfetto_protos_IonPrefetchingFtraceEvent_size 11
#define perfetto_protos_IonSecureCmaAddToPoolEndFtraceEvent_size 28
#define perfetto_protos_IonSecureCmaAddToPoolStartFtraceEvent_size 28
#define perfetto_protos_IonSecureCmaShrinkPoolEndFtraceEvent_size 22
#define perfetto_protos_IonSecureCmaShrinkPoolStartFtraceEvent_size 22
#define perfetto_protos_IonStatFtraceEvent_size  28
#define perfetto_protos_IrqHandlerExitFtraceEvent_size 22
#define perfetto_protos_JavaHprofConfig_ContinuousDumpConfig_size 14
#define perfetto_protos_KernelWakelocksConfig_size 6
#define perfetto_protos_KfreeFtraceEvent_size    22
#define perfetto_protos_KfreeSkbFtraceEvent_size 28
#define perfetto_protos_KgslAdrenoCmdbatchQueuedFtraceEvent_size 30
#define perfetto_protos_KgslAdrenoCmdbatchRetiredFtraceEvent_size 154
#define perfetto_protos_KgslAdrenoCmdbatchSubmittedFtraceEvent_size 118
#define perfetto_protos_KgslAdrenoCmdbatchSyncFtraceEvent_size 34
#define perfetto_protos_KgslGpuFrequencyFtraceEvent_size 12
#define perfetto_protos_KmallocFtraceEvent_size  50
#define perfetto_protos_KmallocNodeFtraceEvent_size 61
#define perfetto_protos_KmemCacheAllocFtraceEvent_size 50
#define perfetto_protos_KmemCacheAllocNodeFtraceEvent_size 61
#define perfetto_protos_KmemCacheFreeFtraceEvent_size 22
#define perfetto_protos_KvmAccessFaultFtraceEvent_size 11
#define perfetto_protos_KvmAckIrqFtraceEvent_size 12
#define perfetto_protos_KvmAgeHvaFtraceEvent_size 22
#define perfetto_protos_KvmAgePageFtraceEvent_size 34
#define perfetto_protos_KvmArmClearDebugFtraceEvent_size 6
#define perfetto_protos_KvmArmSetupDebugFtraceEvent_size 17
#define perfetto_protos_KvmEntryFtraceEvent_size 11
#define perfetto_protos_KvmExitFtraceEvent_size  28
#define perfetto_protos_KvmFpuFtraceEvent_size   6
#define perfetto_protos_KvmGetTimerMapFtraceEvent_size 44
#define perfetto_protos_KvmGuestFaultFtraceEvent_size 44
#define perfetto_protos_KvmHandleSysRegFtraceEvent_size 11
#define perfetto_protos_KvmHvcArm64FtraceEvent_size 33
#define perfetto_protos_KvmIrqLineFtraceEvent_size 39
#define perfetto_protos_KvmMmioEmulateFtraceEvent_size 33
#define perfetto_protos_KvmMmioFtraceEvent_size  34
#define perfetto_protos_KvmSetGuestDebugFtraceEvent_size 17
#define perfetto_protos_KvmSetIrqFtraceEvent_size 28
#define perfetto_protos_KvmSetSpteHvaFtraceEvent_size 11
#define perfetto_protos_KvmSetWayFlushFtraceEvent_size 17
#define perfetto_protos_KvmTestAgeHvaFtraceEvent_size 11
#define perfetto_protos_KvmTimerEmulateFtraceEvent_size 17
#define perfetto_protos_KvmTimerHrtimerExpireFtraceEvent_size 11
#define perfetto_protos_KvmTimerRestoreStateFtraceEvent_size 33
#define perfetto_protos_KvmTimerSaveStateFtraceEvent_size 33
#define perfetto_protos_KvmTimerUpdateIrqFtraceEvent_size 28
#define perfetto_protos_KvmToggleCacheFtraceEvent_size 23
#define perfetto_protos_KvmUnmapHvaRangeFtraceEvent_size 22
#define perfetto_protos_KvmUserspaceExitFtraceEvent_size 6
#define perfetto_protos_KvmVcpuWakeupFtraceEvent_size 23
#define perfetto_protos_KvmWfxArm64FtraceEvent_size 17
#define perfetto_protos_LayerState_BufferData_size 73
#define perfetto_protos_LayerState_Color3_size   15
#define perfetto_protos_LayerState_Matrix22_size 20
#define perfetto_protos_LogMessage_size          24
#define perfetto_protos_MaliGpuPowerStateFtraceEvent_size 33
#define perfetto_protos_MaliMaliCSFINTERRUPTENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliCSFINTERRUPTSTARTFtraceEvent_size 28
#define perfetto_protos_MaliMaliKCPUCQSSETFtraceEvent_size 45
#define perfetto_protos_MaliMaliKCPUCQSWAITENDFtraceEvent_size 45
#define perfetto_protos_MaliMaliKCPUCQSWAITSTARTFtraceEvent_size 45
#define perfetto_protos_MaliMaliKCPUFENCESIGNALFtraceEvent_size 45
#define perfetto_protos_MaliMaliKCPUFENCEWAITENDFtraceEvent_size 45
#define perfetto_protos_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_size 45
#define perfetto_protos_MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUINSLEEPFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUOFFFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONGLBREINITPENDFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONHALTFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONHWCNTENABLEFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONPENDHALTFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONPENDSLEEPFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUPENDOFFFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUPENDONRELOADFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCUPOWERDOWNFtraceEvent_size 28
#define perfetto_protos_MaliMaliPMMCURESETWAITFtraceEvent_size 28
#define perfetto_protos_MarkVictimFtraceEvent_size 11
#define perfetto_protos_MdpCmdKickoffFtraceEvent_size 17
#define perfetto_protos_MdpCmdPingpongDoneFtraceEvent_size 29
#define perfetto_protos_MdpCmdReadptrDoneFtraceEvent_size 17
#define perfetto_protos_MdpCmdReleaseBwFtraceEvent_size 6
#define perfetto_protos_MdpCmdWaitPingpongFtraceEvent_size 17
#define perfetto_protos_MdpCommitFtraceEvent_size 29
#define perfetto_protos_MdpCompareBwFtraceEvent_size 78
#define perfetto_protos_MdpMisrCrcFtraceEvent_size 18
#define perfetto_protos_MdpMixerUpdateFtraceEvent_size 6
#define perfetto_protos_MdpPerfPrefillCalcFtraceEvent_size 60
#define perfetto_protos_MdpPerfSetOtFtraceEvent_size 24
#define perfetto_protos_MdpPerfSetPanicLutsFtraceEvent_size 30
#define perfetto_protos_MdpPerfSetQosLutsFtraceEvent_size 42
#define perfetto_protos_MdpPerfSetWmLevelsFtraceEvent_size 48
#define perfetto_protos_MdpPerfUpdateBusFtraceEvent_size 33
#define perfetto_protos_MdpSsppChangeFtraceEvent_size 97
#define perfetto_protos_MdpSsppSetFtraceEvent_size 97
#define perfetto_protos_MdpVideoUnderrunDoneFtraceEvent_size 12
#define perfetto_protos_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_size 30
#define perfetto_protos_MigratePagesEndFtraceEvent_size 11
#define perfetto_protos_MigratePagesStartFtraceEvent_size 11
#define perfetto_protos_MigrateRetryFtraceEvent_size 11
#define perfetto_protos_MmCompactionBeginFtraceEvent_size 50
#define perfetto_protos_MmCompactionDeferCompactionFtraceEvent_size 51
#define perfetto_protos_MmCompactionDeferResetFtraceEvent_size 51
#define perfetto_protos_MmCompactionDeferredFtraceEvent_size 51
#define perfetto_protos_MmCompactionEndFtraceEvent_size 61
#define perfetto_protos_MmCompactionFinishedFtraceEvent_size 39
#define perfetto_protos_MmCompactionIsolateFreepagesFtraceEvent_size 44
#define perfetto_protos_MmCompactionIsolateMigratepagesFtraceEvent_size 44
#define perfetto_protos_MmCompactionKcompactdSleepFtraceEvent_size 11
#define perfetto_protos_MmCompactionKcompactdWakeFtraceEvent_size 34
#define perfetto_protos_MmCompactionMigratepagesFtraceEvent_size 22
#define perfetto_protos_MmCompactionSuitableFtraceEvent_size 39
#define perfetto_protos_MmCompactionTryToCompactPagesFtraceEvent_size 34
#define perfetto_protos_MmCompactionWakeupKcompactdFtraceEvent_size 34
#define perfetto_protos_MmEventRecordFtraceEvent_size 24
#define perfetto_protos_MmFilemapAddToPageCacheFtraceEvent_size 55
#define perfetto_protos_MmFilemapDeleteFromPageCacheFtraceEvent_size 55
#define perfetto_protos_MmPageAllocExtfragFtraceEvent_size 77
#define perfetto_protos_MmPageAllocFtraceEvent_size 45
#define perfetto_protos_MmPageAllocZoneLockedFtraceEvent_size 39
#define perfetto_protos_MmPageFreeBatchedFtraceEvent_size 33
#define perfetto_protos_MmPageFreeFtraceEvent_size 28
#define perfetto_protos_MmPagePcpuDrainFtraceEvent_size 39
#define perfetto_protos_MmShrinkSlabEndFtraceEvent_size 77
#define perfetto_protos_MmShrinkSlabStartFtraceEvent_size 116
#define perfetto_protos_MmVmscanDirectReclaimBeginFtraceEvent_size 28
#define perfetto_protos_MmVmscanDirectReclaimEndFtraceEvent_size 11
#define perfetto_protos_MmVmscanKswapdSleepFtraceEvent_size 11
#define perfetto_protos_MmVmscanKswapdWakeFtraceEvent_size 33
#define perfetto_protos_NapiGroReceiveExitFtraceEvent_size 11
#define perfetto_protos_NetworkPacketTraceConfig_size 24
#define perfetto_protos_OneofOptions_size        0
#define perfetto_protos_PerfEvents_RawEvent_size 39
#define perfetto_protos_PerfEvents_size          0
#define perfetto_protos_PerfSample_ProducerEvent_size 2
#define perfetto_protos_PixelMmKswapdDoneFtraceEvent_size 22
#define perfetto_protos_PixelMmKswapdWakeFtraceEvent_size 11
#define perfetto_protos_PositionProto_size       10
#define perfetto_protos_PowerRails_EnergyData_size 28
#define perfetto_protos_ProcessStats_Thread_size 11
#define perfetto_protos_ProfilePacket_HeapSample_size 88
#define perfetto_protos_ProfilePacket_Histogram_Bucket_size 24
#define perfetto_protos_Profiling_size           0
#define perfetto_protos_ReadyThreadEtwEvent_size 16
#define perfetto_protos_RectProto_size           44
#define perfetto_protos_RotatorBwAoAsContextFtraceEvent_size 6
#define perfetto_protos_RssStatFtraceEvent_size  34
#define perfetto_protos_RssStatThrottledFtraceEvent_size 34
#define perfetto_protos_SchedBlockedReasonFtraceEvent_size 28
#define perfetto_protos_SchedCpuHotplugFtraceEvent_size 33
#define perfetto_protos_SchedCpuUtilCfsFtraceEvent_size 135
#define perfetto_protos_SchedWakeupTaskAttrFtraceEvent_size 55
#define perfetto_protos_ScmCallEndFtraceEvent_size 0
#define perfetto_protos_ScmCallStartFtraceEvent_size 28
#define perfetto_protos_SdeSdePerfCalcCrtcFtraceEvent_size 78
#define perfetto_protos_SdeSdePerfCrtcUpdateFtraceEvent_size 107
#define perfetto_protos_SdeSdePerfSetQosLutsFtraceEvent_size 41
#define perfetto_protos_SdeSdePerfUpdateBusFtraceEvent_size 39
#define perfetto_protos_ShellTransition_Target_size 44
#define perfetto_protos_SignalDeliverFtraceEvent_size 33
#define perfetto_protos_SizeProto_size           22
#define perfetto_protos_SmbusReadFtraceEvent_size 35
#define perfetto_protos_SmbusReplyFtraceEvent_size 41
#define perfetto_protos_SmbusResultFtraceEvent_size 52
#define perfetto_protos_SmbusWriteFtraceEvent_size 41
#define perfetto_protos_SoftirqEntryFtraceEvent_size 6
#define perfetto_protos_SoftirqExitFtraceEvent_size 6
#define perfetto_protos_SoftirqRaiseFtraceEvent_size 6
#define perfetto_protos_SurfaceFlingerTransactionsConfig_size 2
#define perfetto_protos_SuspendResumeMinimalFtraceEvent_size 6
#define perfetto_protos_SysExitFtraceEvent_size  22
#define perfetto_protos_SysStats_CpuTimes_size   83
#define perfetto_protos_SysStats_InterruptCount_size 22
#define perfetto_protos_SysStats_MeminfoValue_size 13
#define perfetto_protos_SysStats_PsiSample_size  13
#define perfetto_protos_SysStats_VmstatValue_size 14
#define perfetto_protos_SystemInfoConfig_size    0
#define perfetto_protos_TaskExecution_size       11
#define perfetto_protos_TcpRetransmitSkbFtraceEvent_size 57
#define perfetto_protos_ThermalExynosAcpmBulkFtraceEvent_size 101
#define perfetto_protos_ThermalExynosAcpmHighOverheadFtraceEvent_size 62
#define perfetto_protos_TraceConfig_BufferConfig_size 12
#define perfetto_protos_TraceConfig_BuiltinDataSource_size 20
#define perfetto_protos_TraceConfig_CmdTraceStartDelay_size 12
#define perfetto_protos_TraceConfig_GuardrailOverrides_size 17
#define perfetto_protos_TraceConfig_IncrementalStateConfig_size 6
#define perfetto_protos_TraceConfig_StatsdMetadata_size 44
#define perfetto_protos_TraceStats_BufferStats_size 213
#define perfetto_protos_TraceUuid_size           22
#define perfetto_protos_TrackEventRangeOfInterest_size 11
#define perfetto_protos_TransformProto_size      31
#define perfetto_protos_Transform_size           30
#define perfetto_protos_TrustyEnqueueNopFtraceEvent_size 18
#define perfetto_protos_TrustyIpcConnectEndFtraceEvent_size 28
#define perfetto_protos_TrustyIrqFtraceEvent_size 11
#define perfetto_protos_TrustyReclaimMemoryDoneFtraceEvent_size 22
#define perfetto_protos_TrustyReclaimMemoryFtraceEvent_size 11
#define perfetto_protos_TrustyShareMemoryDoneFtraceEvent_size 45
#define perfetto_protos_TrustyShareMemoryFtraceEvent_size 23
#define perfetto_protos_TrustySmcDoneFtraceEvent_size 11
#define perfetto_protos_TrustySmcFtraceEvent_size 44
#define perfetto_protos_TrustyStdCall32DoneFtraceEvent_size 11
#define perfetto_protos_TrustyStdCall32FtraceEvent_size 44
#define perfetto_protos_UnsymbolizedSourceLocation_size 33
#define perfetto_protos_V4l2DqbufFtraceEvent_size 121
#define perfetto_protos_V4l2QbufFtraceEvent_size 121
#define perfetto_protos_V8CodeDefaults_size      6
#define perfetto_protos_V8Config_size            4
#define perfetto_protos_Vb2V4l2BufDoneFtraceEvent_size 100
#define perfetto_protos_Vb2V4l2BufQueueFtraceEvent_size 100
#define perfetto_protos_Vb2V4l2DqbufFtraceEvent_size 100
#define perfetto_protos_Vb2V4l2QbufFtraceEvent_size 100
#define perfetto_protos_VgicUpdateIrqPendingFtraceEvent_size 23
#define perfetto_protos_VirtioVideoCmdDoneFtraceEvent_size 12
#define perfetto_protos_VirtioVideoCmdFtraceEvent_size 12
#define perfetto_protos_VirtioVideoResourceQueueDoneFtraceEvent_size 63
#define perfetto_protos_VirtioVideoResourceQueueFtraceEvent_size 63
#define perfetto_protos_VulkanMemoryConfig_size  4
#define perfetto_protos_VulkanMemoryEventAnnotation_size 22
#define perfetto_protos_WindowManagerConfig_size 4
#define perfetto_protos_WinscopeExtensions_size  0
#define perfetto_protos_WorkqueueActivateWorkFtraceEvent_size 11
#define perfetto_protos_WorkqueueExecuteEndFtraceEvent_size 22
#define perfetto_protos_WorkqueueExecuteStartFtraceEvent_size 22
#define perfetto_protos_WorkqueueQueueWorkFtraceEvent_size 45

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
